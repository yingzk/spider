这节课，我们来学习什么是 的命中率。
既然要学什么是命中率，那么我们首先要知道，命中率在哪里？
打开你的腾讯云控制台，找到内容分发网络，进入到其对应的概览页，或进入这个链接  ，就可以看到如图所示的 的用量等信息。
实时带宽展示的是当前时刻，帮助我们承载的带宽，今日流量为当日的总流量，请求数表示今日承载的请求次数，今日访问量为当日请求次数，今日命中率为今日的总的数据的命中率。

那么，到底什么是 的命中率呢？

在最好的网络一课中，我们提到， 的工作原理就是将我们的文件缓存到各个节点，用户就近访问缓存的文件，从而实现加速的效果。
既然是缓存，就存在缓存的失效时间。
如果用户的请求成功的应用了缓存，我们就认为这个请求是命中的。
单纯上面的说明可能大家觉得有一些难理解。
我们看一下这张图来理解。

在这张图中，用户一共向发送了个请求，其中有个请求由的缓存来提供服务，只有个请求通过，向源站发送请求。这三个请求就是没有命中缓存。这种情况下的命中率为

命中率为什么这么重要，要单独拿出来讲呢？因为命中率的高低是会影响到你要支付的费用的。通过之前的课程的学习知道，对象存储除了支付存储的费用以外，还需要支付节点向对象存储请求的流量费用和请求次数的费用。你的命中率越高，就意味着节点向你的对象存储的请求越少，也就能够更少的支付请求费用，同时，请求的增加也意味着流量的增加，请求的同样会带动流量的减少。
同时，如果你的流量较为稳定，可以选择使用的流量包，费用会更进一步下降。
拓展阅读：
统计分析：费用计算器 ：流量包管理 ：缓存刷新：

相关推荐
免费为您提供最佳上云实践机会借助腾讯云开启全站及问题解决分享在第八届中国数据库技术大会上，腾讯云数据库专家工程师李海翔作为内核专场主持人和专家组成员，代表腾讯云进行了题为《数据库的并发控制技术深度探索》主题演讲。

作者简介：李海翔，从事数据库研发、数据库测试与技术管理等工作余年擅长于 和等开源数据库的内核与架构，现为腾讯云数据库专家工程师。
以下是分享全文：
并发控制技术是数据库的核心技术，在本次主题演讲中，李海翔主要对数据库并发控制技术进行深入浅出的解析，同时分享腾讯云数据库在金融业务方面的一些心得。下面是李海翔演讲的摘录：
今天，我们来一起聊聊数据库的并发控制技术。可以说，没有事务处理，数据库就不能算是数据库；没有并发控制技术，事务处理也只是一个名词而已。毫不夸张地说，并发控制技术是数据库的核心技术。
数据库的四大特性就是，是原子性，是一致性，是隔离性，是持久性。
我们今天所讲的并发控制技术，关联着这四个特性中的和特性。为什么这么说呢？因为没有并发控制，数据库的一致性就会被破坏。没有并发控制，也就无从谈起隔离性，就会出现数据异常。在并发控制技术下数据的正确得到首先保证，然后通过隔离和其他并发控制技术保证性能。
因此，我们今天把并发控制技术的前因后果，通过个小节和大家聊一聊。

首先，我们来共同看第一个问题：数据异常现象有哪些中列出了大家都熟悉的三种读数据异常，分别是脏读、不可重复读、幻读。
以脏读举例，第一步，事务修改了数据行；第二步，事务对同一个数据行读取；第三步，事务回滚。这对于事务而言，读到的数据是将被回滚的数据，这就是脏读。
有朋友会问，脏读，也没有什么大不了的吧。试想一下，一个骗子转帐元给事务，事务检查自己的账户，入账了元，然后事务把一件衣服卖给了骗子，之后骗子拿到衣服后回滚了转账元的操作，然后逃之夭夭了。事务既没有拿到钱还丢失了衣服，损失很大。越是要求高的业务，越需要避免这样的异常发生。
这三个读异常现象，是大家熟知的，也是标准所定义的数据异常现象。那么，除了读异常，还有其他的数据异常吗？

脏写和丢失更新，也是常见的写异常之一。以脏写举例。第一步，事务修改数据行；第二步，事务也修改数据行并提交，数据修改生效。事务认为自己的操作是成功的。但不幸的事情发生了，第三步，事务回滚了，用旧值替换了被事务写过的值。这意味着事务存入银行的钱，丢失了，因为帐本上只记着第一步事务读取的数据值。这就是写数据发生的数据不一致的现象。
那么，除了这些读和写异常，还有其他的数据异常吗？

接下来，我们继续介绍两种写偏序异常：两个事务写偏序和三个事务写偏序。
我们来看一下两个事务写偏序。首先，这里有个前提：医院向社会承诺，至少有一名医生对外提供电话咨询服务。但是，如果有多于两个医生在提供电话咨询，则需要某个正在进行电话咨询服务的医生停止服务。
可是，大家看这两个事务。事务发现，有两个以上的医生正在提供电话咨询，就请停止电话服务；事务也发现有两个以上的医生正在提供电话咨询，就请停止了电话服务。这样，如果执行前只有和正在提供电话服务，这两个事务执行完毕后，没有一个医生在对外提供电话咨询服务了。这就违背了“至少有一名医生对外提供电话咨询服务”的约束前提。这样也是一种数据异常现象。

因为时间关系，这里不一一为大家列举常见的种数据异常。对于数据库系统而言，如果允许异常发生，那么我们这个依靠数据库做交易的世界就会发生巨大混乱——数据在，账乱了；人活着，钱没了。
而并发控制技术，就能很好的解决上面说的这些问题。

接下来，我们讨论第二个问题：为什么会产生刚才所说的那些数据异常现象？这个问题看似简单，如果能够精准地回答出来，说明对这四个特性和相关的技术理解地非常深刻。我这里解释下，在数据库里，数据操作会被抽象为两种，就是读操作和写操作。读写操作组合在一起，有四种情况，就是这幅图里面的，读读、读写、写读和写写。在数据库里面，只有读读操作，不会引发数据异常，而其他三种，都会引发数据异常。

让我们以刚才所讲过的异常为例，一起来分析一下。大家看，刚才讲过的三种读异常，有个一个共同点，就是存在并发的事务；其次，并发的事务操作的是同一个数据对象。再次并发事务对该数据对象，有写操作。最后，还有一种特殊情况，对于幻读而言，受谓词条件的影响，这时不是操作物理上的同一个已经存在的对象，而是操作谓词限定的同一个范围内的逻辑意义上的对象。我们把第四种情况概括为“谓词的语义”。
这些合起来，造成了三种读数据异常。

写偏序是怎么产生的了？首先，存在并发的事务。其次，并发的事务，操作的不是同一个数据对象，这点和刚才的读异常不同。再次，并发的事务对不同的数据对象，有写操作，没有读读并发。最后，操作结果，违反了“语义前提”。“违反语义”是指操作数据时，需要遵守一个语义前提，例如“至少有一名医生对外提供电话咨询服务”，但是并发操作打破了这个语义前提，出现了没有医生提供咨询的异常现象。

以上概括了数据异常出现的原因。而解决这些数据异常办法就是并发控制技术。这是此次我们分享的第三点：并发控制技术有哪些？
主流的并发控制技术主要包括大家熟知的两阶段锁、基于时间戳的并发控制技术、基于有效性检查的并发控制技术，以及、等技术。

我们来分析并发控制技术。
并发控制技术通常采用两阶段锁方案，即把事务划分为加锁阶段和解锁阶段，两个阶段中间的点，被称为封锁点。而光划分为两个阶段还是不够的，还需要确定事务的结束点位于哪里，这个结束点和封锁点的关系是什么。而并发控制协议和的差别在于释放锁的时机不同，即事务的结束点和封锁点是否重合。是在事务提交后，才释放读锁和写锁。

如果简单地说数据库使用两阶段锁技术解决了并发访问造成的数据不一致，这样的理解是不够深入的。准确的说，两阶段锁技术中的“在读操作上加锁”才能真正解决数据异常。这句话的含义是：使用实现了序列化隔离级别，才不会产生第一个问题中所说的各种数据异常现象。就是说通过序列化确保数据的一致性。而序列化隔离级别属于隔离性，我们通过“在读阶段加锁”这样的并发控制技术，保证了一致性。
这样，并发控制技术确保了正确性，而其他的隔离级别则在牺牲一定的一致性的情况下，可以提高并发度，提高数据库的性能，所以标准规定了多种隔离级别以在正确性和性能之间求取平衡。因此，并发控制技术就是一致性和隔离性之间的关联点。
而哪些数据库使用了两阶段锁技术了？
的和就是这样依靠实现了序列化隔离级别，然后保证了不产生数据异常。
对于数据库系统，数据的一致性，被对应为可串行化调度以实现序列化效果。所以不同的并发控制方法规定了不同的规则以保证序列化。

接下来我们再来简略地讨论一下 多版本并发控制技术。如所示，通过元组，版本等来实现控制。
首先，每一个元组，都有一个元组头，上面有两个字段，表示元组诞生的时间，表示元组消亡的时间。
其次，每个元组，可以有多个版本，用这个指针指向不同的版本。大家看，对于名字为的这个元组，就存在个版本。第一个版本，生命周期在事务号为到之间存活；第二个版本，生命周期在事务号为到之间存活；第三个版本，生命周期在事务号为到现在这个时间短内存活。事务号处于不同的阶段可以看到的版本是不同的。如一个事务的事务号为，则只能看到第二个版本，不能看到其他版本。

而技术和其他的并发控制技术，经常结合起来使用，比如，这张表里列的两种变种，分别是和基于时间戳的、基于封锁技术的相结合的。同样的，这些技术当中，需要解决读写、写写等冲突以确保实现了序列化。数据库经典教材中对这样的算法有详细描述，讲述算法如何避免数据异常如何保证序列化，我们就不再展开讨论。

接下来，需要我们思考和注意的，是这样一个问题：  快照算作上述哪一种技术？
这样的问题通常很少被讨论，但是却很容易让人产生困惑。其实，和快照结合，是另外一种技术变种。只能表明元组有多个版本，不能保证一个事务对活动的、并发的其他事务的执行情况进行了解。而快照正好在事务启动时，为事务留存了一张当前活动事务的照片，从而能够帮助事务知道哪些事务已经是完成的事务、哪些是正在进行的，哪些应该是将来发生的，一张照片把事务历史长河划分为三个阶段：过去、现在、未来。然后，遵守先提交者获胜或者先更新者获胜等的规则，可实现读已提交和可重复读隔离级别，但不能实现序列化，不能完全避免数据的不一致。 版本使用技术才实现了真正的序列化，即完全保证了数据的一致性。

另外，还有其他的并发控制技术，比如说，严格提交排序协议，简称为。对于，写操作会被读操作互斥， 所以写只能被阻塞，处于等待状态。而则不一样，写操作可以继续进行，只是在提交阶段才进行检查数据修改是否会破坏一致性。对于更为详细的内容，大家可以查阅相关资料。

我们介绍了多种主流的并发控制技术。接下来看第四个问题：为什么并发控制技术能解决数据异常现象？
首先我们来分析一下 “基于封锁的并发控制技术”。以脏读为例，并发事务施加写锁成功，事务的读锁则不能施加成功，事务和不能并发执行，这样就避免了脏读。
再以不可重复读为例，事务施加的读锁，事务的写锁则被排斥，只能等待。所以数据不会被修改，事务第二次读到的还是没有被修改的数据，所以能够避免不可重复读异常，进而保证数据一致性。

封锁并发控制技术，可以用这两张表来概括，第一张表，是并发的事务之间，锁冲突表，表明了并发事务之间什么样的锁可以申请成功，即被允许并发执行。第二张表，是同一个事务内部，新申请的锁是否可以升级为其他粒度的锁。这两张表，就是封锁技术的核心，尤其是第一张表，把读写、写读、写写三种冲突情况用锁规则固化，确保了 数据的一致性。

对于其他的并发控制技术，本质上都是定义了一些规则，用来约束并发的读写操作、提交顺序、并决定回滚哪些事务作为牺牲者，许多书籍都有详细讨论，我们就不再进行详细地探讨。概括地说，根据数据异常现象，制定出一定的规则，可以确保数据的一致性，这就是并发控制技术的核心。而增加新的规则，允许部分数据异常发生，从而产生了多种隔离级别。
这就是第四个问题。第三和第四个问题，我们讨论了并发控制技术和这些技术能够解决数据异常现象的原因。

接下来，我们从理论回归到工程实现当中，看看主流的数据库的并发控制技术，这就是今天的第五个问题。
大家可以看这张对比表格，概括了、、和这四个数据库的并发控制技术。主流的数据库，几乎都使用了封锁技术和技术。只有单纯地使用了封锁技术。尽管语法上提供了序列化隔离级别的设置，但没有提供真正的序列化隔离级别。
反倒是开源的两个数据库系统，和实现了序列化。只是是在读数据时加锁结合技术实现了序列化，这种方式的并发度很低，性能不好。而则使用技术实现了序列化，性能相对较好。在第一个问题中我们提出了两种写偏序的数据异常，使用技术，解决了写偏序异常。如果从正确性和性能这两个角度来衡量数据库的并发控制技术，显然，在理论上优于，采用的技术复杂但高效。

接着，我们从系统锁、事务锁、事务锁的元数据锁和记录元组锁的角度详细对比和的区别，然后再从隔离级别的角度来看这两个数据库的并发控制技术。
首先，和都提供了系统锁，也都尽量利用了底层的硬件指令如指令实现最基本的。使用操作系统提供的来控制共享资源的并发操作。
其次，在事务锁方面，统一管理元数据和用户数据，而则明显把元数据和用户数据分开用元数据锁和记录锁进行管理，并各自进行了死锁检测。
对于元组上的并发操作，加元组锁到元组上，把事务记录在元组头上，用快照技术判断元组的可见性，操作结束则释放锁。而则是用内存锁表记录元组锁，等到事务结束后才释放。从这点上看，技术的实现，在和中是不同的。
从隔离级别的角度看，和都采用了技术来实现可重复读和读已提交。
和在并发控制技术方面最大的差别，在于对确保数据一致性的序列化的实现上，采取的技术不同，理论上性能不同。这就是两者在并发控制技术方面的最大不同之处。

最后，让我们一起来总结一下今天的分享：
首先，我们在第一个问题里讲述了种数据异常现象。
然后，在第二个问题里，分析了产生异常现象的原因。最大的原因是并发。
所以，紧下来，我们分享了消除数据异常的技术，即抑制并发，所以提出序列化这种可串行化技术，从而带出了隔离性以及隔离级别，这就是第三个和第四个问题所讨论的各种并发控制技术，本质上就是通过定义好的规则消除并发带来的影响。
最后的两个问题，我们用实例研究了主流数据的并发控制实现技术，重点讲述了和的并发控制技术。这就是今天所分享的六个问题的脉络。
当然，数据库的并发访问控制可以讨论的话题还有很多，比如：为什么标准只规定了三种读异常？为什么主流数据库都采用了封锁的协议等等。
而为了提升数据库的性能，并发控制技术也是一个重要的点。腾讯云数据库、等后续也会在并发控制等技术上持续优化，力争为用户提供高性能，高一致性数据库服务。由于时间的关系，今天的分享就到这里，谢谢大家。也欢迎大家使用腾讯云。作者介绍：练小习，年加入搜狐，负责搜狐相册的产品策划与前端开发。年后加入腾讯  社交用户体验设计部，目前主要负责腾讯云的开发工作，专注于人机交互，有丰富的开发经验。

这段时间有幸加入了一个关于微信小程序的项目开发组，从无到有的根据文档自行学习了小程序的开发过程，前面已经有几位前辈的文章珠玉在前，我这里就先从前端界面的开发方面谈一谈小程序以及我所遇到的问题吧。
在结构和样式方面，小程序提供了一些常用的标签与控件，比如：
，小程序主要的布局元素，类似于标签的，你也完全可以像控制那样去控制。
，你要滚动内容的话，没必要用去做，提供了更为强大的功能，通过参数的调整，你可以控制滚动方向，触发的事件等等


，滑块视图容器，对于新手来说，再也不用为选用哪个滚动插件伤脑筋了

，小程序提供了多种图标供你直接使用

，文本，唯一可以通过长按被选中内容的一个组件。
，进度条

 按钮，尽量使用小程序提供给你的几种样式参数

表单以及常用表单组件 ：，，，，，，，

各种操作反馈，消息提示框：，，，




以及一些媒体组件，、，，等等
这些东西在几位前辈的文章里，以及微信的开发文档里都有更详细的介绍，我这里就不再一一介绍。
那么我们就快速的跑通一个小程序的先。
在开发之前你要有微信开发者工具，下载地址
这里我要假设大家有已经拿到了内测或者公测的资格，因为没有拿到的话下面的步骤是没法进行的。

打开以后你会看到这样的界面，我们选择小程序进入

这时候就可以创建项目了

填写你拿到的，和自己的项目名称以及目录，然后就可以打开自己的项目了。界面如下：

左侧菜单栏就不说了，中间是编译后的预览界面，新的开发者工具已经可以做到实时更新，不需要每次都去点编译了。
右侧是你的项目目录，其中就是你的页面结构目录了，每个页面下面必须要有 ，，这三个文件，缺少任何一个的话都无法上传预览。
然后就是那个当前态的文件， 是对整个小程序的全局配置。我们可以在这个文件中配置小程序是由哪些页面组成，配置小程序的窗口背景色，配置导航条样式，配置默认标题。注意该文件不可添加任何注释。，我们简单的配置一下：

这里比较好的一点是，的背景颜色支持自定义任意颜色了，不再有只能黑白透明的限制，还是很不错的。
然后我们在页面里简单的写个 

保存以后预览界面已经立即刷新出来

如果想真机测试个人建议一定要真机测试，特别是给上下游预览的时候，上的样式还原程度较差，包括字体等等，毕竟系统不同。，只需要选中项目选项

然后在界面上点击预览

下面的三个选项都比较实用，可以根据需要点选。然后就会弹出可以用注册过的微信号真机预览的二维码，如图：

这样一个简单的小程序就完全跑通了。
上面和配置文件平级的还有一个文件，是小程序的脚本代码。我们可以在这个文件中监听并处理小程序的生命周期函数、声明全局变量，在每个目录里的做当前页面的业务操作。但是小程序的页面的脚本逻辑是在中运行，是一个没有窗口对象的环境，所以不能在脚本中使用，也无法在脚本中操作组件，所以我们常用的 等类库也是无法使用的。
另一个文件，这个是全局的样式，所有的页面都会调用到，每个项目目录下面的是局部样式文件，不会和其他目录产生污染，可以放心使用样式名。
他提供的  是一套样式语言，具有  大部分特性，可以看作一套简化版的。同时为了更适合开发微信小程序，还对  进行了扩充以及修改，直接帮我们把适配的一部分工作都做了，比如他的 ，可以根据屏幕宽度进行自适应，规定屏幕宽为。如在  上，屏幕宽度为，共有个物理像素，则 =  = 物理像素， =  = 物理像素。
这个很赞，很方便。你可以简单的理解为就是你平时按照设计稿开发的流程，只不过你不需要再去做的转换和适配工作了，所以小程序的视觉稿，最好也是按照来出。
但是！在不同的屏幕上多多少少会有一些差异，只能根据大家的经验去规避和解决，通过媒体查询也好，还是其他方法也好。
而且，在里不能引用本地资源，说起来这个坑，满眼都是泪。那天晚上写小程序的时候，没有仔细的去查去问，自己闷头边写边预览，突然真机预览就不行了，毫无预兆，我也完全不会想到是一个背景图造成的问题，折腾了大半夜终于知道了问题所在，于是很开心的把图片都转换成，心里想着这下没问题了吧？结果预览上传又失败了，继续折腾了下半夜，才知道小程序对整个包的大小有严格要求，不可以超过，最后把所有的静态资源都放到了腾讯云的，才算解决了这个问题。所以如果你要写背景图，那么需要引用一个线上的图片在这里极不推荐使用！极不推荐使用！极不推荐使用！
另外一个应用同时只能打开个页面，当已经打开了个页面之后，不能正常打开新页面。请避免多层级的交互方式。
在开发的过程中也不可避免的遇到了一些小坑，举个例子，比如一个简单的控件，你可以通过查看元素的方式轻易得知他的自身样式

那么我要做一个简单的和文本垂直剧中对齐，从以往的经验，只要 就可以轻松解决了，在本地预览的时候也是这样好好的

可是在真机测试的时候，各种设备就开始出现偏差了

然后简单的审查元素之后发现问题在于

这个控件是存在空白区域的，根据设备，屏幕大小的不一，空白区域大小也不一致。
受于时间紧迫，可翻阅文档有限，感觉是因为默认的行高原因，于是我只好发挥老司机的狡猾本质，可以通过行高或者的控制，干掉多余的部分，最终真机界面显示还算统一

如果你要按照像素级别设计稿来做小程序开发的话，控件的小差异还是需要自己来做一些控制也有可能从根本上就是我个人用错了方法或者理解错了，鉴于文档太少，以后开发者多了大家会有更清晰的认识。
还有另一个遇到的问题，就是小程序对  的默认渲染，这是通过工具查看默认图像的样式

经过多方打听发现小程序的是按照来实现的，所以所有图像会得到一个初始宽高 ，而且无法通过重置，只可以通过具体的值来重写。
好在微信提供了种缩放模式，种裁剪模式，在大多数场景可以满足我们对图片的控制：
例如原图：
 模式不保持纵横比缩放图片，使图片完全适应
保持纵横比缩放图片，使图片的长边能完全显示出来
保持纵横比缩放图片，只保证图片的短边能完全显示出来
不缩放图片，只显示图片的顶部区域
不缩放图片，只显示图片的底部区域
不缩放图片，只显示图片的中间区域
不缩放图片，只显示图片的左边区域
不缩放图片，只显示图片的右边边区域
 不缩放图片，只显示图片的左上边区域
 不缩放图片，只显示图片的右上边区域
 不缩放图片，只显示图片的左下边区域
 不缩放图片，只显示图片的右下边区域
如果你有更严格的图片设计展示方式，那么可以尝试用一些特殊的方式去控制图像的宽高吧。
还有小程序的控件，

他的初始样式里并没有，所以我费尽心思也没能把他重写为一个无边无背景的设计形式，最终为了满足设计稿，个别语义化为按钮的元素，我是用其他更可控的元素来实现的，比如这个界面的发送图片按钮

但是到后来才知道是通过来写的样式，开发者工具的调试里完全看不到这个┬＿┬
除了这些开发上的体会，大家也都知道，小程序诞生就不是为了展示，他不适合做纯展示型的东西，主要是做一些功能型的应用。
而微信所提供的小程序现有的和缺乏对服务端的支持，依赖开发者逐个模块搭建服务；而且必须通过完成与服务端通信，依赖开发者自行完成证书申请部署；鉴权流程安全性要求高，开发者高效安全的完成会话管理难度会比较大；提供了长连接通信的客户端，但缺乏服务端配套支持，开发者自行实现难度还是较大的。并且具备快速传播，流量突增的特点，要求架构具备弹性伸缩能力。
这些都是微信方面所没有提供的，需要自己来处理，这里可以推荐一下这套解决方案避免广告嫌疑，发连接 ，很完善的解决了以上问题。当然你也可以根据自己的需求去用不同的方案。
除了一站式的解决方案，还针对不同的场景做了更细致的
会话管理
微信小程序框架提供了 便于开发者快速创建小程序。但微信小程序本质上与开发模式存在区别，尤其是微信小程序采用程序包上传的方式提交，微信加载程序包到本地，使用时微信直接从本地启动小程序，运行模式与模式大不相同，小程序使用框架提供的接口发送请求不会携带信息，传统的会话管理能力在微信小程序无法直接使用，在这点上微信小程序更像架构的开发模式，开发者需要自己实现会话管理功能。
查看教程：会话管理场景下载源码
上传下载
微信小程序框架提供了文件上传下载的接口，用于将本地资源上传到指定的服务器，或者将指定的资源下载到本地。但微信小程序框架只提供了客户端的解决方案，缺少服务端的对应实现，这里通过一个小相册来实现这个
查看教程：文件上传下载应用场景下载源码
长连接
微信小程序框架提供了请求建立、数据通信、连接关闭等一系列客户端接口，用于与远程支持协议的服务器通信，以便小程序能实现服务器主动等更接近的体验。但微信只提供了客户端的解决方案，缺少服务端的对应实现。这里通过一个剪刀石头布小游戏的来实现
查看教程：长连接应用场景下载源码
视频应用 
微信小程序框架具备丰富的 以及配套的文档帮助开发者快速地搭建时下热门的视频类应用。但微信只提供了客户端的解决方案，缺少服务端的对应实现，尤其是流媒体转码集群和流媒体播放服务集群。这个实例里有具体的实现
查看教程：视频应用场景下载源码
碍于篇幅和时间，就先对小程序做一些简单的认识以及一些粗略的开发体验，有些点可能不一定对，毕竟也是刚开始接触学习，只是有的分享就尽量分享吧，这是我一贯的想法，希望和大家一起学习进步！
下一篇会从我们的来详细的讲解一下小程序的开发过程。

相关推荐
一起脱去小程序的外套和内衣  微信小程序架构解析
微信小程序之提高应用速度小技巧
微信小程序文件上传下载应用场景
教你写一个云上 小程序本文作者： 朱灵子

安卓预加载优化方案
本文针对使用 开发混合应用的过程中安卓端白屏时间较长的问题，提出了安卓端预加载优化方案，本文主要围绕以下几个方面展开分析：

导致安卓端白屏时间较长的关键性因素 
安卓预加载优化方案 
安卓预加载方案实现细节 

导致安卓端白屏时间较长的关键性因素
我们对不同网络状态下不同机型的线上项目进行了实时性能监控，下图所示为  和安卓端线上性能数据对比分析图 

对比端与端的首屏时间数据，我们发现安卓端占有一定的劣势，我们在启动安卓应用时，会发现第一次启动安卓页面会有一个短暂的白屏过程，而且在完全退出后再进入，仍然会有这个白屏，为什么端的白屏时间较较长呢？我们首先分析页面加载各个阶段的时间响应图

通过观察我们可以发现，页面加载时间占比最大的是 离线包加载与解析的时间，其次是首屏数据获取的时间。针对首屏获取时间较长的问题，项目已经采用前端异步数据缓存优化方案，而且在和安卓端数据返回的平均值均在左右，而页面加载的过程中界面渲染以及框架初始化的时间占比均只有，不为导致和安卓端首屏时间差异较大的关键因素。综上可知，导致安卓端白屏时间较长的关键性因素是离线包加载与解析的时间较长，因为安卓端离线包加载与解析的过程是在端完成的，而 离线包加载与解析的过程是在端完成的，的执行效率较低，同时部分安卓低端机型性能较差。
因此，执行效率较来讲相对较低，安卓端机型总体性能与相比占有相对劣势都是导致安卓端离线包加载与解析的时间较长的原因，也是造成安卓端白屏时间较长的关键性因素。
安卓预加载优化方案
为了优化安卓端线上业务的用户体验，我们提出了安卓预加载优化方案
首先展示的是安卓源码端中的方法
 
    {
  
     _ =  {
            
      {
        =  ___
      
       __
       __ _
    }
  }
   = 
  
    
    
    
  
   =  
}
是用来创建及管理的实例的上层接口、控制开发调试，生命周期与所在保持一致。 方法中的步骤中执行了离线包文件位置与文件名的设置，如下代码所示
   = 
  
  
  
  
  
  _

     {
  
}

  = 
  =  {
  
}  {
  
}

为了优化 安卓端离线包加载与解析的过程，我们需要将 方法中的、以及这些步骤提前，也就是实现安卓端预加载。
安卓预加载方案实现细节
创建预加载类
   {
         = 
         __ =
             
    
       { }   { }
     
         {
         __
    }
    
       { }   { }    
          
     
           {
         __ =  {
            
        }
          =  
        
                 
                
                
        __ 
    }
    
       { }  
     
         {
         {
              = 
              =  
              =  {
                
            }
        }    {
             
        }
    }
}

在操作中，我们通过缓存把缓存在本地的 
同时为了优化线上项目内存方面的占用率，在销毁后，我们需要使用方法把从  上卸载下来 

获取预加载之后缓存在本地中的
为了获取并使用预加载之后缓存在本地中的，我们需要侵入的创建过程，因此我们需要对原生库库提供的进行改造，以下列出修改方法：
     
           {
    
        {
        
           _ =  {
                    
              {
                  =  ___
                
                 __
                 __ _
            }
        }
         = 
          =  {
               
        }  {
             
             = 
              =  {
                
                        
                        
                        
            }
        }
        
         =  
    }
    
       {
        
          =  {
            
             = 
            
        }
    }
       
}
使用预加载之后缓存在本地中的
首先，在进入当前  的父级 调用中的方法，如下图所示：
 
其中继承上一个模块中对源码库进行简单改造后的：
     {
         =   
    
       {
         
    }
    
       {
         
    }
}
该安卓端预加载优化方案可以很大程度上减少安卓端线上项目的白屏时间，优化线上业务的业务体验！

原文链接：本文简介
本文介绍 的基本概念。这不是一篇单独的文章，这是《谢宝友：深入理解 》系列的第篇，前序文章：
谢宝友： 深入理解 之一——从硬件说起=谢宝友：深入理解 ：从硬件说起之内存屏障
作者简介
   谢宝友，在编程一线工作已经有年时间，其中接近年时间工作于操作系统。在中兴通讯操作系统产品部工作期间，他作为技术总工参与的电信级嵌入式实时操作系统，获得了行业最高奖中国工业大奖。同时，他也是《深入理解并行编程》一书的译者。
联系方式：  微信：

一、有什么用？
主要用于对性能要求苛刻的并行实时计算。例如：天气预报、模拟核爆炸计算、内核同步等等。
假设你正在编写一个并行实时程序，该程序需要访问随时变化的数据。这些数据可能是随着温度、湿度的变化而逐渐变化的大气压。这个程序的实时响应要求是如此严格，需要处理的数据量如此巨大，以至于不允许任何自旋或者阻塞，因此不能使用任何锁。
幸运的是，温度和压力的范围通常变化不大，因此使用默认的数据集也是可行的。当温度、湿度和压力抖动时，有必要使用实时数据。但是温度、湿度和压力是逐渐变化的，我们可以在几分钟内更新数据，但没必要实时更新值。
在这种情况下，可以使用一个全局指针，即，通常为，表示要使用默认值。偶尔也可以将指向假设命名为、和的变量，以反映气压的变化。
传统的软件可以使用自旋锁这样的同步机制，来保护指针的读写。一旦旧的值不被使用，就可以将旧指针指向的数据释放。这种简单的方法有一个最大的问题：它会使软件效率下降数个数量级注意，不是下降数倍而是下降数个数量级。
在现代计算系统中，向写入、、这样的值，并发的读者要么看到一个指针要么看到指向新结构的指针，不会看到中间结果。也就是说，对于指针赋值来说，某种意义上这种赋值是原子的。读者不会看到、、之外的其他结果。并且，更好的一点，也是更重要的一点是：读者不需要使用任何代价高昂的同步原语，因此这种方法非常适合于实时使用。
真正的难点在于：在读者获得的引用时，它可能看到、、这三个值中任意一个值，写者何时才能安全的释放、、所指向的内存数据结构？
引用计数的方案很有诱惑力，但正如锁和顺序锁一样，引用计数可能消耗掉数百个指令周期，更致命的是，它会引用缓存行在之间的来回颠簸，破坏各个的缓存，引起系统整体性能的下降。很明显，这种选择不是我们所期望的。
想要理解经典实现的读者，应当认真阅读下面这段话：一种实现方法是，写者完全不知道有哪些读者存在。这种方法显然让读者的性能最佳，但留给写者的问题是：如何才能确定所有的老读者已经完成。
最简单的实现是：让线程不会被抢占，或者说，读者在读数据期间不能被抢占。在这种不可抢占的环境中，每个线程将一直运行，直到它明确地和自愿地阻塞自己现实世界确实有这样的操作系统，它由线程自己决定何时释放。例如大名鼎鼎的操作系统。这要求一个不能阻塞的无限循环将使该在循环开始后无法用于任何其他目的，还要求还要求线程在持有自旋锁时禁止阻塞。否则会形成死锁。
这种方法的示意图下所示，图中的时间从顶部推移到底部， 的_操作是写者操作，、在读端读取节点。

经典的概念即是如此。虽然这种方法在生产环境上的实现可能相当复杂，但是玩具实现却非常简单。
  ___
  _
___原语遍历所有，_函数导致当前线程在指定的上执行，这会强制目标执行上下文切换。因此，一旦___完成，每个都执行了一次上下文切换，这又保证了所有之前存在的读线程已经完成。
请注意，这个方法不能用于生产环境。正确处理各种边界条件和对性能优化的强烈要求意味着用于生产环境的代码实现将十分复杂。此外，可抢占环境的实现需要读者实际做点什么事情也就是在读临界区内，禁止抢占。这是经典读锁的实现。不过，这种简单的不可抢占的方法在概念上是完整的，有助于我们理解的基本原理。
二、是什么？
是的简称，翻译为中文有点别扭“读复制更新”。它是是一种同步机制，有三种角色或者操作：读者、写者和复制操作，我理解其中的复制操作就是不同上的读者复制了不同的数据值，或者说拥有同一个指针的不同拷贝值，也可以理解为：在读者读取值的时候，写者复制并替换其内容后一种理解来自于作者的解释。它于年月引入内核。
允许读操作可以与更新操作并发执行，这一点提升了程序的可扩展性。常规的互斥锁让并发线程互斥执行，并不关心该线程是读者还是写者，而读写锁在没有写者时允许并发的读者，相比于这些常规锁操作，在维护对象的多个版本时确保读操作保持一致，同时保证只有所有当前读端临界区都执行完毕后才释放对象。定义并使用了高效并且易于扩展的机制，用来发布和读取对象的新版本，还用于延后旧版本对象的垃圾收集工作。这些机制恰当地在读端和更新端并行工作，使得读端特别快速。在某些场合下比如非抢占式内核里，读端的函数完全是零开销。
也可以让读者和写者并发执行，但是二者有什么区别？
首先是二者的目的不一样。是为了保证读端在读取值的时候，写者没有对它进行修改，而是为了多核扩展性。
其次是保护的数据结构大小不一样。可以保护一组相关联的数据，而只能保护指针这样的 类型的数据。
最重要的区别还在于效率，本质上是与自旋锁同等重量级的原语，其效率与不在同一个数量级上面。
下面从三个基础机制来阐述究竟是什么？
由三种基础机制构成，第一个机制用于插入，第二个用于删除，第三个用于让读者可以不受并发的插入和删除干扰。分别是：发布订阅机制，用于插入。
等待已有的读者完成的机制，用于删除。
维护对象多个版本的机制，以允许并发的插入和删除操作。
、发布订阅机制
的一个关键特性是可以安全的读取数据，即使数据此时正被修改。通过一种发布订阅机制达成了并发的数据插入。举个例子，假设初始值为的全局指针现在被赋值指向一个刚分配并初始化的数据结构。如下所示的代码片段：
     {
      
      
      
  }
       = 

         

   =    _
   =  
   =  
   =  
    =  
“发布”数据结构不安全
不幸的是，这块代码无法保证编译器和会按照编程顺序执行最后条赋值语句。如果对的赋值发生在初始化的各字段之前，那么并发的读者会读到未初始化的值。这里需要内存屏障来保证事情按顺序发生，可是内存屏障又向来以难用而闻名。所以这里我们用一句 原语将内存屏障封装起来，让其拥有发布的语义。最后行代码如下。
   =  
   =  
   =  
  __  
__“发布”一个新结构，强制让编译器和在为的各字段赋值后再去为赋值。
不过，只保证更新者的执行顺序并不够，因为读者也需要保证读取顺序。请看下面这个例子中的代码。
   =  
     =   {
     __   
  }
这块代码看起来好像不会受到乱序执行的影响，可惜事与愿违，在  机器上，还有启用编译器值猜测优化时，会让，和的值在赋值之前被读取。
也许在启动编译器的值猜测优化时比较容易观察到这一情形，此时编译器会先猜测、、的值，然后再去读取的实际值来检查编译器的猜测是否正确。这种类型的优化十分激进，甚至有点疯狂，但是这确实发生在剖析驱动优化的上下文中。
然而读者可能会说，我们一般不会使用编译器猜测优化。那么我们可以考虑  这样的极端弱序的。在这个上面，引起问题的根源在于：在同一个内部，使用了不止一个缓存来缓存数据。这样可能使用和被分布不同一个的不同缓存中，造成缓存一致性方面的问题。
显然，我们必须在编译器和层面阻止这种危险的优化。_原语用了各种内存屏障指令和编译器指令来达到这一目的。
  __
   =  _
     =   {
     __   
  }
  __
其中 和__这对原语定义了读端的临界区。事实上，在没有配置_的内核里，这对原语就是空函数。在可抢占内核中，这这对原语就是关闭打开抢占。
_原语用一种“订阅”的办法获取指定指针的值。保证后续的解引用操作可以看见在对应的“发布”操作__前进行的初始化，即：在看到的新值之前，能够看到、、的新值。请注意，__和_这对原语既不会自旋或者阻塞，也不会阻止 的并发执行。
虽然理论上__和_可以用于构造任何能想象到的受保护的数据结构，但是实践中常常只用于构建更上层的原语。例如，将__和_原语嵌入在链表的变体中。有两种双链表的变体，循环链表 _和哈希表_ _。前一种如下图所示。

对链表采用指针发布的例子如下：
      {
      _  
       
       
       
  }
 _

         

    =   _
   =  
   =  
   =  
 __ 
发布链表
第行必须用某些同步机制最常见的是各种锁来保护，防止多核_实例并发执行。不过，同步并不能阻止_的实例与的读者并发执行。订阅一个受保护的链表的代码非常直接。
  __
  ____     {
     __   
  }
  __
__原语向指定的链表发布了一项条目，保证对应的_ _可以订阅到同一项条目。的其他链表、哈希表都是线性链表，这意味着它的头结点只需要一个指针，而不是象循环链表那样需要两个。因此哈希表的使用可以减少哈希表的 数组一半的内存消耗。向受保护的哈希表发布新元素和向循环链表的操作十分类似，如下所示。
      {
      _  
       
       
       
  }
 _

         

    =   _
   =  
   =  
   =  
 ___ 

和之前一样，第行必须用某种同步机制，比如锁来保护。
订阅受保护的哈希表和订阅循环链表没什么区别。

 __
 ____      {
    __   
  }
  __
表是的发布和订阅原语，另外还有一个删除发布原语。

请注意，__、__、_和 _这些引入了一点复杂性。何时才能安全地释放刚被替换或者删除的数据元素？我们怎么能知道何时所有读者释放了他们对数据元素的引用？
、等待已有的读者执行完毕
从最基本的角度来说，就是一种等待事物结束的方式。当然，有很多其他的方式可以用来等待事物结束，比如引用计数、读写锁、事件等等。的最伟大之处在于它可以等待比如种不同的事物，而无需显式地去跟踪它们中的每一个，也无需去担心对性能的影响，对扩展性的限制，复杂的死锁场景，还有内存泄漏带来的危害等等使用显式跟踪手段会出现的问题。

在的例子中，被等待的事物称为“读端临界区”。读端临界区从__原语开始，到对应的__原语结束。读端临界区可以嵌套，也可以包含一大块代码，只要这其中的代码不会阻塞或者睡眠先不考虑可睡眠。如果你遵守这些约定，就可以使用去等待任何代码的完成。
通过间接地确定这些事物何时完成，才完成了这样的壮举。如上图所示，是一种等待已有的读端临界区执行完毕的方法，这里的执行完毕也包括在临界区里执行的内存操作。不过请注意，在某个宽限期开始后才启动的读端临界区会扩展到该宽限期的结尾处。
下列伪代码展示了写者使用等待读者的基本方法。
．作出改变，比如替换链表中的一个元素。．等待所有已有的读端临界区执行完毕比如使用_原语。这里要注意的是后续的读端临界区无法获取刚刚删除元素的引用。．清理，比如释放刚才被替换的元素。下图所示的代码片段演示了这个过程，其中字段是搜索关键字。
      {
      _  
       
       
       
  }
 _

         

    =   
     ==    {
             
   
  }
    =   _
    =  
   =  
   =  
 __ 
 _
  
标准替换示例
第、和行实现了刚才提到的三个步骤。第至行正如其名读复制更新，在允许并发读的同时，第行复制，第到行更新。
_原语可以相当简单。然而，想要达到产品质量，代码实现必须处理一些困难的边界情况，并且还要进行大量优化，这两者都将导致明显的复杂性。理解的难点，主要在于_的实现。
、维护最近被更新对象的多个版本
下面展示如何维护链表的多个版本，供并发的读者访问。通过两个例子来说明在读者还处于读端临界区时，被读者引用的数据元素如何保持完整性。第一个例子展示了链表元素的删除，第二个例子展示了链表元素的替换。
例子：在删除过程中维护多个版本
   =    
     =   {
     __
     _
     
  }
如下图，每个元素中的三个数字分别代表字段、、的值。红色的元素表示读者此时正持有该元素的引用。请注意，我们为了让图更清楚，忽略了后向指针和从尾指向头的指针。

等第行的__执行完毕后，“、、”元素从链表中被删除。因为读者不直接与更新者同步，所以读者可能还在并发地扫描链表。这些并发的读者有可能看见，也有可能看不见刚刚被删除的元素，这取决于扫描的时机。不过，刚好在取出指向被删除元素指针后被延迟的读者比如，由于中断、内存错误，就有可能在删除后还看见链表元素的旧值。因此，我们此时有两个版本的链表，一个有元素“、、”，另一个没有。元素“、、”用黄色标注，表明老读者可能还在引用它，但是新读者已经无法获得它的引用。
请注意，读者不允许在退出读端临界区后还维护元素“、、”的引用。因此，一旦第行的_执行完毕，所有已有的读者都要保证已经执行完，不能再有读者引用该元素。这样我们又回到了唯一版本的链表。
此时，元素“、、”可以安全被释放了。这样我们就完成了元素“、、”的删除。
例子：在替换过程中维护多个版本
   =    _
    =  
    =  
    =  
 __ 
 _
  
链表的初始状态包括指针都和“删除”例子中一样。

从链表中替换元素
和前面一样，每个元素中的三个数字分别代表字段、、。红色的元素表示读者可能正在引用，并且因为读者不直接与更新者同步，所以读者有可能与整个替换过程并发执行。请注意我们为了图表的清晰，再一次忽略了后向指针和从尾指向头的指针。
下面描述了元素“、、”如何替换元素“、、”的过程，任何特定读者可能看见这两个值其中一个。
第行用分配了要替换的元素。此时，没有读者持有刚分配的元素的引用用绿色表示，并且该元素是未初始化的用问号表示。
第行将旧元素复制给新元素。新元素此时还不能被读者访问，但是已经初始化了。
第行将的值更新为，第行将的值更新为。现在，第行开始替换，这样新元素终于对读者可见了，因此颜色也变成了红色。此时，链表就有两个版本了。已经存在的老读者可能看到元素“、、”现在颜色是黄色的，而新读者将会看见元素“、、”。不过这里可以保证任何读者都能看到一个完好的链表。
随着第行_的返回，宽限期结束，所有在__之前开始的读者都已经完成。特别是任何可能持有元素“、、”引用的读者保证已经退出了它们的读端临界区，不能继续持有引用。因此，不再有任何读者持有旧数据的引用，如第排绿色部分所示。这样我们又回到了单一版本的链表，只是用新元素替换了旧元素。
等第行的完成后，链表就成了最后一排的样子。
不过尽管是因替换的例子而得名的，但是在内核中的主要用途还是用于简单的删除。

本文来自  微信公众号一、    概述
  是公司在年开发的图像文件格式，原义是图像互换格式。是一种基于算法的连续色调的无损压缩格式，其压缩率一般在左右，它不属于任何应用程序。
格式自年由公司引入后，因其体积小、成像相对清晰，特别适合于初期慢速的互联网，而大受欢迎。其支持透明背景图像，适用于多种操作系统，文件体积很小，目前网络上很多小动画都是格式的。
格式可以将多幅图像保存到一个图像文件，展示的时候将多幅图像数据逐幅读出并显示到屏幕上，从而形成了动画，所以根本上仍然是一种图片文件格式。
只能显示色，主要分为两个版本，即 和 。 是在年制定的版本； 是年制定的版本，在此版本中，为文档扩充了图形控制区块、备注、说明、应用程序编程接口等四个区块，并提供了对透明色和多帧动画的支持。
二、    算法
算法又叫“串表压缩算法”，全称 ，是通过建立一个字符串表，用较短的代码来表示较长的字符串来实现压缩。字符串和编码的对应关系是在压缩过程中动态生成的，并且隐含在压缩数据中，解压的时候根据表来进行恢复，算是一种无损压缩。
压缩算法的基本原理：提取原始文本文件数据中的不同字符，基于这些字符创建一个编译表，然后用编译表中的字符的索引来替代原始文本文件数据中的相应字符，减少原始数据大小。和调色板图像的实现原理差不多，不过这里的编译表不是事先创建好的，而是根据原始文件数据动态创建的，解码时还要从已编码的数据中还原出原来的编译表。
三、    编码结构
图像编码是基于颜色列表的，最多只支持位，也就是种颜色；颜色表里存储的数据是每个颜色点的颜色值，以及对应于颜色列表的索引值。
文件内部分成许多存储块，用来存储多幅图像或者是决定图像表现行为的控制块，用以实现动画和交互式应用。
文件内部是按块划分的，包括控制块   和数据块 两种。
控制块是控制数据块行为的，根据不同的控制块包含一些不同的控制参数；数据块只包含一些的字符流，由它前面的控制块来决定它的功能，每个数据块大小从到个字节，数据块的第一个字节指出这个数据块大小字节数，计算数据块的大小时不包括这个字节，所以一个空的数据块有一个字节，那就是数据块的大小。
    整体结构
一个文件的结构可分为文件头 、数据流  和文件终结器三个部分。文件头包含文件署名和版本号；数据流由控制标识符、图像块 和其他的一些扩展块组成；文件终结器只有一个值为的字符“”表示文件结束。
下表显示了一个文件的组成结构：

下面分别对各个模块进行介绍。
    文件头
署名用来确认一个文件是否是格式的文件，这一部分由三个字符组成：””。
文件版本号 也是由三个字节组成，可以为””或””。
    逻辑屏幕标识符  
这一部分由个字节组成，定义了图像的大小    、颜色深度 、背景色  以及有无全局颜色列表  和颜色列表的索引数 ，具体描述见下表：

    全局颜色列表  
全局颜色列表必须紧跟在逻辑屏幕标识符后面，每个颜色列表索引条目由三个字节组成，按、、的顺序排列。
    图像标识符 
一个文件内可以包含多幅图像，一幅图像结束之后紧接着下是一幅图像的标识符，图像标识符以‘’字符开始，定义紧接着它的图像的性质，包括图像相对于逻辑屏幕边界的偏移量、图像大小以及有无局部颜色列表和颜色列表大小，由个字节组成：

    局部颜色列表  
如果上面的局部颜色表标志设置了的话，则需要在这里紧跟在图像标识符之后定义一个局部颜色列表以供紧接着它的图像使用。如果文件没有全局颜色表，也没有局部颜色表，可以自己创建一个颜色表，或使用系统的颜色列表。局部颜色表的排列方式和全局颜色表一样。
    图像数据  
两部分组成：编码长度   和图像数据 。图像数据使用了压缩算法，大大减小了图像数据的大小。图像数据在压缩前有两种排列格式：连续的和交织的由图像标识符的交织标志控制。连续方式按从左到右、从上到下的顺序排列图像的光栅数据；交织图像按下面的方法处理光栅数据：
创建四个通道保存数据，每个通道提取不同行的数据：

第一通道 提取从第行开始每隔行的数据；
第二通道 提取从第行开始每隔行的数据；
第三通道 提取从第行开始每隔行的数据；
第四通道 提取从第行开始每隔行的数据；

    图形控制扩展  
此为可选的需要版本，可以放在一个图像块图像标识符或文本扩展块的前面，用来控制跟在它后面的第一个图像或文本的渲染形式，组成结构如下：
用户输入标志  ：指出是否期待用户有输入之后才继续进行下去，置位表示期待，设置否表示不期待。用户输入可以是按回车键、鼠标点击等，可以和延迟时间一起使用，在设置的延迟时间内用户有输入则马上继续进行，或者没有输入直到延迟时间到达而继续。
透明颜色标志  ：置位表示使用透明颜色。
    注释扩展 
此是可选的需要版本，可以用来记录图形、版权、描述等任何的非图形和控制的纯文本数据 字符，注释扩展并不影响对图像数据流的处理，解码器完全可以忽略它。存放位置可以是数据流的任何地方，最好不要妨碍控制和数据块，推荐放在数据流的开始或结尾。具体组成：
    图形文本扩展  
也是可选的需要版本，用来绘制一个简单的文本图像，这一部分由用来绘制的纯文本数据 字符和控制绘制的参数等组成。绘制文本借助于一个文本框 来定义边界，在文本框中划分多个单元格，每个字符占用一个单元，绘制时按从左到右、从上到下的顺序依次进行，直到最后一个字符或者占满整个文本框之后的字符将被忽略，因此定义文本框的大小时应该注意到是否可以容纳整个文本，绘制文本的颜色索引使用全局颜色列表，没有则可以使用一个已经保存的前一个颜色列表。另外，图形文本扩展块也属于图形块  ，可以在它前面定义图形控制扩展对它的表现形式进一步修改。图形文本扩展的组成：
    应用程序扩展 
这是提供给应用程序自己使用的需要版本，应用程序可以在这里定义自己的标识、信息等，组成如下：
    文件终结器 
这一部分只有一个值的字节，标识文件结束，固定值。
四、    性能优化
编码里，由于限制了颜色表最多只能有个颜色值，这样就很容易出现量化后里图片数据丢失颜色的情况。所以如果颜色表生成的不合理，导致丢失太多重要颜色值，使得恢复后展示的图片失真太大；另外颜色表的生成速度及匹配速度也严重影响到的生成速度；如果只有全局颜色表，那么必然不能很好地使得中每一副图片都能有较少的失真度，而如果每一副图片都生成一个颜色表，那文件就会更大。
音乐安卓版最初的生成库就是使用的中位切割量化算法来生成颜色表，使用中发现速度上比较慢，特别是大帧率下的生成。为了保证的颜色质量，必须是每一副图片都生成一个颜色表，至于文件大小可以通过降低帧率及调整每副图片的尺寸来控制；因此对这里进行性能上的提升，就需要研究其他量化算法。下面开始分别介绍常用量化算法以及最后的优化方案：八叉树量化算法。
    常见颜色量化介绍 
计算机图形学中，常采用的一种方法是把颜色看成是基于红、绿、蓝三种颜色的混合，也可以采用色度、彩度、亮度等描述颜色，用多种不同的描述符来表示颜色，就称为颜色模型 ，如果有人能量化这三种不同的描述符的数值，就可以用一个三元组来表示一种颜色，例如  ，这就形成了一个描述颜色的三维坐标系统，选择不同的颜色模型能形成不同坐标系统，坐标系统上所有颜色的集合就称为颜色空间 。 在图形学中，颜色量化是为了减少一张图像中的颜色数并且使用它尽可能的与原始图像一样，在一些由于内存限制只能显示有限颜色的设备上，颜色量化就显得特别的重要。
    统一量化方法
  直接对去掉位，这种方式简单粗暴，很明显图片的失真比较严重。
    流行色量化法
  选取出现概率最高的颜色组成颜色表。此方法依然存在失真较大的问题，特别是流行色都是比较接近的颜色，这就导致其他颜色丢失，恢复后的图片整体偏向某一颜色；比如流行色都偏红，那么最后恢复后的图片也是偏红。
    中位切割量化算法
  包围当前图像所有颜色的最小长方体，递归地按照长边分割，每次分割保证两边权重基本对等，直到获得个颜色值或者全部小方块不可分为止；最终每个小方块中的颜色均值作为本块颜色值，全部提取出来就得到颜色表。这也是最初音乐安卓版本库所采用的方案，此方案相比流行色量化能获得更好的效果，对于方块内的取均值来达到合并相似颜色值的效果。
    八叉树颜色量化方法
该算法最早见于文章最早是在   和   发表的论文《       》，算法的最大优点是效率高，占用内存少仅需要不超过颜色数量个节点，加上一些中间节点所占用的内存，选出的调色板最合理，显示效果最好。
    八叉树
八叉树是一种用于描述三维空间的树状数据结构。八叉树的每个节点表示一个正方体的体积元素，每个节点有零个或者八个子节点，将子节点所表示的体积元素加在一起就等于父节点的体积。
八叉树的定义是：若不为空树的话，树中任一节点的子节点恰好只会有八个，或零个，也就是子节点不会有与以外的数目。八叉树可以用来把一个立方体切成个相同等分的小立方体，比如在房间里某个角落藏着一枚金币，如果想很快的把金币找出来，就可以利用八叉树的原理，把房间当成一个立方体，先切成八个小立方体，然后排除掉没有放任何东西的小立方体，再把有可能藏金币的小立方体继续切八等份，如此重复进行，平均在房间内的所有物品数的时间内就可找到金币。因此，八叉树可以用在空间中的场景管理，可以很快地定位在场景中物体的具体位置，或侦测与其它物体是否有碰撞以及是否在可视范围内。
    八叉树实现原理
当插入颜色值  的时候，插入第层，取、、颜色值的最高位，通过或操作，得到一个小于的值，作为下一次递归的位置；进入第层，继续进行或操作，得到值，第个孩子节点就是下一层要递归的位置。依次类推，直到找到叶子节点，把颜色计算值加，同时把，，加到当前节点的值总和中。将所有的值逐层插入到八叉树中，在每个节点上，记录所有经过的节点的值的总和，以及颜色个数。
下图简化了过程，只演示了几层，在实现的算法中每种颜色分量占位，所有共有层。
插入的过程中，如果节点不存在，则需要创建新的节点，然后增加节点计数以及各分量的总和。当在插入时，发现节点已经存在，且是叶子节点，则停止该颜色后续层数节点的插入。
插入完一个颜色之后，如果叶子节点数超过了我们要得到的颜色数色需要得到种颜色，这时候就需要合并一些叶子节点了，使的叶子节点的个数不超过我们要得到的颜色数。
由于越底层的节点，数据的敏感度越低，所以，我们将从最底层的节点开始合并。按节点计数值小的优先合并策略，将其子节点的所有分量以及节点计数全部记录到该节点中，并删除其所有子节点。依此进行，直到合并后的叶子数符合要求为止。
合并的基本思想，在第层的节点上有两个叶节点，现在完成的合并操作就是把叶节点的颜色分量和计数值都加到它们的父节点上，同时裁剪掉两个叶节点，这步操作就减少了一个叶节点。
程序实现步骤如下：

 设定最大递归深度
 找出场景的最大尺寸，并以此尺寸建立第一个立方体
 依序将单位元元素丢入能被包含且没有子节点的立方体
 若没有达到最大递归深度，就进行细分八等份，再将该立方体所装的单位元元素全部分担给八个子立方体
 若发现子立方体所分配到的单位元元素数量不为零且跟父立方体是一样的，则该子立方体停止细分，因为跟据空间分割理论，细分的空间所得到的分配必定较少，若是一样数目，则再怎么切数目还是一样，会造成无穷切割的情形。
 重复，直到达到最大递归深度。    提取调色板

按照上述的步骤将所有的颜色全部插入之后，便建立起一颗叶子节点不超过的八叉树。此时，取出叶子节点中的分量的平均值分量总和除以节点计数，即是得到的调色板颜色值。
    匹配调色板索引
所谓匹配调色板索引，就是根据原始的值，在调色板中查找出最接近的颜色的索引。最容易想到的方案是：对每个颜色，分别对调色板数据求各分量的差值的平方和，求的最小值对应的调色板颜色的索引，即是该颜色匹配到的调色板索引。很明显此方案需要进行大量的计算和比较才能找到对应颜色值的颜色表索引，根据八叉树的构建特性，我们想到了更加快速的搜索方案，原理类似于插入颜色构建颜色表的过程：

    把输入颜色值的、、，按照最高位到低位组成八个索引数，分别代表八叉树各层的索引值，过程同颜色值的插入过程。
    从八叉树根开始，依次按照八个索引去到对应各层查找节点，如果当前是叶子节点，则返回此节点，此节点在颜色表的索引就是要找的索引。
    如果当前不是叶子节点，并且有相应的子节点，则继续到对应子节点查找。
    如果当前不是叶子节点，并且没有相应的子节点了，那么返回当前节点的索引。    优化数据对比

下面针对八叉树和中位切割量化算法两者的生成效率对比数据，中位切割采用最大分割深度为，这就和八叉树的层级保持一致了，保证对比条件的一致性。经过多次生成进行对比，求取每一个图片编码到里的耗时平均值进行，结果如下表。可以看到通过八叉树可以极大提升性能，而中位切割算法每次分割都要先找到最大边，还要保证两边权重近似一样，计算量要大很多。
五、    参考






====


_
_


    《     》


  和  的八叉树论文：








_


=
针对很多腾讯云新上云的用户，在购买安装护卫神镜像系统后，需要使用到 但是又不清楚如何安装配置 。
在下面的教程中就可以解决这个问题。
疑问：为何护卫神镜像里边没有内置 呢？
因 是微软公司推出的商业性软件，涉及到版权问题，为了避免不必要的纠纷，护卫神镜像系统里边并没有安装。
安装方法可以参考以下的图文说明以在护卫神全能安全镜像护卫神·全能安全环境 |||上安装 为例：
本方法适合用于护卫神以下镜像系统
、护卫神·全能安全环境 |||、护卫神·全能安全环境 |||
一，准备好软件 ，可以网上下载。比如下载地址：也可以在微软官方上搜索下载。
二，双击解压文件后，点击运行。


点击“安装”，再选择“全新安装或向现有安装添加功能”


确定

如果您有序列号，可以在”输入产品密钥“输入你的软件密钥
如是没有可以在”版本“这里选择相应的版本
小知识： 版本是“试用版”，它是功能齐全的版本。供测试用的目的，不能用于正式的商业环境中，另外有使用天的限制。
版本是免费的简装版本，可以随意分发。比如你开发了一个程序使用了 ，那么你可以免费给用户安装这个版本的数据库。它缺少很多大型数据库系统的功能，比如集群功能，数据仓库功能，负载平衡设置。另外它使用的资源比限制，只能使用一个，的内存，能够创建的数据库个数和表的个数都有限制不过一般都够用。

接着“下一步”走


全选，然后走一下


填写安装目录，默认是在盘，你可以更改到其它的磁盘


在这里可根据你的情况自行选择要启动的服务，也可以默认的选择即可。
账户名可选择为 \ 

选择混合模式，输入密码，指定管理员这里”添加当前用户“，完后就走下步

还有 下一步走吧
接着就稍等安装完成

耐心等待，终于安装完成

三，打开看看

服务器名称这里可输入 “，身份证认证，默认选择身份认证

四，添加护卫神主机管理系统运行账户，以便可以在主机管理中开设 数据库。
展开“安全性”“登录名”“新建登录名”

登录名，这里选择“身份认证”，在“搜索”中，找到“”，确定

确定后，在左边”服务器角色“中，勾选  后确定

至此，配置已经
可以在主机管理系统中正常开设 啦前言

日常工作中，有很多小需求，作为码农，总喜欢自己动手做点小东西出来，也成为学习与实践的好机会。在使用腾讯云过程中，从环境搭建、各个小需求的构思，前后端技术的琢磨、学习、使用，收获很大。现在整理出来和大家分享。

先说说做了哪些事情都来源于实际小需求：


问卷系统：借鉴表单，支持文本、单选、多选、分页以及问卷的复制、导出
二维码工具集：支持生成二维码、解析扫描二维码，微信加群短网址生成
地图搜索：按中心搜索周边多个位置
   下载地址获取


其他用途


个人博客
运行，在服务器上跑浏览器去模拟访问页面、截图、自动化测试
架设 ，不用单独开 ，比更简单的抓包
物联时代，和你的智能设备联动起来：魔豆路由器云消息
抓豆瓣妹子 


环境搭建
使用了腾讯云￥月 的   ，经济实惠，适合投入有限的程序猿猿。

我的云端工具集都是基于后端、前端实现。可以和或配套使用。

配置好的同学可以跳过网络上资料很多，也可以根据自己的系统、喜欢的方式来配置、搭建环境例如参考这里：_

安装非常简单：
  
    
  
然而更喜欢    的组合：
 安装最新的，模块、功能全。参考：_
  加入官方
 _
   _
 _
  加入官方源
=_ | | { }
      
      
   
  开始安装，默认已经开启，没开就  开启下
  
   
  看看安装好了没，默认已经开啦
 
  如果无法访问，可以看看安全组有没有加上： 


 安装和常用库。也是默认就已经开启啦，没有就运行 开启
         

 使用用户“”运行，使用“”运行
 无权限访问的来通信的
 所以加个组，就有权限啦
        
修改   假定代码放到目录
 {
           
    _  
     
         
    _        
     =  {
         
    }
      \ {
         _       = 
         ___ \
         _   
         _  
                 _
         _  _  ___
    }
}
可选：允许  简化为 
  __ = __ =  
重新启动、
   
   
写个页面访问 看看
     
问卷系统
背景
 的表单功能很棒，支持很多种类型：文本框、单选、多选、下拉框、网格，分页等，然而在墙内不可用。在腾讯问卷出来前，试过很多其他问卷系统，搭建复杂；第三方的问卷系统也不是那么好用，于是早先自己写了套，也是一个学习的过程。老早写的代码，风格、组织不太好，就不开源了_，有需要的可以拿去看看

在很长一段时间里，大家中午一起订外卖。一直用这个东西来收集大家菜单，轮流担任外卖，负责下单、拿外卖。

前端：从表单分离了前端代码，略作调整后台：来收集表单元素的，存储；组装问卷页面；问卷回答的存储和下载
实现思路


：前端使用，添加各类表单元素元素，记录对应数据。其中表示是文本、单选、网格等类型，字段记录对应选项。


    {
       
       
       无标题的问题
       
       
       
        {
           
           选项 
           
           
        }
        {
           
           选项 
           
           
        }
      
       
       
       
       
    }


：点“保存”按钮，以格式，整个表单数据，后台存储下来，使用随机标识。目前以文件方式，没有使用。
：打开问卷时，使用读取到对应问卷的配置，根据生成代码，返回给前端
：问卷回答后，以==提交，后台按题目顺序，将答案整理为，存储到文件
：为问卷生成了特殊的链接，可以查看、下载数据，把发给前端即可。


看看效果
创建表单

填写表单

可以改进的地方
当时是一只菜鸟，很多代码偏于实现，现在看来


代码结构很乱，可以优化。
表单元素的渲染采用了纯的拼接，如果在后端使用前端使用或这类框架，可以更优雅的完成。


二维码工具
背景
经常有需要生成二维码，但：


第三方二维码生成页面都会有很多其他元素，不喜欢
不能保证第三方会不会收集、存储你输入的文本信息，例如网址、电话号码、密码
就想做一个自己玩


生成二维码
中，调用这个即可



 =
 = =
 =
{
   
   
    
}
但是生成的二维码在或中，无法右击保存所以改造下，渲染成能右击另存为的  标签
 =_
 _  {
   =  || 
    = 生成到这个虚拟的
  {
     
     
     
  }
   获取实际，给真实的元素
   这个就可以右击另存为啦
    = 
  _ 
}

_  
突然来的一个需求
不是产品经理提的，自己挖掘的玩手机游戏，家族里，大家想加个微信群：


族长告诉大家自己的微信号，然后大家加
族长把群二维码发给加她的人


好麻烦，如果能聊天中发二维码多简单。。。


微信群中，群二维码，保存到手机
上传这个二维码，假如结果为
生成一个短网址，发到游戏聊天会话中
家族的小伙伴们 复制或手动打开，跳到一个页面，这个页面出现一个二维码，用微信扫描后加群


以后，族长只要上传群二维码，然后生成短网址，把网址发给大家，小伙伴们就可以愉快的加群啦
实现
二维码解析用这个库





 从=或获得的中解析二维码
  =  
 =  {
  
}


 开启摄像头扫描二维码
 代码多行，可以直接看，核心部分_
 定时采集到，然后调用尝试解析
以上二维码生成、解析都是纯、前端完成短网址只能依赖后台做转换了，写个调用的就好
效果


手机、都可用 
二维码生成、解析、扫描



地图搜索
背景


知道公司班车几条线路所有停靠站点，先看看家附近哪里可以乘坐
最好能在地图直观看到 家、所有站点位置


思路


调用百度地图，把所有地址转换成经纬度，在地图上标记出来


实现
这个比较简单，做下用户输入的查询的解析，发请求给百度地图但是确实做了些交互体验的东西，输入立刻查询、已查询地点缓存等
  = 深圳
  =  
  =  
  =  

  {
   
   
   
   
   { ___}
  
   更多代码可以直接打开，右击，查看网页源代码
}

   下载地址获取
背景


从上的 下载太慢，而且无法和同事分享安装包
相关文档只能从里面下载，太慢，也不方便分享
第三方下载安全风险大 安全事件


思路


抓取更新过程中，从获取的下载地址，用工具下载


实现
跑起，抓包看看，发现访问了打开看看，大礼包都在

这个文件是加的，找了个版本的解析工具

 = 
 = __
 =  \

 = 
 然后按友好的格式输出就行啦
效果


相关推荐
【腾讯云的种玩法】利用腾讯云搭建实用小工具
【腾讯云的种玩法】从到搭建自己的互联网领地
常用机器性能评估工具 问题描述
计算广告是互联网最重要的商业模式之一，广告投放效果通常通过曝光、点击和转化各环节来衡量，大多数广告系统受广告效果数据回流的限制只能通过曝光或点击作为投放效果的衡量标准开展优化。腾讯社交广告发挥特有的用户识别和转化跟踪数据能力，帮助广告主跟踪广告投放后的转化效果，基于广告转化数据训练转化率预估模型，  ，在广告排序中引入因子优化广告投放效果，提升。本题目以移动广告为研究对象，预测广告点击后被激活的概率：== | ，即给定广告、用户和上下文情况下广告被点击后发生激活的概率。
 数据概览
提供的数据主要有以下几种：
 训练数据文件，其中用户、等信息为独立文件
 用户基础特征文件，包含用户的年龄性别等
 用户安装列表文件_
 用户安装流水文件__，提供了训练数据开始时间之前天开始连续天的操作流水，即第天点到第天点
 特征文件_，提供了每种的特征。
 广告特征文件
 广告位特征文件
 初赛数据描述
测试数据从训练数据时段随后天即第天的广告日志中按照与训练数据同样的采样方式抽取得到。需要根据训练数据所给出的信息，对数据集中 的待预测信息进行预测。
数据预处理
数据的预处理主要通过实现，主要包括了平滑，采样，将数据分级操作。预处理的目的主要是解决以下问题：
 不同量纲
 信息冗余
 定性信息量化
 缺失值处理
 提高信息利用率
第一个版本数据处理代码如下：

 问题分析
有这么一句话在业界广泛流传：数据和特征决定了机器学习的上限，而模型和算法只是逼近这个上限而已。
由于数据集里面特征较多，对时序的要求不是很高。于是重点放在了特征的分析与选择上。开始特征选择使用了里面的_模块。

 但是这个模块跑起来比较占内存电脑实在不给力，特征多起来之后程序运行非常耗时。之后改用直接进行一些统计分析。
 
同理对每个数据集都进行如上处理。特征的选择主要关注几点：特征是否发散：如果一个特征不发散，例如方差接近于，也就是说样本在这个特征上基本上没有差异，这个特征对于样本的区分并没有什么用。特征与目标的相关性：这点比较显见，与目标相关性高的特征，应当优选选择。除方差法外，本文介绍的其他方法均从相关性考虑。选择方法主要使用方法。
数据探索
训练模型使用了由于上开发团队把文件夹给删了，装这个算法库还破费了一些时间。装上以后简单跑了一下效果还不错：
 
的调参网上也有一些博客讲，通用的方法是使用函数，确定几个重要参数的范围。根据函数的返回分数调整。另外_分析也很重要，正好在这个函数里面一起看了。
 
__
在这些之后模型的精度也就到极限了，再想提高就需要从特征中重新挖掘可用的信息了。我想到的是交叉统计。直接把特征相乘，之后再对乘积的表格中的个数进行统计，这样就增加了一倍多的特征，成绩也有所上升。之后根据编码的原理，把特征进行分级编码，得到一些有效的维度，也还比较有效
 总结
实际上我们可以使用完成几乎所有特征处理的工作，而且不管是数据预处理，还是特征选择，抑或降维。如果电脑给力的话，可以用它很方便的完成。在这期间有很多不会的，还需要再磨炼一下水平，有时候哪块不会就拿鸢尾花数据集开刀。学会了再拿到比赛里用。最后发现其实不一定要使用各种特征，因为各个特征也有有随机因素在里面的，如果把特征用的很多，最后模型都不知道拟合到哪去了，关键还是结合赛题背景。上期回顾：干货 | 基于  的微服务生态系统与工程实践一
本文来自于   深圳站的演讲《基于  的微服务生态系统与工程实践》，时代公众号连续三篇文章详细解读与微服务的秘密。
作者简介：


王磊
华为 中央软件院首席软件工程技术专家
国内首批   认证讲师，《 》中文译者。
并著有国内首本微服务架构相关书籍《微服务架构与实践》一书。

前言
从年开始，当我接触微服务之后，我发现在微服务的演进过程中，开发和测试、运维需要相亲相爱，紧密合作，才能取得理想的效果。
本系列文章主要包括三部分内容：

第一部分：微服务与 ；
第二部分：微服务生态系统；
第三部分：微服务架构的工程实践；

本文着重介绍第二部分：微服务生态系统。后续内容请持续关注 时代公众号。
三、微服务架构的生态系统
我们为什么需要「生态系统」这个词？其实在我过去接触微服务的过程中发现了如果只从架构层面对服务化进行解耦，是很难达到效果的。为什么？
因为当我们把架构拆分成多个模块化之后，如果我的测试，如果我的工具跟不上的话，可能会带来更大的内耗和成本，所以在这过程中，我们需要考虑很多综合的因素。
比如说对于分布式系统之间，因为微服务本质是分布式系统，每个服务都可以独立运行在自己的节点中，这时候我们要考虑分布式系统的同步异步，要考虑经常讨论的数据一致性问题，同时是不是有好的工具链，是不是能够保证这样一个小的服务能够快速上线。
这是一个系统化的工程，已经没有办法割裂来看架构本身，而是从今天讨论的持续集成、、端到端的交付过程中考虑解耦。

对于今天所处的社区是多元化的社区，工具、框架层出不穷，前端后端数据库都是未来解决方案，这么多如何选择？
如果我们需要去演进微服务架构，我们需要一个什么样的全景图来帮助我们识别这个能力，当有了这个全景图之后，我们可以根据按需选择不同阶段需要引入的不同技术。
基于这两点，我定了微服务的这个生态系统图上图。它一共包括五个部分，最上面是现在所讨论的接入层，看到层这个概念，大家不要因为过去的三层变得越来越低效，就抵触层的概念。
 总览
对于接入层，更关心的是如何将用户的请求接入内部系统，这里面典型的是  、 。
第二部分是业务层，更关心服务化的方式来服务业务，通过什么样的框架去实现服务。
第三是支撑层，更多描述成今天所面临的分布式系统的挑战，包括服务的协作、安全、路由、告警、监控。
最下面是基础设施，因为对于微服务而言，如果我们希望能够起到效果，一定是基于云，只有云能够帮助我们去降低硬件的伸缩成本。右边是我们在微服务演进过程中非常重要的工程实践和流水线。
 接入层

什么叫「网关」？其实是帮助系统能够把外界的需求接到内部业务来。
为什么这样做？第一点，今天对于用户端的设备变得越来越多样化，包括手机、、可穿戴设备，这类设备的更新周期可能比较慢，当我们在后端定义了很多服务之后，如果希望 、 能够直接访问，对于每一次服务的变更或者服务的的变化，都会去触发  本身的变化，而对于审核周期是七天，这对用户的更新会带来非常低的效率，所以我们希望通过这样一种集中化的方式，把用户请求接入进来。
对于  ，能够跟我们的服务部署在一起，所以服务中的交付效率会远远高于前端设备去跟服务交付，因此我们希望通过这种方式提升交付的效率。随着  的演进，有很多的框架、工具除了做请求转发，集中化控制以外，会把流量控制、安全认证也放在  验证层。
 业务层
第二是业务层，我接触到了很多团队，当我们谈到微服务架构的第一反应就是如何解耦架构，我提几个常用的方法论。
对于架构的拆分一开始没有必要非追求完美，我相信在没有做过微服务架构之前，你的分已经能够让你的系统跑得很顺畅，所以这时候面向对象一定是我们去拆分服务的基准，包括面向对象的动词、名词，名词像订单、库存、用户，动词像支付、登录，都是我们去拆分服务的出发点。

第二是可重用的逻辑，刚才我们讲到在模块化编程的时代，是把通用的逻辑抽象出来进行模块，这也是我们抽象服务的方法论。
第三是资源密集型业务，对于我们的系统是不是有对计算，是不是对可伸缩的需求不一样，也是我们能够去拆分服务的方法论。
最后是领域驱动设计，这是最难的一点，右边的图定义了非常多的概念，包括聚合、实体，很多业界的文章在讲  是微服务的基础，我觉得这个可能是需要在前期做很多积累的。

对于微服务的实现，刚才讲到对于基础服务而言，我们有很多的框架，这里有一个网址，这里定义了各种语言的微服务框架，我们能够很方便使用他们去开发框架。
在很多场景里我们虽然定义了服务，但是这些服务的功能要组合起来才能提供更多的用户特性，比如我们有订单，有评论，但是当我在手机上显示的时候，希望能够显示这个订单最新的五条评论，可以让手机端去调用两个服务去获取数据，也可以做一个组合服务，它来获取订单，同时获取五条评论再交给前端应用，这就是组合模式的价值。
我们可以使用、、这些工具。
 支撑层

•支撑层是像注册发现，我们为什么要注册发现？在未来，我们的服务上线之后，希望它能够更快、更有效的水平伸缩，但是当我们每做一次伸缩之后，地址、服务运行的物理地址是不确定的，所以我们希望通过注册发现的机制，让服务之间相互通信，我可以不用知道这个物理地址，通过注册发现的机制，就能够完成对服务的访问。随着服务数量增多，注册发现机制是我们必须要考虑的方案。

•第二是配置更新，对于以前的一个应用而言，我们可以把配置信息写在配置文件里，随着应用一起发布，但是对于可以独立部署的单元越来越多，而且有可能存在一个服务会被多个实例所运行，所以配置更新就变成了挑战。我们过去曾经基于亚马逊的做过自己的配置方案。

•第三是容错，错误的发生是我们必须要考虑的问题，当我们的请求量过大，当我们的负载过高时我们要考虑如何保证核心业务不被破坏，所以限流、熔断、降级是我们处于微服务规模化之后所面临的新挑战。
 交付流水线与工程实践
 微服务开发框架
第四部分是基于交付流水线与工程实践，里面包括了开发框架，交付流水线以及工程实践。
刚才讲到有很多可以利用我们的框架去开发基础服务，这里我抽出了不同语言里面使用量比较高的框架，包括像里面的、 、 里面的  还有 ，这些都可以很方便的帮我们从零开始开发微服务。

但是对于企业而言，我们有大量的存量系统，对于使用这类去开发存量系统挑战非常大，因此我们在公司内部有一套开发框架，能够帮助我们把现有的  方式，能够更快的转换我们的服务，同时提供同步异步以及框架协议，这个可能在七月份左右共享到开源社区，希望大家支持跟关注。
 持续交付流水线
“持续交付流水线”这个话题大家应该听到了很多，做的最重要事情就是帮我们把代码提交之后的流程管理起来，最终做到我们能够把这次代码提交的变更发布到类生产或者生产环境上。可以看到右下角是我们定义的 、 、，这是通常我们去做产品发布的时候经历的三个环境。

中间的过程是从开发人员到提交代码到构建，打包存储的过程，我把它简化了。端到端的工具链，几乎在所有的微服务的成功案例里面，都会讲到他们会不停采用业界先进的工具。
以  为例，在它年的演进过程中贡献了很多的开源组件。包括我们在年的时候，最早使用服务的时候，它本身也没有提供好的工具和管理端来管理它的资源，它是帮助我们去做自动化部署创建资源的脚本，所以我们用了很多   的开源框架去完成我们的工具链。这里面涉及到编码、构建、测试、部署、发布。

 基础设施
最底下的是基础设施层，对于微服务我们希望做的是能够快速交付和帮助我们在很多不确定的场景做水平伸缩。随着我们未来做试验、做创新的需求越来越强烈，我们希望上线之后，我的用户是一万的时候能够满足，一百万的时候也能满足。
所以对于伸缩而言，一定要借助于底层的基础设施，公有云，私有云，都是不错的选择。
四、微服务架构的工程实践
最后是微服务架构的工程实践。这是  从到年七年时间，把他的业务从数据中心迁到  之后的架构图。对于我们的系统而言，是不是意味着当我们把架构拆分成个、个之后，也能获取到这样收益呢？
这是很多组织和团队在做微服务的时候考虑的第一个问题。如果我们把架构拆成个，个，是否能获得同样的收益？答案是否定的。 首席云架构师说过，他们做了大量的关于流程工具和实践的演进。
微服务架构工程实践更多干货请关注后续文章
五、总结

最后推荐几本书，大部分是关于持续交付和  的书籍，不管我们如何清晰定义概念的划分，但是实践过程中三者是密不可分的。


本文来自：时代社区发表者简介： 邹方明， 专家工程师，架构平台部，存储业务中心副总监 


编者按

年月，架构平台部研发的存储家族总存储量突破，相当于亿部蓝光高清视频的数据总量，在这的数据中，图片数突破万亿，文件数超过亿，从年到年，每一个存储量级的突破，都意味着不同的挑战，下文阐述了由到的过程中，存储引擎背后的技术。

、序言
自从互联网从跨入到时代，用户开始从站点获取数据跨入到用户自己产生数据，分享数据，这时用户的数据存储开始急剧增长。更重要的是时代的发展，用户内容从文字时代跨入到了图片时代，这个时代的明星产品相册的诞生，更是让用户分享数据达到了一个顶峰。在这个数据开始飞速增长的时代，当时是没有合适的存储引擎和方案来支持的。在相册飞速发展的同时，由当时存储系统的万金油搭建的存储解决方案，遇到了访问延时高，扩容困难，成本高，等问题。而这一类问题也同样困扰着所有的互联网公司。因为那时是一个没有真正存储系统的混乱时代。这个时代，我们的存储还不到。
这时在，等论文中，各大互联网公司从困扰中找到灵感，纷纷效仿推出类存储引擎。腾讯也不例外，由架构平台部研发的存储家族横空出世，并全面推进了由没有定制存储系统的混乱时代向的演进。
、家族诞生
家族整体设计中包含对开发，运维，资源管理等各个要素的考虑，并由各个相关要素的组件组成。其中最重要的两个引擎组件为基于和内存的索引存储引擎，以及基于的数据存储引擎。正是这两个核心引擎解决了腾讯存储在跨越级别中，所遇到的存储上的难题。
 存储引擎特性
以农牧场为代表，基于社交关系的各种应用和游戏越来越多。这类应用或游戏的特点是单个用户的一个操作会涉及大量数据的读写，而且是对于数据的部分读写，对后台数据存储带来的极大的性能挑战。传统关系型数据库如更偏向数据一致性的保证，复杂的引擎设计注定了性能相对较低，虽然读性能可以通过实现解决，但是写性能始终是一个不能规避的难题。因此，形式数据库特别适合，特点是小块数据的快速存取、数据弱一致性。家族的存储引擎就是为这种业务场景而诞生的通用、高速、持久化存储系统。存储引擎具备高性能 、低成本、高可用的良好业务体验，能轻松应对海量数据访问、存储成本敏感、延时敏感等问题，并且安全可靠 ，拥有多份热点数据和流水落盘，备份中心备份数据和流水，具备回档能力。
业务根据数据读写时延的需求，可以自由选择内存，，等做为存储介质，甚至可以更通用的让系统自动选择冷热数据存储在不同的介质上。在内存中存取延时达到极致的级别，支持超高并发的读写请求，普通单机可跑到读或 写。在加入多队列支持和网卡后单机性能超过。这种读写性能，完美的解决了农牧场的高并发写问题。
引擎最重要的特性是多个介质集群中，可以自动调度数据，下图就内存集群和集群之间的数据自动调度。将热数据存储在内存集群，冷数据存储在成本更低的存储集群有几个优点：用户访问是透明的，成本是降低的，体验是提升的。

 文件存储引擎特性
文件存储引擎分为数据层、索引层和逻辑层三个部分。数据层负责文件数据的存储，提供接口，长度一般限定为，大文件由逻辑层切分成多个片顺序存储。索引层包含文件索引、目录索引和去重索引。文件索引保存文件的元信息创建时间、修改时间、文件长度、分片信息和业务自定义的字段。目录索引提供按照目录树组织的索引结构，索引中只保存文件、目录的元信息和在文件中的。去重索引保存了分片的哈希值与数据层的对应关系，用于上传时查找已经存在的数据分片，避免重复上传。逻辑层串联文件上传、下载、删除、修改等所有接口的流程控制，提供原子操作。

文件存储引擎主要解决了索引数据的存储问题，数据层的管理，以及业务文件存储特性的需求。
在家族的强力支撑下，我们解决了在图片时代，场景的存储问题，这时用户的数据依然急剧增长，由级别，飞速发展到几百级别。用户的场景依然猛烈的发展，但用户内容却慢慢的由图片在向视频转变，随着技术的发展，用户的内容质量越来越高，视觉体验越来越好，这都意味着最底层的数据存储爆发式的增长。而这些增长下，家族显得越来越跟不上时代的发展，从而暴漏出了索引层成本高，功能不够丰富，数据层的数据安全与成本之间的矛盾。在新时代新存储矛盾的触发下，家族由升级到了版本，从而应对降低存储成本以及新存储功能的需求。
、新时代
 数据存储引擎的升级
为了降低数据存储成本，我们采取用计算换取空间的做法，与传统副本存储方式相比， 新文件存储引擎的副本数只有份，在保证数据可靠性的前提下，通过牺牲一部分访问性能，换取更大的成本收益。采取的是编码方式，在份业务数据块的基础上编码计算出份校验块， 一共个块组成一个条带落地存储。
 索引存储引擎的升级
我们使用了多年的存储引擎，也遇到了新的挑战，不支持范围查询接口。业务有相关需求时，需要通过大量数据组织逻辑，以构建出适用的数据模型。所以家族推出新的类存储引擎，丰富家族中的组件，主要设计如下：
 
通过业务场景和底层平台的深度配合，对外提供了丰富的数据处理接口。
 业务形态的深度理解
在家族核心组件全面升级的过程中，我们不光需要底层平台的强力支持，更需要在对业务深度理解的前提下，做出精准的存储策略，打造出专业的定制存储系统。
在基于打造的专业图片平台，图片平台以稳定可靠的图片存储及加速下载为基础，配套以强大的图片处理、自动化的违禁图审核功能，并针对业务模型做冷热流量调度、存储数据降冷等一系列成本体验优化，为图片客户提供了一套完整的解决方案。强大的图片处理功能涵盖了各类应用场景，有图片缩放、裁剪、旋转，图片水印，格式转换，信息获取等，支持上传时处理后落地存储，也支持下载时实时生成。同时图片丰富的表现力，也让违禁图十分活跃，图片平台配有上传即可触发的全自动审核流程，平台具备整套审核及禁图操作，业务无需参与即可轻松享有。
在文件存储平台上，在家族中推出了一系列针对不同用户场景使用的分支存储系统，包括适应腾讯视频等高频存储业务使用的多副本存储引擎，适应离线传文件等临时存储业务使用的即删即用存储引擎，等等。往往一个业务的文件不可能只适应一个存储系统，大多数文件随着时间的推移会逐渐变冷，通过对各个业务的深入理解，对用户行为的深度理解，以及大量的数据分析，平台实现了文件在各个存储引擎之间的智能调度，大大节省了存储成本。
 自动的运营体系

架平的运营体系主要包括基础配置、成本预算核算、报表流程测试、质量监控、现网操作这五大块，这五大部分组合成一个完整的运营体，为部门业务安全可靠高效的运营保驾护航。：基础性的配置管理，包括了设备、机房、业务等基础信息，主要提供设备资源提前报备、到货验收初始化、高危端口管理、设备转移退役等功能；成本预算核算：部门本身不直接对外营收，但却承载了公司海量的存储、服务，部门每年的运营成本占了公司总运营成本的相当一部分，必然要有全面、严谨的成本管控核算，然后分摊到服务的各个业务部门；报表流程测试：业务多报表多，需要有个报表系统来统一管理，现网变更的管理、突发事件产生后在哪里跟进、验证是否解决等，以及对现网质量关键的保障一环就是模块开发完成后发布到现网前，还需要先过自动化测试这一环节，以便发现潜在的；质量监控：我们的眼睛，时刻盯着数十万台服务器、成百上千个业务，一旦出现异常，最快秒级主动通知到负责人，降低对业务的影响时长；现网操作：服务器达到数十万台、分布在各种不同运营商、甚至海外机房、等场景，我们有一套专用系统来支撑对现网安全、高效的操作。
、结束语
正是有了新家族，定制的引擎，文件存储引擎，以及对业务数据的深度理解，多年来积累的现网运营经验，才确保了级的数据，安全稳定的运行。在这个过程中，我们积累了多年的海量数据运营经验，也会在接下来的系列文章中，依次呈现，敬请期待。

文章来源公众号：腾讯架构师我们是参加腾讯社交广告算法大赛的队伍，这次想在这分享下我们队伍的经验。首先介绍下我们队伍，我们队伍个成员是来自西安的高校生，在互联网上了解到这个竞赛，挺感兴趣，所以就参加了这个竞赛！
这次竞赛的要求是让选手预测出  广告点击后被激活的概率，也就是一种转化率的变形问题。对于这种问题，在提取特征的时候一般有种有效的特征，一是原有的特征，二是根据一些特征做出来的历史转化率特征，三是相似度特征。对于我们这次竞赛，应该具体情况具体分析。
这次竞赛没有把所有的数据全部放在两个文件，也就是训练集和测试集中，而是给了个数据文件，其中包括训练集、预测集、还有个其他数据文件。在训练集和测试集中，共有的特征是：用户点击时间，我想应该是点击广告中素材的时间，题目没明说；广告素材的，用户，广告位，广告曝光的具体位置，移动设备当前联网方式，运营商；训练集还多个  列我们要预测的列，二分类和转化回流时间；训练集给了第天到第天的数据，也就是说点击时间是从第天开始的，测试集是要预测第天的情况。
其余的个数据文件依次是：
、 用户基础特征文件：有 用户 、年龄、性别、教育程度、婚恋状态、是否有小孩、家乡、常住地；
、_   特征文件：有 、分类；
、 广告特征文件：有 广告主 、推广计划 、广告 、素材 、的 、 所在平台；
、 广告位特征文件：有 广告位 、站点 、广告位类型；
上面个文件，我都可以根据 和训练集 预测集中相同的列，将他们的数据  到训练集 预测集中，这样就完成了第一部分特征的提取，对于其他几部分特征，我之后就不再举这么详细的例子了！
、_用户  安装列表文件：截止到训练数据时间段中第一天用户全部的  安装列表，但是这个文件中只有 万用户，和训练集中的 万用户 相差些，和测试集用户的交集是 万测试集中一共有万用户；
、__ 用户  安装流水文件：有列，用户 、安装时间、，但是这个文件只有 万用户，和训练集中的万用户 相差些，和测试集用户的交集是 万测试集中一共有万用户。
上面是所有的数据处理部分，接下来讲下我们的模型部分，在这次竞赛中很多选手都选用了  和  这两种模型，初赛的数据量不是很大，用这两种模型还说的过去，但是在复赛的时候，数据量几乎达到了原先的倍大小，只有在  上设置  加速模块，同时增加机器的核数，在参数设置中将这些设置好，才能达到一个不错的速度。
上面提到了基本配置，下面解释下我们为什么采用这种模型。
首先因为它是一种树模型，属于  的迭代算法，支持损失函数，支持正则可以防止过拟合，里面还有 __ 这个参数可以调节正负样本的加权训练。基分类器是  树，每一棵树上的叶子节点都会有对应的判断，算法中采取投票器原则，得到最终的预测结果。而且在树分裂的时候，每一次分裂基于前一次分裂和目标函数 来计算信息增益，根据信息增益来选择最合适的特征，以及分割点。这是一种很完备的算法。当然建议其他选手也可以选择   这两种树模型，这几种模型最终的预测结果，他们之间的相关系数如果在 之下，根据我的经验就可以进行融合，这也就是在比赛末尾有的选手利用多个模型  提分的原理！
参加这次竞赛最要感谢的就是我的师兄队友们，跟着他们学到了很多知识。这次也希望能将这些知识分享给大家！作者 | 殷源编辑 | 迷鹿

殷源，专注移动客户端开发，微软 中国区特等奖获得者，现就职于腾讯。

接全面解析 上篇
六、 
协议提供了一种声明式的方法去向代码导出的实例类及其实例方法，类方法和属性。
 在中调用代码
两种方式：






的方式很简单，如下：
 =     {
     
}

  =   
另外一种调用函数的方法
 =   
 =  
：

的方式需要通过继承协议的方式来导出指定的方法和属性：
 

  
  
  
  
  
   


    
        
        
 

继承于协议的协议中的实例变量，实例方法和类方法都会被导出，而类的 方法却不会被导出。
在代码中我们这样导出：
导出对象
 =    

导出类
 =  
在代码中可以这样调用：
     
 

 =  

      
 

         
  =   

          
  =  
 导出方法和属性给

默认情况下，一个类的方法和属性是不会导出给的。你必须选择指定的方法和属性来导出。对于一个实现的每个协议，如果这个协议继承了协议，就将这个协议的方法和属性列表导出给。

对于每一个导出的实例方法，都会在中创建一个存取器属性。对于每一个导出的类方法，会在对象中创建一个对应的 。

在中通过声明的属性决定了中的对应属性的特征：




类中的属性，成员变量以及返回值都将根据指定的拷贝协议进行转换。

 函数名转换
转换成驼峰形式：

去掉所有的冒号

所有冒号后的第一个小写字母都会被转为大写



 自定义导出函数名
如果不喜欢默认的转换规则，也可以使用来自定义转换

 导出对象给

如何导出自定义的对象？

自定义对象有复杂的继承关系是如何导出的？


在讨论这个话题之前，我们首先需要对中的对象与继承关系有所了解。
七、 对象继承
如果你已经了解的对象继承，可以跳过本节。
这里会快速介绍对象继承的一些知识：
 的数据类型
最新的  标准定义了  种数据类型：
 种 原始类型











   新定义和 


 原始值
除  以外的所有类型都是不可变的值本身无法被改变。我们称这些类型的值为“原始值”。

布尔类型：两个值： 和 

 类型：只有一个值： 

 类型：一个没有被赋值的变量会有个默认值 

数字类型

字符串类型：不同于类  语言， 字符串是不可更改的。这意味着字符串一旦被创建，就不能被修改

符号类型


 对象
在  里，对象可以被看作是一组属性的集合。这些属性还可以被增减。属性的值可以是任意类型，包括具有复杂数据结构的对象。
以下代码构造了一个对象：
  = { 
       
       
       { 
          =  
         =  
         =  
    } 
       
       
} 


 属性
定义的对象中有两种属性：数据属性和访问器属性。

数据属性

数据属性是键值对，并且每个数据属性拥有下列特性


访问器属性

访问器属性有一个或两个访问器函数  和  来存取数值，并且有以下特性

 属性设置与检测

设置一个对象的属性会只会修改或新增其自有属性，不会改变其继承的同名属性

调用一个对象的属性会依次检索本身及其继承的属性，直到检测到


  = { } 
  =  
 
 =  




在的控制台中，我们分别打印设置属性前后对象的内部结构：
设置前

设置后

可见，设置一个对象的属性并不会修改其继承的属性，只会修改或增加其自有属性。
这里我们谈到了和继承属性，下面我们详细讲解。
八、 
对于有基于类的语言经验的开发人员来说有点令人困惑 如或  ，因为它是动态的，并且本身不提供类实现。在中引入了关键字，但是只是语法糖， 仍然是基于原型的。
当谈到继承时， 只有一种结构：对象。每个对象都有一个内部链接到另一个对象，称为它的原型 。该原型对象有自己的原型，等等，直到达到一个以为原型的对象。根据定义，没有原型，并且作为这个原型链  中的最终链接。
任何一个对象都有一个属性，用来表示其继承了什么原型。
以下代码定一个具有继承关系的对象，对象继承了一个具有，属性的原型对象。
  = { 
       
    ____  { 
         
         
        __ 
    } 
}

____ ==         \\
在的控制台中，我们打印对象结构：

可见继承关系，继承的原型又继承了，而的指向，因而它是继承关系的终点。这里我们首先要知道和是两种属性，前者只有才有，后者所有的对象都有。后面会详细讲到。
 类？
 只有一种结构：对象。类的概念又从何而来？
在中我们可以通过来模拟类，例如我们定义一个的函数，并把他认作类，就可以通过来创建具有，属性的对象
   { 
     =  
     =  
} 

  =   
打印对象结构：

这里出现一个的概念
  
每个函数都自动拥有一个的属性，这个属性是一个对象，这个对象包含唯一一个不可枚举属性。属性值是一个函数对象
执行以下代码我们会发现对于任意函数 == 
  = {} 一个函数对象 

  =  关联的原型对象 

  =  原型对象关联的函数

 ==   = 对于任意函数 == 
这里即存在一个反向引用的关系：

 发生了什么？
当调用  时，虚拟机生成了一个对象，并调用了的的对象对进行初始化，并且自动将作为新对象的原型。相当于下面的伪代码
  
 = 
____ = 

 _  __ 与
简单地说：

___是所有对象的属性，表示对象自己继承了什么对象

是的属性，决定了出来的新对象的


如图详细解释了两者的区别

 打印对象结构

在浏览器提供的调试工具中，我们可以很方便地打印出对象的内部结构

在客户端中并没有这样的打印函数，这里我自定义了一个打印函数。鉴于对象的内部结构容易出现循环引用导致迭代打印陷入死循环，我们在这里简单地处理，对属性不进行迭代打印。为了描述对象的原型链，这里手动在对象末尾对其原型进行打印。


 ____
{
         
    {
          = 
          =  
         =  
         \|\ 
    }
     
}

   {

      ==  ||  ==  {
         = 
    }
       =     =  {
         ____  
    }

      =     
      = 
       =    {
        =
    }

      = ____ {\

      = 
        {
          = 

         {
              = 
             =    =   ____  \
        } {
             =    =   ____  \
        }
    }

      = ____
       ==  {
         = 
    }

     =  =  {
         =  =      \
    } {
         =  =  \
    }

    =}
     
}

  {
    
}
 
我们为所有的都添加一个函数，方便我们在中向控制台输出日志
 =   {
         
}
九、 导出对象给
现在我们继续回到中，看下对象是如何导出的
 简单对象的导出
当你从一个未指定拷贝协议的实例创建一个对象时，会创建一个的对象。对于具体类型，会自动拷贝值到合适的类型。
以下代码定义了一个继承自的简单类
   

    


导出对象
  =   
 =  
导出对象
_ = 
 _
然后我们打印中的_对象结构如下：

 { 
     =  { 
         =   
         =  { 
             =   {   } 
             =   {   } 
             =   {   } 
             =   {   } 
             =   {   } 
             =   {   } 
            ____ =  ____ {   } 
            ____ =  ____ {   } 
            ____ =  ____ {   } 
            ____ =  ____ {   } 
            ____ =  
             =   {   } 
             =  
        } 
    } 
}
可见，其属性并没有被导出。
中的对象原型是就是。
 继承关系的导出
在中，继承关系是通过原型链 来支持的。对于每一个导出的类，会在中创建一个。对于类，其对象就是 的。
对于所有其他的类，会创建一个属性指向其父类的原型属性的原型对象。如此，中的对象的原型链就反映了中类型的继承关系。
我们让继承子
   

    


在中，它的继承关系是这样的

在中，它的继承关系是这样的

打印对象结构来验证：
导出类
“ =   
 “==
 


 { 
     =  
     =   
     =  { 
         =   {   } 
         =  { 
             =   {   } 
             =   {   } 
             =  
             =  
             =  {
         =   {   } 
         =   {   } 
        ……        
        ____ =  
         =   {   } 
         =  
    } 
        } 
    } 
}
可见，自身的未导出的属性没有在对象中反应出来，其继承的的导出的属性和函数都在对象的原型中。
十、 内存管理
 循环引用
之前已经讲到， 每个对象都持有其对象的强引用，只要有任何一个与特定关联的被持有，这个就会一直存活。如果我们将一个对象导出给，即将这个对象交由的全局对象持有，引用关系是这样的：

这时如果我们在对象中强引用持有或者，便会造成循环引用：

因此在使用时要注意以下几点：
 避免直接使用外部

避免在导出的函数中直接使用

使用   来获取当前能够避免循环引用


错误用法
 =  {
     
}

纠正用法
 =  {
      
}
 避免直接使用外部

避免在导出的函数中直接使用

错误用法
  =  “ 
 = {
     
}

纠正用法
  =  “ 
  =       
 = {
      
}
这里我们使用了来解决这个问题
十一、 

一个对象包含了一个对象，“有条件地持有 ”的特性使其可以自动管理内存。

最基本的用法就是用来在导入到的对象中存储。

不要在在一个导出到的对象中持有对象。因为每个对象都包含了一个对象，这种关系将会导致循环引用，因而可能造成内存泄漏。


 有条件地持有
所谓“有条件地持有 ”，是指在以下两种情况任何一个满足的情况下保证其管理的被持有：可以通过的对象图找到该

可以通过对象图找到该。使用方法可向虚拟机记录该关系反之，如果以上条件都不满足，对象就会将其置为并释放该。

对其包含的的持有关系与下的虚引用 类似。


 为什么不直接用虚引用？
通常我们使用来修饰内需要使用的外部引用以避免循环引用，由于对应的对象内存由虚拟机进行管理并负责回收，这种方法不能准确地控制内的引用的生命周期，可能在内需要使用的时候，其已经被虚拟机回收。
 
 可以直接使用的类方法直接生产一个带的对象 
 

 也可以使用的实例方法来手动管理 
 



 即在代码中依托的对象，虚拟机就是通过来确认中的对象图关系 
十二、 异常处理

的属性可用来接收中抛出的异常

默认的会将设置给的属性

因此，默认的表现就是从中抛给的未处理的异常又被抛回到中，异常并未被捕获处理。

将设置为将会导致认为异常已经被捕获处理。


     

 =     {
       
     = 
}
参考：


____
_




相关推荐
玩转正则表达式踩坑记：当  遇上 一介绍
是一个抓包改包工具，英文中有“欺骗、伪造”之意，与相比它更轻量级，上手简单，因为只能抓和数据包，所以在针对和数据包的抓取上它更加专业。
不仅可以记录客户端和服务器的请求，还能设置断点，修改请求和响应的数据，模拟弱网络环境。如果这些还满足不了你的需求，你还可以安装插件对现有的功能进行扩展，甚至编写脚本实现一些自动化操作。
二的工作原理
当我们浏览网页的时候，实际上浏览器会通过连接以数据包的形式向服务器发起请求的，服务器在接收到请求后会根据后台代码逻辑做出不同的响应。
以上是系统中没有代理，用的是直连网络的情况。这时候如果系统中设置了静态代理，那么浏览器所有外发的请求会被重定向到代理服务器，代理服务器会根据请求的目的将请求再转发至相应的服务器。同理，服务器返回给浏览器的数据也要经过代理这一层。
其实所做的和代理服务器是一样的事情，当我们启用之后，的代理会自动被设置为之所以这么设置是因为是在本地端口进行监听的， 所有会话的都会被拦截。监听的端口号可以在下面这个地方更改：

使用可以访问到的服务
至于为啥可以抓包，其实是利用了类似中间人攻击的技术，看下面这张图：

在了解解密的原理之前，我们首先要知道标准的通信原理。在通信中，运用到了两种加密技术——对称加密技术和非对称加密技术，非对称加密用来在握手过程中传输对称秘钥，而对称加密技术是握手完成之后实际使用的通信加密技术。
实际通信过程可以分为两步走：
第一步，客服端和服务器协商通信使用的密钥对称密钥。
这个过程可以简单描述为——客户端发起请求获取服务器的证书，证书里包含了服务器的公钥。客户端生成通信用的对称密钥，使用服务器的公钥加密后传输给服务器。服务器接收到之后使用自己的私钥解密得到传输用的明文秘钥。
第二步，客服端和服务器使用协商好的密钥进行加密通信。
了解以上常识后我们再看解密的过程其实不难：

客户端发起请求，中间人会拦截来自客户端的请求，并将伪造的证书派发给客户端。同时向服务器请求，获得服务器的证书。

客户端接收到来自中间人的证书，还傻傻的以为这个证书是来自服务器的，并且使用证书里的公钥其实是的公钥对生成的通信秘钥对称密钥加密，发送给服务器。可怜的是这个数据包也会被中间人拦截。

中间人使用自己的私钥将数据包解密，很轻松地得到了通信秘钥。之后使用服务器的公钥对通信密钥加密后传输给服务器。

服务器接收到“客户端”其实是发送给自己的密钥，使用私钥解密得到明文密钥后，建立信任。握手完成。使用对称密钥加密消息， 开始通信。

后面的事情大家应该就明白了，由于持有通信秘钥，客户端和服务器的通信对其始终是透明的。这篇文章里有更加详细的描述，文章链接：


三的使用
网上介绍各种功能的帖子已经不少了，这里就结合我工作中的使用来总结下的几个常见的使用场景。
模拟浏览器白屏的同时不影响正常抓包可学习到：使用设置断点，命令。
因为有收到某些用户反馈在某些环境下会出现白屏现象，为了针对白屏问题进行优化，需要对白屏现象稳定复现。当然浏览器白屏可能是多种因素造成的，浏览器崩溃，网络卡慢导致网页迟迟不能加载，亦有可能网页本身就有问题……
经过和开发同学了解，目前重点要解决的是首页白屏问题，首页从开始导航到渲染成功中间有一段间隙，在这段间隙里网页在视觉上会保持“白屏”的状态，如果这个时间比较长就会给用户不好的体验。可以给这种“白屏”做一个具体的定义：首页打开后如果仍未成功渲染就定义为发生了一次“白屏”现象。测试的时候我们要模拟这种白屏现象，只要找到一种方法可以让标签页打开之内始终保持“白屏”状态即可。
当然对网络进行限速可以达到这个目的，但是我测试中有在模拟白屏的同不影响正常抓包的需求，而一般的限速工具比如电脑管家只是应用级的限速，无法做到针对特定请求限速。
所以首先想到的是使用的设置断点功能，将启动时发起的导航页请求卡住，让其迟迟不能获取导航页服务器的响应，保持这个状态即可成功触发“白屏”现象。点击左下角的这个位置，默认这个位置是空白的，当点击后图标变为向上的箭头时会拦截所有请求，如果是向下的箭头会拦截所有的响应。请求被拦截时会一直保持白屏状态，维持触发“白屏”。全局断点会拦截所有的请求如果只想模拟导航页的白屏，可以设置下，但是如果想模拟导航页白屏的同时不影响其他网页的正常抓包，我们还得求助于命令。


 是一个命令， 命令输入框在的左下方可以找到那个黑色的长条。命令格式： {}，这里直接在下输入 =，就会成功设置断点，只要一发现为=的请求，就会将其中断。而其他的请求仍然可以正常发送。这种方法可以在制造白屏的同时正常抓包。如果想取消之前设置的断点在下直接输入无参数即可。

由此延伸着学习了下提供的一些常见的的命令，列举几个相对来说比较实用的：

：
和 类似，使用方向键上、下，可以切换历史命令；
值得一提的是内置的命令其实是通过会在下一部分介绍定义的，如果这些命令仍旧不能满足你的需求，你可以在对应的地方添加自定义命令。

修改网络请求
在工作中时不时会因某些原因需要修改网络请求，主要有以下场景但不限于此：

当前请求的的内容与将要上线的功能存在局部差异，一般是一些请求参数的差异；

某些后台服务或端口发生变更。


当然你可以使用的对想要修改请求包进行重构——打开标签，将要修改的拖到里即可修改。但是如果想对某些特定的自动的改包，还得使用来做。使用的简要步骤如下：
安装  插件，安装后可以在右侧发现多了一个选项卡：

的语法和有点类似，简单学习下，发现如果要改请求参数可以在这个里对对象的属性进行修改。下面是一段示例代码，可以做到自动对请求中的个别参数修改：

点击左上角的【 】保存修改
重新触发请求，使用抓包，可以看到参数自动被替换为了我们指定的值。
官方文档上列举了比较几类常见的改包场景：

添加或删除一个请求头；

 =   



重定向请求的、、；

 ==
    =

 
    =

 ==
    =
线上文件映射到本地调试可学习到： 
使用可以将线上的文件映射到本地调试，比如线上某个文件有一个，这时你身边的电脑上又没有装环境，你可以将这个文件下载下来在本地修改，然后使用的 功能将所有请求线上的会话重定向到本地文件，这样就可以直接在线上实时观察修改结果了。例如下图里，我使用本地的文件对线上文件“替换”。

注意：线上引用的之前是的，加了 规则后再次请求后，使用本地的替换了原始的。
抓
有时候需要对本地的服务抓包分析，使用也是可以抓到的。在或后面加点“”就可以了，例如：。另外使用本机或机器名访问也是可以抓到的。

使用做自动化
除了拥有强大插件扩展能力，还抽取了其核心能力为开发者封装了一套——，可以将的功能很好的集成到自己的应用里。

不过遗憾的是只支持开发谁让作者是微软的项目经理呢，可以使用为你的集成。

篇幅有限，有兴趣的话可以去官网下文档学习。
四结语
以上就是我个人使用的经验总结，当然的功能远远不止这些，比如：移动端抓包、模拟弱网络、性能测试、自动化等等，甚至可以使用做反向代理，有兴趣的同学可以继续钻研一下，下面是一些学习的网站。
官网：
的论坛作者 偶尔也会在上面回答一些问题：。
不知大家在工作中是否用到、这类工具，是否有使用解决问题的好案例？或者同学们如果有更好的工具推荐，都请在评论区讨论一下吧！

相关推荐
零基础学习抓包改包从抓包开始学习配置开发环境
当前开发环境使用来运行一个镜像，中运行着容器。主机。
该模型可以使开发者使用它们自己喜欢的编辑器操作系统，并且为长期开发的团队提供可控制的环境。
先前的准备
  能够通或以上之上之上
开启了虚拟化，对于未开启虚拟化的电脑，可以在中进行设置。
步骤
 首先为配置。 对于用户而言，需要修改这个字段。通过   查看它的值如果为，需要修改为
    
 项目
 
  
 
  
  创建目录，不要再路径下
 
  
安装虚拟机、推荐使用全局代理。在 目录下执行
 
在这个过程中会下载镜像及其它文件。这一过程中要保证良好的网速。由于需要下一些被墙了的包，务必使用代理。
没有返回错误后，运行 。初始密码如果返回错误，则打开，将下载的镜像删除，重新下载。
编译运行
进入的路径下，
 
 
进行编译。
运行：
 

可以查到类似如下图所示的命令行

执行相应指令即可运行。
常见问题
教程
  
 报错
安装包
   
   
  安装包
  版

出现这种错误往往是秘钥不匹配的结果，在\\目录下输入  会自动生成一个文件，然后在\\\下新建一个文件_，

这个其中的秘钥要和镜像中的__中的内容保持一致

具体参考导语
这个系列其实是写给自己的云计算知识学习笔记——作为一个没有专业背景的小白，从零开始理解云计算的过程。王良明的《云计算通俗讲义》是一本入门的好书，本文根据书中的内容进行了思考提炼，尝试从通俗易懂的角度阐述云计算的优势。
在本系列的前两篇文章中，分别解释了什么是云计算和云计算的分类，本篇将接着往下说明云计算相较传统计算而言，有什么优势。
为了能够更加直观地理解云计算相较传统计算的优势，我们不妨以一个典型的企业需求出发，再根据这个需求，分析云计算解决方案能带来怎样的好处。
一、一个典型的企业需求
一个人数在人以上的公司，其中三分之二的人需要使用计算机办公，需要用到下面的软件系统：

同时，企业还有下面这些要求：

有这样需求的企业非常普遍，不同规模的企业，对应的云计算解决方案也会有一些差异，下面我们就分别看看小型和大型公司的解决方案，以了解云计算能为不同规模的企业带来哪些好处。
二、小型公司的解决方案
对于一个人数在以内的小型公司，为了满足上面的需求，可以使用下面这样的解决方案：

组建私有办公云：购买两台服务器做成互为镜像的云计算中心，服务器上存放着公司全部的文档资料，并安装运行着各种办公、设计软件，两台服务器互为备份，就算其中一台坏了也不会影响办公。每个办公桌上放置一台云终端，给员工每人一个云计算账号和密码，云终端是纯硬件设备，不安装各种应用软件。这样做的好处在于：

向云供应商租用软件、产品数据管理软件和可靠性工程软件：这些软件单独购买价格非常昂贵，对于小公司而言，租用使用权更加合适。比如可以租个账号、个产品数据管理系统账号、个可靠性工程软件账号，一年的租金不到万元。公共云从不关机，数据放在云中，员工可使用租来的账号和密码登录公共云，随时随地访问这些系统和软件。这样做的好处在于：

租用公共云上的一台虚拟机专门运行公司网站和邮件系统：公共云上的虚拟机可实现从不关机，网站和邮件系统随时可用，一年的租金大概在元左右。
如果公司之前用传统计算机办公，可以慢慢实施私有云，等计算机淘汰后替换成云终端，最终实现上面的方案。
对于员工数在到间的中型公司，方案与上面大致相同，只不过在组建私有办公云时，需要更多服务器台，需要租用更多公共云账号，也就不再单独阐述了。
三、大型公司的解决方案
对于一个人数在以上的大型公司，为了满足上面的需求，可以使用下面这样的解决方案：
购买更多服务器，并设计成可伸缩的私有云计算中心：使服务器能随着办公人数的变化唤醒或睡眠，比如晚上加班的人数少，大部分服务器就睡眠，早上随着上班人数的不断增加，更多的服务器被不断唤醒。考虑一定数目的服务器作为备份，允许同时坏几台服务器不影响办公，并对服务器做裸机划分，让不同的部门使用不同的服务器。这样做，除了有刚刚提到的小型企业组建私有办公云的那些好处之外，还有：

购买服务器做成集群，运行大型应用系统：如公司自己的系统、产品数据管理系统、网站系统、邮件系统等，在运行能力富余的情况下，还可以对外出租账号，让其他的中小型公司租用。这样做的好处在于：

本篇文章从一个比较普遍通用的企业需求出发，说明了不同规模企业使用云计算方案有怎样的好处。现实中，不同规模、不同行业的企业用户，云计算的解决方案都会有所差异，云计算的优势需要结合实际的具体的企业需求进行分析。

相关推荐
从零开始理解云计算 ：什么是云计算从零开始理解云计算 ：云计算的分类作者：


概述
为什么要在中调用动态链接库

由于腾讯体系下的许多公共的后台服务  等已经有了非常成熟的编写的，以供应用程序调用，作为在公司内新兴的后台在调用这些公共服务的时候没必要再造一遍轮子，而是可以将这些编译成文件直接使用。

对于一些密集计算型的任务可以由编写好模块，生成文件后由调用。


简介与安装
我们使用来帮助我们调用动态链接库。

的全称是  ，该项目生来就是解决的本地调用问题的，其流程就相当于下的和，亦可以理解为下的平台调用。为了调用一个小小的本地函数而创建一个实在是有点过头了，这个时候，这把杀鸡刀就顺手得多了。有了它，本地调用变得异常简单，因为它在环境中为提供了一套强大的工具集用来调用动态链接库。

 本人的使用环境是的系统。
安装：

全局或局部安装    ，装之前要安装 ，而不支持 ，所以安装了多个版本的读者得留意一下自己当前的版本了。下一键搞定，下还得去改环境变量。并且，如果你使用的版本是，的安装依赖支持语法的，你需要确定当前环境的版本至少高于。
安装：  

注意事项！

只能调用风格的模块。
需要将源码成动态链接库以供调用，在下将源码成文件，在下成文件。本文只阐述文件的调用方法，调用差别不大。
在下如果使用编写的来调用文件，需要将文件为系统共享。

具体方法可以参看命令，这是一个下的动态链接库管理命令。命令的主要用途是在默认搜寻目录和以及动态库配置文件内所列的目录下，搜索出可共享的动态链接库格式如，进而创建出动态装入程序所需的连接和缓存文件。
缓存文件默认为 ，此文件保存已排好序的动态链接库名字列表。通常在系统启动时运行，而当用户安装了一个新的动态链接库时，就需要手工运行这个命令。
煎蛋栗子
这里就不演示利用将文件生成文件了，一般我都是找后台同学帮我把源码文件编译成文件，然后直接拿过来用！哈哈哈！
这个栗子是调用接口发送短信，这个的也非常简单：
 _     

参数是手机号和短信内容，类型都是 ，返回的是一个整型，返回就代表发送成功，其他就是失败，方法名是_。下面是如果利用在中调用这个接口，该接口的源码已经被封装成_这个动态链接库了，我们直接调用就好。
 

  短信下发服务模块
  由于项目是使用 ，所以安装模块需要依赖 以上版本
 

  = 

  _     
  = __  _ {
    _   
}

  = {
     {
          = 
          = 

         调用接口，发送短信
          = _ 

          ===  {
              
        }  {
              
        }
    }
}

 = 

可以看到，在使用调用接口传参时，的 类型在源码中可以直接用类型表示，而对于没有的类型，我们也可以直接写成。并且可以看出来，这里我们使用同步的方式调用_方法的。
获取接口的指针内容
上面这个栗子非常简单，主要是简单在传参和出参的类型。由于和这两种语言的基本类型并不能完全对齐，所以有时候在调用的时候，对于传参出参的处理比较麻烦。经常遇到的一个问题就是如何在中针对的指针类型进行操作。
例如有个接口如下：
    ___   
    _
    ___ 
      ___   
      _ 

可以看到这些接口，有的方法的出参是一个指向类型的指针，有的入参是一个指向类型的指针，如果使用语言调用这个接口，可能会是这样：
 
 
{
     _
      

     = ___ 
    _ = _

     _ ==  {
          \
      
    }

    ____  
     = ____
    __
}

那用如何调用这些接口呢？我们先使用来包装一下这些接口：
  = 
  = 

 
  =   仅仅只是用来演示如何用创建语言中的类型，由于我们这里不知道将来会是啥类型，所以先定义成类型

  =  {
  ___       
  _    
  ___      
  ___       
  _      
}

好啦，下面编写代码来调用这些接口：
  = ___   单纯的计算
 _ = _  调用接口，创建一个指向类型的指针

 _ {
        \
}  {
     将刚刚创建的指针作为入参传入其他方法。
    ____   
      = ____
    __  使用完之后记得调用接口释放指针指向的内存
}

有时候有时候我会相信一切有尽头相爱分离都有时候没有什么会永垂不朽。。。 不对，跑偏了。有时候，我们会把一个指针作为入参传给一个接口，接口方法执行完之后会给这个指针指向的内存地址赋值，那么我们如何把这个值取出来呢？下面给出一个栗子。
接口：
 _    __  __
 _           
 _            
 _ 
 _ 

用包装接口生成的动态链接库，并使用进行一些类型映射。
 
  = 
  = 
 生成兼容的指向类型的指针，即
  = 

  = __   {
    _    
    _       
    _       
    _  
    _  
}

使用调用接口：
 

  = 
 __ = 
 __ = 
  =  _   __ __  调用接口创建一个指针
   {
        \
}  {
     =    的值，固定为，将中的类型转化成中的  
      = 
      = 
      = _      
     ===  {
          =   声明一个 类型的指针，即指向的指针
         如果设置成功，我们可以利用取出刚刚设置的值，并进行比较，看看有木有设置正确。取出来的值，是存在这个值里面的，但是一个指向的指针类型，我们来看看如何取出的值，并与进行比较。
          = _    
         ===  {
             ===    {
                  
            }
        }  {
              
        }
    }  {
          ！
    }
}

关于的详细可以参看他们的官方文档：
值得一提的是，还有一个名为的开源项目，整个流程和类似，不过支持调用、，相当有意思。这样一来，相当于可以用、、扩展了，潜力无限啊。当然，你可以说我直接拿其它语言写程序然后里就好了，不过其灵活性显然是不如以上思路的。

原文链接：


推荐阅读：

腾讯云从零部署站点
一次  内存溢出作者介绍：李帅，腾讯高级工程师，从事过腾讯平台、云机房等项目，贡献者，现负责腾讯云消息队列后台的设计开发。喜欢研究开源代码，对分布式系统非常感兴趣。

是一个流行的开源消息队列系统，是高级消息队列协议标准的实现，由以高性能、健壮、可伸缩性出名的语言开发，并继承了这些优点。业界有较多项目使用，包括、、等。
腾讯云在开发云消息队列系统时，对进行了大量的学习和优化，包括瓶颈分析、内存管理、参数调优等。下文结合和架构来分析实践中遇到的问题，并探讨相应的优化方案。
一 架构分析
图  模型
是一个异步消息传递所使用的应用层协议规范，客户端能够无视消息来源任意发送和接受消息，提供消息的路由、队列等功能。主要由和组成：负责接收消息、转发消息到绑定的队列；存储消息，提供持久化、队列等功能。客户端通过与通信，是多路复用连接中的一条独立的双向数据流通道。
 进程模型
 实现了模型中部分，将和设计成了进程，并用进程的运算实现的功能。

图 进程模型
图中，_进程接收客户端连接，创建_、_、_进程。_接收客户端连接，解析帧；_向客户端返回数据；_解析方法，对消息进行路由，然后发给相应队列进程。__是队列进程，在启动恢复类型队列或创建队列时创建。__是负责消息持久化的进程。
在整个系统中，存在一个_进程，一个__进程，有多少个队列就有多少个__进程，每个客户端连接对应一个_和_进程。
 流控
可以对内存和磁盘使用量设置阈值，当达到阈值后，生产者将被阻塞，直到对应项恢复正常。除了这两个阈值，在正常情况下还用流控 机制来确保稳定性。
进程之间并不共享内存类型除外，而是通过消息传递来通信，每个进程都有自己的进程邮箱。默认没有对进程邮箱大小设限制，所以当有大量消息持续发往某个进程时，会导致该进程邮箱过大，最终内存溢出并崩溃。
在中，如果生产者持续高速发送，而消费者消费速度较低时，如果没有流控，很快就会使内部进程邮箱大小达到内存阈值，阻塞生产者得益于机制，并不会崩溃。然后会进行操作，将内存中的数据持久化到磁盘中。
为了解决该问题，使用了一种基于信用证的流控机制。消息处理进程有一个信用组{，}，默认值为{ }。消息发送者进程向接收者进程发消息，每发一条消息，数量减，直到为，被住；对于接收者，每接收条消息，会向发送一条消息，给予 个，当的时，可以继续向发送消息。

图 生产消息传输路径
　　可以看出基于信用证的流控最终将消息发送进程的发送速度限制在消息处理进程的处理速度内。中与流控有关的进程构成了一个有向无环图。
 进程与
如上所述，消息的存储和队列功能是在进程中实现。为了高效处理入队和出队的消息、避免不必要的磁盘，进程为消息设计了种状态和个内部队列。
种状态包括：，消息的内容和索引都在内存中；，消息的内容在磁盘，索引在内存；，消息的内容在磁盘，索引在磁盘和内存中都有；，消息的内容和索引都在磁盘。对于持久化消息，先将消息的内容和索引保存在磁盘中，然后才处于上面的某种状态即只可能处于、、三种状态之一。
个内部队列包括：、、、、。和队列中只有状态的消息；和包含和状态的消息；队列是消息按序存盘后的一种逻辑队列，只有状态的消息。所以队列并不在内存中，其他个队列则是由 模块实现。
图 内部队列消息传递顺序
消息从入队，出队，在内部队列中传递的过程一般是经顺序到。实际执行并非必然如此：开始时所有队列都为空，消息直接进入没有消息堆积时；内存紧张时将队尾部分消息转入，进而再由转入，此时新来的消息将存入有消息堆积时。
就是在内存紧张时触发的，将大量状态的消息转换为和；如果内存依然紧张，继续将和状态转换为状态。是一个持续过程，涉及到大量消息的多种状态转换，所以的开销较大，严重影响系统性能。
二 问题分析
在生产者、消费者均正常情况下，压测性能非常稳定，保持在一个恒定的速度。当消费者异常或不消费时，则表现极不稳定。

图 消息持久化、无消费场景
测试场景如下，和队列都是持久化的，消息也是持久化的、固定为，并且无消费者。如上图所示，在达到内存阈值后，生产速率降低，并持续较长时间。内存使用情况表明，在内存中的消息数目只有内容，其他消息已经到磁盘中，然而进程内存仍占用。内存使用表明，占用了，占用了。
该情况说明在消息从内存到磁盘后即从、队列转到后，系统中产生了大量的垃圾，而 没有进行及时的垃圾回收。这导致错误的计算了内存使用量，并持续调用流程，直到 隐式垃圾回收。
三 内存管理优化
内存使用量的计算是在_进程内执行的，该进程周期性计算系统内存使用量。同时进程会周期性拉取内存使用量，当内存达到阈值时，触发进程进行。发生后，进程每收到一条新消息都会对内部队列进行每次都会计算出一定数目的消息存盘。
该过程可行的优化方案是：在进程将大部分消息到磁盘后，显式调用，同时将_周期设为、拉取周期设为，这样就能够达到秒级恢复；去掉对每条消息执行的操作，用周期性拉取内存使用量的操作来触发，这样能够更快将消息到磁盘，而且保持这个周期内生产速度不下降。
具体修改可查看：

图 时主动垃圾回收
从修改后效果可以看出，三次都很快结束，前两次相邻较近是因为两个镜像节点分别执行了。
该问题已反馈至社区：　　从图中还可以发现，在时生产速度有一个明显的下降此时未发生。通过流控分析，链路被在进程；经观察发现节点内存使用下降了，说明该节点执行了。 是按进程级别的标记清扫模式，会将当前进程暂停，直至结束。由于在中，一个队列只有一个进程，该进程又会处理大量的消息，产生大量的垃圾。这就导致该进程较慢，进而流控上游更长时间。
查看代码发现，进程的_模型在正常的逻辑中调用了，该操作可能导致两次不必要的。优化掉对系统稳定性有一些帮助。
对流控可能比较好的优化方案是：用多个进程来实现一个队列，这样可以降低_被单个进程的概率，同时在单队列的场景下也能更好利用多核的特性。不过该方案对现有的架构改动很大，难度也很大。
四 参数调优
可优化的参数分为两个部分，部分和自身。
___：大于或等于核时，将异步线程池数目设为左右，提高文件性能。
_：开启 编译选项相当于的技术，能够提高性能。在 后已经相当稳定，官方也建议开启此选项。
____： 版本引入了将小消息直接存入队列索引_的优化，消息持久化直接在进程中处理，不再通过_进程。由于消息在个内部队列中是有序的，所以不再需要额外的位置索引__。该优化提高了系统性能左右。
___：用于配置内存阈值，建议小于，因为 在最坏情况下会消耗一倍的内存。
_____：用于配置阈值，该值为时，直接触发内存满阈值，生产者。
____：文件是_为避免过多磁盘寻址添加的一层缓冲内存文件。对于生产消费正常的情况，消息生产和消费的记录在文件中一致，则不用再保存；对于无消费者情况，该文件增加了一次多余的操作。
五 总结
在年发布第一个版本时，只有行代码，到现在已经加入了非常多的特性，但基本架构没有变。从多核的角度看，流控机制和单进程之间存在一些冲突，对消费者异常这种场景，还需要从整个架构方面做更多优化。
除了上述内容，在、、可靠交付、扩展支持等方面也做了大量的工作，这些都值得深入的学习。
欢迎使用腾讯云产品

参考__


相关推荐
进程结构分析与性能调优
 什么是腾讯云消息队列？导语
最近手头开发维护的一个辅助小工具经常接到投诉可用性问题 于是抽时间定位了下 一看吓一跳 起初不起眼的一个组件的日志量直接翻了两个数量级。 这怎么吃得消  幸好当时工具是写的的周边工具集还是挺丰富和方便的于是开启了调优之路。
背景
首先简介一下腾讯云组件的日志查询工具， 之前为了快速解决问题 采用了 的方案  实时从生产环节的机器进行尾随 然后通过程序进行规则处理结构化  然后写入到后端进行持久化  然后另外有个前端进行查询，结构大概长这样。

今天的问题主角是上图的程序 它是日志收集和处理的核心部件。 日志系统运营到一段时间之后 发现随着业务的增长 请求量呈攀升之势。 特别是现网广州上海北京三个地域国内用户太热情高涨了 白天高峰期的时候会发现日志的写入速度跟不上采集的数据现象是现网刚刚产生的日志数据到写入存储之间的时间差越来越长。导致刚发生的请求需要等十几分钟才能查询到 以及每小时后面几分钟的日志查询不到的 现象如下图：

解决办法
程序主要分日志采集 日志解析处理日志存储三个步骤。
肉眼调试法
简单打印调试分析了下 排除了采集的性能问题理论上这块的资源是绰绰有余的 实践方法是把收集到的日志马上输出到标准输出 然后和现网机器日志执行 进行对比观察 可以观察到两者几乎是同步输出的 不存在拖后腿现象。
批量写入优化
然后是解析处理这个环节的排查 排查效仿上一步骤 把存储的步骤换成输出到标准输出观察 观察了十来分钟发现基本和现网一致。于是重点改进存储这块的性能 采取的办法是把数据写入行为从逐行写入改为为批量写入。 具体做法是把每行日志数据缓存下来 使用策略 属于同一个请求的日志的行都会缓存到同一个 检测到该请求的日志已经完了的时候一次性把同一个请求的多行日志写入大致逻辑是这样。
原有的处理逻辑
 {        
   = 
  
}
缓存策略后的处理逻辑
 {        
   = 
   = 
    {
    
  }  {
          
  }
}
具体代码戳这里
寻找瓶颈
优化了批量写入后很得部署运行 跑了一段时间后发现广州的效率的确得到提升 然而上海地域由于还没扩容 还是没达到预期效果 每小时还是有接近十来分钟的间隔差距。 这时候肉眼和经验派用不上用场了 于是借助开源性能压测工具来查找瓶颈。
火焰图简介
之前在  同学了解到了火焰图这个工具 它对程序的性能分析做了非常直观的可视化工作感受下它的样子。戳这里可以感受它的交互。

简单介绍下怎么看这个图 这里用的是火焰图 纵轴代表的是函数调用栈深度越高代表调用栈越深最顶层格子就是最后被调用的函数。横轴是由一系列格子按字母排序的每个格子代表一个行数调用。最底层的格子是入口函数一般是或者启动进程加载函数等。格子的宽度代表该函数执行的时间占用比例最后图的颜色默认是没什么含义的可以当作色盲测试。更多原理和细节可以看 这篇以及源码作者的是个学习系统实战知识的宝矿。
火焰图实践
原生火焰图生成工具使用起需要各种工具一起上 研究了一圈最后选了开源的压测工具 支持各种可视化图表 使用起来非常方便只需要在的地方加上_ 和程序入口加上两三行代码即可

      {  }
然后启动程序 然后运行对程序进行无情的鞭策。
 =     
最后在当前目录生成了一个文件 在浏览器打开即可调用栈火焰图。

从图中可以看到主要作业函数所占用的比例大约是三分之一这里右边的三分之二主要是的系统调用和程序的主要干活负载进程无关 这种格式的火焰图还带有交互功能 鼠标点击的格子即可展开函数放大观察

可以观察到里面有一半时间阻塞在网络数据接收调度上 所以这又进一步验证了采集端不够成瓶颈并且绰绰有余的肉眼观测现象 另外占一半时间的函数做的就是读 传过来的每一行日志然后进行处理解析和存储 展开进一步观测

可以看到里面的两大步骤解析和存储分别对应的是和函数可以看到改成批量后的比例已经只占用不到的时间 主要瓶颈在于 而的调用栈发现两座正则初始化大山 于是猛然想到代码里面有类似于
 = ` \{}`
 = `\\{}\{}\{}\`
这种日志格式固定八百年不会改变的变量不需要在每一行日志处理都进行 可以用全局变量进行提前初始化。另外一些变化较多但是量也有限的正则也可以用缓存存起来避免重复初始化 于是动手调整一把。
调整后终于降下来了 现在解析和存储占用时间比例相对。

而在的整体占用时间也降下来了还多出不少空闲。

最后总览全图可以看到主负载函数也从原来的三分之一降到 不到
结果
调整后程序再次上线运行    时间差距缩短到以内符合期望。
目前可以轻松应付广州上海北京等大地域的高峰期请求目测应该可以撑到业务翻翻期待下次瓶颈的到来。摘要
传统数据库的设计假设磁盘为主要存储设备，其性能取决于基于代价模型的优化。然而，当前数据库运行的平台已逐渐转移到由多核处理器、大内存和以闪存为代表的低延迟存储所构成的新型硬件平台上。在大多数情况下，工作数据集能够全部加载到内存或者闪存等高速存储器中。这样，数据库的性能瓶颈由传统的转移到了上。而传统数据库的加锁操作、闩锁竞争、日志管理以及缓冲区管理在设计时均未考虑到多核处理器的使用，因而成为了限制利用率的明显瓶颈。改变传统数据库的优化重点以适应硬件的发展对应用而言是十分必要的。本文针对当前新的应用背景，主要围绕数据库中日志管理器、在多核平台下已有的优化技术进行详细介绍和归纳总结。
背景
摩尔定律揭示了集成电路上晶体管集成度的增长规律，摩尔定律首先表现为主频的持续增长，然后又表现为核心数量的持续增长。的频率持续逐年增长，加上其指令执行的并行度也在增加，使得单线程的工作性能不断提高。早在年，的频率就已经达到。然而，高频率的带来的是更多的能耗，现实应用中不一定会带来高的性价比，因而阻止主频的进一步发展。这个问题使得近年来的发展方向产生了转变。为了进一步优化的性能，生产商倾向于在单个上增加更多的处理核心。开始转向使用并行多线程和片上多处理器技术，以替代单处理流的高度复杂技术。生产商不再竞争速度而是转向提高并行度。按照最近多核的发展趋势，单个上的核数基本每两年翻一倍。大部分研究人员预测，的核数会继续增长一段时间。为了更好地利用新的并行处理能力，工程师需要修改或重新设计软件系统。而基础软件，包括操作系统、服务器和数据库等，则最先遇到复杂的多核架构带来的扩展性问题。
从一开始，数据库存储引擎的研究就是定位在高负载下的高性能和可靠性。一方面，数据的可靠性和一致性大都通过在共享数据结构上的封锁机制实现；另一方面，在现代多核架构下，性能的提升必须通过利用更高程度的并行性。如何解决这两者之间的矛盾是一个很大的挑战。现实中，关系数据库系统大部分是基于优化和面向单处理器的陈旧设计思想，并不适合多核处理器的架构。
以事务处理为主的数据库系统多数依赖并发取得高吞吐率。并发是通过多线程或者多进程实现的。理想情况下，随着硬件上下文的增加他们应该具备良好的扩展性，特别是针对以读为主工作负载。实际上，为了维护一致性和持久性，数据库系统大量使用共享数据结构和同步原语。在高度并行的环境下，对共享数据进行频繁的原子更新不得不由线程串行地执行。因此，用于保护共享数据结构的同步原语会导致很大的同步开销。这些同步原语大量存在于共享内存缓冲区、锁表、索引与日志管理器中。此外，丰富的硬件上下文使得并行线程竞争硬件资源，例如，高速缓存的争用将降低缓存命中率从而增加内存访问延迟。另外，传统的封锁方式例如阻塞和忙等待策略在多核环境下效率低下。增加的并行度还会导致更大异构的工作负载，这给索引数据结构里的读写同步控制原语也造成更多的压力。总之，所有这些原因导致了运行在多核架构上的数据库系统的性能瓶颈。近年来，学者们提出许多不同的思想和方法，用于重新构建多核环境下的数据库系统。
本文主要对数据库的日志管理器的多核优化技术做整理归纳。
日志管理器优化技术
日志管理器是数据库系统的一个重要部件。几乎所有的数据库系统都使用集中式的预先写日志策略避免在系统崩溃的时候带来的数据的损坏和丢失已提交工作以保证事务的持久性。由于其集中式的设计和对的依赖使得它很容易成为性能瓶颈。较长的日志刷新时间、由日志带来的锁竞争、日志缓冲区上的竞争都会影响系统的扩展性。日志操作给系统带来的延迟主要是四类 系统必须保证事务提交之前日志必须写到非易失性存储介质；因为磁盘的访问时间是毫秒级别的，日志刷盘通常为事务中执行时间最长的部分；此外，当很多小的请求使得记录日志的设备例如上达到饱和状态时，写日志的延迟为串行执行时间；在写日志的过程中，事务一直持有写锁，直到结束；在很多工作负载中，这都会造成瓶颈，特别是锁竞争激烈的场景；日志刷盘除了延迟以外还有其他开销；在等待完成的过程中，事务不能继续执行，代理线程必须被挂起，直到完成；与延迟不同，上下文切换和调度决策会消耗时间，不能重叠执行其它任务；多核硬件环境下同时运行的线程很多，这使得操作系统调度器会负载过重；除了锁的竞争和上下文切换的开销，许多线程同时想要执行日志插入操作；集中式的日志缓冲区有明显的临界区，其上的竞争显然也会影响系统的扩展性。
为了提高日志管理器的扩展性，必须设法提高日志的效率，并且减少日志临界区的数量和缩短关键路径的长度。
成组提交技术通过将许多小的日志刷盘的请求组合到单个操作减缓磁盘的压力，减少等待时间。成组提交技术能够减少磁盘访问次数和增大写入的磁盘块，进而减少磁头转动获得更好的响应时间。但是成组提交技术不能消除不必要的上下文切换开销，因为过多的事务会阻塞来自日志管理器的挂起通知。异步提交技术结合了成组提交技术的优点将许多日志刷盘的请求组合到一起，并且允许事务结束而不用等待刷新日志操作完成。这个优化将日志刷盘操作从关键路径上完全移除，但是牺牲了事务持久性这个特性，也就是说，已提交工作有可能由于系统崩溃而丢失。
有研究人员针对多核平台优化了的写日志操作。他们重新审视了提前锁释放技术  ，，并在四个不同延迟的非易失性设备上测试了的有效性。技术是指事务在记录到达磁盘之前可以释放锁，减少持有锁的时间。在技术下，只有提交事务需要等待结束。不存在其它事务需要等待提交事务的锁而与提交事务一起等待结束。实验结果表明在越慢的设备上，获得收益越好。即使是在像上的快速磁盘设备，也可以获得比较好的收益短事务的执行时间比要短得多。另外，数据的偏斜程度也对造成影响。如果数据偏斜度小，对锁的竞争不激烈，减缓锁的竞争效果不大。如果数据的偏斜度大，锁的竞争很激烈，即使在没有等待日志刷盘的情况下， 效果也不好。按照的访问都是集中在的数据上的原则，对应数据的偏斜度为左右，这时候锁的竞争程度刚好是的优化点。针对多核平台上过多的调度而导致的系统瓶颈和上下文切换带来的开销，流水线方式写日志是一种新的记录日志的方法。流水线刷新日志类似异步提交方式不用在等待的时候将线程挂起，从而不会有上下文切换的开销。但是不同于异步提交方式，流水线刷新不将结果返回给客户端，而是转而执行其它事务。守护进程在完成日志刷盘动作以后，通知代理线程进程返回继续执行后续事务。实验表明，流水线刷新和组合的效果能够达到异步提交的性能，而且在系统崩溃的时候具有可恢复性。
为减缓多核情况下日志缓冲区上的竞争，技术人员设计了三种新的日志缓冲区管理方法。传统的写日志缓冲区需要以下三个步骤：首先获取写日志缓冲区上的排他锁。如果当时正好有其它的服务子线程在写日志缓冲区，则此子线程必须等待直到获得写日志缓冲区上的写锁； 线程将日志记录复制到相应的日志缓冲区 释放缓冲区上的锁。由于它的简单性，这种方法具有吸引力。这个方法的缺点是：即使是缓冲区从来不会重叠的情况下，填充日志缓冲区的操作也是串行化执行。图展示了由于单一的长日志记录会给后续的线程造成比较大的延迟。日志记录由一个头部加上任意长度的值组成。日志记录结构体空间的申请是可复合的，也就是两个连续的日志记录的缓冲区申请也可以由一个头部加上任意长度的属性值组成。可以利用这种空间的可复合性将线程对日志缓冲区的填充按组进行。每一个组都有一个组织者。
一个组只有组织者才要竞争缓冲区上的锁，且一个组只有最后离开的线程需要等待锁的释放。组织者在等待互斥变量的时候，后面到来的请求可以“回退”到一个数组将他们的请求组合到一起。如图所示，组内日志缓冲区的填充可以并行执行，但组之间仍然串行执行。由于日志缓冲的填充不具有串行特征，只要满足以的顺序将日志写回即可。因此，线程申请的锁可以在获得缓冲区以后马上释放。因此将缓冲区填充与锁的持有解耦合。缓冲区的填充可以按流水线的方式进行：下一个缓冲区的填充可以立刻开始，只要线程获得日志缓冲区空间。如图所示，将锁的持有与缓冲区的填充解耦合可以消除长日志记录对缓冲区填充的影响。前面讨论的两种方法具有互补性，因此将两种方法组合        一起日志缓冲区上的竞争限制在某一个常数下，同时也消除日志记录的大小对刷新日志的影响。
 图 日志记录写入日志缓冲区算法图示
总结
优化日志管理器可以显著提升数据库系统的性能。有相应的实验表明，经过以上优化，数据库系统的性能可以提升左右。
值得一提的是随着像固态硬盘的新闪存产品开始进入主流的计算机市场，闪存技术被认为是磁盘技术的替代。最近也有相关研究利用闪存技术提高数据库系统性能。固态硬盘可以显著提高事务写日志的性能。他们的做法主要关注以下四点突破带宽限制，利用多闪存设备，并行化提高刷新日志操作性能；解决由于设备擦除操作而引起的不同的写延迟；高效的系统恢复处理；将闪存设备与磁盘设备结合起来获得更好的日志操作和系统恢复性能。

文章来自：腾讯架构师作者  李琦  腾讯高级工程师  就职于网络平台部。曾负责公司海量运营系统的规划设计，如 、、、、 等网络运营平台，以及参与腾讯云云主机、云网络、云安全等基础产品规划和大客户的需求管理。目前主要聚焦在私有云基础架构的统一监管控，把腾讯基础架构的自动化管理能力以产品化方式输出。

引言
云计算经过多年的发展，逐渐从概念到渐为人认知、到接受、到现在全行业拥抱上云，云的客户也从最初的中小初创互联网企业为主，逐步渗透到大型互联网企业、金融企业、传统企业，甚至到大型央企政企。
因此，为了应对不同客户的市场需求，云的形态也开始多样化，根据客户对资源控制权的不同，基本分为以下几类：

图 云的集中形态
在传统公有云中，计算资源主要是虚拟机的形态，以至于在云计算早期一段时间内，大部分人认为云计算技术 = 虚拟机技术，这种形态下的云，你只能接触到虚拟机，任何物理资源对你都是透明的；
当这些物理资源产生冲突时，势必会影响到你的业务，所以当业务要求越来越高，他们对资源的控制权也慢慢提升，希望能独享物理机，就有了裸机云；
进一步，他们还希望能自定义组网，方便其原有业务的迁移或重新规划，于是有了黑石云的解决方案顺便提一下，其实“黑石”的核心是支持的虚拟网络，而非外界解读的物理机售卖；
到最后连数据中心也要求独享，就有了私有云。这时，相当于裸奔了，原来隐藏在客户背后的供应链管理、运营支撑管理、异常发现和处理等机制、系统稳定性易用性安全性、运维背后的人海战术等，都表露无遗，要把数据中心真正“交”给客户，不是那么简单的。
公有云  私有云
关于私有云和公有云的 ，业界一直有争论，大部分都认为公有云才是未来，私有云是历史的倒退，尤其是技术发展的倒退，觉得这东西就是以前传统系统集成商干的事情，不是互联网人变革的上流新事情。
其实，这种说法是片面的，他们只看到了“私有”这部分，要“私有”并不难，但关键是在“云”这部分，即提供一套私有云管理系统，实现整个的自动化闭环管理，由之前的手工管理变成系统管理，减低用户的使用门槛。从某种程度来讲，私有云其实是公有云发展到一定阶段成熟后，一种产品化的结果，也是能力输出的一种最极致的表现。
另一方面，受限于安全合规的要求和商业竞争的考虑，传统金融尤其银行证券、央企国企政企和大型传统企业，一般不会把核心业务放在公有云上，宁愿花更大的成本代价，也要以私有化独享的形态来掌控自己的核心业务，因此，在很长一段时间内，私有云或混合云，都还是这些金主的主要考虑方案。
 诞生
关键词：站在巨人的肩膀，服务器网络融合
为什么会有 ？
去年，腾讯云迎来了一位新筹民营银行客户  上海华通银行。
如下图，按银监会的要求，金融机构基本都是两地三中心， 之间通过腾讯的互联，访问公网则通过腾讯的 ，他们的和腾讯内部是不能互通的，因此是独立隔离的私有环境。 在外部接入方面严格控制，通过  实现点对点接入，从物理层面来做安全防护， 接入后，再通过云管理门户，实现对所有资源的管理。
图 银行私有云整体网络示意图
在公有云环境中，用户只需要接触到虚拟的云资源，比如云主机、云硬盘、云数据库等，公有云会提供配套的自动化管理系统，对这些云资源进行管理，如生产、分配、回收等。
但在私有云的环境里，所有基础架构设施均由用户自行管理，包括物理服务器资源的初始化安装、远程开关机、重启和部署重装等操作，如果还是通过以往人工和现场的方式来管理，效率会非常低，进而影响到云资源的管理。
因此，在私有云的环境里，需要有一套类似云资源管理的自动化系统，实现物理服务器资源导入、自动发现、电源管理、系统部署、配置初始化和回收等生命周期的自动化管理，就是在这样的需求背景下应运而生的。
的产品定位
全称   ，顾名思义，定位是数据中心操作系统，这是一个很泛的叫法，业界完全对标的独立产品几乎没有。回顾 这年多摸着石头的不断探索、思考，经过近  个迭代版本的试错验证，从设计到开发到应用落地，慢慢其定位也越来越清晰–私有云的物理基础架构管理引擎。如果参考行业私有云老大 –  的模型，正好补充了 对物理资源监管控能力，如下图红框部分：图 逻辑架构图
下面分别从两个维度介绍一下的定位：
从资源管理的角度看：私有云里会有腾讯自采物理资源腾讯标准服务器和网络设备、客户托管设备和云产品虚拟机、云储存、云负载均衡、云数据库等， 定位是负责腾讯自采物理资源的监管控，同时提供中心化的，实现基础架构设施数据的资源管理。
从逻辑功能的角度看：如果把数据中心当作一个整体业务，最低配的银行私有云至少包括四大模块：接入层模块、逻辑层模块和 虚拟化模块、数据层模块， 负责外部或内部的负载均衡接入， 和  分别负责物理和虚拟资源的逻辑处理如生产、监控、再分配、回收等， 则是提供金融级数据库集群。
的设计思想
和支撑腾讯海量业务的需求场景不同， 主要是面向传统企业，支撑大概万台服务器含虚拟机规模的私有环境，产品设计上和现在内部系统会很大的差异，重点不是物理分布式架构和高并发能力，而是  高度集成、轻量简单、易部署、易运维、易扩展：

图 设计理念
的产品解决方案
 的产品解决方案如下图，按其功能主要分为四大子产品：图 产品解决方案
：涵盖了服务器、网络设备、网络端口、 机架机位、 专线、 出口、资源等物理信息的生命周期管理，基于腾讯多年  运营经验而建立其  模型，并提供  智能审计模块，形成数据管理闭环，保证  基础数据的完整性和准确性。最终，以  方式提供给  或其他云组件，并封装好常用的裂解分配回收和服务器搬迁等流程逻辑。图 的关系项
  ：物理裸机管理引擎，负责物理裸机的自动发现、带外管理、自动化部署、命令下发文件传输等自动化管控运维，通过外部扩展，还可以实现私有云其他组件，如控制节点、计算节点、存储节点等初始化部署。
：服务器和网络融合的一站式监控引擎，涵盖服务器基础采集、服务器硬件部件采集、服务器进程端口采集、自定义业务采集、网络设备采集、网络质量探测、网络应用数据流分析，并支持把原始监控数据转发第三方平台。
：服务器和网络融合的一站式告警引擎，实现服务器硬件异常告警、服务器性能状态告警、服务器进程端口告警、网络设备性能和状态告警、网络设备日志告警、网络质量告警、自定义业务数值字符告警，并支持把原始告警数据转发给第三方平台。
从业务场景讲， 希望实现从物理资源准备、生产到运营的闭环管理如下图：图 的业务场景
资源准备阶段：经过上游资源的申请、采购、建设交付后，得到物理配置信息和资源规划信息 资源等，并导入  的 ，建立基础架构设施数据的 ；
资源生产阶段：现场把服务器物理上架，并接上电源线后，即可进入远程管理阶段，服务器会通过带外  自动发送  请求到 ； 根据信息进行配置验收无误后，分配带外、标记为“已开电”状态，并纳入裸机资源池；然后通过带外  即可远程初始化、开机、关机和重启；当接收到上层部署需求初始密码等后，会远程触发服务器进入状态，在  环境通过  获取部署 ，通过拉取对应的镜像和配置文件，完成部署，并通过后置初始化脚本，实现网络的配置，以及应用组件的批量部署，实现私有云的初始化，全程可以做到服务器  ；
资源运营阶段：服务器和网络设备的监控采集和异常故障告警，以及服务器和网络设备的日常运营管控。
图 管理控制台
的技术解决方案：
逻辑架构图 的逻辑架构图
 采用模块化设计，每个模块红框负责部分功能，如  负责带外部署， 负责服务器信息采集管理， 负责配置管理等。模块可单独部署，成为独立的产品组件。模块之间基本没有依赖性除外，维护和故障排查起来比较方便，同时易于进行模块扩展。
模块内部采用分层式设计， 负责模块接入， 可进行任务调度、数据存储等控制逻辑， 完成任务执行、数据转发等， 在业务机器上负责信息采集、文件传输等。模块化分层式设计，使得  结构清晰，容灾方案也相对简单。
软件交付方式
为了实现离线部署，以软件包或镜像形式交付，部署在物理服务器上。
软件部署方式
 采用模块化分层式设计，支持集中式部署和分布式部署。集中式部署：除 部署在业务服务器外，其它程序部署在一台控制服务器；分布式部署：分为中央控制服务器如、、、区域控制服务器如、、和部署在业务服务器，可实现多机房或区域的统一管理。
所以说， 是站在巨人的肩膀上，把网平多年来海量运营经验和工具系统进行了系统化的沉淀、浓缩，并结合私有云的和传统企业需求场景的一次全新的能力输出，服务器和网络  融合管理的一次新尝试。
图 系统演进
  成长展望
关键词：拥抱外部环境，走出自己的路随着  逐步成熟，以及外部客户需求的“洗礼”， 从开始，逐步拥抱外部环境，抛开腾讯海量标准化机制的一些束缚，增加客户环境适配和自定义的能力，走出自己特色的路。图  的自定义能力
集成第三方组件监控涵盖主流中间件数据库虚拟机容器和开源组件的常用指标，开箱即用。图 集成的第三方组件
自定义  监控能适配不同厂家型号指标的  信息采集，实现了一套  采集通用框架，用户只需要定义好网络设备采集模板，系统即能自动识别通用  和设备的私有 ，实现  的统一采集调度和数据处理加工，解决不同私有云客户的网络设备兼容问题。
自定义业务监控和告警监控和告警与 项解耦，支持用户自定义对象如集群、集群、交易数据、多维指标数据如地域、门店、支付方式、交易金额等的接入，和之前项特性的一维度管理机制相比，更通用、门槛更低、更贴近外部客户的场景，尤其在业务监控方面。 
服务器自定义部署能力将原来标准化的服务器部署中的关键参数进行提炼、建模，实现、分区、、镜像、网络等部署方案的自定义，以满足不同客户的服务器环境需求。
 ，在路上，路还很长…
欢迎关注腾讯织云公众号，获取织云最新技术资讯从上古时期的口口相传 到古代的竹简书籍 再到现代的电脑网络 不同的传承方式映照着人类文明不同的历史进程。当下，人工智能时代悄然而至，、 绝艺纷纷刷爆了人们的眼球，你还在说人工智能时代离你很远吗？
最近腾讯   主任张潼博士在内部做了一次分享，在短短  多分钟时间里帮助大家快速了解人工智能。腾讯云技术社区经张潼博士授权，将此次分享的实录分享给社区用户。读完本文后，你将了解什么是？有哪些研究方向和应用场景？作为小白，对你有什么影响？为什么现在又爆发热潮？的未来又是怎样的？
腾讯   主任张潼
、人工智能的概念是什么？
人工智能 ，是指计算机像人一样拥有智能能力，是一个融合计算机科学、统计学、脑神经学和社会科学的前沿综合学科，可以代替人类实现识别、认知，分析和决策等多种功能。如当你说一句话时，机器能够识别成文字，并理解你话的意思，进行分析和对话等。

、 的发展有哪些关键里程碑？
 在五六十年代时正式提出， 年代，国际象棋冠军卡斯帕罗夫与深蓝 计算机决战，深蓝获胜，这是人工智能发展的一个重要里程碑。而  年， 的  赢了韩国棋手李世石，再度引发  热潮。今年，腾讯推出围棋软件绝艺大放异彩，这些都代表了特定时期  发展的技术水平。

 不断爆发热潮，是与基础设施的进步和科技的更新分不开的，从  年代  计算机的兴起到  年 、异构计算等硬件设施的发展，都为人工智能复兴奠定了基础。

同时，互联网及移动互联网的发展也带来了一系列数据能力，使人工智能能力得以提高。而且，运算能力也从传统的以  为主导到以  为主导，这对  有很大变革。算法技术的更新助力于人工智能的兴起，最早期的算法一般是传统的统计算法，如  年代的神经网络， 年代的浅层， 年左右的 、、 的  等等。随着数据量增大，计算能力变强，深度学习的影响也越来越大。 年之后，深度学习的兴起，带动了现今人工智能发展的高潮。
、 有哪些研究领域和分支？
人工智能研究的领域主要有五层，最底层是基础设施建设，包含数据和计算能力两部分，数据越大，人工智能的能力越强。往上一层为算法，如卷积神经网络、 序列学习、、深度学习等算法，都是机器学习的算法。第三层为重要的技术方向和问题，如计算机视觉，语音工程，自然语言处理等。还有另外的一些类似决策系统，像  编辑注：增强学习，或像一些大数据分析的统计系统，这些都能在机器学习算法上产生。第四层为具体的技术，如图像识别、语音识别、机器翻译等等。最顶端为行业的解决方案，如人工智能在金融、医疗、互联网、交通和游戏等上的应用，这是我们所关心它能带来的价值。 

值得一提的是机器学习同深度学习之间还是有所区别的，机器学习是指计算机的算法能够像人一样，从数据中找到信息，从而学习一些规律。虽然深度学习是机器学习的一种，但深度学习是利用深度的神经网络，将模型处理得更为复杂，从而使模型对数据的理解更加深入。   
机器学习有三类，第一类是无监督学习，指的是从信息出发自动寻找规律，并将其分成各种类别，有时也称聚类问题。第二类是监督学习，监督学习指的是给历史一个标签，运用模型预测结果。如有一个水果，我们根据水果的形状和颜色去判断到底是香蕉还是苹果，这就是一个监督学习的例子。最后一类为强化学习，是指可以用来支持人们去做决策和规划的一个学习方式，它是对人的一些动作、行为产生奖励的回馈机制，通过这个回馈机制促进学习，这与人类的学习相似，所以强化学习是目前研究的重要方向之一。

、 有哪些应用场景？
人工智能的应用场景主要有以下几个方面：
在计算机视觉上， 年左右，人们开始用机器学习，用人工特征来做比较好的计算机视觉系统。如车牌识别、安防、人脸等技术。而深度学习则逐渐运用机器代替人工来学习特征，扩大了其应用场景，如无人车、电商等领域。

在语音技术上， 年后，深度学习的广泛应用使语音识别的准确率大幅提升，像 、  和  等，可以实现不同语言间的交流，从语音中说一段话，随之将其翻译为另一种文字；再如智能助手，你可以对手机说一段话，它能帮助你完成一些任务。与图像相比，自然语言更难、更复杂，不仅需要认知，还需要理解。

在自然语言处理上，目前一个比较重大的突破是机器翻译，这大大提高了原来的机器翻译水平，举个例子， 的  系统，是人工智能的一个标杆性的事件。 年左右，  的系统在一档综艺节目上，和人类冠军进行自然语言的问答并获胜，代表了计算机能力的显著提高。

在决策系统上，决策系统的发展是随着棋类问题的解决而不断提升，从  年代西洋跳棋开始，到  年代的国际象棋对弈，机器的胜利都标志了科技的进步，决策系统可以在自动化、量化投资等系统上广泛应用。

在大数据应用上，可以通过你之前看到的文章，理解你所喜欢的内容而进行更精准的推荐；分析各个股票的行情，进行量化交易；分析所有的像客户的一些喜好而进行精准的营销等。机器通过一系列的数据进行判别，找出最适合的一些策略而反馈给我们。

、腾讯在  领域的布局是怎样的？
从   来讲，首先进行前沿研究。针对腾讯的业务来解决一些行业的问题而促进人工智能的发展。同时，发展游戏 ，腾讯去做绝艺，与腾讯的游戏场景分不开。不光是在围棋场景，在其他棋类、游戏场景中，都可以嵌入 ，这将是未来的一个发展方向。再次，腾讯是一个社交公司，我们可以围绕着像智能助手、社交机器人等做一些尝试，积累很多的  的能力。第四，腾讯注重内容，注重版权，注重自己生成内容。这就需要进行个性化推荐，包括搜索、对内容的生成等，都可以做一些研究。最后，我们希望将这些能力开放整合，如通过语音开放给其他行业，使大家能够利用这些能力。

、 的未来是怎么样？
在计算机视觉上，未来的人工智能应更加注重效果的优化，加强计算机视觉在不同场景、问题上的应用。
在语音场景下，当前的语音识别虽然在特定的场景安静的环境下，已经能够得到和人类相似的水平。但在噪音情景下仍有挑战，如原场识别、口语、方言等长尾内容。未来需增强计算能力、提高数据量和提升算法等来解决这个问题。
在自然语言处理中，机器的优势在于拥有更多的记忆能力，但却欠缺语意理解能力，包括对口语不规范的用语识别和认知等。人说话时，是与物理事件学相联系的，比如一个人说电脑，人知道这个电脑意味着什么，或者它是能够干些什么，而在自然语言里，它仅仅将电脑作为一个孤立的词，不会去产生类似的联想，自然语言的联想只是通过在文本上和其他所共现的一些词的联想， 并不是物理事件里的联想。所以如果要真的解决自然语言的问题，将来需要去建立从文本到物理事件的一个映射，但目前仍没有很好的解决方法。因此，这是未来着重考虑的一个研究方向。
当下的决策规划系统存在两个问题，第一是不通用，即学习知识的不可迁移性，如用一个方法学了下围棋，不能直接将该方法转移到下象棋中，第二是大量模拟数据。所以它有两个目标，一个是算法的提升，如何解决数据稀少或怎么自动能够产生模拟数据的问题，另一个是自适应能力，当数据产生变化的时候，它能够去适应变化，而不是能力有所下降。所有一系列这些问题，都是下一个五或十年我们希望很快解决的。

未来，我们需要去探讨：
创造力，对于创造力目前有一定的方法慢慢研究，从而使机器开始具有人的一些创造力。但它的通用性受限，特别是对物理事件的理解，只有把这些问题解决了，才有可能造出像人一样的机器人，成为人的意义上的智能。
学科交叉融合，未来需要探索更多的算法和交叉科学上等等的一些融合。所以人工智能在下一个阶段既有非常广阔的应用前景，也有很多挑战。
总结
纵观人工智能的发展，既有低谷，又有高潮。从历史的经验上来看，人工智能的发展既离不开基础设施的发展，也受到游戏  的推动，游戏  能帮助我们更加直观的了解机器带来的智能能力。虽然，当前人工智能大多集中在感知分析阶段，未涉及到深层的认知加工，但我们有理由相信，在未来，人工智能的发展会越来越广泛，它会促进全行业数据的加速产生，推动移动化计算的发展，在垂直领域， 也会向商业化发展靠拢，创造出更多的直接经济价值。之前写过一篇 一个框架解决几乎所有机器学习问题 但是没有具体的例子和代码，今天看到一个不错的  上的      来解析一下，源码可以直接点这个链接。
在这篇文章中可以学到一个完整的运用机器学习解决分析问题的过程，它包括了解决问题的一般流程，描述性统计的常用方法，数据清洗的常用方法，如何由给定的普通变量启发式思考其他影响因素， 建立模型的一般流程，以及很火的   怎么用。
下面进入正题：
在      这个问题中，要解决的是根据所提供的 ， 等因素的数据，判断哪些乘客更有可能生存下来，所以这是一个分类问题。
在解决机器学习问题时，一般包括以下流程：


 
 
 
 
  


  
这部分先导入常用的 ，， 等包，导入训练集和测试集：
   
   
   
 

 = _
 = _
之后，可以用下面的命令先观察一下数据表的结构：



接下来，可以观察各个变量的分布情况：
各个变量在测试集和训练集的分布差不多一致。

然后看一下各个变量对分类标签的影响：
例如，性别的影响，通过可视化可以发现，生还的乘客中女性多于男性
或者  的影响。

  
这个部分，可以统计一下各个变量的缺失值情况：




      
         
           
             
              
            
            
            
           
             
          
         
 
然后对缺失部分进行处理，如果是连续变量，可以采用预测模型，例如 ，如果是离散的变量，可以找到类似的数据群体，然后取最多的，或者最多群体的平均值。， 这两个缺失值，可以看      时，最多的情况是 ＝。

  
之前有过一篇 特征工程怎么做 只是介绍了一些概念，这个例子就是比较具有启发性，看看怎么通过给定的几个变量，去拓展成更有影响力的 ，如何结合实际情况联想新的因素，并转化成数字的形式表达出来。
下面是数据中的原始变量，看看由它们可以联想到什么因素。
           
                 =   =   = 
            
             
             
              
              
           
             
           
          
                 =   =   = 
除了性别，年龄等明显的因素，社会地位等也可能影响着谁会优先乘坐救生艇，或被救助而生存下来。例如，

 里可以抓取到这样的字眼，来反映出乘客的职场地位：      。
 里的  也许可以反映出社会地位。
 里的  可能代表船舱的地理位置。
 可以算出乘客中同一家庭成员人数的大小。

      = 

 =     

 = 


_ =     
在这个环节中，还有必要把类别数据变换成   的形式，也就是变换成向量格式，属于第几类就在第几个位置上为 ，其余位置为 
连续数据做一下归一化，即把大范围变化的数据范围缩小至 ～ 或者 －～ 之间。然后把不相关的变量  掉。
 = _ =   _

 = _ =

=      = =
  
首先就是把数据分为训练集和测试集，用到 __，
 _  __

_ _ _ _ = __  _=
因为后面会用到很多模型，所以可以把   和  的部分写入一个函数，这样每次把分类器投入到函数中训练，最后返回训练好的模型即可。
 _  
   _
   _

 = __ __=

 _  _ _   
     =  _= =
    _ _
     __
以一个  为例，来看一下建立 训练 并用模型预测的过程，

从  导入分类器模型后，定义一个 ，
定义合适的参数集 ，
然后用 _ 去训练  模型，
接下来用训练好的模型去预测测试集的数据，并得到 _，
然后画出 _。

   
 = =
 = {_ }
_ = _  _ _ 

 __ __
___    =

采用上面的方式，尝试多种模型，并打印出它们的 _：
， 
 ， 
只选择比较重要的几个特征后的  ， 
 ， 
， 
， 
 
接下来把前面训练好的几个分类器用  集成起来再  训练一下，打印 _ 并画出 _。
   
_ = = _  _  _ 
                                       _ _  _ 
                          = =
_ = __ _

 __ __
___    =
 
 
用最后训练好的  去预测给出的测试集文件，并把数据按照指定格式做好，存进  提交即可。
   
     = = 
     = 
     =  =
    _ =作者 | 张耀琦编辑 | 顾乡

张耀琦，现腾讯即通应用部工程师一枚；数学出身，博客专家的专栏；目前爱好钻研机器学习。
引用课程：_

 分类

分类要找一个，输入就是对象  ，输出是这个对象属于个类别的哪一个。
比如信用评分

输入：收入，储蓄，行业，年龄，金融史
输出：结果或者拒绝贷款

比如医疗诊断

输入：当前症状，年龄，性别，医疗史
输出：患了哪种疾病

比如手写文字辨识

又是神奇宝贝举例
分类神奇宝贝

神奇宝贝有很多的属性，比如电，火，水。要做的就是一个分类的问题：需要找到一个 ，输入一只神奇宝贝，输出它是什么属性。
将神奇宝贝数值化
比如皮卡丘

：整体强度，大概的表述神奇宝贝有多强，比如皮卡丘是
：生命值，比如皮卡丘
：攻击力，比如皮卡丘
：防御力，比如皮卡丘
 ：特殊攻击力，比如皮卡丘
 ：特殊防御力，比如皮卡丘
：速度，比如皮卡丘

所以一只神奇宝贝可以用一个向量来表示，上述个数字组成的向量。
需要预测是因为在战斗的时候会有属性相克，下面给了张表，只需要知道，战斗的时候遇到对面神奇宝贝的属性己方不知道的情况，会吃亏，所以需要预测它的属性。

如何分类？

当作回归问题处理？
假设还不了解怎么做，但之前已经学过了。就把分类当作回归硬解。举一个二分类的例子：
假设输入属于类别，或者类别，把这个当作回归问题：类别就当作是，类别就当作是。训进行训练：因为是个数值，如果数值比较接近，就当作类别，如果数值接近，就当做类别。这样做遇到什么问题？

左边绿色的线是分界线，绿色线左边红色点就是的，绿色线右边蓝色点就是的。但是如果训练集有很多的距离远大于的点，比如有图右下角所示，这样用回归的方式硬训练可能会得到紫色的这条。直观上就是将绿色的线偏移一点到紫色的时候，就能让右下角的那部分的值不是那么大了。但实际是绿色的才是比较好的，用回归硬训练并不会得到好结果。此时可以得出用回归的方式定义，对于分类问题来说是不适用的。      “ ” …
还有另外一个问题：比如多分类，类别当作，类别当作，类别当作如果这样做的话，就会认为类别和类别是比较接近的，认为它们是有某种关系的；认为类别和类别也是有某种关系的，比较接近的。但是实际上这种关系不存在，它们之间并不存在某种特殊的关系。这样是没有办法得到好的结果。
 理想替代品

先看二分类，将中内嵌一个函数，如果大于，就认识是类别，否则认为是类别。损失函数的定义就是，如果选中某个 ，在训练集上预测错误的次数。当然希望错误次数越小越好。
但是这样的损失函数没办法解，这种定义没办法微分。这是有方法的，比如感知机，，这里先不讲这些。
盒子抽球

假设两个盒子，各装了个球，还得知随机抽一个球，抽到的是盒子的球的概率是三分之二，是盒子的球的概率是三分之一。从盒子中蓝色球和绿色球的分配可以得到：在盒子中随机抽一个球，是蓝色的概率为五分之四，绿的的概率为五分之一，同理得到盒子的信息。
现在求随机从两个盒子中抽一个球，抽到的是盒子中蓝色球的概率是多少？高中数学得：

抽球的概率和分类有什么关系？
将上面两个盒子换成两个类别

同理知道红色方框的值，就可以计算出给一个，它是属于哪个类型的， 和  ，谁大就属于谁。接下来就需要从训练集中估测红色方框中的值。
这一套想法叫做  。因为有了这个，就可以生成一个，可以计算某个出现的几率，知道了的分布，就可以自己产生。

 是由贝叶斯公式得到的；是由全概率公式得到的，详情见《概率论与数理统计，浙江大学，第一章》。

 先验

先考虑简单的二分类，水属性或者一般属性，通过训练集的数据可以计算出 {} 和 {}。
下面想计算 

也就是在水系的神奇宝贝中随机选一只，是海龟的概率。下面将训练集中个水系的神奇宝贝，属性 和  进行可视化

这里假设这点是从高斯分布 中得到的，现在需要从这个点找出符合的那个高斯分布。
高斯分布
下面简单说一下高斯分布：

简单点可以把高斯分布当作一个，输入就是一个向量 ，输出就是选中 的概率实际上高斯分布不等于概率，只是和概率成正比，这里简单说成概率。由期望 μ 和协方差矩阵 决定。上图的例子是说同样的，不同的μ ，概率分布的最高点的位置是不同的。下图的例子是同样的  μ，不同的，概率分布的最高点是一样的，但是离散度是不一样的。


假设通过个点估测出了期望μ和协方差矩阵 。期望是图中的黄色点，协方差矩阵是红色的范围。现在给一个不在个点之内的新点，用刚才估测出的期望和协方差矩阵写出高斯分布的 ，然后把带进去，计算出被挑选出来的概率
 最大似然估计

首先对于这个点，任意期望和协方差矩阵构成的高斯分布，都可以生成这些点。当然，像图中左边的高斯分布生成这些点，比右边高斯分布生成这些点的几率要大。那给一个μ 和 ，它生成这个点的概率为图中的 ，也称为样本的似然函数。
将使得  最大的 记做 \{} \{}，\{} \{}就是所有  \ \ 的  最大似然估计将使得  最大的 记做 ，就是所有  的  最大似然估计

这些解法很直接，直接对 求两个偏微分，求偏微分是的点。

最大似然估计更多详情参看《概率论与数理统计，浙江大学，第七章》

应用最大似然估计

算出之前水属性和一般属性高斯分布的期望和协方差矩阵的最大似然估计值。
开始分类

上图看出我们已经得到了需要计算的值，可以进行分类了。

左上角的图中蓝色点是水属性的神奇宝贝，红色点是一般属性的神奇宝贝，图中的颜色：越偏向红色代表是水属性的可能性越高，越偏向蓝色代表是水属性的可能性越低。
右上角在训练集上进行分类的结果，红色就是 大于的部分，是属于类别，相对蓝色属于类别。右下角是放在测试集上进行分类的结果。结果是测试集上正确率只有  。当然这里只处理了二维两个属性的情况，那在维空间计算出最大释然估计值，此时μ是维向量，是维矩阵。得到结果也只有 的正确率， 。。。
修改

通常来说，不会给每个高斯分布都计算出一套不同的最大似然估计，协方差矩阵是和输入大小的平方成正比，所以当很大的时候，协方差矩阵是可以增长很快的。此时考虑到参数过多，容易，为了有效减少参数，给描述这两个类别的高斯分布相同的协方差矩阵。

此时修改似然函数为 计算方法和上面相同，分别加起来平均即可；而的计算有所不同。此时修改似然函数为 计算方法和上面相同，分别加起来平均即可；而的计算有所不同。

这里详细的理论支持可以查看《    》   著，


右图新的结果，分类的是线性的，所以也将这种分类叫做  。如果考虑所有的属性，发现正确率提高到了。
三大步
将上述问题简化为前几个系列说过的三大步：

实际做的就是要找一个概率分布模型，可以最大化产生的。
为什么是高斯分布？
可能选择其他分布也会问同样的问题。。。
有一种常见的假设

假设每一个维度用概率分布模型产生出来的几率是相互独立的，所以可以将  拆解。
可以认为每个 产生的概率都符合一维的高斯分布，也就是此时 的高斯分布的协方差是对角型的不是对角线的地方值都是，这样就可以减少参数的量。但是试一下这种做法会坏掉。
对于二元分类来说，此时用通常不会用高斯分布，可以假设是符合  伯努利分布。
假设所有的都是相互独立产生的，这种分类叫做   朴素贝叶斯分类器
 后验概率

将 整理，得到一个，这叫做 。将 整理，得到一个，这叫做 。
接下来算一下 长什么样子。
数学推导：



求得，然后：


这里用到简单的矩阵知识，比如转置，矩阵的逆，矩阵乘法。详情可参考《高等代数》《线性代数》；喜欢代数的，推荐丘维声著的《高等代数》，分上下册，这本书是国内代数方面的翘楚，数学系的鄙人强烈推荐。别被抄来抄去的书害了—||

化简，的系数记做向量，后面项结果都是标量，所以三个数字加起来记做。最后。从这个式子也可以看出上述当共用协方差矩阵的时候，为什么分界线是线性的。
既然这里已经化简为上述的式子，直观感受就是可以估测，就可以直接得到结果了。下一篇讲述另外一种方法

参考：《    》   著    


相关推荐深度学习入门实战一像一样算法生成梵高风格画像深度学习入门实战二用训练线性回归深度学习入门实战三图片分类中的逻辑回归美国时间的月日清晨点开始，美国  公司的服务器遭受了大规模分布式拒绝式服务：   攻击，公司是美国的主要服务商，攻击导致的解析服务瘫痪，用户无法解析到目标网站的地址，引起、、、、、等众多站点无法访问，美国国土安全局、也开始调查此事。
来自智能设备的  攻击
 攻击是互联网中常见的一种攻击手段，黑客向某些服务器、个人、智能设备植入攻击程序后，控制所有机器同一时间对目标网站发起流量攻击，被攻击的网站瞬间带宽被占用，正常用户则无法访问，此次公司遭受的攻击大量则来自物联网设备，日常生活中日益增多的智能设备，被黑客利用其中的安全漏洞作为攻击中的肉鸡，攻击方式简单直接又野蛮粗暴，黑客作案成本低、门槛低，已经成为一条高度成熟的产业链。
各类型服务的防攻击能力
目前国内提供域名授权解析服务主要的分为以下几种类型，每种类型都有各自的优缺点，这里主要谈论解析安全相关问题。
一域名注册商附带
授权解析服务作为域名注册商的附带服务，一般只提供基本的解析服务，不会或很少提供附加服务，典型如新网、易名中国等，目前是主要存在以下特点。

域名受到攻击时不能提供抗攻击服务。

稳定性难以保证，解析服务经常出现异常。

域名鱼龙混杂，受攻击可能性很高，可能会影响正规域名的解析。

非核心业务，受重视程度不够，出现安全问题的响应不够及时。

解析服务器配置存在安全隐患，如开启域传送、查询等，容易造成内部信息泄露或被利用作为反射放大攻击。


企业和开发者们，如果是为重要的业务进行解析，尽量不要选择这类型的服务。
二专业域名解析服务提供商
专注提供域名授权解析及相关服务的第三方企业，国内此类服务商腾讯云、新万网解析、、等，此类企业因为专一性很高，所以针对遇到的各类安全问题通常都有比较完善的解决方案，且有专业的团队来解决突发的安全问题。
以腾讯云为例，为近万用户、万域名提供服务，日处理请求超过亿次，据统计，平均每日都会有超过次的攻击，并且历经了各种类型的攻击，所以针对遇到的各类安全问题通常都有比较完善的解决方案，且有专业的团队来解决突发的安全问题，下面介绍几个典型案例：
常规攻击：年断网
和这次攻击事件非常相似，当年由于暴风影音的机制缺陷，解析失败会无限重试，而且全国装机量非常大，被攻击后递归失败，导致运营商被压垮，南方大范围断网。
攻击类型： 、 等；
首选策略：防护主动探测或重传被动探测；
备选策略：限速、域名限速、黑名单等。
反射放大攻击： 欧洲反垃圾邮件组织攻击
攻击类型：等记录类型放大；
首选策略：源端口过滤、源过滤限速；
备选策略：禁止查询、黑名单等。
递归反射放大攻击： 国内递归被大规模攻击
全国范围内的网络异常，攻击源有共同特征，包含大量物联网设备，和此次攻击事件的攻击源类似。
攻击类型：随机子域名方式；
首选策略：域名响应限速、域名请求限速；
备选策略：机器学习过滤随机域名、停止泛解析、源限速等。
并且通过多年的防攻击历史经验，腾讯云沉淀了丰富的技术方案：

自主研发第六代服务器，辅以强大的  网卡和开发套件，单机测试最高性能达到了万，线上性能万，并以台服务器为一组组成了多个四层负载均衡集群，专制各种。

针对攻击，建立了包括大带宽、大规模分布式部署、专用防护设备、多种针对性防护策略、高性能服务处理程序在内的防护体系，针对同时多个域名攻击支持高达的域名攻击防护能力， 历史处理域名攻击峰值超过，针对单域名攻击的防护能力超过。

宙斯盾防护系统全覆盖，并创建了多种专利防护算法，对不同的攻击形式采用针对性的防护策略和算法。


三企业自建
目前规模较大、资源充足的公司会选择自建，仅供本公司业务使用，不会被其他域名的攻击影响，目前   是目前世界上应用最为广泛的开放源码的服务器软件。
关注安全的开发者可能已经了解到，近期服务器软件的漏洞被发现会导致远程拒绝式服务：  攻击，上个月才得以修复，而利用该漏洞构建特定的访问却能导致主进程的崩溃。所以自建也有一定的安全风险，需要关注以下几点：

增加基础设施和安全设施的投入，增加带宽，部署更多的防护设备，以应对更大和更复杂的攻击；

有条件的尽量开启支持，防止被劫持和修改；

关闭域传送，防止内部解析信息泄露；

使用开源解析软件的需要隐藏版本号和操作系统版本信息等，尽量使用最新的稳定版本，减少受攻击的可能性；

各地运营商的递归设置访问地区限制，减少被利用进行攻击的可能。


然而关键仍然是有自己的维护团队，进行专业的维护。
总结： 行业正在面临越来越严重的安全威胁，我们应积极采取措施进行应对，最后，仍然是需要完善法律法规，并对进行攻击者加大打击力度，必要时进行法律制裁。

相关推荐故障对影响评估及改进方案探索 【黑客解析】黑客是如何实现数据库勒索的基础防护作者介绍：梁晨，任职阅文集团技术中心，负责起点的后台开发工作。曾负责腾讯上海企业产品部营销后台开发、公众号后台开发，对大型网站技术架构，有自己的经验和见解。腾讯开源项目框架开发者，腾讯开源组件开发者，也曾是腾讯公司多个扩展组件的开发者与维护者。

引言
作为由腾讯公司开源的优秀框架与服务部署运维解决方案，被阅文集团引入了实际实践中，同时阅文集团对在语言层面进行了能力的补全，令如虎添翼。的解决方案兼具简单高效、接口维护方便容易扩展、代码自动生成，以及集成寻址、服务发现、监控、上报等功能。经历了阅文集团线上业务的考验与洗礼，充分证明了该解决方案的优势。
项目地址：点击文末“阅读原文”直接访问
“是世界上最好的语言”
众所周知，在诞生之初，就是站点的开发而生。但是一直以来，都无法摆脱弱类型、脚本语言的性能之殇的帽子。随着互联网行业的不断发展，以及用户需求和基础架构的不断变化，语言本身也一直在发展。无论是的出现，还是对性能的提升，都丰富和助力了本身的应用。
相信大家在开发中也会发现，作为经常处在中间层的，其实有很多的痛点。既要接收前端的请求，又要调用各式各样的后台服务与存储服务，常常成为一个站点的性能瓶颈。其中协议的过分冗余以及上层封装带来的损耗，就是一个比较突出的问题。
开发者不但要应对使用同步的的调用库所带来的吞吐量的下降，还要忍受协议本身，以及、协议在信息传输上的低效率。为了解决这一问题，一套在协议层的，使用简单的二进制协议。才能保证业务用更少的传输带宽，承载更多的传输内容，从而提高吞吐量和服务伺服能力。

同时，在实际开发的层面上，逻辑层与后台服务之间通信协议的维护成本较高。同时，后台服务侧新增或修改接口字段，往往调用侧也要配合修改，很多时候无法保证接口的完全兼容而引发线上的运营问题。因此，这种二进制协议又要做到接口方便维护，同时又容易扩展。
除此之外，从开发效率上而言，原本的开发中总是包含大量的重复的，但又不得不去做的工作内容。因为每一次新协议的开发，代码很难复用，和也并不允许你共用部分数据。同时一个很现实的问题是，不同接口的提供方，往往会视自己的心情和习惯来定义接口。
一个常见的例子就是对返回码的定义，有些人叫，有些人叫，还有些人就叫，简直是无所不包。因此这类重复无趣的开发工作，给调用方的开发同学带来了极大的生理和心理负担。基于这种需求，一种服务端和客户端都能够根据协议和接口自动生成调用代码，保证联调通畅的解决方案必不可少。
再者，调用方对后端服务的发现和调用的上报与监控，也是一个老生常谈的问题。后端服务如何被发现，后端的接口如何被发现，这都是调用方真真切切想知道的。同时，调用方非常有必要对后端服务的调用情况进行上报到中央服务器，中央服务器再根据收集上来的信息，对后端服务的负载进行动态的调整，保证服务的高可用。要实现这样的需求，必须引入一种集成了监控、主控寻址、上报通道、负载均衡功能的解决方案。
作为腾讯公司的优秀框架与服务部署运维解决方案，可以满足上述的所有需求。通过引入的全套解决方案，开发者既可以使用二进制的协议，大大压缩了服务请求的流量。同时也能够借助协议解析的扩展，提高了打包解包的性能进而提升了单进程的任务处理能力。再次，自动生成代码的工具也能够提升开发者的效率。
解决方案
的开源方案，首先从二进制的协议说起：
• 二进制协议
协议可能是在应用层上使用最为广泛的协议了。现有的版本主要是和版本。它在协议的基础上做了十分简洁的应用层协议封装，纯文本的内容，以及和的区分。都使得这种协议的使用和理解十分的方便。但是不可避免的，使用和阅读的简单意味着信息的冗余，为了传输少量的内容，往往需要耗费大量的流量。
另外两个比较熟知的协议，就是和了，这两位在交互常用的协议中不分上下，可读性强、容易理解、语言客户端支持丰富、协议表述能力突出，都是两者的优势所在。先看看同样一段信息，两者需要的数据量。
假定有一所学校，一个学生，如果用标识的话，如下所示：

很简单的结构，共需要个字符来表述。
而如果换成：

则一共需要个字符。从信息学的角度而言，信息熵明显就是太低了。所以为了实现通信的更高性能和更少带宽的使用，二进制协议的引入势在必行。
协议作为一个二进制的协议，相比于上述两个协议的优势不言自明。从上文中的和中发现其灵活性，也就是没有指定字段的类型。但是不可避免的，这种灵活带来了性能的大损失。因此定义了八种基本的数据类型，通过对不同的数据类型进行编码优化：

而同时为了满足业务需求，扩展出了包含任意字段、数组、结构这三种可以嵌套数据，丰富协议表现力的复杂类型。
按照上文的表现结构，几个就可以完成。首先是结构体：

从注释中可以看到，三个字段需要的字节数为，再加上结构体的开始和结构体结束的标识共个字节，一共只需要个字节而已。相比之下，这仅仅是的，是协议标识同样信息的，高下立判 巧妙地用协议强约定换传输可读性，这就是高信息熵的二进制协议的诀窍。
为了使得能够充分与结合，必须使其具备作为客户端和作为服务端两个方面的能力。
• 的客户端
作为客户端而言，要能够满足快速开发的需求，也要能够与现有的常见使用方式相结合，同时还要给出远程调用的实例。基于这些需求，客户端方案中实现了如下的特性：

实现了用协议进行打包解包、编码解码的扩展及相应的测试用；
实现了从协议文件生成对应类文件的工具；
实现了包含网络库的二次封装，以及远程调用的代码示例；

作为客户端实现的最核心一步，就是对协议的支持。协议是在协议的上层，通过固定的数据结构封装一些收发包必须的信息，如返回值、输入输出参数、包本身的状态、包计数等，来给非原生客户端与服务端进行通信的协议。在支持协议的方案中，选择了使用扩展作为实现方式。
语言本身被诟病最多的，就是针对密集型的运算的低效率。由于并不十分高效的虚拟机、松散的数据结构和弱类型的存在，使得打包、解包这类密集型的效率低下。因此，扩展应运而生。通过引入高性能的类库和一些原生的实现，使得在性能处理方面迎头赶上。这也就是以扩展的方式实现打包解包主逻辑的初衷。
首先来看看语言的结构：

最底层的 用来与通信，这个主要是之前与配合需要使用的。在其左上的层，是为了提供最基本的文件和网络操作的能力。而右上的，则是用来把的脚本语言编译成机器码的工具。最上面就是扩展层了，这层会充分利用的和的能力，直接写出能够高效执行和理解的代码，省去了脚本编译为机器码的过程，从而大大的提高执行的效率。
如果要设计这个扩展，必须要将上文中的数据结构通过语言的方式加以表达，同时设计出基于这套数据结构的编码器与解码器。另一个需要考虑的方面是，必须要使得在层面尽可能的简单、易用，这就对扩展的设计提出了比较高的挑战。一方面要兼顾性能，另一方面，要将协议中的，进行了中的的表达：

从图中可以清晰的看到，结构体被分解成了三个部分：

部分；
成员变量部分；
变量描述的

部分至关重要，这部分用来代表中每个元素的值。这也是实际进行编码和解码的时候，二进制包里面最终包含的内容。为什么要有？这是因为相比于里面对字段的文本性质的描述，本身更节省空间。
第二部分则是类的成员变量，这部分成员变量和协议的中的变量一一对应。这是为了承载对应变量的实际值而存在的。借此才能对真正的数据进行打包和解包。
为了在和变量之间搭起一座桥梁，就有了第三部分：部分。这部分是与其对应的变量属性的一个映射。包含了变量的名称、变量是否必填以及变量的类型。通过这些信息，一方面实现了对协议的二进制编码，也实现了解码时候的映射。可谓一举两得。
那么经过复杂的扩展设计与实现，有必要将扩展实现的打包解包性能和原生实现的打包解包性能进行比对。从下面的表格中可以非常明显的看出扩展实现拥有性能上面的绝对优势：

从这个表格中可以非常清晰的看到，无论是简单的协议，还是复杂的协议，使用扩展进行打包解包都比原生的性能提高十倍以上。当遇到复杂的业务逻辑，需要调用大量的使用协议的后台服务的时候，这种效率的提升会让服务的吞吐量上一个数量级。
开发者在完成扩展的编译工作之后，就可以非常方便的使用协议进行打包，解包与编码解码的工作了。

为了方便开发者扩展使用中经常遇到的无法找到具体函数和参数的问题，同时在上提供了：

以为例，只需要导入到相应的路径中，就可以实现自动提示了：

除了打包解包的能力，同时也提供了网络收发的能力，网络收发主要实现了以下几个点：

文件：通过加载，底层内置原生网络层收发包实现；
根据自动生成的，与无缝结合；
提供等容错处理；

一旦完成了代码的自动生成之后，使用者即可通过如下代码，方便的进行远程服务调用：
• 的服务端
除了建设作为客户端的能力之外，服务端的能力同样是必不可少的。为了能够满足不同业务场景下的需求，在服务端主要会关注两类服务。
第一类是的服务，会以为网络收发的基础，实现一套高性能、简洁好用的面向服务的框架。这套框架会支持基本的 路由、中间件、架构等常见的框架特性。同时也会集成、、、、等常见的客户端，方便服务再去调用后台服务。更重要的是，接入到平台中，使得服务可监控，可重启，享受运维平台带来的一站式便利。现在框架的第一个版本已经实现，并在阅文集团内部上线使用，测试成熟后，会及时进行开源。
第二类则是的服务，同样底层依赖于，但是协议从换成了对和的支持。框架实现上而言，会与、的服务端保持一致，底层集成网络能力，使用者只需关心服务名称以及接口参数和自己的业务处理逻辑而已。当然，这个服务肯定也是要与运维平台相结合的。现在框架对协议支持的第一个版本已经完成，后续也会在完成协议的底层支持之后，在业务上进行使用和验证。
•  业务实践
阅文集团在进行后台服务治理与改造的过程中，使用了的解决方案。一方面，所有后台与后台服务的接口，全部从原有的接口，切换为了基于协议的网络传输。依赖于的自动代码生成，开发效率提升巨大，保证了项目的顺利按时上线。同时，这套基于扩展的方案，也保证了代码执行效率的高效，单个请求的处理时间，相比于原有的接口调用，得到了显著的缩短。
另一方面，由于使用的后台服务是常驻内存的，基于的实现。所以在发布、启动、监控等方面与原有中固有的和的方式都不相同。因此，正如上文中所说，服务接入平台，享受其监控、保活、日志等一系列的功能，会大大提高服务本身的运维和扩容的便利性。如今在其线上服务中，超过十个服务已经切入并稳定运行了接入到平台的服务。这些服务的发布、扩容和运维完全依赖平台，十分便利。
除去对平台运维的使用，阅文后台侧同样在服务发现上，有一套方案。
对于远程服务的地址管理，最差的方案就是将其写入本地文件中。这种方案无法应对快速缩扩容以及服务器下线的需求，会给后续的运维带来很大的工作量。
稍微好一些的方案是本地存储虚拟，那么每次只需要调整虚拟，就可以实现服务地址的自动映射和变化。但是这意味着对要调用的每一个后台服务，都需要存储其对应的虚拟、信息、接口信息等一系列的信息，同样维护成本很高。
而更加通用的方案，则是提供服务的统一配置中心，每次需要调用后台服务的时候，就从配置中心根据唯一的标识拉取出服务最新的地址。这样一方面能够做到缩扩容对业务的无感知，另一方面配置中心也能够通过服务的寻址情况，给每个客户端分配最适合它的服务机器地址，比如机房或者就近分配等等。本地的服务只需要提供两个能力，第一个是能够调用定期的寻址服务，并存入本机的存储中，保证寻址的速度。第二个则是能够接收配置中心下发的命令，更新特定服务的地址。能做到这两点，就能够实现高效的寻址和可靠的寻址了。
在实际使用中，结合实际业务情况，一方面每分钟向主控请求一次服务的地址，通过轮询的方式获取一个可用的服务地址，再放入本地的高速共享内存，方便在这一分钟之内重复的读取。另一方面在每次服务调用的时候，都自动在底层集成对服务调用情况的耗时、成功率的上报。在双管齐下的作用之下，对远程服务的调用不再像过去那样难以维护、难以开发、难以监控，而是清晰可见高效的被管理。
结语
从开发效率上而言，使用摆脱了过分冗余的业务代码，以自动生成的方式提高代码开发自动化程度。
从性能方面而言，方案通过引入扩展，做到了性能的大幅度提升，让性能不再成为“之殇”。
从易用性而言，通过提供的网络收发组件，使得收发包无需单独实现。后面也会引入更高性能的作为收发的利器，进一步提高网络性能。
后续，的侧方案也会尽快开源，从而能够提供一套包含客户端与服务端的完整解决方案。这一整套的后台的开发体系，能够真正做到了高性能、高效率与高可用。而阅文集团也会继续与腾讯在技术方案上深度合作与实践。欢迎开发者试用！前言
“纸上得来终觉浅，觉知此事要躬行”
本系列文章主要针对腾讯云上进行大数据系统化操作讲解，在互联网盛行的今日，站在巨人头上的我们。一门技术得来，百度一下终得解决。然而互联网上的文章零零碎碎，达不到强度系统化，以及方便性，快捷性，和简洁性，与针对性准则，这给云上大数据爱好者们带来困扰，使适应腾讯云平台需要花费大量的精力与时间。开发成本大幅增加，然而这些对生产项目尤为重要，
本文章就是为了弥补这些而写，借助腾讯云平台进行一些实战性，选择性讲解。并希望与一些志同道合的小伙伴一起来攻克难关，共同促进云计算，大数据发展。
本文章搭建思维图

一搭建前期所需设备

三台同号同区腾讯云服务器，配置可根据所需求自行加减，三台系统为 位。 如下图：
腾讯云主机对应集群节点和相应功能图
规划图

二创建用户
 添加用户组
 
 创建用户并添加到用户组中
    
 修改  用户的密码为
 
三安装并配置环境变量

下载安装包 版本：_微云安装包下载地址：
上传安装包。使用上传工具上传到服务器，也可进行下载。这里就不进行讲解。
安装 ：  
验证安装是否成功： 


四配置文件
 

 _=_
 _=
 __=
 =___

五配置节点和文件

修改  文件 

修改配置文件取消注释 _

重启  服务  


六上传文件并配置

上传文件在目录下
解压压缩包：  。
在目录下创建目录：  
移动目录及文件移动到目录下：  
切换到目录下：  
修改目录名称为：  
配置配置文件，文件如下：

修改文件：
   = =
   = =
  
              
                 
              

          

                
                
                
               
             
  

          

  

  
  
  
  
  

  

  
  

  

修改文件
   = =
   = =
  
              
                 
              

          

                
                
                
               
             
  

          

  
  

   
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  

修改文件，没有可以生成一个，也可在中进行配置
   =
   = =
  
              
                 
              

          

                
                
                
               
             
  

          

  
  
  
  
  

  

修改配置文件
   =
  
              
                 
              

          

                
                
                
               
             
  
  

        
  
  
  
  
  
  
  _
  
  

修改文件
  
  





七制作镜像文件，快速配置多台电脑

关机服务器进行镜像制作。
确认后，等待几分钟即可制作完成，完成后开机主机
重装服务器和服务器

八配置主机名称及免密传输

修改计算机名称，修改下图标红处：  。
重启服务器：
切换到用户：   
切换到家目录：  
生成密钥 一路回车即可：  
切换到目录下： 
将_内容写入生成文件： _ _在主机中将_文件传到主机家目录目录下： _ 
在主机中将_文件传到主机家目录目录下： _ 目录权限设置，用户目录权限为或者，目录是_和_权限为，如下图使用主机名进行验证

九、启动 程序

   格式化如不能操作检查环境变量或      进行格式化
启动程序
切换到目录下：  
启动程序： 

十、验证是否正常运行

查看：四个进程运行中
 

预告
下篇文章，笔者将介绍如何在腾讯云上完成  安装及配置。作者：朱灵子

 用自带的作为的解析引擎，普通的通信就是 在定义一个模块方法，可以直接调用这个模块方法并还可以无缝衔接回调。
具体的接口调用实现方法如下所示：

将注册进来的模块取出，调用模块中的对应函数，且将参数传入 

  = 
 


利用回调参数得到访问的函数，并得到其返回值 

={
     {
       
   }  {
       返回值：
   }
}


利用回调参数得到访问的函数，并得到其返回值 


函数：第一个参数是一个错误对象没有发生错误的时候为，而剩下的部分是函数的返回值。

={
     {
       
   }  {
       返回值：
   }
}


如果想要访问，我们需要利用 组件，利用其进行注册监听 

  = 
  
   = 被触发字典数据\ \ 


   将绑定好的监听事件引用交给此变量保存。
：
第一个参数：事件名
第二个参数：响应函数
注意：利用进行监听，一定要对应有取消监听！
且通常取消监听都在函数中进行。如下：
  {
    
  }


如何用构建封装好的本地组件 

简单地封装一个封装好的本地视频组建的实现方法如下：
 {  } = 
 =  

现在这是  中一个功能完整的  视图组件了，包括  和其他  手势支持 但是我们还不能用  来真正的控制它所以接下来我们需要给组建添加属性和方法，具体示例如下：
    {
   {
     = 
  }

   =  = {
      {
      
    }
  }

   {
     
      
         {}  = {} 
      
    
   }
  }

   = {
     
    
  }

  =     
     {
       
       
    }


接下来看看其实现原理，理解 与之间的通信我们首先需要了解模块配置表，接下来对模块配置表进行简单的介绍：
模块配置表
如果要调用提供的接口方法，首先需要向传递它所有的模块信息。这里的具体实现方法是生成一份模块配置表传给，配置表里包括了所有模块和模块里方法的信，具体信息如下所示：
{
     {
         {
             {
                 {
                     
                     
                }
            }
             
        }
        
     }
}

与之间的调用流程
端和端分别各有一个，两个都保存了同样一份模块配置表，调用模块方法时，通过里的配置表把模块方法转为模块和方法传给，通过的模块配置表找到对应的方法执行之，以上述代码为例，流程大概是这样先不考虑：

接下来看看调用模块方法的详细流程，包括回调，下面展示的是细化版本的调用流程图：

详细说明下这些步骤：

端调用某个模块暴露出来的方法

把上一步的调用分解为，再扔给处理。在初始化时模块配置表上的每一个模块都生成了对应的对象，对象里也生成了跟模块配置表里一一对应的方法，这些方法里可以拿到自身的模块名，方法名，并对进行一些处理，再移交给。

在这一步把的函数缓存在的一个成员变量里，用代表。在通过保存在的模块配置表把上一步传进来的和转为和。

把上述步骤得到的和其他参数传给。

接收到消息，通过模块配置表拿到对应的模块和方法。

对传过来的每一个参数进行处理。

模块方法调用完，执行回调。

调用到第步说明的生成的。

里带着和传过来的参数去调里的方法。

通过找到相应的 方法。

调用方法，并把带过来的参数一起传过去，完成回调。


概括一下整体流程如下
整个流程就是这样，简单概括下，差不多就是：函数调用转  转  根据拿到方法  处理参数  调用方法  回调  通过拿到执行
参考文献

参考文献：


原文链接：一、      功能分析
   
费用：
美金每月
功能：
易用且表现自然的内嵌植被枝干及树叶编辑功能
自动生成随机变形模型
不同植被模型切换远处生成公告板
投影及环境遮挡效果
未确认的功能：
光照图支持程度
植被自适应地形颜色
         
功能：
使用树干树叶节点程序化自动生成树木模型效果不是很自然
支持环境遮挡
较难控制模型面数
树干树叶需使用不同的材质
          
功能：
将树木模型刷到地形上要求树木的必须在根节点上，且只有一个。
自动合批绘制
自动生成公告板用于在远处显示要求必须使用特定的植被
支持碰撞体
随机变化高度
随机变化颜色
不支持的功能：
不同模型切换
植被自适应地形颜色
            
功能：
将草的模型刷到地形上要求树木的必须在根节点上，且只有一个。
仅指定草的纹理，自动生成矩形面片刷到地形上。
随机变化高度
随机变化颜色
草的矩形面片根据摄像机朝向旋转可关闭
受风力影响的摆动
不支持的功能：
切换及远处使用公告板优化
植被自适应地形颜色
与角色等物体碰撞而产生扰动
二、      性能测试
测试机型：
红米   
内存  
分辨率 
     
 
测试样例：
场景中使用块拼接的平坦的地形对象作为地基，除植被外无其它模型。
中间包含测试植被的地形有层混合纹理。所有地形为。
一个实时方向光，无烘焙光照图。地形开启，植被未开启。
地形的植被默认可视距离为。
地形的树木替换为公告板的距离为。
所有草的纹理为，，压缩。
树木的纹理为一张纹理，只有一个材质。
测试报告：
截图为编辑器中截取，性能数据为手机获取。
经测试直接修改风力参数为并不会影响帧率。
稀疏的纹理面片草




视距
三角面数


耗时
耗时
耗时




开启地形









开启地形









关闭地形









关闭地形










 
稠密的纹理面片草




视距
三角面数


耗时
耗时
耗时




开启地形









开启地形









关闭地形









关闭地形











一种模型草三角面




视距
三角面数


耗时
耗时
耗时




开启地形









开启地形









关闭地形









关闭地形











两种模型草高草三角面低草三角面




视距
三角面数


耗时
耗时
耗时




开启地形









开启地形









关闭地形









关闭地形











树木模型 三角面




视距
三角面数


耗时
耗时
耗时




开启地形









开启地形









关闭地形









关闭地形











以下为将 改为， 改为，即一块地形共=个植被块的测试结果：
稀疏纹理面片草测试：
基于红米手机的测试结果




视距
三角面数


耗时
耗时
耗时




开启地形









开启地形









关闭地形









关闭地形










基于红米手机的测试结果




视距
三角面数


耗时
耗时
耗时




开启地形









开启地形









关闭地形









关闭地形










稠密模型草测试三角面
基于红米手机的测试结果




视距
三角面数


耗时
耗时
耗时




开启地形









开启地形









关闭地形









关闭地形










基于红米手机的测试结果




视距
三角面数


耗时
耗时
耗时




开启地形









开启地形









关闭地形









关闭地形











三、      截帧分析
在绘制稠密纹理面片草时使用 截帧分析调用的 ：

 
由调用分析得出每一个只绘制了几片草，因此绘制批次非常多。而不同之间并没有切换或纹理，但却使用函数设置矩阵常量。除此之外每次绘制使用的和都是不同的，也没用动态填充顶点数据。怀疑可能的实现并没有将植被的顶点转换到世界空间进行绘制。
四、      性能分析
面数与绘制批次数量：
无论是矩形面片草、模型草，还是模型树，自带的地形植被绘制系统的数量都随着顶点数量的提升而大幅增加。而调整视距对可见的三角形数有着非常大的影响，进而会影响同屏的数量。但奇怪的是对于树木植被而言，远处的树木应已经由公告板所替代，在不同视距下，不该有如此悬殊的三角面数量差距。
通过对代码的分析，的地形系统有两个参数，分别为 和   ，如将 设置为，   设置为，那么就会将整个地形按照=的边长，切分为=个小块。对于每一个小块，只要其中包含了任何植被，并且可见，就会合并起来作为一个批次进行绘制。并且不同块之间并不会进行合批。
因此，必须要保证一个地形的块不能太多，否则将会非常多。但当区域内植被很密集时，也不适于把块数设置得太少，否则单个块面积太大，不利于不可视裁剪。
与瓶颈：
在   较小，分块数量较多时，如果通过视距控制降低三角面和数量，可以发现和的耗时会大幅下降，但耗时却相比远视距时不降反增，由此可推论此时的瓶颈已由转向了。对于占据屏幕像素较多的树木测试样例来说尤为明显。
如果将   设置得较大，分块较少时，数量和相应耗时会大幅减少。通过对不同机型的测试，判断出此时的瓶颈基本都在，主要是顶点和像素计算的负载。
光影效果：
当开启实时光源和植被模型的投影选项时，会产生额外的深度。
另外在使用 表现草时，并未烘焙出真实的投影效果。
动画效果：
草受风力影响的动画效果在将相关参数改为时并不能获得任何性能上的提升，可见只是计算数值的变化，而并非没有执行实际的动画计算代码。通过分析代码得出绘制植被的是在源码中写死的，而且都会在中执行相同的动画计算函数，且参数和计算稍复杂。后期可以考虑通过修改源码手动控制关闭。著名广告大师约翰•沃纳梅克提出：我知道我的广告费有一半浪费了但遗憾的是我不知道是哪一半被浪费了。相比传统广告，互联网广告最大的优势之一：效果可测量，即用户看广告以及看过广告之后的行为可以被记录下来，如果再按照一定的规则，对这些数据进行归因，这就意味着，广告主在多个渠道推广之后，可以清晰的知道各个渠道的推广效果和获得用户量，也可以根据数据分析各种投放策略带来的效果，从而进一步做到精细化运营。
准确的统计到转化数据，不仅需要数据跟踪技术，而且需要既定的归因规则。

图一  转化漏斗
做好转化数据跟踪和归因，首先需要：

用户标识； 在移动场景下，一般分为两类： 设备标识和用户标识；设备标识，诸如  、  、 等；用户标识，诸如将设备标识，加上一系列的字段如：  地址、设备开机时间等通过算法组合成一个用户标识。

用户看广告相关的数据；可以理解为线上的数据，包括：看广告、点击广告等相关信息。

用户看过广告之后，实际发生转化的数据；包括线上线下，但都是存在广告主系统里。线上，如：用户在  内发生的激活、注册、付费等行为；线下，如：用户是否到店、发生购买、参与某项活动等行为。


转化数据跟踪：
跟踪的目的主要是：通过用户标识，将线上线下的转化数据与广告平台的曝光、点击数据关联起来。对于不同的推广场景，常用的转化数据跟踪方式包括：  对接和嵌入代码。对于不同的广告标的，代码嵌入又分为  嵌入、  和像素点的方式。
随着互联网广告市场的发展，转化数据越来越成为广告主与代理商、广告平台等角色之间进行效果评估和核算的主要方式之一；另一方面，广告主完成与广告平台的转化数据对接，需要一定的技术实力。在这些因素促使下，作为裁判方的第三方数据监测平台也如同雨后春笋般加入到这场游戏规则中，来帮助广告主和广告平台完成转化数据的对接。

图二  像素代码跟踪转化数据

图三    方式跟踪转化数据以  广告为例
转化数据归因：
归因，即找到转化发生的源头。归因的目的：根据既定的归因规则，将转化价值进行分配，是什么原因促使用户发生了特定的转化行为。例如：是用户在某个媒体上看到了某个展示广告，亦或是用户搜索了某一个特定的关键词，亦或是用户在看过某一个渠道的广告之后，又在之后看了其他渠道的某些信息等。
目前常用转化归因方式有：
①  “最终互动”在最终互动归因模型中，最后一个接触点将获得  的销售功劳②   “首次互动”在首次互动归因模型中，第一个接触点将获得  的销售功劳③  “线性” 在线性归因模型中，转化路径中的每个接触点将平分销售功劳④ “时间衰减”在时间衰减归因模型中，最接近销售或转化时间的接触点将获得最多的功劳。
转化数据既然是广告主衡量效果的重要指标，在某些场景下，又是作为广告费用结算的依据。但是根据上述转化数据跟踪和归因方式，大家可能会想到，在转化数据的跟踪上，广告主一定存在着作弊的动机。没错！对于广告平台来说，就需要设计良好的机制，来规避广告主作弊的动机。
转化预估
转化对广告主这么重要，那么转化预估自然是广告系统中一个不可或缺的环节，但是想做好转化预估并没有那么容易：
、转化数据的特点是海量且稀疏的，我们每天有百亿单位日志规模，  亿的活跃用户，数十万的广告，但是用户×广告正例数不足；
、转化数据噪音较大，由于转化数据是由广告主上报，系统的不可控因素较多，数据可靠性比较差；
、转化天然的回流时间较长，移动  激活延迟可达数日，电商下单延迟可达数十日；
、转化预估要求的精度高，因为转化和广告主息息相关，直接影响到广告的投放效果，所以要求预估的精度比其他产品更高。然而，不同类型的转化天然差异较大，更加增加了精准预估的难度。
针对这些难点，我们有什么武器来征服他们呢？
我们设计和开发了数据驱动的转化率预估系统，其中包含： 多数据源、可配置的数据流模块，实现了数据清洗、采样，特征抽取、组合，支持自动化特征选择功能，多人并行优化； 基于   的大规模并行训练模块，支持千亿级样本规模的训练数据； 多维度、体系化的评估模块，对业界常用的  、  等指标算法进行优化，支持广告级转化率准确度评估。
  全流程数据驱动的模型训练框架
传统的基于统计的转化率预估，准确度不高，无法差异化的预估每次流量的广告主价值。为解决这个问题，业内一般采用数据驱动方法，基于大量用户历史数据，引入机器学习算法训练模型，并应用线上系统。需要引入曝光、点击、转化、用户画像、广告画像、第三方平台数据等多种数据源，抽取高维度特征，处理大规模数据，处理复杂的逻辑，对效率和实时性也有较高要求。

图四    系统框架
  大规模并行化训练系统
转化预估不论是训练速度 还是训练方式，都需要一套可扩展的大规模并行训练系统来更好的支持。前文提到我们的系统支持  、  、 等多种训练算法，这里只说下观察到的参赛选手提到最多的  。
逻辑回归应该算是最常用的机器学习算法了，它有理解起来简单，易于并行化，值域区间为 ， 等特点，很适合使用在点击率预估或者转化预估等工作。发展至今，逻辑回归的优化算法也多种多样，例如常用  、  、  等。目前赛题的数据量较小，使用现有的单机算法应该就能有不错的效果。
业内使用较多是  提出的  算法。  算法核心是一种  的逻辑回归，在原始演算法上加入      正则化和   。它能解决传统  中无法得到稀疏性的问题 在稀疏性上能够和传统的  达到同样的程度。另外   对每一维特征维护一个学习率 能够得到更佳的模型。
要处理腾讯这种海量数据，算法的并行化必须是标配，  的并行化可以参考  的思路，也可以考虑 ！的思想；从数据并行，模型并行，或数据模型并行的角度考虑。总之就是能把大型任务逐步拆解，让机器能够独自完成一部分任务，增强其扩展性。
在我们的系统中，也实验过基于  ！思想的分布式的无锁  算法，并且取得了不错的效果，可以支持亿级特征   级训练数据；使用足够多     和  时 可以支持百亿特征   级训练数据。
  多维度、体系化的评估模块
基于以上全流程数据驱动的模型训练框架、大规模并行训练算法，我们可以高效的完成模型训练任务。此时，如何客观、有效的评估模型效果是我们面临的另一个难题。传统的  算法只是评估所有测试样本之间序的准确性，但是转化产品产品需要精确计算某个广告主每次流量的出价，因此只评估整体测试数据排序准确性不能满足需求。我们在原有算法的基础上进行改进并实现了   、  、  等多种评估算法，通过传统的  和以上算法和可以对模型进行全方位评估。
有了以上各种利器，精准的转化预估， 导语 一次简单的实验。出于兴趣的自学，求拍砖。

 导论
挖掘中的情感分析类问题，其实是一个分类问题。而可以用来处理分类任务，就是在最终的函数计算属于各个类的概率，并归属到概率最大的类。
本次实验参照的是 的论文     。
代码放在我的上。可以直接使用。
 系统
 数据集
本次实验使用的数据集来自。具体文件都在路径下。训练数据集中每行都包括个等级的情感到及具体的影评。是验证数据集。用训练数据集训练，根据在验证数据集上的表现选取模型，最后用选定的模型进行分类，得到结果，即。
 网络
下面这张图来自前面提到的 的论文。也是我们代码要实现的网络。第一层是嵌入层，将词组装成低维度的向量。下一层是卷积层，在前一层得到的向量上进行卷积。再下一层，即池化，将卷积层的结果转成特征向量，进行正则化等操作，最后在层得到分类结果。

 代码实现
查看_，这里定义了用于文本分类任务的类。初始化时会指定句子长度、类别个数等参数。
 
 ____
   _ _ _
  _ _ _ __=
对数据进行预处理后，就来到了第一层，要将词组装成低维度的向量：
  
  _
 = 
__ _  
=
_ = _ _
__ = __ 
代码指定了在上执行，_方法执行真正的嵌入操作。
_ = 
  _  _
 _  _
  
_ = _ _  _
 = __ = =
 =  =_ =
 = 
__

=   
=
=
  
 = _  =
    
 = _

= _  _    
=   
=
=
_
上面这段代码是卷积层和池化操作，在中可以看可视化的结构：

 实验结果

执行下面这行命令：
  
然后访问，可以在上看到精度与损失随着迭代变化的曲线。
精度：

损失：

而用这个模型给测试集分类的结果，就在中。前言
在这个数据爆炸的时代，大部分人已经离不开个人云服务了，针对信息量超大的这回各种网盘已经扑面而来，如：腾讯微云，百度网盘，网盘等。但是，现大多数网盘均停止服务了，面对这个问题，我们该如何解决，本文就是为了解决这个问题。本文有大量图文，方便学习者可以一步一步进行参考。
好了，现在开始搭建我们自己的网盘吧！
准备环境
我们需要的东西，点击下面的文字链即可转入下载，小编分享的软件都采用了百度云，因为小编的服务器要过期了。。。
下面百度云提取码均为：
、腾讯云主机安装了 系统

、 工具
、 工具
购买腾讯云服务器









开始安装
一、通过工具连接服务器



成功连接如上图
二、更新你的系统
为了系统更加稳定，将系统更新更新更新完后将系统进行重启，下面命令已加入重启命令
   
      



三、安装依赖环境
安装下面的环境
          
接下来，启动其中的服务
   
   

接下来安装
 __

四、下载并解压缩服务器端
下载并解压最新版本的服务器存档目前最新版为
 
 __
由于该网站为国外的网站，所以可能下载会很慢，因此，小编在这里为已经大家准备了安装包点击这里下载即可。再通过工具上传至服务器即可。


上传好了，我们通过命令查看：

五、解压和安装
  __
   
  __ 
   
 
 





注意这两个端口


六、启动
运行下面命令启动
  
  

七、修改防火墙规则
为了允许服务端和客户端之间的访问和文件同步，使用以下命令修改防火墙规则：
  =  =
  =  =
  
打开浏览器查看成果
在浏览器里输入
这里输入你们服务器公网

好啦，安装好了，现在可以开始使用你自己的云盘啦
如果有小伙伴安装失败了，可以联系小编。：邮箱：

相关推荐【腾讯云的种玩法】独享个人云盘【腾讯云的种玩法】如何利用腾讯云搭建分布式应用专题：如何从到搭建个人站点很多个人开发者创建一个微信公众号后，没时间打理，嫣然成了一个摆设。如果短期内可以搭起有回复功能，帮你查下天气，讲个笑话，帮你翻译。是不是就热闹有味了。今天我就带大家在腾讯云上给你的公众号快速实现这种功能，让我们开动吧。
去注册一个腾讯云帐号
申请一个体验服务器吧，接下来你就尽情折腾。写文章的时候顺便去看了下，活动好多。 用客户端连上去开搞。哦，对了，服务器我选的是位的。本人用的是，版本。完全够用
你首先得有个公众号废话
进入开发者模式，设置服务器配置，开发者信息后续会用到。
部署环境
因为我还想多玩下微信公众号的其他功能，自己也比较懒，找了个开源来体验微信的其他强大功能。朋友推荐了，使用起来的确很方便先升级版本到以上，在目录下面下载
  
 
     
   
这样就安装好了
在上申请一个机器人
 
修改下代码，让机器人跑起来
在目录，创建，只给微信公众号使用的。可以参考的官网设置开发者信息注册微信的消息处理，这样收到消息后根据具体消息类型来处理。
看效果了
可以翻译可以讲笑话可以报天气，日历
还可以撩，可以侃
当然还有很多意向天开的东西，等着我们去把玩哈。 欢迎大家加这个公众号去把玩。

相关推荐
腾讯云总监手把手教你，如何成为工程师
分析份招聘需求，如何成为工程师？
半年免费体验馆今天我们来学习关于数据库的知识。什么是数据库的主备、双活、读写分离
数据库的主备
首先，什么是数据库的主备？

主备是指我们在使用数据库时，同时有主数据库和备数据库，主数据库主要提供服务，备数据库以备不时之需。
为什么我们要给数据库做主备？

一方面是数据库安全十分重要，我们需要借助主备数据库，来保证我们的数据不至于丢失。
另一方面是数据库比较容易受到外部因素的影响网络环境恶劣等因素。
最重要的一点是数据库一但出现问题，如果没有备份，恢复起来非常麻烦，甚至无法恢复。
数据库的双活
说完了主备，我们来说一说双活。

双活简单的来说，就是将只有一个数据库对外提供服务单活，转化为两个数据库同时对外提供服务双活。

在单活的情况下，主数据库被合理使用，而备数据库处于闲置状态，资源被浪费。另外，如果不经常使用、测试备库，很有可能在遇见突发情况，需要启用备库时，出现备库无法启动的问题。第三点是灾难演练可能会造成数据丢失，当你是双活的情况下，你的数据是有备份的，即使丢失也可以恢复。
数据库的读写分离
那么，什么是读写分离呢？

读写分离是指将原本由一个数据库完成的数据的读写的操作分离成为两个数据库完成，一个数据库完成数据的读取工作，另外一个数据库来完成数据库的写入工作。

当我们的数据库的读写都在一个磁盘上时，硬盘的暴增，效率大幅度下降。
这种模式可以有效的缓解由于数据量剧增，数据库压力较大的问题以及数据库系统负载较高，性能下降的问题。
不安全的数据库架构

在这种架构下，数据库一旦出现故障，就会丢失数据，无法对外提供服务。数据十分不安全。

当你的主备数据库在不同层级可以理解为单活时，仍然存在备库无法激活、或数据不同步的情况，但相比于上一种情况，已经有较好的改善。

这种模式下，主备数据库同时提供服务，两个数据库的数据高度同步，大部分都是相同的，即使一个数据库出现了故障，另外一个数据库也可以保证业务的正常运转

在这种模式下，数据库的性能较高，业务方面读写分离。数据库性能提升。写数据库的数据同步到读数据库，保证数据高度一致。

相关推荐
免费体验最佳上云实践机会【 腾讯云的种玩法】十分钟轻松搞定云架构 · 单点和多点作者：张锦铭
团队：腾讯移动品质中心

电量相关问题一直是测试人员头疼的事情，电量测试怎么开展、问题怎么复现和跟进定位、用户反馈电量相关的问题我们如果获取更多的信息等等，一直都没有一个好的解决方案，以至于我们面对电量相关的问题时，总是束手无策。整个项目组经常收到这样的一种反馈：你看，你们开发的，我还没怎么用呢，耗电量就排第一了。对于这样的反馈，我们能做些什么呢？之前我们是迷茫的，但经过一段时间的尝试和努力之后，事情有了一些改观。
一、电量测试之农业时代
在之前很长一段时间，我们都是用这种可怜的方式进行电量测试的
、选定测试场景以及时长；
、给手机充放电，让手机剩余电量在我们预设的值，比如，每个场景测试开始时，保证手机都是这一电量； 
、手机系统设置，一般要关注屏幕亮度、蓝牙、定位、通知消息、音量、后台应用等等，为保证简单，通常是全部关闭或调到最小即可；
、记录开始时的剩余电量，并执行测试，在测试结束后再记录一次剩余电量，两个电量差，就为该场景在一定时长内的耗电量；剩余电量嘛，直接读手机上展示的值或是通过接口获取后面会介绍均可以，几乎没有区别；
真是够简陋，但并非完全没有用，明显的电量消耗问题，还是可以发现，只要选得场景对了就可以。要是发现不了问题也不会一直用这个方法了不是。嘿嘿。
后面我们还将这种方案做了优化，流程不变，但是全自动化，人工只参与数据出来后的整理即可。具体的方法是，在手机和之前，加了一块开发板，通过端的指令，可以智得控制开发板通电或是断电，以达到手机充电或是放电的效果。
但不管怎么全自动化都好，终归还是最粗放的方式，没有具体的数据，没法帮助定位，如果还是个偶现的问题，那就更加束手无策，只能作罢。
二、电量测试之工业时代
慢慢得，我们开始去做一些新的尝试，能不能获取到更多更详细的电量数据，是我们的主要目标。
我们想得也比较简单，执着得认为，肯定是有一些我们没有发现的接口，可以获取到一些详细的数据，要不然系统是怎么计算每个的耗电量的呢？其实在某一段时间之内，确实如我们所想，但并非一直如此。
最初我们用到的是类接口。这个接口只能获取到剩余电量百分比，目前世面上能见到的所有系统版本都可用，如上文所提到的，他和系统界面上展示的值几乎没有区别，唯一不同的是，他是以为单位计的，以这个值计算的剩余电量百分比，就是系统上显示的那个值。这样看来，这个接口也没有什么多大的意义。还得继续尝试。
接着我们使用到的是中的接口，私有接口，调用方式如下：

在 及以上的系统上，能获取到的信息如下：

看看关键信息：
第三行是当前的剩余电量；
第六行是否满电量；
第八行是否正在充电；
第九行最大电池容量；
第十行当前电压。
信息是多了一些，有当前电压值，有剩余电量。这个有什么用呢？我们先科普一点点小知识。
首先，某一设备的电压，基本是在一定范围之内变动的，相对稳定的一个值。就像 的电压，基本是在上下。当电池剩余电量越少时，电压值会变得越小，但波动不大。电压过小时，可能会引起手机直接关机，这也是为什么有时还有电量，但手机却开不了机了。新的电池，电压波动会小一些，越是老化，电压波动可能越大。所以电压这个值能用来判断当前电池的健康度。
然后是剩余电量，他的单位是。手机电池常用类似这样的标识，这不是具体的电量，光看这个值，能解理到的含义是，以的电流来放电，能放小时。或者说，以的稳定电流放电，能放小时。但明显这样意义并不大。因为我们还不知道电池在工作时，会以多少的电流工作，所以也就不知道能用多久，我们想知道的是，电池到底还有多少电，这个才是一个具体的值。上面提过，电压是相对固定的，我们可以算出具体剩余多少电，以，粗略计电压稳定为，根据公式计算得出===。这个就是当前电池剩余的电量。当计算剩余电量的百分比的时候，用哪个值去算都一样了。
以上是接口在及以上系统上获取的信息。但事实上，在 及以前的系统上，能获取到更多更详细的信息，大部分是一些硬件的固定信息，对我们测试没有帮助。但也有一些其他有用的信息，比如说当前的温度，电流，都是很有用的信息，如下图

温度能用来直接判断当前的发热情况，电流能直接判断当前的电池发电功率，都可以有效判断当前电池的使用状态。
但是这个接口拿到的数据，仍然是不够具体，全是整机的电池情况，没有具体到某一个应用或是其他维度的电量统计。所以，还得继续摸索。
这一次我们应用到的是中，也是个私有接口。这里卖个关子，实现就不帖了，有心的同学可以根据我的关键字找到具体的东西。这个接口就厉害了，具体得说，他能拿到每一个的\\显示\网络\存储等前后台所有详细信息，一个巨大的表。

当我们探索到这一步时，激动不已，以为光明就在眼前了。可是事实却是，这个接口早在的第一个版本，就完全被封了，只能在 上的机子上拿到数据。而且经过多次确认后，我们发现，这个数据是每个小时才会更新一次，并不是实时的。
但尽管如此，还是大大得增强了我们继续探索的信心，我们第一次获取到了每一个的电量消耗情况，而且我们很确信，苹果的电量排行榜，就是根据这些数据计算出来的。因为，我们在这之前，已经发现在越狱环境下有个工具，叫，这个插件只做了一件事情，就是把系统设置里，电池的显示方式设置成了“”，而默认的显示方式是“”。设置为“”以后，就可以在电池设置里看到很详细的信息，如下图：

跟我们用接口拿到的数据是一致的，所以我们确认电量排行榜数据来至于这个接口，而且，系统一直在调用这个接口在统计电量相关的信息，只是对用户而言不可见，而且接口也不可见。在越狱环境下能拿到这些数据，对我们定位问题已经有很大的帮助了，但是一方面这些数据是系统显示出来的，我们处理很不方便，效率也低，另一方面，这些数据只能在越狱的机器上拿到，而目前主流的系统都还是不能越狱的。我们不得不再进一步。
三、电量测试之大数据时代
经过长时间的探索，我们的目标越来越清晰，但是路却越来越窄，因为能用的接口都被官方给屏蔽了，很长一段时间内，我们都没有任何进展。直到无意中发现了官方的工具。这是苹果日志系统的统称，苹果经常会询问是否要官方帮忙诊断和定位问题时，上传的就是的各种日志。
很庞大，每天上几百的日志，记录电池、第三方、各种系统功能和应用的所有运行情况。
怎么使用呢？简单得说，就是需要一个开发者账号，然后到苹果开发者网下载对应的证书。不需要越狱，没有系统限制，这个特别关键。关于怎么使用，有明确的说明：

当然每一类不同的日志，都对应不同的证书，以上说明是针对电池电量的。
电量日志是系统中最庞大的一块。电量日志每天有几十到一百，他是一个庞大的数据库，里面有张表，记录了电池电量的各维度信息。看来要弄懂电量的数据来源，必须要弄明白这些表之前的联系以及各自的意思。
经过几周的折腾，我们弄明白了几个关键的顶部的表格，下面列出来分享给大家：

通过这些表格数据，我们能明白，系统记录了哪一些数据，他们之前的关系，哪些是对我们有用的。数据非常全面，我只能说苹果威武。
有了这样全面的官方数据，我们的测试怎么做呢？
、首先，上线前的电量测试，只要装上对应的证书，便可开始执行测试，只要记下哪个时间段对应的是哪个场景，然后测试完后，取下系统的数据库，便可以对当次的电量做较全面的评价，例如，某个在某场景下，分钟运行时间，显示耗电，耗电，运行温度是度，平均电流是，是不是很酷？这样的数据，一旦异常，对于问题的定位帮助也比较大，点个赞。
、用户反馈的问题，不再没有头绪，只需要装证书发送给他，让他装上，半小时后便可以获取到最近几天的所有电量信息，用于跟进和定位问题。酷不酷想不想学？
不仅如此，这些关键数据，还让我们弄清了两个关键问题，一个是剩余电量是怎么计算的，另一个是电量排行榜是怎么计算的，我一一列举。
四、剩余电量是怎么计算的
系统每秒会读取一次系统电量相关数据记录入整机电量数据库，主要内容有当前电流，电压，剩余电量，最大电量，温度，是否在充电，充放电次数。
、电流以计，直接通过硬件测得，是计算其他数据的基础，工作时，电流一般在到之间。超过电池很容易发热。
、电压以计，通过硬件测得，是计算其他数据的基础，工作时，电压几乎一直恒定在左右。测试过程中出现过的最高电压是。
、剩余电量是以计，他和最大电量是相对值，我们看到的电量百分比是这两个值的比值。电量最大值是一个理论值，的意义是，以的恒定电流放电时，能放小时。他最大值并不固定，他会随着电压而发生一些波动。
、温度也通过硬件接口获得，可以作为一个参考值，测试过程中出现的最高温度是度，能明显感觉到发热了。
、是否在充电，如果是在充电过程中，使用的任何应用，具体电量都不作统计，不入数据库，而只统计整机的电量。
、充放电次数，以充放一次最大电池容量记为一次，充放电次数可以作为电池老化程度的一个根据。
下面再来说说到底是怎么计算的。
假如充满电是，系统会每秒读一次电流值，以及判断是在充电还是放电，记算这段时间的功耗，逐步累加。如半小时后还有，剩余电量就是。
五、电量排行榜是怎么计算出来的
、首先要说明的是，电量排行榜显示的不是实时的数据，他有小时内的延迟。同时他与系统显示的剩余电量百分比也不是同一套计算体系。
、用来记录电量相关数据的数据库极为庞大，有在概张表，每天超的数据。
、每一个安装到的应用，在系统级都会有一个标注，称作结点。
、系统电量的消耗分为主要以下大类，每一种都作为电量消耗的根结点。\ \\ \ \\\\\。
、系统中每个应用都有几种状态，分别是不运行、前台活跃、前台不活跃一般应用间切换时出现、后台、暂停在后台但没有运行，程序还在内存中。
、系统每小时记录了每一个根结点被哪些应用占用，应用的状态是怎么样的，每应用消耗了多少能量，总共消耗了多少，比如某一小时内，某个\\\\显示各耗电共，这小时内所有耗电，那么该耗电占比。
六、总结
总结一下，电量测试从农业时代，到工业时代，再进大数据时代，是量变到质量的过程。我们做了长时间的探索，最终还是站在巨人的肩膀上，实现了最初预想的目标，走了很多弯路，由于研究的人很少，经常一些关键词，出来的信息就两三条，很容易走进死胡同里，但也正因为这样，也没有在一条错的路上一直走，总算是有点收获，很是感慨。
搜索微信公众号：腾讯移动品质中心，获取更多测试干货！当前浏览器不能支持视频播放，请采用或以上浏览器
今天，我们来了解中两个十分重要的概念： 和  。
首先，我们来了解一下什么是
 原意为桶，在这里引申为存放文件的容器。每个用户可以创建多个，来存放不同的容器。每个用户也都可以创建、配置，来存放自己的文件。
我们需要注意的是，每个  都要放在一个特定的  内，不存在一个脱离  的 。

直接说明可能并不好理解，这里我做了一张图，方便你理解。
在我们的电脑上，我们使用磁盘来存储文件，在使用磁盘时，我们又划分了不同的分区。在这里，每一个 就相当于一个分区或者一个磁盘。

说完，接下来我们来说一说：

在对象存储中，我们上传的文件，就变成了， 由  和  组成，其中 就是我们上传的文件的内容。而 则是文件的基础信息，比如长度、文件名、自定义的头等。
我也做了一张图，来帮助大家理解：
一个文件，在我们本地是文件，当我们上传到对象存储中后，它就变成了： 文件  文件信息的组合。

最后，我们来说一下
我们每个人可以创建很多个不同的  ，当 较多时就比较难以管理，这个时候，我们可以创建不同的项目，通过项目来管理不同的。 就是用于区分我们在腾讯云上的不同的项目，类似于我们在程序语言中用的  。

拓展阅读
创建 ：上传：控制台使用：作者：梁定安，腾讯织云负责人，目前就职于腾讯社交网络运营部，开放运维联盟委员，腾讯云布道师，复旦大学客座讲师。

正文之前，一个职场老司机的困惑…
作为一个在职场上混迹长达年的老司机， 从制造业的咨询顾问转变为互联网行业运维质量管理人员对于我来说可谓是破釜沉舟，从零开始。理想是丰满的，现实是残酷的，投入到具体的运维质量管理工作后，发现我无法再以这么多年沉淀的方法论，以体系化、职业化的姿态来开展工作，尤其是对互联网行业运维体系的生疏，技术上的空白，简直就是致命的…
在困惑无助的瓶颈期，偶然机会运维界男神梁爷推荐看《凤凰项目》这本书，凤凰二字不禁让我想到了凤凰涅磐浴火重生，自己此时需要的不就是重生吗？既然从零开始，放手一搏，学习吧！
言归正准，此书与各种介绍技术或方法论的书不同，以一个故事的形式讲述了一个项目从即将“流产“、运维部门面临被拆分的囧境到逐步的通过一系列举措取得项目成功并实现业务价值的过程， 浅显易懂，结合自己曾经经历的“难产”的项目广东电信管线投资管理系统建设项目、配置器项目、 项目，仿佛身临其境，触动了身体上的多根神经，将触动我的几点总结下：
、    变更管理
提到“变更”，我为之色变，变更无处不在，毫不夸张的说，我曾经被“变更”伤的很深，这是个忧伤的往事，此处省去一万字…首先为愿意正视在变更上存在的问题，并且愿意去为改变这种现状做出努力的管理者或决策者致敬，书中运维总裁比尔如是乎，接任总裁一职后，意识到变更中的问题，马上对变更流程做了梳理，采取了如下的措施：
梳理什么是变更，明确变更的范围这与我想做的工作不谋而合
附书中定义：变更就是对应用程序、数据库、操作系统、网络或硬件进行的物理、逻辑或虚拟操作，并且这样的操作可能对相关服务产生影响。
执行变更审核流程，加大变更门槛，适当控制变更节奏
说到这点，不得不提任何流程及工具的推行都会遇到各种阻碍，有些员工乃至管理者甚至可能认为引入流程阻碍了效率，如果再碰到了不好用的工具，那简直炸天了，所以引入流程和推行工具之前必须根据实际情况做深入的调研，多方面平衡，力求流程简化，工作易用，当然这事说起来容易，做起来难，也只能是智者见智了。
变更可视化
做好变更记录，明确变更计划的制定者、变更对象、变更内容；做好变更计划安排，发布审批通过的变更执行的日程表。这一点其实没什么好说的，既定的工作如果都不做好安排，随着性子想怎么玩就怎么玩，活该你一天到晚忙到死，还没干成几件事情。
总之，我们避免不了变更，但我们要想办法避免紧急变更。说到此处，我脑中呈现了一个变更管理的框架：

首先从业务层面要确定变更的痛点，想要如何管理，以上内容不需要面面俱到，可以根据痛点有重点的进行梳理，如果有条件，落地到工具中自然更好。
、    工作类型梳理
记得我当初刚接手运维部门的工作之后，为深入了解运维工作，曾问过几个运维同事的日常工作分类和职责是什么，小伙伴们给的答案居然是含糊不清的，我不知道他们是真的不清楚，还是不善于总结说不出来，抑或是不想告诉我，囧…书中对运维部门的工作类型分为：业务项目、运维项目、变更及计划外的工作。人的精力是有限的，当各类工作一窝蜂的摆到眼前，谁也不能面面俱到，必要时必须要有取舍，确定不同时期的重心工作，正确的时间做正确的事情。结合实际的工作，身边运维同学对于业务项目和运维项目这两类一般能按照项目节奏按部就班的走，但一旦引入了变更和计划外的工作，往往会打乱既定的计划，承诺给业务部门的服务无法完成，所以工作的安排要留一定的，以支持没完没了的变更和计划外的工作如业务各种突发事件，各类运营系统的 。希望这个工作类型的划分也能够触动身边运维同学的神经。
、开发运维模式下的实践
标准化
“ 工作不仅是无形的，因此更难追踪，而且可能出错的地方也要多得多。”
因此为了避免出错，需要更严格和守纪律，把运营环境标准化，并把这些标准应用于开发和运维的日常使用。写到这里，情不自禁叹口气，这是我目前的重点工作，曾经为这个目标迷茫过、困惑过，此书看完，坚定了我做运营标准化工作的决心。 
持续优化
作为质量部过程改进中心的一员，持续优化天然是的职责，如何防止问题再次发生，一旦发生了问题如何更快的发现和修复问题，建立完善的问题管理机制的重要性由此可见。
营造一种工作文化
鼓励探索和尝试，从失败中吸取教训，反复实践，至于如何落实，我想是团队管理者仁者见仁智者见智了。    
、工作约束点
在书中，一个运维工程师是工作约束点，任何工作少了他都无法正常开展…我表示无语，居然会有这样的事发生！在我的经历中，某个人成为工作瓶颈的情况真不多见，不会说少了哪个人天能塌下来。我想团队分工、团队共享和人力储备这些是人员管理的根本吧纯属个人意见。 诚然，除了人这个因素，工作中会有各种障碍，反思下我们是否主动识别过约束点，如数据质量差、信息不同步、流程混乱等，识别到之后是否尝试去打破它？至于，以后再深入学习探讨吧偷个懒。
， 到这心得就完了，对于如何继续开展接下来的运营质量工作，我经历了从混沌状态到逐步清晰的过程，可谓是“凤凰浴火，涅槃重生”，路漫漫其修远兮，希望通过我的努力，能够看到质量上的不断的改进和优化，哪怕是一点点。走样
在图形学渲染技术中，由于采样率不够会造成渲染结果的锯齿以及抖动，我们把这种现象称作走样。在离线渲染技术中，为了克服走样的问题，通常会增加每个像素中的采样点的个数，然后平均得到最终的颜色，这个方法是最自然的方法。在实时渲染技术中，也有类似的技术，比如等，但这种方法对计算资源的要求是成倍上升的，因此出现了很多其他的性能更优的方法。
基于的反走样的方法以及由来
为了给大家一个直观的印象，可以访问这个


左图是走样的效果，右图是反走样的效果
最早提出这个方法的是的   该方法首先提出了一个重要概念， 也就是法线的变化。数学上来说就是把一个点周围的法线已经归一化加起来取平均然后算他的长度。试想一个绝对平整的表面，每个点的法线都是一样的，所以按照上述方法计算，得到的值是如果是一个比较粗糙的表面，每个点的法线都有各自的朝向，按照上述方法计算，得到的值小于。作者并且提出了因子的概念：

其中是材质的密度，那个时候光照模型大部分是用的，因此该模型被改写为：

其中是为了能量守恒而乘上的系数。但是在中，作者认为公式推导不对，给了一个正确的方程

从公式可以看出，实现很简单，不用修改很多，但仅仅适用于模型。
基于物理真实的渲染
近年来，基于物理真实的光照模型开始在业界流行。该模型认为真实世界中的表面实际上是由很多微表面组成的

基本方程为：

不同的研究人员对于项，也叫法线分布函数，提出了自己的算法，目前大致有  等。值得注意的是，项里面包含了粗糙程度用于描述表面的平整度。目前在游戏行业中，和是比较常用的模型。相比于模型，具有更长的拖尾效应，更符合物理真实效果。
基于物理真实的反走样
基于物理真实的渲染，很多学者提出了新的反走样的方法。因为在实时渲染中，在摄像机距离物体比较远时，都会用法线的渲染。这个从理论上就是错误的，因为反走样首先是把一个像素里的样本点都计算了以后，再去平均，用就是先对法线取平均再计算光照，所以是错误的。新的反走样方法跟上述方法的共同之处是根据每一级的 计算法线的变化 ，然后衍生出不同的方案。下面介绍其中的几种

 。 这个方法主要是针对模型提出的反走样方法。其计算光照的方程为：


 其中是入射角与法线的夹角，是法线，Σ是协相关矩阵，里面包含了信息。Σ通过每一级的预处理得到。这个方法的优点是计算简单，但是需要修改渲染流水线模型。顺便提一句，作者之一现在也在工作。

。通过看名字就能看出来，该反走样方法是针对模型的，此方法主要是对中的项提出了新的算法：


其中ω为半角。
该模型支持一般表面的材质以及衣物的模型。对于一般表面的材质，项为：

其中为法线的三个分量。该方法同时适用于离线和实时渲染。我们在 也尝试实现了项。也顺便说一句，第一作者现在任职。

上述两个方法对于渲染流水线的改动都比较大，对于游戏引擎来说修改的代价比较大。

文献也提供了新的算法，而且算法简单，但是有局限性，比如要求平行光源，不能太大。

目前取而代之的是用了改动更小的方案。下面我们开始介绍


的材质反走样

目前的采用方案中，先把用户输入的值转成强度值，然后根据法线的变化，计算出新的强度值，再把强度转换成新的值。

我们采用了两种新的方法。在介绍新方法之前，我们先介绍球谐函数。球谐函数和傅立叶变化的本质是一样的，都是把一个信号分解成不同的分量，或者称作基。下图就是对于一个四阶的包含个基的示意图：



基于这些基，一个复杂的信号或者图片就可以用几个简单的系数表示，当然基越多，就越接近于原信号。如果原信号是一个低频信号，那我们用少数的基也就够了。

文献认为，一个像素内的多个样本的光照计算实际上就是物体表面的请注意区分里的和的卷积。

基于上述原理，我们可以低频的物体表面的也分解成球谐函数或者高频的分解成 函数，然后和的项卷积。具体分解的过程可以查看文献 这样分解的好处是物体表面的被表示成高斯函数，或类似高斯函数，同时的项也可以做类似分解。大家知道卷积定理有一个非常重要的规则，就是两个高斯函数的卷积还是一个高斯函数，而且其结果和输入高斯函数的参数相关，因此不用通过暴力计算卷积。有了这个知识，这样我们的光照问题也就迎刃而解。最后可以得到下面简单的方程：

这个方程是一个简化版本的。在离线渲染中，实际上要用球谐函数或者函数去拟合原来的，然后作者用了算法求解。该方程简单的描述了新的和用户输入的的关系，其中由得到。这个方法在游戏得到了应用

我们尝试的另外一种方法是文献，他们把的项也分解成了高斯函数


因此我们也可以类似的得到新的。和上一条不同的地方仅仅是的计算方法不同。
的反走样的使用

结束了上述让人昏昏欲睡的理论，下面看看中是如何使用的：

中的材质支持物理真实的模型，可以看到材质节点包含了




为了获得 ，我们可以这样做：


  导入包含通道用于后面把结果存入通道的法线贴图
  打开纹理，做如下设置：

  结果包含了对应于的各级：

结论
我们探索性的尝试了两种新的方法用于反走样，但具体那个方法更好，目前还没有明确的结论，将来在实践的工程中也许会有些新的结论。
引用
     
      
       
             
             
             
          
                 年月日， 发布  版本，按照官方  ，分片集群和复制集合相较  版本主要有如下改动：
分片集群 部分：

 

  里，分片集群的所有组件， 、、 都能相互感知整个分片集群的存在，了解整个分片集群的配置信息，这样能避免分片集群的误配置，比如在现在的版本，有可能会将一个  错误的加到多个   了。这个特性引入了如下限制：分片集群里  启动时，必须显式配置  为 ； 版本的  不能连接低版本的 。

  的  节点负责负载均衡

  及以前版本里，分片集群的负载均衡由  负责，多个  会抢一个分布式锁，抢锁成功的  会对执行负载均衡任务，在  间迁移 ；在  版本里，负载均衡将由   的  节点负责，预计会在负载均衡并发度及效率上会有大的提升。

不再支持    的模式

  版本引入了复制集模式的   模式，在此之前，  由多个镜像的单节点组成 模式， 版本里， 将不再支持  模式的  。所以往  版本升级时，如果   还是  模式，需要先  升级为  模式。

 

分片集群里引入了  的概念，主要取代现在的   机制，能将某些数据分配到指定的一个或多个  上，这个特性将极大的方便   的跨机房部署，详细了解   机制。

 

使用  引擎时， 的  选项默认设置为 ，即不用等待迁移的数据复制到  节点 ；支持并行的  迁移，对于包含  个  的  集群， 最多可以同时跑  个迁移任务。
复制集 部分

  支持配置是否刷 

配置复制集时，增加  选项，默认为 ，即当指定  为  时，数据写到大多数节点并且  成功刷盘后，才向客户端确认成功；如果为 ，数据写到大多数节点的内存，就向客户端确认。

支持配置  追数据的时间

配置复制集时，增加  选项，默认为 ，来指定新选举出来的  从其它拥有更新数据的节点追数据的时间，增加该时间能最大限度的减少需要  的数据，但可能增加整个  的时间，该选项只能在  为  时使用。

支持   

   级别保证，一定能读到  为 ，并且确认时间在读请求开始之前的数据，该级别仅在查询结果只有单个文档的情况下有效。

提升全量同步

在拷贝数据的时候，同时建立所有的索引以前版本只有 索引是在同步数据时建立的；拷贝数据的阶段， 不断拉取新的 ，确保  的  数据库有足够的空间来存储这些临时数据。

 

  新增对  的支持，最多支持  位小数位。跟  类型不同， 数据存储的是实际的数据，无精度问题，以  为例，  的值就是 ； 而  类型的  则是一个大概值 



 在  版本增加了大量的  操作符，功能更加强大了，举几个例子 能对方便的对数据进行分类；  
 在  的 的基础上更进一步，能支持更复杂的关系运算了； 
 使得文档操作更丰富了，比如将某些字段求和存储为新的字段。
详细的介绍请参考  部分

   

  开始支持 ，在之前的版本里，文档里存储的字符串，不论是中文还是英文，不论大小写，一律按字节来对比，引入  后，支持对字符串的内容进行解读，可以按使用的  进行对比，也支持对比时忽略大小写。 
、、、 等涉及字符串操作的命令都支持 。

视图

  里增加了对  只读视图的支持，视图将集合里满足某个查询条件的数据虚拟成一个特殊的集合，用户可以在特殊的集合上做进一步的查询操作。

安全提升 

  支持轮转的将复制集、或分片集群的各个节点开启鉴权，不需要停服务，详细步骤参考          

工具 

  引入  工具，可用于监控并记录  上执行的命令并  到另一个  实例上，该工具可用于代替 。
下面针对  和  在  级文档记录下，不同并发时 读写性能的表现进行评测：
测试条件： 
 机型， 内存， ， 个  核 已开启超线程
系统参数：关闭 、设置 _为 ， 设置为 ，文件系统 ，关闭 
 配置： 和  版本配置一致，核心参数如下     
测试方法： 
、用  并发，分别导入  文档，测试不同并发下写入性能差异；
、在  文档基础上，用  并发，读取请求，更新请求，测试不通并发下，混合场景  的吞吐和读取时延。
一、写入速度对比：

二、写入、读取情况下，系统吞吐对比

三、混合读写情况相爱，系统读取平均响应耗时对比

结论：

在当前测试的  种并发场景下， 并发时，  和  的表现性能最优；

写入性能上， 和  提升有限，约 ；

混合场景中， 吞吐高于 ，约 ；

虽然  相较于  在读写性能上提升有限，但  引擎一直在不断优化，且如文初描述  新版本在同步性能、 操作、视图、分片规范和安全性上还是有很多改动，对同步压力大、嵌套  较多等业务场景依然建议予以升级尝试。  毫无疑问是互联网产品里最重要的指标之一或许‘’之一‘’也可以去掉，每天的数据都会牵动着整个产品团队的心。因此，如果能对未来的进行预测，了解未来的发展趋势，根据预测结果，寻找增长规律，发现增长瓶颈。另外，对业务来讲，单纯地知道的一个预测结果价值也有限，最好是能在预测过程中揭示一些规律，指导产品的规模发展。
对类似于的这种数值预测问题，最常见的是采用时间序列分析的预测方法。但这种方法是单纯地依赖数据的规律，只能给出一个预测结果，不能解析其中的影响因素。而其他的一些非线性的回归方法，通过较为复杂的特征处理，也许能达到较高的预测精度，但也很难去对预测过程进行解析，就更不用谈指导产品的规模发展了。因此，我尝试了最简单的线性模型，通过对浏览器的的用户进行结构化的分解，分别建立线性预测模型，发现最终的结果也达到了可解析性与预测精度的一个平衡。而整个建模过程只需要一款老少皆宜的神器 ，是不是很简单？
对进行分解
对于一款成熟的产品，在渠道稳定的情况下，新增用户未来每天的留存率是基本稳定的。如果产品的用户是从开始，各渠道也恒定，那只要出拟合新增用户的留存率曲线，就可以得到未来每天的了。即如果拟合出来新增用户的留存率表达式是：

第天的新增量是，则天后的为：

这个预测方法是特别简单。但现实面临的问题是产品已经发展多年，现在的渠道跟产品刚开始发布的渠道已经是千差万别，对浏览器而言，年之前的数据都找不到了。
更进一步，既然目前和预见的未来的渠道是稳定的，那么就可以对新增用户采用上述的办法进行预测。将每天的分解成两部分：新增用户和非新增用户。接下来的问题就是非新增用户的留存预测，如果非新增用户的留存率也是稳定的，那问题不就迎刃而解了？
事实上采用上述的分解方法，非新增用户的留存率并不稳定。因为非新增用户中含有最近一段时间新增的用户和新增了很久的用户的，这两部分用户的规律一般是有不小的差别的。就是一部分还算新手，一部分已经是老油条了，他们两部分人群肯定有较大的差别，混合在一起去预测他们的总体留存，误差也肯定大。有没有更好的分解办法？
沿着这个思路，接下来就是我使用的分解办法了。假设新增用户达到一定时间后就跟老用户没差别，也就是老油条与老一点的油条而已，然后对老用户按沉默的天数进行切分。
模型假设
经过统计，发现天都不活跃的用户再回流的只占当天的，可以认为天都不活跃的用户再回流是一个小概率事件。当然，时间取得越长这个概率越来越小，取天的误差也足够小。基于此结果，选定一个起点时间，假设起点当天的是最近天内的非新增用户以下称为老用户的回流与最近天内的新增用户的留存所组成。后续每天的就是上诉两部分用户及未来的新增用户的留存共同构成，同时认为每天老用户的回流率与新增用户的留存率不变外部环境基本不变的情况下。
某天中第天前回流用户的定义：对该天而言，沉默了天后在当天活跃的用户。如对而言，第天前的回流用户为：所有只在和活跃的用户，并且在不活跃。如下图所示：

某天中第天前的所有老用户定义为：距离前天沉默了天的所有用户。如对而言，第天前的所有老用户即为，所有最后一次活跃天为的用户。如下图所示：

根据上诉定义，老用户的回流率：

该指标反映的是沉默了天的用户中有还会回流的用户的概率。
根据历史数据分别拟合老用户的回流率与新增用户的留存率，就可以对未来的进行预测。
拟合老用户的回流率模型
由于所需数据较少，拟合两个留存率的模型使用大众神器—就可以解决了。
先拟合老用户的回流率模型。首先选定一个起点，从历史数据中跑出天的回流用户数及其老用户数，存放到里。计算一下每天的回流率，插入一列“天数”，如下图所示：

然后绘制散点图，如下图：

然后在散点图中右键选择“添加趋势曲线”，选择合适的曲线，对回流率曲线，我这边得出的结论是基本符合幂规律，并选择“显示公式”、”显示平方值”，然后就会得到一条非常优美的幂规律曲线，而且该规律的方值很高，也就是拟合的曲线非常好地解析了原数据的方差。如果不放心的拟合结果，也可以用来验证一下，我这边的验证结果是给出的拟合结果与的完全一致。

当然了，该曲线也有一定的欺骗性。由于是老用户的回流曲线，沉默的天数越多的基数也就越大，我这边统计的数据，第天的老用户是第二天的倍多。因此实际上更关注的是沉默了前几天的回流率的拟合程度，但里曲线拟合过程对所有点是平等的，因此对于这个用这个结果来预测仍然会有较大的误差。实际上，看图上的拟合结果，你就会发现那些散点在曲线周围的波动是有明显的周期性的。进一步思考你就会发现这就是显著的工作日和假期规律。因此可以对老用户的回流率做进一步的分解，分别拟合工作日和假期的规律，发现方值有进一步的提高：


如果你发现拟合的规律还不满意，可以进一步的把回流率按星期规律拆分成条。
拟合新增用户的留存率模型
对于新增用户的留存率模型，采用上述方法继续分解成工作日和假期进行留存率曲线的拟合。新增用户的留存率通常更符合对数模型：


新增用户的留存有个问题是由于当天的新增留存较高，新增留存率相对于其他天而言是个孤立点，也就是第天的新增留存率是个孤立点。我的处理方法是认为所有工作日和假期的第天新增留存率是相同的，实际上统计了部分数据后的确误差在以内。
预测计算
选定了预测起点后，就可以对后续天的进行迭代预测。预测第天的，先预测第天老用户的回流总量：

 表示第  天前的所有老用户， 表示第  天前的老用户回流率。
第天的新增用户留存总量：

表示第  天前的所有纯新增用户， 表示第  天前的纯新增用户的回流率。
根据模型假设，则第天的为：

对接下来预测天的时，因为之前第天已经有的用户回来到当天，则第天前的老用户总量需要重新更新为：

预测效果验证
选定为起点，计算了共天内的老用户，使用上诉方法对  的进行了预测。所有天的平均绝对值误差在以内，误差较大的天为左右。误差较大的那几天主要是些特殊的日子，并且我们自己也有些特殊的运营手段刺激，如，这个后续可以对这些特殊日子附加一个增益即可提高精度。预测值与真实值的效果如下图所示：

模型解析
首先一个问题，老用户回流率曲线是幂规律，新增用户的留存率曲线是对数规律，为啥说他们都是线性模型呢？实际上，通过适当的变换，他们都可以变成线性形式，而且程序里实现幂规律和对数规律的拟合时都是变换成线性形式求解的。对幂规律，其表达式为：

等式两边去，式变成：
  
以和为新的自变量，令=，=，式就成了熟悉的一次线性表达式：

对于对数规律，其变换过程也类似，也会变成一个一次线性表达式。
模型对实际业务的指导意义
通过建立的上述预测模型，可以清晰的反映了老用户的回流规律与新增用户的留存规律，从中可以发现一些有意思的指标。比如对于我们的业务，老用户沉默天内有左右的回流概率，天后回流的概率已经低至以内，由此产生的一个策略就是对沉默天内的用户应该是免打扰，沉默天以上的用户应该进行强运营。
通过该模型也可以给出一些量化的预期。比如希望加大新增投入来提高，以前是只能拍脑袋给个估计，现在就可以根据新增增加的量来预测对带来的确切提升量。当然，由于新增的渠道差别较大，单纯这么预估还是有较大的误差。接下来就可以对新增用户分渠道来拟合新增留存率，这样就可以较为准确地预估不同渠道的新增量对的量化影响。
总结
把分解为老用户与新增用户后，就可以采用简单的线性模型对进行较为有效的预测，预测误差大部分都能控制在以内，并且整个建模过程在里就能解决。
这个预测方法主要有以下优点：模型只反映最近一段时间内的规律，不会受到太多历史因素的影响；模型训练简单，也能较快地反映最近的变化趋势，更新非常方便；容易解析。
当然，模型的缺点也非常明显：预测精度一般；预测过程比较复杂，需要迭代预测，造成误差累积；对特殊日子需要手动处理，增加偏置。这是《使用腾讯云学习深度学习》系列文章的第五篇，以车牌识别和简单为例，谈了谈如何进行字母、数字的识别以及定位。本系列文章主要介绍如何使用腾讯云服务器进行深度学习运算，前面主要介绍原理部分，后期则以实践为主。
往期内容：

使用腾讯云  学习深度学习系列之一：传统机器学习的回顾
使用腾讯云  学习深度学习系列之二： 简明原理
使用腾讯云  学习深度学习系列之三：搭建深度神经网络
使用腾讯云  学习深度学习系列之四：深度学习的特征工程


上一节，我们简要介绍了一些与深度学习相关的数据预处理方法。其中我们特别提到，使用 基于深度学习的   方法，可以让“草书” 字体的手写数字同样也可以被高效识别。
但无论是工整书写的  官网上的  教程，还是上节提到“草书”数字，都是 单一的数字识别问题。 但是，在实际生活中，遇到数字、字母识别问题时，往往需要识别一组数字。这时候一个简单的深度神经网络可能就做不到了。本节内容，就是在讨论遇到这种情况时，应该如何调整深度学习模型。
 固定长度
固定长度的字符、数字识别，比较常见的应用场景包括：

识别验证码
识别机动车车牌

识别验证码的方法，这篇文章 有详细介绍。不过该文章使用的是版本较早的 ，实际使用时会有一些问题。如果想尝试，根据 的提示更改就好，最终效果也是相当不错：

我们这里要识别的内容，是中华人民共和国机动车车牌。相比上面例子的  位验证码，车牌长度更长，达到了  位，并且内容也更加丰富，第一位是各省的汉字简称，第二位是  的大写字母，位则是数字、字母混合。
由于车牌涉及个人隐私，我们使用了用户  在  上开源的一个车牌生成器，随机的生成一些车牌的图片，用于模型训练。当然这个项目同样提供了完整的  深度学习框架编写的代码，我们接下来会用  再写一个。
首先做些准备工作，从  的开源项目中获取必要的文件：
 从   项目下载车牌生成器以及字体文件
  
   
    _ = \        _ = \              |  _\                _ _\                 |  \         __  

来看看生成器的效果：
   
   
        
   
 _  _
 _  __
   
 
   
 _  

   

   

 


 = 
__=
_=

 = 京 沪 津 渝 冀 晋 蒙 辽 吉 黑 苏 浙 皖 闽 赣 鲁 豫 鄂 湘 粤 桂
             琼 川 贵 云 藏 陕 甘 青 宁 新           
                                 
              
             

_ =  

_ = 
 = 
 = _

 = 
__ = 

_ = 
   
    _ = 
       
        __

    __

     = = 
      = _
     _ = 


看来  开源的车牌生成器，随机生成的车牌确实达到了以假乱真的效果。于是我们基于这个生成器，再自己写一个生成器，用于深度神经网络的数据输入：
 _=
     
        __ = _  
         = _ =
         =   _     _ =
         = _
           _
             _  
                _ = 

              

因为是固定长度，所以我们有个想法，就是既然我们知道识别七次，那就可以用七个模型按照顺序识别。这个思路没有问题，但实际上根据之前卷积神经网络的原理，实际上卷积神经网络在扫描整张图片的过程中，已经对整个图像的内容以及相对位置关系有所了解，所以，七个模型的卷积层实际上是可以共享的。我们实际上可以用一个 一组卷积层个全链接层 的架构，来对应输入的车牌图片：
 = =

_ =   
 = _
   
     =    =
     =    =
     = _= 
 = 
 = 

_ = 
 = _ = =    
 = =_ =
=_
              =
              =

__= __= _== =


训练模型：
_ = _ =_ = __=

_ __= =
                    _= _=
                    =_


 
 ==============================       _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   __   __   __   __   __   __   __   __   __   __   __   __   __   __ 
 
 ==============================       _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   __   __   __   __   __   __   __   __   __   __   __   __   __   __ 
 
 ==============================       _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   __   __   __   __   __   __   __   __   __   __   __   __   __   __ 
 
 ==============================       _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   __   __   __   __   __   __   __   __   __   __   __   __   __   __ 
 
 ==============================       _   _   _   _   _   _   _   _   _   _   _   _   _   _   _   __   __   __   __   __   __   __   __   __   __   __   __   __   __ 
可见五轮训练后，即便是位置靠后的几位车牌，也实现了  的识别准确率。
展示下模型预测结果：
 = =  
_=  

 = =
_ =   _      _  
   _
     = _
    
    __=
    __


可见预测的其实相当不错，很多字体已经非常模糊，模型仍然可以看出来。图中一个错误是 皖 被预测成了 皖，当然这也和图片裁剪不当有一定的关系。
 不固定长度
车牌的应用场景中，我们固定了长度为位，并且基于这个预设设计了卷积神经网络。但是在实际运用中，可能长度并不固定。此时如果长度过长，用这个架构也将会导致参数过多，占用过多显存。
针对这种情况， 的案例中，提供了一种基于循环神经网络的方法，在   中有写到。具体而言，就是数据首先通过卷积神经网络部分扫描特征，然后通过循环神经网络部分，同时从左到右、从右到左扫描特征，最后基于扫描的结果，通过计算    损失函数，完成模型训练。
 循环神经网络
使用循环神经网络，是因为循环神经网络有一个很重要的特点，就是相邻的节点之间，可以相互影响。这里相邻节点，既可以是时间上的前一秒数据和后一秒数据，也可以是位置关系上的，比如我们这里从左向右扫描，左边一列的扫描结果会影响右边一列的扫描结果。

图片来源：知乎：卷积神经网络、循环神经网络、深度神经网络的内部网络结构有什么区别。
  损失函数
同时，对于循环神经网络的结果，由于长度不固定，可能会有空间上的“错配”：

图片来源：          
但由于这种错配实际上并没有什么严重的影响，如上图所示， ______ 和 _____ 其实都是  这个单词，因此这里这种错配在损失函数的优化环节中，是需要被忽略掉的。于是这里就使用了 优化函数。 可以在计算过程中，通过综合所有可能情况的排列组合，进而忽略相对的位置关系。
 的   函数位于 _ 这个文件中，内容如下：
   
   _  



 ___ _ _ _
           
     
        _  ` __`
               
        _  ` _ _`
                   
        _  ` `     
                `_`
        _  ` `     
                `_`
     
             
                
    
    _ = __
    _ = __
    _ = ______ _

    _ = _ =    

     __=_
                                       =_
                                       _=_ 

 完整代码
首先是一些必要的函数：
 
 
 
 
   
 
   
   
 

     
    
       
    
   
   
   
 _  _
   
   

 _  _
   
   

 

 = 
__=
_=


_ = _



 从  官方文件中  相关的函数
 _
 _  

必要的参数：
_ = 
_ = 
_  = 
_ = 
_ = 
__ = 
_ = 
_ = __  _

  
_ = 
_ =  
_ = 
__ = 
_ = 
_ = _ _ 

使用这些函数以及对应参数构建生成器，生成不固定长度的验证码：
 = _
                                    = =

_ = _= __
                                 _= __
                                 _=
                                 _=_
                                 _=_
                                 _=_  
                                 _=__  _
                                 
 = 

构建网络：
_ = =_ =_ =
 = _ _ =
                   = _=_
                   =_
 = _=_ _ =
 = _ _ =
                   = _=_
                   =
 = _=_ _ =

___ = _  _   _  _    _
 = _=___ =

       
 = __ = =

     
           
_ = _ _= _=_ =
_ = _ _= _= _=_ =_
_ = _ _
_ = _ _= _=_ =_
_ = _ _= _= _=_ =__

      
 = ___ _=_
                  =_ _
_ =  =

=_ =_
 = =_ =____ =
_ = =_ = =
_ = =_ = =
         
         

_ = __ _= =_  _ _

      
 = = = = = =

 = =_  _ _ =_

              
={  _ _ _} =
 _  
    _ = _ _   _  
    __

            
_ = _ _

 反馈函数，即运行固定次数后，执行反馈函数可保存模型，并且可视化当前训练的效果
_ = _ _ __

模型完整架构如下图所示：

执行训练：
_=__ __=__  _
                        =_ _=__ _=_
                        == _ _ _=_

 
 ============================      
             
 ==============================       _ 
完成一个  后，输出文件夹 _ 里，可以看到，一轮训练后，我们模型训练效果如下：

目前腾讯云  服务器已经在月日盛大公测，本章代码也可以用较小的数据量、较低的_在普通云服务器上尝试一下，但是随着处理运算量越来越大，必须租用 云服务器 才可以快速算出结果。服务器的租用方式、价格，详情请见 腾讯云  云服务器今日全量上线！注：本篇内容来自”腾讯技术工程官方号“，公众号：
前言
 是腾讯内部最大的离线处理平台，也是国内最大的  集群之一。在运营这么大集群的时候，运营面临各种各样的难题，在解决这些难题的过程中，团队提炼出来的一个运营理念，用两句话去描述。
用建模的思路去解决运营的难题运营的问题怎么解决？你必须用一些数据建模的办法，把这个难题解析清楚，然后我们再去考虑运营平台建设。运营平台支撑模型运作不是为了建设运营平台而建设，而是它必须有一定的运营理念。下文写到这样的运营理念是怎么贯穿在迁移平台的建设里面的。本文主题主要包含以下几个方面：、介绍一下腾讯大规模集群 ，以及为什么做迁移。、迁移模型是怎么样的。、迁移平台是怎么做的。
接上篇：鹅厂上万节点大规模集群的跨城自动迁移上
跨城迁移平台的迁移策略
刚才我们说的是模型，有一套模型指导我们做迁移这个事情，有了模型之后，需要一个平台来支撑这个模型。
关系从无到有，对最基础的关系进行聚合，形成关系链。找关系链的核心结点，把关系链拆分，将小的关系链融合成更大的关系链。迁移平台有一个模块专门负责关系链的这类操作。
另外一个模块是关系链的迁移模块，就是怎么把已经划分好的关系链从一个城市挪到另外一个城市，它涉及数据的迁移，任务的切换，普通表升级双写表，依赖任务和同步任务的处理。
此外还有一个模块是平台保障，数据校验，任务校验和跨城流量的监控。
关系链迁移模块
迁移模型解决了一件事情，就是从无到有，构造我们的关系链，然后把关系链从大拆小，拆到合适迁移一个个的规模适中的关系链。
关系链迁移是解决另外一个问题。一个关系链里包含任务和数据，在迁移过程中，它们的状态会变化。比如说数据还在写， 的数据每天在不断变化。任务也可能还正在跑，没有结束。
也就是说，关系链并不是静止的状态，它是动态变化的。关系链迁移是要保障在动态变化的环境下，数据和任务的迁移是准确的。
关系链迁移模块的状态变迁
关系链迁移时，首先会看关系链里有什么双写表，先处理双写表，之后处理其他数据的迁移。数据迁移时，先按表分区展开，按分区迁移，这可以加快迁移的速度。
迁移开始前会通知用户，用户可以不用管，但是他需要被通知到。如果遇到什么异常，用户可以分析是不是因为这个变化导致。
通知完用户，会展开所有表的分区，对展开之后的分区做迁移操作，也就是 。当  到一定进度的时候，会做冻结任务的操作。关系链里面的任务可能有状态变化，冻结操作可以将其转变成不可变的状态。
把数据的写入任务冻结，写入任务可以通过关系链找到，如果没有关系链这种冻结操作也无法实施。迁移的过程不允许任务进行写入操作，因为写入操作会导致数据很难保证一致性。
把任务冻结之后进入等待数据一致的状态，在这个状态里还会不断对比两个城市之间的数据差异。
比如新增数据，数据不一样了就会再做一次数据同步的工作，直到数据完全一致，进入一致状态的时候，数据迁移的工作就完成了。之后进行任务迁移，任务迁移后就可以解冻任务，完成整个关系链的迁移。
这里最重要的是有一个冻结任务的逻辑，保证我们在数据迁移的时候，有一个时间段不会有任务在修改数据。冻结任务的时间越短越好，这就要求数据迁移的速度越快越好。数据仓库里的表占用空间有大有小，对于大表，直接进行表级  的时候，通常起的  数很少，这时候并发上不来，速度也上不来。所以对于大表，需要采用分区级的 。对于小表则相反，分区级的  往往是浪费。
另外关系链的迁移需要支持并发，关系链的在迁移过程消耗的资源不一样，有时候是网络流量大有时候网络流量小。关系链并发迁移，可以规避这种情况，实现接近满负载流量的迁移。
平台保障模块
平台保障模块，包括两大块的保障：一个是基础保障，还有是监控保障。
、基础保障做了两件事情，一个是数据校验，迁移完成两边数据要做校验，另外一件事情是任务的抽样重跑。我们引入一个思路，在关系链里面抽出一条垂直的路径，从根节点一路下来重做任务。
一个关系链可能有几十个结点，抽样后只有四五个结点。对抽样出来的结点进行重跑，重跑后做数据比对，看看是不是一致的。这样可以保证数据是准确的，任务也是准确的。
、监控保障
做了几件事情，一个是数据量的监控，迁移完成后，监控数据量的波动，看看数据量跟之前的是不是有明显波动。另外会监控所有迁移过的任务，看看它们在新的城市是否运行正常。
最后，是流量的异常监控。数据和任务都验证成功，迁移也就是成功的了。数据已经从一个城市整体迁移到另外一个城市，任务也一起切换过来。最后要考虑的是，会不会有异常情况导致我们的跨城流量出现异常上涨。
我们有一个流量监控的机制，来解决一些例外情况导致的流量异常。通过加强流量的异常监控，并实现任务的自动切换。每五分钟采集正在运行的所有任务，以及它们访问的数据。
如果发现有任务在城市的计算集群里面跑，但是它访问了城市的数据，这种异常的情况会被监控起来。当数据穿越流量过高时，会自动把任务杀掉，同时自动进行任务切换。
跨城迁移平台的迁移策略
我们已经介绍了迁移模型和迁移平台，我们有一套模型去解决我们的运营面临跨城迁移的难点，然后我们也有一个平台支撑这个关系链迁移的逻辑。接下来我要再讲一下我们的迁移策略。
迁移集群独立部署
迁移集群需要独立部署，迁移最大的工作量是数据迁移，有很多数据要从一个地方同步到另外一个地方，数据迁移的方式就是做 ， 是一个任务， 任务需要消耗计算资源。迁移集群最好独立开来，这样就不会影响正常的调度任务。
迁移集群最大的特点是网络流量会跑得很高，因为它只做一件事情，从源集群拉取数据，写到目标集群，观察迁移集群的网络流量的时候就会发现，它跑起来的时候，出入流量是一样的，它是网络流量高消耗的集群。
它有一个特点，它是低消耗的集群。把它单独做为迁移集群，可以做到两个特性化配置，一个就是采用高网络配置的机型，比如使用万兆网卡的机型。另一个是采用低内存的任务配置以及对迁移集群的计算节点采用高并发的配置。
这样可以在尽量减少迁移集群的设备需求量的同时，大大提升迁移速度。我们采用台机器的迁移集群就能支撑的迁移流量。
迁移的流量控制

迁移的流量控制，这张图很有意思的地方是，当我们做数据迁移的时候，源集群城市 集群，迁移计算集群，目标集群城市 集群，这三个集群的流量有很有意思的关系。
源集群是一个大集群，通常有上千台机器；迁移计算集群则少得多，可能只有几十台。迁移计算集群在网络打满的情况下，对源集群的网络消耗可以计算出来，对目标集群的网络消耗也是可以计算出来的。
举个例子，如果迁移计算集群有台的规模，这台设备的网络用满的时候，源集群如果只有台，网络也会被用满，网络用满的时候会对任务一定会有影响。
还有一个比较有意思的事情，目标集群的流量要比迁移集群流量大，原因是写数据时  有多份拷贝，会导致目标集群的流量翻倍增加。我们在使用迁移集群的时候，可以对迁移集群进行资源池管理，限定它的资源池大小，也就是限定迁移最大的并发数，从而对迁移流量进行控制。
集群的同步任务
再说说同步任务，同步任务对流量影响会比较小，因为同步任务方向和迁移方向是反方向的，迁移方向是城市到城市，同步任务是逆向回来的，所以流量很小。
我们尽量降低同步任务对业务的影响，建议使用独立的同步任务资源池，这个资源池可以更大一些，让同步任务快速完成，不影响其他任务。
集群的缩容扩容策略
最后， 集群的缩容扩容策略，在集群缩容的时候，要优先考虑集群整体下线，在缩容前要先进行数据清理和小文件合并。
另外，迁移的时候设备是一批批搬迁的，比如每一轮搬迁台机器。这台扩容到目标集群的时候，新扩容的节点在一段时间内不参与计算。因为  的  机制会导致新扩容机器的网络流量被打满，直接影响计算任务的速度。一、实验简介
本实验详细介绍小程序和服务号开发环境及云端软件安装部署； 通过实验操作掌握 、、 等云端软件使用；掌握各云资源的创建和管理方法。
二、实验目标

完成开发环境搭建

熟练掌握 、、 软件使用

掌握各种云资源的创建和管理方法。


三、实验步骤
 分配域名  申请  证书
 分配域名
分别为开发管理平台和   分配两个二级域名。
域名地址用途： 待定开发管理平台； 待定     服务器。
 免费申请  证书
为保证数据在传输中不被窃取，小程序要求其服务端启用证书，对传输中的数据加密。开发管理平台中保存了企业内部文档、代码等私密数据，所以也需要启用证书，对传输过程进行加密，防止数据被窃取。我们将在后续详细介绍  证书加密原理。
按本节提示，为  和  申请  证书。

第一步 登录腾讯云  证书控制台，进入证书列表，点击【申请证书按钮】 。
第二步 输入域名，并设定密码，点击确定。
第三步 根据系统提示，设置  解析记录，验证域名所有信息。
第四步 添加  记录。
第五步 收到证书申请成功短信后，登录证书控制台，点击下载按钮，可以下载证书的相关文件。
 创建   实例
按本节介绍的方法，创建 两台  实例，分别用于开发管理平台和微信解决方案核心数据存储。
 创建并初始化实例
第一步： 进入腾讯云云数据库管理面板 点击左上角【新建】按钮。
第二步：选择广州三区、 内存、 硬盘、  的配置 确认购买后创建实例。
第三步：返回云数据库列表，点击【初始化】实例，选择 字符集，设定密码  帐号密码，初始化实例。
 创建数据库
第一步 在数据库控制台点击数据库实例，进入详情页，然后点击右上角【登录数据库】按钮，进入  。
第二步 输入数据库  密码登录  初始化数据库时设定的密码，参见实验二 。
第三步 点击  左栏菜单，点击【新建】按钮，在主界面输入数据库名称 例如 并选择选择数据库字符集 __ 。
第四步 创建成功后显示。
 创建用户
第一步： 进入云数据库详情页，点击【帐号管理】，切换到数据库实例帐号管理面板。
第二步： 点击 【创建帐号】按钮，输入  帐号密码，后点击下一步。
第三步： 填写用户名和密码等信息后点击【确定】。
第四步： 在左侧菜单选择我们刚刚创建的数据库   在右侧的界面点击全选后，点击【确定】。该帐号拥有数据库  所有权限。
第五步：创建成功，在帐号列表中将出现刚刚创建的用户。
 创建  实例
第一步 进入腾讯云云存储  管理面板 点击左上角【新建】按钮。
第二步 选择广州三区与云主机保持一致、主从版、容量  的配置，确认购买后创建实例。
第三步 返回云存储  实例列表，点击【初始化】实例，设定密码密码，初始化实例。
 创建云服务器  实例
按本节介绍的方法，创建 两台  实例，分别用于开发管理平台和微信解决方案     服务器。
 创建实例

第一步 进入腾讯云云主机管理面板 点击左上角【新建】按钮。
第二步 选择普通型、广州三区、标准型号主机。
第三步 选择      位 镜像。
第四步 选择 系统盘和数据盘。
第五步 填写密码并牢记，将安全组设置为 默认安全组方通全部端口 ， 确认购买后创建主机。
第六步 等待云主机创建完毕， 连接登录测试。
  出现密码输入提示时，输入创建云主机时设置的密码
  
验证信息 成功登录后，显示如下服务器摘要信息。

 挂载数据盘
格式数据盘，并挂载到 
  查看磁盘设备名称
    
 
   格式化磁盘
      依次输入    回车 回车 
 
   查看盘符
    
 
  创建文件系统
   

  挂载到 
   
    

  查看结果
  
返回如下信息，说明挂载成功

设定为自动挂载
  添加到  ，开机自动挂载
           

 安装配置 
登录云主机   后运行下面的命令

  安装 
    | 

  启用加速器
     _=\\_ =
 \  

  重启 
    

  验证安装
    
返回如下信息，说明安装成功

 搭建      服务器
 安装 
登录云主机  需要替换为你的腾讯云的公网 ， 使用   命令， 创建一个名为 的容器。

    = \
  = \
   \
   \
   \
     \
 
 解析域名
参照  示例， 将域名  解析到 需要替换为你的腾讯云的公网  。
 安装配置
访问   根据页面提示， 参考  文档完成      服务器配置。
第一步 输入  地址密码，验证并保存。
第二步 输入  帐号配置，验证并保存。
第三步 输入系统信息。
第四步 输入默认管理员密码， 开始安装。
第五步 团队猫   安装成功 。

相关推荐如何用快速在腾讯云上开发小程序之系列：搭建开发管理平台如何用快速在腾讯云上开发小程序之系列 ：实现腾讯云 调用此篇文章属于微信技术介绍系列，着重介绍如何采用深度序列学习  方法实现端到端的文本串识别并应用于微信产品。本篇主要为方法综述，下一篇着重介绍深度序列学习技术在微信产品中的落地。这里，文本串识别的输入默认已经是包含文本行或者单词的最小外接矩形框，其目的是识别其中的文字内容，如图所示。前面的文本框检测和定位工作，详见我们之前的文章【】介绍。

图：文本串识别示例
分阶段端到端
文本串识别作为目标识别的一个子领域，其本质是一个多类分类问题：旨在寻找从文本串图像到文本串内容的一种映射，这和人脸识别、车辆识别等都是类似的。然而，文本串作为序列目标，又有其独特性：
 局部性：即文本串中的局部都会直接体现在其整体中。举个栗子：“我想吃饭” 和“我不想吃饭”，一字之差，体现在图像特征中，只是局部特征变化，然而文本串的含义截然相反。而在一般的目标识别问题中细粒度目标识别除外，这种局部干扰恰恰是要被抑制的。比如，张三带了墨镜还是张三。
 组合性：文本串内容千差万别，以常用英文单词为例，约有多个。汉字的组合就更加庞大了。然而不管是万字长文，还是简短对话，它们的组成都是有限种类的字符：个英文字母，个数字，几千个汉字，诸如此类。
基于以上两点，一种直观的串识别方法是：首先切分到单字，识别单字的类别，然后将识别结果串联起来。这种化整为零的方法是在深度学习出现之前的几十年里通用的方法，其流程如图所示。









基于投影直方图切分
基于笔画宽度滤波器切分



图：根据各种图像特征进行单字切分
然而，这个方法有两个明显的弊端： 切分错误会影响识别性能； 单字识别未能考虑上下文信息。为了弥补这两点缺陷，传统方法往往需要对图像进行“过切分”，即找到所有可能是切点的位置，然后再将所有切片和可能的切片组合统统送给单字识别模块，通过在各个识别结果中间进行“动态规划”，寻找一条最优路径，从而确定切分和识别的结果。在寻优过程中，往往还需要结合文字的外观统计特征以及语言模型若干字的同现概率。可见，这里切分、识别和后处理存在深度耦合，导致实际系统中的串识别模块往往堆砌了非常复杂和可读性差的算法。而且，即便如此，传统方法依然有不可突破的性能瓶颈，比如一些复杂的艺术体和手写体文字，严重粘连的情况等等。总而言之，传统方法的问题在于：处理流程繁琐冗长导致错误不断传递，以及过分倚重人工规则并轻视大规模数据训练。

图：基于过切分和动态规划得到文本串内容
从 年的竞赛开始，深度学习首先在图像识别领域发挥出巨大威力。随着研究的深入，深度学习逐渐被应用到音频、视频以及自然语言理解领域。这些领域的特点是针对时序数据的建模。如何利用深度学习来进行端到端的学习，并摒弃基于人工规则的中间步骤，以提升 的效果已经成为当前研究的热点。基本思路是与结合：被用于提取有表征能力的图像特征，而天然适合处理序列问题，学习上下文关系。这种的混合网络从本质上革新了文本串识别领域的研究。
：

图：实现端到端的文本串识别
目前在串识别领域非常成功的模型。在我们之前的文章中也对其进行过介绍【】。模型前面的部分，将图像进行空间上的保序压缩，相当于沿水平方向形成若干切片，每个切片对应一个特征向量。由于卷积的感受野会相互重叠，这类特征本身就包含了一定的上下文关系。接下来的部分，采用双层双向的，进一步学习上下文特征，据此得到切片对应的字符类别。最后的层设计了一种结构化损失，通过引入空白类和映射法则模拟了动态规划的过程。在图像特征和识别内容序列之间是严格保序的，极其擅长识别字分割比较困难的文字序列，甚至包括潦草的手写电话号码。此外，这一序列学习模型还使得训练数据的标注难度大为降低，便于收集更大规模的训练数据。
： 
文本串识别另一种常用的网络模型为编码解码模型，并加入了注意力模型 来帮助特征对齐，故简称。其方法流程如图所示：

图：实现端到端的文本串识别
模型从提出伊始就是为了解决问题。即根据一个输入序列，来生成另一个输出序列。这里的编码，就是将输入序列转化成一个固定长度的向量；解码，就是将之前生成的固定向量再转化成输出序列。模型虽然非常经典，但是局限性也很大：编码和解码之间的唯一联系就是一个固定长度的语义向量。也就是说，编码器要将整个序列的信息压缩进一个固定长度的向量中去。这种强压缩导致语义向量无法完全表示整个序列的信息，且先输入的内容携带的信息会被后输入的信息稀释。输入序列越长，这个现象就越严重。
模型旨在解决这个问题：在产生当前输出同时，还会产生一个“注意力范围”表示接下来输出的时候要重点关注输入序列中的哪些部分，然后根据关注的区域来产生下一个输出，如此往复。这样，解码不再依赖一个中间向量，而是由注意力模型对所有编码特征进行加权调整后得到的特征向量。模型实现了一个软对齐 的功能，同时也使得输入向量和输出向量不再是严格保序的。后面会提到这对于文本串识别的影响。
值得一提的是，今年月，发布了 方法，用于端到端的自然场景文本识别。该方法在的基础上，将输入扩展到全图如图所示。因此，该方法理论上可以实现任意包含文字的图片到文字内容的映射，不仅不需要文字切分，连文本检测步骤也不需要了听起来是不是很酷。该算法在   数据集一个法国街道路标数据集，包含约街道名称中达到了  的准确率。

图：谷歌的 实现端到端的文字检测识别
 从流程图中可以看到，该网络输入为同一标志牌的四张不同角度拍摄的图像，经过网络的一种对图像编码后形成特征图，然后根据注意力模型给出的权重对不同位置的特征加权作为解码模型的输入。为了突出位置信息，这里采用了  ，即位置相关的注意力模型。从文章给出的注意力模型可视化结果可以看出，该模型的确可以在一定程度上预测文字出现的位置。
该方法可以同时对语言和图像序列建模，可以适应大小、位置分布不均匀的文字排版，不需要标注文本框的位置，真正实现了端到端的文字检测识别。
实践中，我们利用公开的数据集复现该论文的结果。但也发现该方法的一些局限性：由于注意力模型的软对齐机制，可能出现识别结果字符内容乱序；因记忆功能限制，不适用于文字内容较多的图片；由于输入图像中包含较多背景干扰，仅当文字内容和样式比较单一的情况下效果可靠。
本文主要对于深度序列学习在中的应用进行了综述总结，接下来将主要介绍这类技术在微信产品中的落地情况。
相关文章：
【】我们教电脑识别视频字幕内容简介
年月日，《中华人民共和国网络安全法》正式实施，其对业务系统安全审计提出了新的要求。原文摘录如下：“第二十一条 国家实行网络安全等级保护制度。网络运营者应当按照网络安全等级保护制度的要求，履行下列安全保护义务，保障网络免受干扰、破坏或者未经授权的访问，防止网络数据泄露或者被窃取、篡改：一不相关，此处略去；二采取防范计算机病毒和网络攻击、网络侵入等危害网络安全行为的技术措施；三采取监测、记录网络运行状态、网络安全事件的技术措施，并按照规定留存相关的网络日志不少于六个月； 四采取数据分类、重要数据备份和加密等措施；”
按照新法规的要求，传统的运维做法及日志分析方式很难满足合规要求，传统方式存在以下弊端：
、运维方面

需要登陆每一台服务器，使用脚本命令或程序查看，操作繁琐，容易出错；

数据是孤立分散的，无法进行关联，无法提取出其中的共性；

只能做简单搜索和统计，无法满足分析要求；

没有实时监控和报警，如程序出错日志。


、安全方面

黑客入侵后往往会删除、修改日志，抹除入侵痕迹，导致无法通过日志分析攻击行为；

海量的  报警，根本无法辨别是否是误报。


、存储日志性能方面

数据库的  无法适应千变万化的日志格式；

没有日志生命周期管理手段；

无法提供海量日志全文检索和字段统计功能。


总结起来就是：日志数据复杂，管理难度大，难以集中管理，因此更无法进行关联分析。那么该法规所涉及的行业和企业，尤其是需要满足网络安全等级保护第三级要求的企业，专业的日志审计产品成为其满足合规的必然选择。
那选择什么样的日志分析产品，才能满足合规要求？
提供数据脱敏功能。满足网络安全法要求，对用户数据进行脱敏处理。
有数据备份、还原功能。按安全法要求，数据至少备份个月，同时能够还原指定时间范围的日志数据，以便监管部门调取。
有灵活的查询搜索功能。可以对数据进行实时搜索，历史数据还原搜索，满足监管部门的查询需求。
网络安全事件实时预警，防控。可以对网络设备节点故障进行实时告警及故障快速分析溯源，发现传统安全设备没有发现或阻断的安全威胁，对线上故障及威胁快速响应。
符合国家标准，并通过了具备资格机构的安全认证。
日志易作为国内领先的日志分析产品，能够提供以下功能，帮助用户满足日志审计合规要求。
第一，日志易对日志数据提供了脱敏功能，保证日志处理后再次下载后的结果也是脱敏的

支持日志全生命周期管理，支持配置不同种类日志的生命周期，支持索引备份，支持界面化日志恢复，支持全文检索。

使用日志易产品，用户可以实现：
满足网络安全法要求；
满足监管部门日志查询要求；
实现数据生命周期管理，既提供明文数据查询，也提供脱敏数据查询，既能实现实时数据快速搜索，也能实现历史数据还原搜索。
第二，日志易能够实现对网络设备、安全设备的日志审计。
网络设备审计
实时监控所有网络设备日志：包括每台网络设备的日志量趋势，日志等级分布，通过  地址和日志等级过滤，可以联动统计和查询某台异常网络设备的事件趋势，日志等级分别和日志详情，方便快速定位故障。
防火墙日志审计
提供日志级别、事件代码、五元组源地址、目的地址、源端口、目的端口、访问协议供用户搜索过滤，用户可以根据源 、日志级别等快速进行日志溯源。
输出防火墙日志五元组巡检日报：

通过分析防火墙日志，识别可疑的扫描源  信息、被扫描可疑目的  和目的端口信息。
 日志审计实时攻击概况分析

另外，日志易还提供攻击明细分析、邮件攻击分析、 注入攻击分析、 攻击分析等功能。
安全设备日志分析场景
日志易可实现上百种安全设备事件统计规则，例如恶意软件访问信息的统计，包括恶意软件源  分布、恶意软件目的  分布、恶意软件服务分布、恶意软件名、服务、事件数及百分比等，每种统计可以自定义统计周期。
通过对网络设备、安全设备的审计功能，日志易可以帮助用户：
通过日志手段对网络设备进行实时健康度监控，有效补充网管软件的不足；
满足国家等级保护要求，对网络设备，安全设备日志进行集中收集和存储；
自动输出日常安全日报、周报、月报，提高安全运维人员工作效率；
通过对安全设备日志分析，有效实现安全日志和攻击溯源分析，加强网络安全管理，提高网络安全等级。
最后，合规并不仅仅是为了应对监管，所谓安全无小事，当前用户安全防御往往集中在外网，内网安全防范往往比较薄弱。然而年  调查反馈的数据泄露是来于内部威胁，内部人员相对外部攻击更容易接近重要信息或系统，正所谓“祸起萧墙”，攻破堡垒的往往都是“自己人”，因此对内网各环节的用户行为审计就显得愈发重要。
使用日志易通过系统用户登录行为分析、用户操作行为分析、文件访问行为分析、用户登录域控日志分析、 日志分析等全方位的内容用户行为分析，不仅能实现安全行为审计，还能协助内网运维分析，及时发现内网网络隐患，是安全运营中心的重要组成部分，能有效补充内网安全防御薄弱环节，从内到外构建立体化安全防护堡垒。前端从业几年，积累了不少开源库。
有时候想查阅以前的库，但不好找，大多库都是英文说明，对中文开发者不太友好，这里整理下收集的库，方便需要的时候查阅。
其实老早就有整理上资源的想法，现在才付诸行动。
正在写的时候收到稀土圈公众号开源库功能上线的通知，英雄所见略同。

视频处理的库 

浏览器上转换和操作视频

端解析请求中表单数据，包括文件上传

腾讯团队前端知识库

生成项目的工具

列表拖放组件库

辅助配置

前端开发面试集英文版

前端技能汇总很全

前端大神 张云龙 关于前端工程问题的博客

腾讯前端郭林烁的博客

计数展示的动画库例如倒计时动画

中文文档



循环利用节点，减少创建销毁节点开销提升页面性能的库
  
腾讯团队 移动端图片裁剪组件

饿了么前端团队实践

加载框

处理图片的库

比好的例子

基于实现的跨平台调试代理工具，类似与

 ，前后端代码写在同一份文件，根据注释条件编译输出不同内容

腾讯移动前端知识库

日志库

小程序组件化开发框架

比较两份文本差异的库

腾讯 组件化框架

腾讯 模版引擎

移动优先的模版引擎

的测试工具

的测试库

函数式的流处理库

简单、弹性、有趣的测试框架

文件上传的插件

混淆压缩的插件

移动端表单验证控件适用于和

动画库

的移动端事件库

手机腾讯网前端团队开发维护的一个专注于移动端的、带有增量更新特色的模块管理框架

模块化开发框架利用本地缓存

模块加载库利用本地缓存

创建项目的工具

用、、创建跨平台桌面应用

模块加载器

强类型的数据检验库
  
前端模版引擎

饿了么前端团队的组件库业界比较早的组件库

饿了么前端团队的移动端组件库

组件库

前端路由器组件

前端工具库

如何编写高效率的知识库，附测试代码

你不知道的书籍

腾讯的触摸运动组件

邮件组件

时间处理的组件

开发工具

的处理组件

任意精度数值计算的库

静态文件中间件

前端浮层、提示框、下拉框的库

基于 的异步代码同步编写的工具库

日志组件

阿里的组件库，很早、很好、很强大

的组件

的日志组件

前端性能监控组件

工具库

表单处理组件

的客户端

用操作、或 中的数据

腾讯某前端高工写的 插件，用操作对象，将编译成代码

工具书

 编译器，可以用最新语法写

腾讯某前端博客

前端资源库

前端 移动端开发所需要的一些资源与小技巧

工具资源文档库

压缩库

的纯替代方案

前端本地客户端压缩图片、自动按需加载文件

可伸缩布局方案

移动端下拉刷新、上拉加载更多插件

移动端的替代方案

微信的组件库

腾讯团队 前端异常统计框架

一个库

微信端前端组件库

前端数据检验库

微型懒加载库

检测浏览器特性的工具库

处理的库

工具库

可配置白名单的防御库

现代化模块化开发前端构建工具

动画库

的数据流处理库

的开发建议

触摸拨动的插件

划时代意义的前端组件化开发库

生成二维码的插件

前端模块加载器

某前端技术博客

某腾讯前端高工晋级答辩的单页面开发框架

移动端库

移动端触摸处理库

拖拽处理的插件

主题

重置

响应式的库

一个比较早的移动端开发框架

工具库

工具库

混淆压缩库

介绍如何用处理流的工具书

轻量的流式的构建工具

表单验证插件

输入框自动完成的库

字体图标库

将输入框输入转变成标签列表的库

开发框架

输入框自动完成的库

输入框自动完成的库

输入框自动完成的库

出品的输入框自动完成的库

表单检验的库
  
腾讯某前端的模版引擎

前端构建工具

日期控件

时间工具库

 的操作库

表单数据序列化的插件

表单数据序列化的插件

提示框组件 

前端模版引擎

移动端开发框架

移动端快速开发模版

现代化组件化开发框架

 开发框架

前端操作的插件

基于的引擎，是基于开发，那么这个就是基于开发。可以调用库。

处理鼠标滚轮事件的插件

开发模版

 日期控件 

日期控件

前端处理滑动的工具库在上总能碰到奇葩问题

第一个 框架

前端第一个框架打造黑苹果六设置无线网卡上网
前情回顾
打造黑苹果一组装硬件的选择与组装打造黑苹果二制作黑系统安装盘打造黑苹果三设置打造黑苹果四安装系统打造黑苹果五设置系统盘引导，以及安装驱动
前言
通过上面的一系列工作，我想你已经安装上黑系统了。现在插上网线应该就能够上网了。但是，可能你不方便使用有线网络，可能希望像笔记本一样使用无线网卡上网。怎么办？这一章节我们来讲如何操作。
准备一块无线网卡
可能你手上的无线网卡就是支持的，但如果不支持的话，可以去淘宝上找一块的无线网卡。在淘宝搜索 黑苹果无线网卡  即可找到一大堆

好，我就不管你这么找了。建议买信号好一点的，我手上有两块无线网卡，一块是的，信号不好。另外一块是大的，信号很不错，但是每次开机的时候必须重新连接一次才能正常上网，均不完美，也就算了，还是使用信号好一点的吧。
安装无线网卡驱动
这个驱动很不好找，我在淘宝上找黑的卖家，要了一个，在这里放给大家使用。
下载地址：
管大家要分哈，主要是为了也能下载别人提供的好东西，呵呵。
下载好了之后解压，解压后有两个文件，一个是安装程序，一个是卸载程序。
安装过程不表。
安装完成之后，重启电脑，电脑右上角应该出现一个如下图的图标：

我们点击图标，出现下拉菜单，如下图所示

我们点选我们自己的名称，出现如下图所示的输入密码的对话框：

输入密码，点击 ，我们就连接上网啦！上网后，图标就变成了如下图所示：

到此，我们的黑就算完美收官了。
你可以打开 去安装软件了。另外，最近出现了针对的勒索软件，通过各种盗版软件传播，建议大家通过正规途径安装软件，不要因小失大。
本软件由淘宝商家提供，对方没要我一分钱哦，在这里算给他们做一个广告吧。
另外，声卡，是免驱的，也不要安装软件。但是，一定要选择支持的！
本文由原创，允许转载，但转载必须附注首发链接。谢谢。
首发链接：代理池的维护
目前有很多网站提供免费代理，而且种类齐全，比如各个地区、各个匿名级别的都有，不过质量实在不敢恭维，毕竟都是免费公开的，可能一个代理无数个人在用也说不定。所以我们需要做的是大量抓取这些免费代理，然后筛选出其中可用的代理存储起来供我们使用，不可用的进行剔除。
获取代理途径
维护一个代理池第一步就是要找到提供免费代理的站点，例如，网页内容如下：

可以看到网页里提供了一些免费代理列表，包括服务器地址、端口、代理种类、地区、更新时间等等信息。
当前我们需要的就是代理服务器和端口信息，将其爬取下来即可。
维护代理
那么爬取下代理之后怎样保存呢？
首先我们需要确保的目标是可以边取边存，另外还需要定时检查队列中不可用的代理将其剔除，所以需要易于存取。
另外怎样区分哪些是最新的可用的，哪些是旧的，如果用修改时间来标注是可以的，不过更简单的方法就是维护一个队列，只从一端存入，例如右端，这样就能确保最新的代理在队列右端，而在左端则是存入时间较长的代理，如果要取一个可用代理，从队列右端取一个就好了。
那么对于队列的左端，不能让它一直老化下去，还需要做的操作就是定时从队列左端取出代理，然后进行检测，如果可用，重新将其加入右端。
通过以上操作，就保证了代理一直是最新可用的。
所以目前来看，既能高效处理，又可以做到队列动态维护，合适的方法就是利用数据库的队列。
可以定义一个类来维护一个队列，比如方法是批量从左端取出代理，方法是从右端放入可用代理，方法是从右端取出最新可用代理。
 
   
    

 
     ____ = =
        _ =  

      =
         = _    
        _  
         

      
        _ 

     
        
             _
        
             

检测代理
那么如何来检测代理是否可用？可以使用这个代理来请求某个站点，比如百度，如果获得正常的返回结果，那证明代理可用，否则代理不可用。
 = 
 = { }
 =  =
 _ == 
    

例如在这里就是要检测的代理，使用库设置好这个代理，然后请求百度，正常请求，那就可以将这个代理存入。
获取可用代理
现在我们维护了一个代理池，那么这个代理池需要是可以公用的。
比如现在有多个爬虫项目都需要用到代理，而代理池的维护作为另外的一个项目，他们之间如果要建立连接，最恰当的方式就是接口。
所以可以利用服务器来实现一个接口，其他的项目通过请求这个接口得到内容获取到一个可用代理，这样保证了代理池的通用性。
所以要实现这个还需要一个服务器，例如，等等。
例如使用，定义一个路由，然后调用的的方法，返回结果即可。

 _
     = 
     

这样一来，整个程序运行起来后，请求网页就可以看到一个可用代理了。

使用代理
使用代理时只需要请求这个站点，就可以拿到可使用的代理了。
 _
     = 
     

  
     = { _}
     =  =
      

可以定义一个简单的方法，返回网页内容即代理，然后在爬取方法里设置代理使用即可。
样例实现


相关推荐
 代理服务器详解腾讯云搭建代理服务器作者：赵泽鹏


   新特性
前段时间解决了几个  音乐多窗口屏幕显示的 ，虽然这个问题最终不是   版本的问题，多窗口是   之后引入的关于多窗口适配需要注意的地方，但是趁此机会了解一下   版本的新特性也不错，而且   大会刚刚过去，趁这个热度介绍一下。
在大会上介绍到的   新版本更新和优化主要集中在两个方面：  和 ，  主要包含了四个显著特性：       和   ；而  主要在电池续航、安全、启动时间以及稳定性这几个方面做优化。
 通知变更
  版本重新设计了通知，让通知的管理更加方便，首先引入了通知渠道用来让用户统一管理通知，当  设置为  版本时，必须要实现一个或多个通知渠道，如果设置为  版本之前的版本，在  版本设备上的行为则和  版本保持一致。通知渠道提供了一种将应用内的通知变成一个个易于管理组的方法，通知渠道创建并提交到   后，便无法通过编程方式修改通知渠道的行为，这些设置之后则由用户掌控。用户现在可以使用一致的系统  管理大多数与通知有关的设置。所有发布至同一通知渠道的通知都具有相同的行为。当用户长摁通知或者通过设置去到通知的设置页面的时候，可以看到这些界面：

通过这个设置页面可以看到，用户可以将应用所有的通知渠道关闭，或者关闭某一个单独的通知渠道，每一个通知渠道也有相应的行为，用户可以去自行修改，比如修改通知渠道的优先级，如果支持的话，用户还可以去声明通知是否同时显示为应用的角标。  还引入了通知角标，当一个应用的通知没有  的时候，会在应用的图标上面显示一个角标，长摁这个应用的图标，也会显示通知的详情信息：
 版本弃用了对单个通知设置优先级的功能，现在是对通知渠道设置优先级，该通知渠道的所有通知都适用于该优先级，优先级从 __ 至 __，对用户的提醒等级从小到大。关于创建通知渠道组，向渠道组发送通知或者修改通知渠道组设置的代码可以查看  文档：通知渠道。同时还引入了一个通知睡眠的功能，用户可以休眠一个通知，让它在指定的时候再出现，被休眠的时候仍然可以修改这个通知的设置，但是不会让这个通知立马出现。另外还可以设置一个通知的超时时间，用来让某个通知在一段时间之后被自动 。其他的比如可以获取通知的清除方式，修改通知的背景颜色，修改通知的样式可以看官方文档： 通知。使用场景：针对应用的不同优先级别的通知设置不同的通知渠道，强提醒可以发出声音加震动，弱提醒可能仅仅只需要呼吸灯和角标这样等，这样可以最大程度减少对用户的干扰。
 画中画模式
在   之前，画中画模式已经可用于  ，而   则让这一个功能可以支持到其他的  设备，当某个  处于  模式时，它会回调生命周期的  方法，所以此时在  模式下比如视频播放等操作就不能够在  里面暂停，而应该在  里面，这一点和多窗口模式一样，来看看它的效果：

我们可以看到在当从  视频切换出去之后会回到桌面，这时候会有一个视频播放的窗口悬浮在所有的应用之上，这个小窗口在播放视频，而此时点击这个小窗口区域会弹出几个操作按钮，可以选择关闭，或者是重新打开  视频播放页，而且底部的几个按钮也是可以自定义的，非常方便。
这里需要提到的一点是，升级到  的系统后不是立马会激活这个功能，激活这个功能可能会有点复杂：

第一步开启    功能，开启的方式是下拉通知栏，长摁右下角的设置按钮，直到系统提示   已开启；
第二步去设置页面           ，去到   之后选择     或者   ，选择 ，选择完成之后返回到上一个页面填写    为 ，代表将当前显示页面变为  模式窗口如果不支持页面没有任何反应，然后选择一个 ：

之后就会在导航栏上出现一个新增的按钮，这个按钮就是用来将页面进入  模式；
第三步再返回上一个  页面，选择  模式，进去之后将  打开即可。
完成上面的操作之后，进入支持  模式的页面，比如  的视频播放页面，点击导航栏新增的那个按钮，页面就会缩小到一个小窗口播放，如上面的实例图片所示。
要指定  可以使用  模式，需要在 文件中将 设置为 ，除了上面提到的用户手动将  变成  模式，还可以使用  动态将  设置为  模式， 这个对象参数是用来指定  处于  模式时的行为，此对象还指定了各种属性，例如  的首选纵横比，同时还可以使用  更新  的  配置设置，如果  目前处于  模式，则会更新此设置。　　使用场景：这个功能就很贴心了，比起以前的 ，这个更强调两个应用的主次之分，比较适合的场景可能有视频播放页面的最小化，地图应用的最小化等等。针对  音乐来说可以使用在直播页面， 播放页面等等。
 自适应图标
为了帮助开发者更好的与设备  集成，  支持创建自适应图标，系统可以基于设备选择的蒙版将这些图标显示为不同形状。系统还将实现与图标的自动交互，并在启动器、快捷方式、设置、共享对话框以及概览屏幕中使用它们：

可以通过定义两层图层前景和背景来指定桌面图标外观，必须提供没有形状和阴影的  格式图象作为图层：

在以前的  版本中，图标大小定义为    ，但是现在必须按照以下的规范定义图层大小：

两张图层大小都必须为    。
图层中心     范围为可视范围。
系统会保留四周的  范围用于生成有趣的视觉效果如视差和跳动：


创建自适应图标可以参考：     ：
这个就将以前混乱的图标统一化了，现在  很多应用的图标，有的是正方形的，有的带圆弧，而且这圆弧的弧度各有差异，有的图标还是圆形，有的则是不规则的图片，统一之后所有的应用图标将具有一致的风格，比较推荐。
 自动填充框架
  还引入了自动填充框架，简化了用户在账号创建、登录和信用卡表单之类的填写工作，在用户选择自动填充框架之后，新老用户都可以使用自动填充框架，我们使用  的时候已经体验过了自动填充用户名和密码的功能，只不过这次是在系统层面提供了这样的一种功能，可以快速的填充用户名，地址甚至密码等，而且用户也不需要去担心安全问题。
同样自动填充框架也需要去设置页面打开：          ，关于如何适配自动填充框架： ：

这个场景可以参考  的记住账号和密码功能，例如现在的  登录其实是已经做了一个类似的  功能，比较适合用在账号密码等场景上。
  字体和可下载字体
  推出了  字体，可以在资源文件中建立  字体资源文件夹，放入相应的字体  文件，然后建立自己的字体  文件，在  文件中编译，最终作为一种资源供  等使用，
 = =
 =
    
        =
        =
        =_ 
    
        =
        =
        =_ 

同时   和     提供了一个 ，可以从另一个应用中获取字体资源，而不是将字体资源打包到  中或者让  去下载，通过     版本可以让这个特性支持到  版本或者之上的设备上，具体的  可以看看这个：  或者这个 ：
适用场景：这个比较适合在公司的一系列  上使用，更换皮肤同时更换字体等等。
  
　　
这个功能在  之后就已经有了，长摁桌面图标就会显示一个   菜单栏，然后长摁菜单栏上的一项，就能把它拖下来成为单独的一个应用图标，被拖下来的单独的应用图标就是 ，虽然这个功能在  引入的，但是在  版本我们可以通过提供的  按照一定的步骤去使用代码添加：   。
适用场景：这个可以将某些应用使用频繁的小功能独立出来，比如  的最常用联系人，音乐的听歌识曲等功能。
  字体自动适配
  版本允许设置  的字体大小根据设置的初始大小自动放大或者缩小，这样就可以让字体的显示在不同的屏幕和不同的显示内容上达到最优的效果，而且使用     中的  可以让该特性支持到  版本，  版本的  已经可以支持  了，设置  特性也非常简单，在  版本上，只需要使用    或者

  _=_
  _=_
  =

就可以了，关于使用的细节： 。
适用场景： 显示内容较多的时候，如果可以接受的话，适当的减小字体的大小，让显示的字数增加。
 媒体增强
  版本新增  类，用来为应用提供声音的淡入淡出等音效；新增 类用来提供检测音频焦点的新功能；新增了以下的方法  方法用来返回一个包含配置和性能信息的  对象：






 新增了一些新的方法，这些方法可以用来增强应用处理媒体播放的能力：

通过控制缓冲行为改进性能的功能；
在搜索帧时进行精细控制；
播放受数字版权管理保护的材料的功能和  类功能类似，但是不同的是这个不会暴露底层的提取器，版权和加密数据： 。

音频录制器  现在支持对流式传输有用的 _ 格式， 现在可以处理任意数量的音频和视频流，而不再仅限于一个音频曲目和或一个视频曲目。使用  可混录所需的任意数量的曲目， 还可以添加一个或多个包含用户定义的每帧信息的元数据曲目。元数据的格式由应用定义。仅对  容器支持元数据曲目。
 音频播放设置
  允许应用查询和获取设备如何发出声音，应用可以通过 函数来为设备范围的音频焦点提交一个细粒度的请求，比如传入一个  对象，设置对应的 ，就可以指定获取焦点的类型，同时可以设置当音频焦点被强占时候应用的行为，轻声继续播放还是彻底暂停。
  音质增强
值得一提的是，在   上引入了  “捐赠”的  无线声音加密格式，用来进行高质量音乐的蓝牙通信，这样就可以通过蓝牙耳机播放真正的无损音乐了：
可以看到使用了  无线声音加密协议之后，最高可以达到  的传输速率，好消息是不是！但是可惜的是  只能再  制造的耳机上使用，比如 £ ，高呼大法好
 其他特性
　　 可以设置  支持广色域；　　 可以设置最大的屏幕宽高比；　　 多屏幕支持，支持设备外接一个显示器；　　 最新版本  支持，使用类可以让应用在老版本的应用上显示新的 ；　　 支持点击位置的捕捉；　　 支持设置应用类别，这些类别用于将应用呈现给用户的用途或功能相同的应用归类在一起，例如按流量消耗、电池消耗和存储消耗将应用归类。　　   ，这个功能有人可能在今年老罗的锤子手机发布会上看到过，思想是很类似的，复制一段数字，就会出现直接拨打电话的选项，复制一段地址就会弹出进入地图的选项，地图  可以一下这个地方能否成为一个很方便入口。
   版本行为变更
这个列举了当前可能会影响应用的几个行为变更。
 后台执行限制
  在当进程进入已缓存状态时，如果没有活动的组件，系统将解除应用具有的所有唤醒锁已缓存状态指的是没有前台  或者正在执行的前台 。同时   上运行在后台的应用将会有限制的使用后台的 ，并且应用也不能在  中注册一些不必要的隐式广播用来进行自启等操作：

在后台运行的应用对后台服务的访问受到限制
应用无法使用其清单注册大部分隐式广播即并非专门针对此应用的广播，比如 ____ 针对所有应用是一个隐式广播，而______只针对本应用就不是一个隐式广播。

上面的限制针对  为  和之上的应用生效，但是用户可以在设置页面设置让这个限制对所有  的应用生效。　　处于前台时，应用可以自由创建和运行前台服务与后台服务。 进入后台时，在某些情况下，在一个持续数分钟的时间窗内，应用仍可以创建和使用服务，这些情况包括：

正在处理高优先级别的  消息；
正在接收例如  的消息广播；
正在从通知处理  消息；

但是在该时间窗结束后，应用将被视为处于空闲状态， 此时系统将停止应用的后台服务，就像应用已经调用服务的  方法一样。
官方建议多使用  来处理后台任务，详细的适配指南：后台执行限制。
 安全性
  包含以下与安全性有关的变更：

不再支持 ；
应用的  对象将在多进程模式下运行。网页内容在独立的进程中处理，此进程与包含应用的进程相隔离，以提高安全性；
在与未正确实现  协议版本协商的服务器建立  连接时， 不再尝试回退到之前的  协议版本并重试的权宜方法；
  将使用安全计算  过滤器来过滤所有应用。允许的系统调用列表仅限于通过  公开的系统调用。此外，还提供了其他几个后向兼容的系统调用，但我们不建议使用这些系统调用。 网络连接和  连接


  对网络连接和  连接行为做出了不少变更，其中包括无正文的  请求现在有   标头； 在包含斜线的主机或颁发机构名称后面附加一条斜线，将  转化为  ；通过  设置的自定义代理选择器的范围变化； 不能包含空白标签；如果之前执行的  方法失败， 方法将会引发 ；在回退到   协议之前， 会尝试执行 ；隧道  连接处理进行了一些变更。　　变更内容比较繁多：网络连接和  连接。
 权限
在   之前，如果应用在运行时请求权限并且被授予该权限，系统会错误地将属于同一权限组并且在清单中注册的其他权限也一起授予应用。对于针对   的应用，此行为已被纠正。系统只会授予应用明确请求的权限。然而，一旦用户为应用授予某个权限，则所有后续对该权限组中权限的请求都将被自动批准。
 媒体变更

使用  时，如果应用请求了足够大的音频缓冲区，则框架将尝试使用深度缓冲区输出如果可用；
音频流类型应仅用于音量控制；所有其他流类型的使用例如  构造函数仍有效，但系统会将其作为错误记录下来；
当用户打电话时，活动的媒体流将在通话期间静音；
所有与音频相关的  均使用  来描述音频播放用例；
框架会执行音频闪避，进行 ____ 时，应用不会失去焦点。新的  适用于需要暂停而不是闪避的应用。不过，  中未提供此行为。  


在针对   的应用中，如果   包含任何可写且可执行的代码段，则不会再加载  ，可写和可执行必须是在新版本必须是互斥的，倘若某些应用的   包含不正确的加载代码段，则此变更可能会导致这些应用停止工作，官方文档：   。
 其他
　　  支持分页，即获取内容的选中区域的子集；　　  和  增加  方法，用来让客户端更容易的知道数据是不是最新；　　  更新，让应用更容易遵从后台执行限制；　　 集合的处理的变化， 和  始终引发 ；　　 语言区域和国际化变化；　　 联系人提供程序使用情况统计方法的变更；　　 蓝牙  方法检索的数据长度变更；　　 输入和导航；
   版本  变更
  新 
  预览版本提供了几个新的  用来管理 ：

 
第一个是提供获取  版本信息的   = 
__     

   
可以再  中配置 ，然后在  打开未知不安全  的时候提示用户：
   =
             = 
  
    


  
 绘制进程被杀或者  的回调；
  
用来设置  绘制进程的优先级别，为了提供应用的稳定性，一般情况下应用不需要去修改绘制进程优先级，如果需要使用请和  
一起搭配使用； 


 函数现在返回的是   ，所以以后  就不需要强转了。
 统一的  和 
 引入了几个新的  属性：

_，同时设置 _ 和 _属性；
_，同时设置 _ 和_属性；，同时设置  和 属性；
，同时设置  和 属性； 


  中，  现在支持了动画的  和动画倒转播放， 操作可以设置  从指定的点开始播放，倒转播放则将以前需要重复定义两个相反的动画操作简化成只需要定义一个动画即可。
 提醒窗口
在   版本之前，应用如果不用 _ 显示悬浮窗，一般正常情况下都会使用声明 __ 权限  使用 __ 的形式来显示悬浮窗，国内的第三方  也会对此有限制，  版本曾经对悬浮窗有过一次限制，必须要用户手动开启“在其他应用之上显示”的权限才能展示悬浮窗，在   之后 __ 权限的应用无法再使用以下窗口类型来在其他应用和系统窗口上方显示提醒窗口：

_
__
__
__
__

相反，应用必须使用名为 __ 的新窗口类型，在使用 __ 窗口类型显示应用的提醒窗口时，也增加了一下限制：

应用的提醒窗口始终显示在状态栏和输入法等关键系统窗口的下面；
系统可以移动使用 __ 窗口类型的窗口或调整其大小，以改善屏幕显示效果；
通过打开通知栏，用户可以访问设置来阻止应用显示使用 __ 窗口类型显示的提醒窗口。


文章来自：音乐技术团队感谢阅读腾讯 微信号第七篇文章，这是一篇深度研究的概述，论文全文可在页末下载。今年七月，     发表了腾讯   副主任兼西雅图实验室负责人俞栋博士，与微软首席应用科学家兼技术负责人李锦宇联合撰写的论文。该论文回顾了过去两年声学模型方面的新进展。本文摘取该论文主干部分进行编译介绍，希望为读者提供相关进展的概括性了解。欲知相关技术方法详情，可参阅页末论文及相关文献。


欢迎转载，请在文章开头注明来自腾讯 微信_

 引言
过去几年里，自动语音识别已经取得了重大的进步 。这些进步让  系统越过了许多真实场景应用所需的门槛，催生出了  、微软小娜和亚马逊  等服务。这些成就中很多都是由深度学习 技术推动的。
在这篇论文中，我们调查了过去两年的新进展，并重点关注了声学模型。我们讨论了所调查的每一项有趣研究成果的动机和核心思想。具体而言，第  节中，我们阐释了使用深度循环神经网络和深度卷积神经网络的改进的 深度学习隐马尔可夫模型混合声学模型。比起前馈深层神经网络，这些混合模型能更好地利用语境信息，并由此得到了新的当前最佳的识别准确度。
第  节中，我们描述了仅使用很少或不使用不可学习组件的以端到端方式设计和优化的声学模型。我们首先讨论了直接使用音频波形作为输入特征的模型，其特征表征层是自动学习到的，而不是人工设计的。然后我们描述了联结主义时序分类  ， 标准优化的模型，该模型允许序列到序列的直接映射。之后我们分析了构建于注意机制之上的序列到序列翻译模型。
第  节中，我们讨论了可以提升稳健性的技术，并重点关注了自适应技术、语音增强和分离技术、稳健训练技术。第  节中，我们描述了支持高效解码的声学模型并涵盖了通过教师学生训练 与量化实现的跳帧和模型压缩。第  节中，我们提出了正待解决的核心问题以及有望解决这些问题的未来方向。
 利用可变长度语境信息的声学模型
 混合模型  是第一种在  上取得成功的深度学习架构，而且仍然是这一行业使用的主导模型。几年前，大多数混合系统都是基于  的。
但是，由于音素和语速的不同，语境信息的最优长度也可能各不相同。这说明像在  混合系统中一样使用固定长度的语境窗口 可能并非利用语音信息的最佳选择。近几年，人们已经提出了一些可以更有效地利用可变长度语境信息的新模型。其中最重要的两个模型使用了深度  和 。
 循环神经网络
前馈  仅会考虑固定长度的帧的滑动窗口中的信息，因此无法利用语音信号中的长距离相关性。而  可以编码自己内部状态中的序列历史，因此有望基于截止当前帧所观察到的所有语音特征来预测音素。但不幸的是，纯粹的  难以训练。
为了克服这些问题，研究人员开发了长短期记忆 。 使用输入门、输出门和遗忘门来控制信息流，使得梯度能在相对更长的时间跨度内稳定地传播。
为了得到更好的建模能力，一种流行的做法是将  层堆叠起来 。但带有太多   层的  非常难以训练，而且如果网络太深，还会有梯度消失问题。这个问题可以使用   或   解决。
在    中，相邻层的记忆单元通过门控的直接链路连接在一起，这为信息提供了一种在层之间更直接且不衰减地流动的路径。
   在  层之间使用了捷径连接 ，因此也提供了一种缓解梯度消失问题的方法。
另外还有一种二维时频     ，可以在时间和频率轴上对语音输入进行联合扫描，以对频谱时间扭曲 建模，然后再将其输出的激活用作传统的时间  的输入。这种时间频率联合建模能为上层的时间  提供更好的规范化的特征。
网格    是一种将  记忆单元排布成多维网格的通用 ，可以被看作是一种将  用于时间、频谱和空间计算的统一方法。
尽管双向 通过使用过去和未来的语境信息能得到比单向  更好的表现，但它们并不适合实时系统，因为这需要在观察到整个话语之后才能进行识别。因为这个原因，延迟受控  和行卷积 等模型被提了出来，这些模型构建了单向  和  之间的桥梁。在这些模型中，前向  还是保持原样。但反向  会被替代——要么被带有最多  帧前瞻量的反向 如  的情况替代，要么被集成了  帧前瞻量中的信息的行卷积替代。
卷积神经网络
卷积神经网络是另一种可以有效利用可变长度的语境信息的模型 ，其核心是卷积运算或卷积层。
时延神经网络   是第一种为  使用多个  层的模型。这种模型在时间轴和频率轴上都应用了卷积运算。
继 在  上的成功应用之后， 又在  混合模型架构下被重新引入。因为该混合模型中的  已经有很强的处理  中可变长度话语问题的能力了，所以重新引入  最初只是为了解决频率轴的多变性 。其目标是提升稳健性，以应对不同说话人之间的声道长度差异。这些早期模型仅使用了一到两个  层，它们和其它全连接  层堆叠在一起。
后来， 等其它  层也被集成到了该模型中，从而形成了所谓的    和 架构。
研究者很快认识到处理可变长度的话语不同于利用可变长度的语境信息。 会沿频率轴和时间轴两者同时进行卷积，因此能够利用可变长度的语境信息。基于此，这种模型又得到了新的关注，但这一次是在  混合架构之下 ，并且出现了行卷积  和前馈序列记忆网络     等变体。
最近以来，主要受图像处理领域的成功的激励，研究者提出和评估了多种用于  的深度  架构 。其前提是语谱图可以被看作是带有特定模式的图像，而有经验的人能够从中看出里面说的内容。在深度  中，每一个更高层都是更低层的一个窗口的非线性变换的加权和，因此可以覆盖更长的语境以及操作更抽象的模式。和有长延迟困扰的  不一样，深度  的延迟有限，而且如果可以控制计算成本，那就更加适用于实时系统。
为了加速计算，我们可以将整个话语看作是单张输入图像，因此可以复用中间计算结果。还不止这样，如果深度  的设计能保证每一层的步幅长到能覆盖整个核，比如基于逐层语境扩展和注意    的  和  ，它仅需更少数量的层就能利用更长范围的信息，并且可以显著降低计算成本。
 使用端到端优化的声学模型
在  混合模型中， 和  两个组件通常是分别进行优化的。然而，语音识别是一个序列识别问题。如果模型中的所有组件都联合进行优化，那就很可能得到更好的识别准确度。如果模型可以移除所有人工设计的组件比如基本特征表征和词典设计，那结果甚至可以更好。
自动学习到的音频特征表征
对语音识别而言，人工设计的对数梅尔滤波器组特征  是否最优还存在争议。受机器学习社区内端到端处理的启发，研究者们一直在努力  试图用直接学习滤波器替代梅尔滤波器组提取。直接学习滤波器就是使用一个网络来处理原始的语音波形，并且与识别器网络联合训练而得到滤波器。
远场  领域当前的主导方法仍然是使用传统的波束成形方法来处理来自多个麦克风的波形，然后再将经过波束成形处理过的信号输入给声学模型 。在使用深度学习执行波束成形以及波束成形和识别器网络的联合训练上，都已经有了一些研究工作 。
联结主义时序分类
语音识别任务是一种序列到序列的翻译任务，即将输入波形映射到最终的词序列或中间的音素序列。声学模型真正应该关心的是输出的词或音素序列，而不是在传统的交叉熵训练中优化的一帧一帧的标注。为了应用这种观点并将语音输入帧映射成输出标签序列，联结主义时序分类方法被引入了进来 。为了解决语音识别任务中输出标签数量少于输入语音帧数量的问题， 引入了一种特殊的空白标签，并且允许标签重复，从而迫使输出和输入序列的长度相同。
 的一个迷人特点是我们可以选择大于音素的输出单元，比如音节和词。这说明输入特征可以使用大于  的采样率构建。 提供了一种以端到端的方式优化声学模型的途径。在     和   研究中，研究者探索了用端到端的语音识别系统直接预测字符而非音素，从而也就不再需要  中使用的词典和决策树了。
确定用于  预测的基本输出单元是一个设计难题。其中，预先确定的固定分解不一定是最优的。 中提出了 ，可以自动学习最适合目标序列的分解。但是，所有这些研究都不能说是完全端到端的系统，因为它们使用了语言模型和解码器。
因为  的目标是根据语音波形生成词序列，所以词单元 是网络建模的最自然的输出单元。 中表明通过使用  万个词作为输出目标并且使用  万小时数据训练该模型，发现使用词单元的  系统能够超越使用音素单元的  系统。
图 ：词  的一个示例
受  研究的启发，最近有研究者提出了无  最大互信息   ，可以无需从交叉熵网络进行初始化，就能从头开始训练深度网络。
总体来说，从  到 时间建模再到 端到端建模，声学模型存在一个清晰的主要发展路径。尽管使用音素作为建模单元时， 等一些建模技术可以得到与  类似的表现，但它们可能并不非常符合端到端建模的趋势，因为这些模型需要专家知识来设计，也需要语言模型和词典等组件才能工作。
基于注意的序列到序列翻译模型
基于注意的序列到序列模型是另一种端到端模型 。它源自机器学习领域内一种成功的模型 ，即使用注意解码器 对编码器解码器框架  进行了扩展。
这种基于注意的模型并没有像  那样假设帧是独立的，这也是注意模型的一大优势。这种基于注意的模型的训练难度甚至比  模型还大。
基于注意的模型也有不能单调地从左到右对齐和收敛缓慢的缺点。在  中，通过将  目标函数用作辅助成本函数，注意训练和  训练以一种多任务学习的方式结合到了一起。这样一种训练策略极大地改善了基于注意的模型的收敛，并且缓解了对齐问题。
 声学模型稳健性
当测试集和训练集匹配时，尤其是当两者处在相当接近的对话条件下时，当前最佳的系统能够得到很出色的识别准确度。但是，在有更多噪声包括音乐或干扰性说话人或带有很强口音  等不匹配或复杂环境中时，系统的表现将大打折扣。这一问题的解决方案包括自适应、语音增强和稳健建模。
声学模型自适应
鉴于自适应数据有限，所以与说话人相关模型和与说话人无关模型的差距应该不大。参考文献  为训练标准加入了 正则化，防止自适应的模型偏离  模型太远。这种  自适应标准已被证明可以非常有效地处理自适应数据有限的情况。
与其调整自适应标准，大多数研究关注的是如何使用非常少量的参数来表征说话人的特征。奇异值分解瓶颈自适应  是解决方案之一，这种方法可以通过使用  重构的结构得到占用资源低的  模型 。
× 的  矩阵通常是对角主导矩阵，这一观察启发研究者提出了低秩加对角  分解，这种方法可以将 × 的  矩阵分解成一个对角矩阵加上两个低秩矩阵的乘积。
另一种旨在寻找变换的低维子空间的方法是子空间方法 ，这种方法仅需少量参数就能指定每种变换。这一类别内的一种流行方法是使用辅助特征，比如  、说话人代码  和噪声估计 ，这些特征会与标准的声学特征串接在一起。
其它子空间方法还包括聚类自适应训练 和   ，其中的变换会被局限在说话人子空间中。
 风格的方法有一个问题，就是它的基是满秩矩阵，这需要非常大量的的训练数据。因此， 中的基的数量通常局限在少量几个 。使用   是一种解决方案，这种方法将基限制为秩一矩阵。通过这样的方式，能够减少每个基所需的训练数据，从而能在训练数据固定的条件下增加基的数量。
语音增强和分离
众所周知，当语音中掺杂了很强的噪声或干扰语音时，当前的  系统的表现会变得很差 。尽管人类听者也会受到糟糕的音频信号的影响，但表现水平的下降程度比  系统要明显小很多。
在单声道语音增强和分离任务中，会假设只有线性混合的单麦克风信号已知，其目标是恢复音频源中的每一个音频流。语音的增强和分离通常在时频域进行。
研究者近来已经为语音的增强和分离开发了很多深度学习技术。这些技术的核心是将增强和分离问题转化成一个监督学习问题。更具体来说，就是给定配对的通常是人工混合语音和声源流，针对每个时频区间 ，优化深度学习模型使其能预测声源是否属于目标类别。
与说话人无关的多说话人语音分离的难度在于标签的模糊性或排列问题。因为在混合信号中，音频源是对称的，所以在监督学习过程中，并不能预先确定的将正确源目标分配给对应输出层。因此，模型将无法很好地训练以分离语音。幸运的是，人们已经提出了几种用于解决标签模糊性问题的技术。
     提出了一种被称为深度聚类 的全新技术。这种模型假设每个时频区间都仅属于一个说话人。在训练过程中，每个时频区间都被映射到了一个嵌入空间。然后对这个嵌入进行优化，使属于同一个说话人的时频区间在这个空间中相距更近，属于不同说话人的则相距更远。在评估过程中，该模型会在嵌入上使用一个聚类算法来生成时频区间的分区。
    和     则提出了一种更简单的技术排列不变训练  来攻克与说话人无关的多说话人语音分离问题。在这种新方法中，源目标被当作一个集合进行处理即顺序是无关的。在训练过程中， 首先根据前向结果在句子层面上确定误差最小的输出目标分配。然后再最小化基于这一分配的误差。这种策略一次性地简单直接地解决了标签排列问题和说话人跟踪问题。 不需要单独的跟踪步骤因此可用于实时系统。相反，每个输出层都对应于源的一个流。
对于语音识别，我们可以将每个分离的语音流馈送给  系统。甚至还能做到更好，基于深度学习的声学模型也许可以和分离组件通常是 进行端到端的联合优化。因为分离只是一个中间步骤，    提出直接在  标签上使用  优化交叉熵标准，而不再需要明确的语音分离步骤。
稳健的训练
深度学习网络的成功是因为可以将大量转录数据用于训练数以百万计的模型参数。但是，当测试数据来自一个新领域时，深度模型的表现仍然会下降。
最近，为了得到对噪声稳健的 ，对抗训练  的概念也得到了探索 。这种解决方案是一种完全无监督的域适应方法，不会利用太多关于新域的知识。它的训练是通过在编码器网络的域鉴别器网络之间插入一个梯度反向层  实现的。
最近，为了不使用转录数据执行自适应，研究者提出了教师学生学习  方法 。来自源域的数据由源域模型教师处理，以生成对应的后验概率或软标签 。这些后验概率被用于替代源自转录数据的硬标签 ，以使用来自目标域的并行数据训练目标模型学生。
 具有有效解码的声学模型
通过堆叠多层网络训练深度网络有助于改善词错率。但是，计算成本却是个麻烦，尤其是在实时性具有很高的优先级的行业部署中。降低运行时成本的方法有好几种。
第一种方法是使用奇异值分解。 方法是将一个满秩矩阵分解成两个更低秩的矩阵，因此可以在保证再训练之后准确度不下降的同时显著减少深度模型中的参数数量。
第二种方法是采用教师学生学习或知识精炼 ，从而通过最小化小规模  和标准的大规模  的输出分布之间的  来压缩标准的  模型。
第三种方法是通过大量量化来压缩模型，既可以应用非常低比特的量化，也可以用向量量化。
第四种解决方案是操作模型结构。为了降低计算成本，研究者提出了一种带有投射层的 ，即在  层之后增加一个线性投射层 。
最后，可以使用跨帧的相关性来降低评估深度网络分数的频率。对于  或  而言，这可以通过使用跳帧策略完成，即每隔几帧才计算一次声学分数，并在解码时将该分数复制到没有评估声学分数的帧 。
 未来方向
这一领域的研究前沿已经从使用近距离麦克风的  变成了使用远场麦克风的 ，这种发展的推动力是用户对无需佩戴或携带近距离麦克风就能与设备进行交互的需求的日益增长。
尽管为近距离场景开发的很多语音识别技术都可以直接用于远场场景，但这些技术在远距离识别场景中的表现不佳。为了最终解决远距离语音识别问题，我们需要优化从音频捕获如麦克风阵列信号处理到声学建模和解码的整个流程。
作者简介 | 俞栋博士
腾讯 副主任及西雅图实验室负责人

俞栋博士是首批将深度学习应用到语音识别领域的研究者，项专利发明人及开源软件开发者，曾任职美国微软、并兼浙大、中科大及上海交大等教职。
他有浙大电子工程学士、美国印第安纳大学计算机硕士、中科院自动化所模式识别与智能控制硕士及爱达荷大学计算机博士等学位。
点击下方下载，获取论文原文。图：腾讯投票
众所周知，我们的腾讯问卷支撑着公司的调研问卷，但它太重，不适合用在微信群实时投票的场景，结合年初微信小程序发布之际，针对微信群场景，我们做了个投票小程序。
大家忙活几周，第一版总算出来了。在运营阶段发现一个问题，而这个问题在腾讯问卷中也存在着：
闲时低负载，峰值高并发。
腾讯问卷一直支撑着腾讯公司旗下几乎所有业务的调研问卷，例如游戏、音乐，以及滴滴等外部合作公司。基于公司的规模，问卷可能会在瞬间投放给动辄数十万的用户。平时可能用户不多，但只要有业务做大规模的推广时，系统负载会变得特别高。
而在投票小程序当中，这种问题更严重：

无法控制个人用户发起投票的时间
低估了社交场景的传播力量。不少投票可能是单位／学校发起的投票，要求所有员工／学生参与投票，除此之外，用户还会再转发到外部群，生成二维码转发到朋友圈去拉票

于是我们经常会从监控中看到流量暴涨：

图：流量暴涨，峰值接近平时的  倍
面对这种情况，除了对应用本身做优化，也做出了一个迁移腾讯云的决定。于是，在这个背景下，开始了拥抱腾讯云的工作。

图：迁移腾讯云的过程，开始筹备
 上腾讯云前的筹备
腾讯投票在立项初期是基于腾讯问卷的接口去开发的。所以第一步考虑的是有哪些组件可以剥离，以减少迁移的工作量，和提高后续的可维护性。

数据库：腾讯问卷因为业务的原因选用了 、 和 ，然而并不适合投票。存储和统计只使用  即可， 可以去除。
代码库：共用一个，严格来讲这已经是两个项目了，所以需要拆分。
域名：腾讯投票与腾讯问卷共用了 ，根据路径转发请求到不同的服务上。如果腾讯投票迁移至腾讯云了，这个转发就得走公网。为避免这个问题，我们通过更换域名来解决。先在  内进行域名切换，让腾讯投票用上一个独立的域名，迁移完毕后直接修改  解析。
内部服务：鹅厂的传统技术架构下很多服务可以通过内网接口调用的方式来解决。例如检测用户内容是否包含有敏感词的关键词服务，改为腾讯云通过代理访问  的服务。

剩下一个最麻烦的：数据库拆分。目前腾讯投票与腾讯问卷的数据都在同一个数据库。如何把数据拆分呢？我们把过程分成  步：

双写：写入旧数据库的同时也往新数据库写。这样能确保新数据库只有腾讯投票的数据。由于是异步写入，基本不会对用户的请求造成影响。
同步：往新数据库补充旧数据，直到两个数据库完全一致。
校验：校验两个数据库的数据是否完全一致。
切换：确保数据一致后进行切换并停止双写。

现在我们得到了完整且没有多余数据的独立数据库了，后续迁移时只需要备份和恢复这个数据库即可。

图：迁移腾讯云的过程，迁移
 迁移
该优化的都优化好了，开始准备迁移方案。不停机的方案都有哪些？以下是我们的分析：

腾讯云通过专线访问  的 
优：对于业务比较安全
缺：对于公司不安全


腾讯云通过公网访问  的 
优：方便
缺：不安全


在  运行期间双写  和腾讯云的数据库，数据一致时进行迁移和切换
优：无需额外策略、安全、不需要停机
缺：工作量巨大



停机迁移的方案？也有，就是直接停机，备份和恢复 ，改  解析，再笨也能做好这件事

优：安全可靠，时间成本低
缺：需要停止服务

考虑到安全策略、时间成本等因素，我们最后选择了停机迁移。为了不出问题，切割前后还有一些工作：
演练
方案选择了，环境也准备好了，接下来是反复演练，检查迁移过程中可能会出现的问题，甚至把执行过的每一条  命令都记录下来。直到所有记录的  命令不需要再做修改，直接执行就能完成迁移工作。
切割
前期工作准备好，风险也分析了，回滚方案也有了，演练了这么多遍，也该上战场了，再不迁移，老板休假回来要找我麻烦了。找了一个周末凌晨的时间点，准备好停机公告。然后就可以照着演练时的步骤一步一步操作了。测试通过后就可以做  切换了。
观察
进行  切换后就意味着流量都会直接到腾讯云上的环境。接下来的几个小时是最紧张的时间，在监控上看着流量慢慢起来，用户创建的投票也多了起来，这才松了一口气。
关于跨机房迁移，不同的项目有不同的解决方案。具体情况具体分析，如何合理配置原有的  资源与云计算资源，可能会取决于项目的 、开发团队的规模，安全策略的限制等因素。

图：迁移腾讯云的过程，弹性伸缩调优
 弹性伸缩
前面提到我们的痛点之一是闲时低负载，峰值高并发，有没有解决办法？有，腾讯云的弹性伸缩。利用弹性伸缩，可以做到白天高峰期自动加机器，晚上销毁。任意时间内如果访问量突增，也能自动加机器并投入生产环境。
在介绍弹性伸缩基础概念之后，还需要介绍两个名词：无状态化与服务发现
无状态化
无状态化是指服务不保存需要持久化的数据不管是短暂的  还是长期的用户上传附件。好处是可以快速复制和销毁实例而不需要考虑数据是否会丢失，这也是弹性伸缩对应用的基本要求。
因为腾讯问卷有文件上传等一系列等功能，无状态化会很困难，得需要很多时间和精力。而投票刚好没有用到这些功能。没有文件上传等功能， 也没有保存到文件系统。天生就是无状态，非常适合做水平扩展，新增实例只需要加到负载均衡上就能投入使用。
服务发现
无状态化好处之一是快速复制或者销毁实例，这样就可以做到快速地水平扩容。如果这种水平扩容还需要人工参与，那效率会低效很多。所以必须跑集群式的服务。于是你会需要服务发现工具。
服务发现可以告诉你：哪个服务都有哪些实例在提供，例如：

监控脚本问：腾讯投票的后端服务器有哪几台？
服务发现回答：  

在收到回复后，监控脚本就可以把这几个  加到  或者  的负载均衡中去了。
在弹性伸缩的帮助下，腾讯投票的后端服务器频繁变更，在服务发现软件  的帮助下，做到了新增机器时能投入使用，销毁时自动从  中摘除，达到了不丢失用户请求的效果。
小结以上两点需要：策略配置
应用做好了上述的无状态化与服务发现机制后，接下来就是腾讯云的弹性伸缩配置：

制作镜像：这也是腾讯云推荐弹性伸缩的使用方式，需要使用的软件预先安装到镜像中，机器由镜像启动后都带有了运行环境，无需再花时间初始化机器。

设置启动配置：这里指的是弹性伸缩自动开启的机器需要什么样的配置，多大的内存，多少核的 ，由哪个镜像启动，要在哪个机房启动腾讯云有多个机房等选项。

配置告警策略：当现有实例处于什么状态时新建实例？在我们观察了一段时间后，发现  超过  和内存超过  时，就应该考虑新增机器了。


在配合腾讯云的弹性伸缩、服务发现  以及各种监控系统的情况下，我们做到了：当系统高负载时，弹性伸缩开启新机器，监控脚本同步最新的代码以及启动相应的服务。最后， 将新机器投入使用。

图： 弹性伸缩的配置
当  利用率超过  时加机器。

图：监控告警
图中可以看出  触发告警， 机器启动完成， 投入使用。弹性伸缩还是比较给力的。

图：迁移腾讯云的过程，监控
 监控
一路忙活，做了很多改动，有没有影响到用户？性能有没有变化？快了还是慢了？总不能让用户来告诉我们吧。还好有监控。
有了监控就知道每次变更带来了什么影响，在做运维变更、版本发布时，心里也比较有底。开发者也应该养成良好习惯，每次做完变更、发完版就要看看监控。
比如有一次，我们通过性能监控发现微信接口异常。当时，曲线显示用户投票量突然减少一半，但系统各组件都正常，也没有报错。排查后发现是微信开发平台接口做了变更，把一个字段给去掉了。如果没有监控，估计要等到第二天才能发现。
说了那么多，究竟监控什么呢？以下是我们所使用的监控系统：

 监控，监控了前端上报、 请求、 请求、用户创建投票量、用户投票量等。后面做了动态扩容，又监控每一个实例的运行情况
腾讯云监控，监控服务器 、内存、带宽等，不用再自己维护  等软件了。
腾讯云拨测，定时从多个接入点检测  接口是否正常，异常时发短信告警，非常方便。这还避免了监控和应用一起挂掉，连通知都没法发出的尴尬局面。


图：多方位监控

 动不动就会飙高，幸好有弹性伸缩。此外，我们正在优化投票结果的数据结构，优化完后  的波动应该会有改善

图：带宽跟随请求一并增加了

图：对比一下迁移前后的效果：

图：可以看出红色的慢请求减少，最底下的绿色也增多了
服务器利用率这里还有优化空间，我们会在下一篇文章详细介绍。
 总结与展望
腾讯投票的定位是一款小而美的应用，像张小龙先生所说，用完就走，成为一个对用户有价值的小工具。
后续我们也计划将腾讯问卷  的  资源与腾讯云资源结合，使用弹性伸缩做到动态扩容，在提高运算能力的提前下减少运营成本。以及利用腾讯云的各种云服务为开发同学减轻运维负担，让开发同学更专注于开发业务，为用户提供更多更有价值的创新。

扫一扫，体验一下运行在腾讯云的腾讯投票 是从  项目衍生出来的自动化服务器。 是一个基于服务器的应用程序，运行在   容器中，它支持包括 、 以及  在内的多种 源码控制工具  。 提供了上百种插件帮助你的项目实现自动化。 由   开发，在  年使用  协议发布了第一个发行版，它是个自由软件。
在这篇指南中，我会向你介绍如何在   中安装最新版本的 。我们会用自己的域名运行 ，在   服务器中安装和配置 ，而且支持反向代理。
前提

  服务器   位
 权限

第一步  安装   
 基于 ，因此我们需要在服务器上安装   。在这里，我们会从一个  仓库安装  ，首先我们需要添加这个仓库。
默认情况下，  没有安装用于管理  仓库的  软件包，因此我们首先需要安装这个软件。使用  命令安装 。
  
下一步，添加   仓库到服务器中。
 
用  命令更新  仓库并安装  。
 
  
输入下面的命令验证安装：
 
你会看到安装到服务器上的  版本。

第二步  安装 
 给软件安装包提供了一个  仓库，我们会从这个仓库中安装 。
用下面的命令添加  密钥和仓库到系统中。
     |    
    |   
更新仓库并安装 。
 
  
安装完成后，用下面的命令启动 。
  
通过检查  默认使用的端口端口 验证  正在运行。我会像下面这样用  命令检测：
 
 已经安装好了并运行在  端口。

第三步  为  安装和配置  作为反向代理
在这篇指南中，我们会在一个   服务器中运行 ，我们会为  配置  作为反向代理。首先我会安装  并启用一些需要的模块，然后我会为  用域名  创建虚拟主机文件。请在这里使用你自己的域名并在所有配置文件中出现的地方替换。
从  仓库安装   服务器。
  
安装完成后，启用  和 _ 模块以便将  配置为  的前端服务器反向代理。
 
 _
下一步，在  目录创建新的虚拟主机文件。
 
 
粘贴下面的虚拟主机配置。
 
            
         
     
     

     
       
        
    

                
        
        

保存文件。然后用  命令激活  虚拟主机。
 
重启  和 。
  
  
检查  和  正在使用  和  端口。
 

第四步  配置 
 用域名  运行。打开你的  浏览器然后输入 。你会看到要求你输入初始管理员密码的页面。 已经生成了一个密码，因此我们只需要显示并把结果复制到密码框。
用  命令显示  初始管理员密码。
 


将结果粘贴到密码框然后点击 。

现在为了后面能比较好的使用，我们需要在  中安装一些插件。选择   ，点击它。

 插件安装过程：

安装完插件后，我们需要创建一个新的管理员密码。输入你的管理员用户名、密码、电子邮件等，然后点击   。

点击  开始使用 。你会被重定向到  管理员面板。

成功完成  安装和配置。

第五步   安全
在  管理员面板，我们需要为  配置标准的安全，点击   和  。

 在   部分提供了多种认证方法。为了能够控制所有的用户权限，我选择了  。在复选框  中启用  用户。通过勾选所有选项给  所有权限，给  只读权限。现在点击 。

你会被重定向到面板，如果出现了登录选项，只需输入你的管理员账户和密码。
第六步  测试一个简单的自动化任务
在这一部分，我想为  服务测试一个简单的任务。为了测试  我会创建一个简单的任务，并用  命令查看服务器的负载。
在  管理员面板上，点击   。

输入任务的名称，在这里我输入  ，选择   然后点击 。

进入  标签页。在   ，选择选项  。
在输入框输入下面的命令。
    |   
点击 。

现在你是在任务    的任务页。点击   执行任务  。
任务执行完成后，你会看到  ，点击第一个任务查看结果。
下面是  任务执行的结果。

到这里就介绍完了在   中用   服务器安装  的内容。

 

作者： 译者： 校对：
本文由 组织编译， 中国 推出。导语 ：随着大数据时代的来临，使用机器学习算法对大规模数据处理逐渐成为各个业务的核心场景。如何利用相对廉价的机器搭建分布式超大规模机器学习集群是一件非常复杂的事情，对工程和算法都有极高的要求，本文尝试梳理一下这方面的历史和现行的最佳实践

        背景
自从发表著名的、、三篇以后，互联网正式迎来了大数据时代。大数据的显著特点是大，哪里都大的大。本篇主要针对大的数据时，使用机器学习来进行数据处理过程中遇到的架构方面的问题做一个系统的梳理。
有了我们有能力积累海量的数据样本，比如在线广告的曝光和点击数据，天然具有正负样本的特性，累积一两个月往往就能轻松获得百亿、千亿级的训练样本。这样海量的样本如何存储？用什么样的模型可以学习海量样本中有用的？这些问题不止是工程问题，也值得每个做算法的同学去深入思考。
简单模型复杂模型
在深度学习概念提出之前，算法工程师手头能用的工具其实并不多，就、、感知机等寥寥可数、相对固定的若干个模型和算法；那时候要解决一个实际的问题，算法工程师更多的工作主要是在特征工程方面。而特征工程本身并没有很系统化的指导理论至少目前没有看到系统介绍特征工程的书籍，所以很多时候特征的构造技法显得光怪陆离，是否有用也取决于问题本身、数据样本、模型以及运气。
 在特征工程作为算法工程师主要工作内容的时候，构造新特征的尝试往往很大部分都不能在实际工作中。据我了解，国内几家大公司在特征构造方面的成功率在后期一般不会超过。也就是的新构造特征往往并没什么正向提升效果。如果给这种方式起一个名字的话，大概是简单模型复杂特征；简单模型说的是算法比如、本身并不服务，参数和表达能力基本呈现一种线性关系，易于理解。复杂特征则是指特征工程方面不断尝试使用各种奇技淫巧构造的可能有用、可能没用的特征，这部分特征的构造方式可能会有各种，比如窗口滑动、离散化、归一化、开方、平方、笛卡尔积、多重笛卡尔积等等；顺便提一句，因为特征工程本身并没有特别系统的理论和总结，所以初入行的同学想要构造特征就需要多读，特别是和自己业务场景一样或类似的场景的，从里面学习作者分析、理解数据的方法以及对应的构造特征的技法；久而久之，有望形成自己的知识体系。
深度学习概念提出以后，人们发现通过深度神经网络可以进行一定程度的表示学习 ，例如在图像领域，通过提取图像并在此基础上进行分类的方法，一举打破了之前算法的天花板，而且是以极大的差距打破。这给所有算法工程师带来了新的思路，既然深度学习本身有提取特征的能力，干嘛还要苦哈哈的自己去做人工特征设计呢？
深度学习虽然一定程度上缓解了特征工程的压力，但这里要强调两点：缓解并不等于彻底解决，除了图像这种特定领域，在个性化推荐等领域，深度学习目前还没有完全取得绝对的优势；究其原因，可能还是数据自身内在结构的问题，使得在其他领域目前还没有发现类似图像这样的完美。深度学习在缓解特征工程的同时，也带来了模型复杂、不可解释的问题。算法工程师在网络结构设计方面一样要花很多心思来提升效果。概括起来，深度学习代表的简单特征复杂模型是解决实际问题的另一种方式。
两种模式孰优孰劣还难有定论，以点击率预测为例，在计算广告领域往往以海量特征为主流，根据维理论，的表达能力和特征个数成正比，因此海量的也完全可以使拥有足够的描述能力。而在个性化推荐领域，深度学习刚刚萌芽，目前 采用了的结构，采用了双重的结构。
不管是那种模式，当模型足够庞大的时候，都会出现模型参数一台机器无法存放的情况。比如百亿级的对应的权重有好几十个，这在很多单机上存储都是困难的，大规模神经网络则更复杂，不仅难以单机存储，而且参数和参数之间还有逻辑上的强依赖；要对超大规模的模型进行训练势必要借用分布式系统的技法，本文主要是系统总结这方面的一些思路。
数据并行模型并行
数据并行和模型并行是理解大规模机器学习框架的基础概念，其缘起未深究，第一次看到是在姐夫 的里，当时匆匆一瞥，以为自己懂了。多年以后，再次开始调研这个问题的时候才想起长者的教训，年轻人啊，还是图样，图森破。如果你和我一样曾经忽略过这个概念，今天不放复习一下。
这两个概念在中沐帅曾经给出了一个非常直观而经典的解释，可惜不知道什么原因，当我想引用时却发现已经被删除了。我在这里简单介绍下这个比喻：如果要修两栋楼，有一个工程队，怎么操作？第一个方案是将人分成两组，分别盖楼，改好了就装修；第二种做法是一组人盖楼，等第一栋楼盖好，另一组装修第一栋，然后第一组继续盖第二栋楼，改完以后等装修队装修第二栋楼。咋一看，第二种方法似乎并行度并不高，但第一种方案需要每个工程人员都拥有“盖楼”和“装修”两种能力，而第二个方案只需要每个人拥有其中一种能力即可。第一个方案和数据并行类似，第二个方案则道出了模型并行的精髓。
数据并行理解起来比较简单，当样本比较多的时候，为了使用所有样本来训练模型，我们不妨把数据分布到不同的机器上，然后每台机器都来对模型参数进行迭代，如下图所示

图片取材于的，图中代表三台不同的机器，上面存储着不同的样本，模型在各台机器上计算对应的增量，然后在参数存储的机器上进行汇总和更新，这就是数据并行。先忽略，这是同步机制相关的概念，在第三节会有专门介绍。
数据并行概念简单，而且不依赖于具体的模型，因此数据并行机制可以作为框架的一种基础功能，对所有算法都生效。与之不同的是，模型并行因为参数间存在依赖关系其实数据并行参数更新也可能会依赖所有的参数，但区别在于往往是依赖于上一个迭代的全量参数。而模型并行往往是同一个迭代内的参数之间有强依赖关系，比如网络的不同层之间的参数依照算法形成的先后依赖，无法类比数据并行这样直接将模型参数分片而破坏其依赖关系，所以模型并行不仅要对模型分片，同时需要调度器来控制参数间的依赖关系。而每个模型的依赖关系往往并不同，所以模型并行的调度器因模型而异，较难做到完全通用。关于这个问题，的 在中有所介绍，感兴趣的可以参考。
模型并行的问题定义可以参考姐夫的，这篇也是的前身相关的总结，其中图

解释了模型并行的物理图景，当一个超大神经网络无法存储在一台机器上时，我们可以切割网络存到不同的机器上，但是为了保持不同参数分片之间的依赖，如图中粗黑线的部分，则需要在不同的机器之间进行控制；同一个机器内部的参数依赖，即途中细黑线部分在机器内即可完成控制。
黑线部分如何有效控制呢？如下图所示

在将模型切分到不同机器以后，我们将参数和样本一起在不同机器间流转，途中代表模型的不同部分的参数；假设依赖，依赖，机器上得到的一个迭代后，将和必要的样本信息一起传到机器，机器根据和样本对更新得到，以此类推；当机器计算的时候，机器可以展开的第二个迭代的计算。了解流水线操作的同学一定感到熟悉，是的，模型并行是通过数据流水线来实现并行的。想想那个盖楼的第二种方案，就能理解模型并行的精髓了。

上图则是对控制模型参数依赖的调度器的一个示意图，实际框架中一般都会用有向无环图调度技术来实现类似功能，未深入研究，以后有机会再补充说明。
理解了数据并行和模型并行对后面参数服务器的理解至关重要，但现在让我先荡开一笔，简单介绍下并行计算框架的一些背景信息。
        并行算法演进
   路线
从函数式编程中的受到启发，发布了的分布式计算方
式；通过将任务切分成多个叠加的任务，来完成复杂的计算任务，示意图如下

 的主要问题有两个，一是原语的语义过于低级，直接使用其来写复杂算法，开发量比较大；另一个问题是依赖于磁盘进行数据传递，性能跟不上业务需求。
为了解决的两个问题，在中提出了一种新的数据结构，并构建了框架。框架在语义之上封装了调度器，极大降低了算法使用的门槛。较长时间内几乎可以说是大规模机器学习的代表，直至后来沐帅的参数服务器进一步开拓了大规模机器学习的领域以后，才暴露出一点点不足。如下图

从图中可以看出，框架以为核心，任务调度和参数汇总都在，而是单机结构，所以的瓶颈非常明显，就在这里。当模型规模大到一台机器存不下的时候，就无法正常运行了。所以从今天的眼光来看，只能称为一个中等规模的机器学习框架。剧透一句，公司开源的通过修改的底层协议将扩展到了一个高一层的境界。后面还会再详细介绍这部分。
不仅是一个框架，还是一种思想，开创性的工作为我们找到了大数据分析的一个可行方向，时至今日，仍不过时。只是逐渐从业务层下沉到底层语义应该处于的框架下层。
   技术
沐帅在中对的前景做了简要介绍；和不同，是类似
的一种系统通信，只是支持了消息广播等功能。因为对研究不深入，这里简单介绍下优点和缺点吧；优点是系统级支持，性能杠杠的；缺点也比较多，一是和一样因为原语过于低级，用写算法，往往代码量比较大。另一方面是基于的集群，如果某个任务失败，往往需要重启整个集群，而集群的任务成功率并不高。阿里在中给出了下图：

从图中可以看出，作业失败的几率接近五成。也并不是完全没有可取之处，正如沐帅所说，在超算集群上还是有场景的。对于工业届依赖于云计算、依赖于计算机来说，则显得性价比不够高。当然如果在参数服务器的框架下，对单组再使用未尝不是个好的尝试，的鲲鹏系统正式这么设计的。
        参数服务器演进
   历史演进
沐帅在中将参数服务器的历史划分为三个阶段，第一代参数服务器萌芽
于沐帅的导师的，如下图所示：

这个工作中仅仅引入来存放数据，不同的处理进程并行对其进行处理。中也有类似的想法，第二代参数服务器叫参数服务器，主要针对特定应用而开发，其中最典型的代表应该是的前身。
第三代参数服务器，也即是通用参数服务器框架是由百度少帅李沐正式提出的，和前两代不同，第三代参数服务器从设计上就是作为一个通用大规模机器学习框架来定位的。要摆脱具体应用、算法的束缚，做一个通用的大规模机器学习框架，首先就要定义好框架的功能；而所谓框架，往往就是把大量重复的、琐碎的、做了一次就不想再来第二次的脏活、累活进行良好而优雅的封装，让使用框架的人可以只关注与自己的核心逻辑。第三代参数服务器要对那些功能进行封装呢？沐帅总结了这几点，我照搬如下：
高效的网络通信：因为不管是模型还是样本都十分巨大，因此对网络通信的高效支持以及高配的网络设备都是大规模机器学习系统不可缺少的；
灵活的一致性模型：不同的一致性模型其实是在模型收敛速度和集群计算量之间做；要理解这个概念需要对模型性能的评价做些分析，暂且留到下节再介绍。
弹性可扩展：显而易见
容灾容错：大规模集群协作进行计算任务的时候，出现或者机器故障是非常常见的事，因此系统设计本身就要考虑到应对；没有故障的时候，也可能因为对任务时效性要求的变化而随时更改集群的机器配置。这也需要框架能在不影响任务的情况下能做到机器的热插拔。
易用性：主要针对使用框架进行算法调优的工程师而言，显然，一个难用的框架是没有生命力的。
在正式介绍第三代参数服务器的主要技术之前，先从另一个角度来看下大规模机器学习框架的演进

这张图可以看出，在参数服务器出来之前，人们已经做了多方面的并行尝试，不过往往只是针对某个特定算法或特定领域，比如是针对算法的。当模型参数突破十亿以后，则可以看出参数服务器一统江湖，再无敌手。
首先我们看看第三代参数服务器的基本架构

上图的 可以先放一放，因为实际系统中这部分往往是复用现有的资源管理系统，比如或者；底下的 毋庸置疑的需要类似的分布式文件系统的支持；剩下的部分就是参数服务器的核心组件了。
图中画了一个 和三个 ；实际应用中往往也是类似， 用一个，而 按需配置； 是 中的管理节点，一般不会有什么逻辑，只有当有 加入或退出的时候，为了维持一致性哈希而做一些调整。
 中的 则是一个简单的任务协调器，一个具体任务运行的时候， 负责通知每个加载自己对应的数据，然后去 上拉取一个要更新的参数分片，用本地数据样本计算参数分片对应的变化量，然后同步给 ； 在收到本机负责的参数分片对应的所有的更新后，对参数分片做一次。

如图所示，不同的同时并行运算的时候，可能因为网络、机器配置等外界原因，导致不同的的进度是不一样的，如何控制的同步机制是一个比较重要的课题。详见下节分解。
接《大规模机器学习框架的四重境界下》作者：樊林
团队：腾讯移动品质中心

最近投入到了一个新的项目中，是一个新的项目，项目涉及到智能聊天相关的功能，所以需要一个很好的接入层，总之肯定不能用通用的协议来聊天。
手、微信等聊天软件，都会实现自己的一套协议用来发送消息，而这个协议一般都是私有协议，不会公开相应的技术细节，所以一般在没有官方支持的情况下，很难做出一套私有协议的模拟发送工具。
新的项目使用了哈雷协议作为接入层，也是一个私有协议。新项目因为项目的特点，需要对后台服务进行监控，技术上来说，必须模拟哈雷接入层的私有协议，然后才能进行相应的监控。与其他私有协议一样，哈雷协议的模拟难度是很大的，这时候该怎么做呢？
哈雷协议介绍
“哈雷深入移动互联网网络应用场景，向移动应用提供完善的最优网络接入托管、 实时消息推送、通用资源下载、 增量自更新等服务。”
“哈雷  的网络接入服务主要针对业务前后端频繁、少量的数据收发场景，业务后台 支持ＨＴＴＰ服务、 服务或者支持  格式调用的后台服务。”
哈雷协议主要是面向移动互联网的，官方只提供了以及的。可以通过集成对应的，完成对哈雷协议的使用。
传统的方案
传统的方案在上模拟请求，然后校验相应的返回结果。
适用范围：
、对于公开协议一般比较方便，例如、等，有各种各样的模拟工具以及开源类库都可以用。
、对于私有协议一般很困难，除非官方提供支持，否则很难做出上的模拟工具。例如我们的哈雷协议，只提供了以及的。
优点：
、监控稳定性好；
、性能强大，执行效率高；
、监控扩展性好。
缺点：
、无论是私有协议还是公有协议都会有一定的开发量；
、和运行时的环境始终有些差异，不能完全代表真实环境；
、上模拟代码以及参数和开发的项目代码以及参数相互隔离，不能及时同步。
思考新的方案
新项目的后台接口监控使用传统的上的监控的方案存在两大回避不了的问题：
首先是是开发量的问题：重新做一套上的哈雷模拟工具，开发量巨大，开发也不愿意承担这个任务。
第二个是后续维护的问题：后台功能的更改以及协议的升级，对应的上的模拟工具都需要再做调整。
所以要不断地思考，尝试寻找新的方案，自己给自己来了一次头脑风暴 。
、为什么要做后台接口监控？
后台接口监控是针对后台接口做的测试，周期性触发，可以准实时地保证后台接口的功能正常性。服务出现问题后能够在分钟内发现对应的问题。
、后台接口监控为什么不能用移动端的界面自动化测试来代替？
客户端的自动化测试耗时较长，稳定性较差，同时覆盖范围有限，不能满足后台接口可用性的准实时测试。
、移动端只能做自动化测试吗？
移动终端包括和性能越来越强，扩展性也越来越强，可以说能做到的事，理论上在移动终端上都能做到 。
、后台接口监控不涉及到界面测试，只涉及到网络请求测试，移动端就不能做相应的测试吗？
思前想后，确实找不到说不的理由。做一个不用关注界面，只在后台发网络请求的就可以了 。
、在移动端做后台接口监控开发量大吗？
哈雷本身就提供了对应的，不用重新开发。而且开发一般采用了架构，既然不要界面，只需要把开发的数据层和层源代码过来就可以直接用了。
、在移动端做后台接口监控，结果怎么看呢，总不能拿着手机看吧？
目前手机和传递数据的方法很多，而且很成熟，可以将移动端的测试结果传送到上或者其他平台上查看。
、在移动设备上运行后台接口监控的定期任务，设备稳定性如何呢？
这个只能说还没人这样做过，不是很清楚。理论上问题不大，即使物理设备有问题，也可以尝试用虚拟机代替。
、在移动端做后台接口监控发现问题容易定位吗？
这个理论上比模拟端更好定位，因为主要代码都是开发同学的，出了问题，那真的是项目代码出的问题。
、在移动端做后台接口监控，后续功能升级维护麻烦吗？
因为是的开发的代码，功能升级后，再一遍开发的代码就了。理论上难度很小。 
经过脑暴后，做一个移动端的来实现后台接口监控有很多的挑战，但也存在很多优势，可以试着搞一下。
最终选择的方案
开发的代码做一个在移动端运行的后台接口监控，具体实现流程如下：

设备层
如何选取要的代码
基本上开发用的都是架构，架构也是谷歌官方推荐的。

：即数据层。它区别于架构中的，在这里不仅仅只是数据模型。在架构中它负责对数据的存取操作，例如对数据库的读写，网络的数据的请求等。这一层的代码全部。
 即视图层。在层中只负责对数据的展示，提供友好的界面与用户进行交互。这一层的代码都用不到，不用。
：是连接层与层的桥梁并对业务逻辑进行处理。在架构中与无法直接进行交互。所以在层它会从层获得所需要的数据，进行一些适当的处理后交由层进行显示。这样通过将与进行隔离，使得和之间不存在耦合，同时也将业务逻辑从中抽离。这一层的代码选择性地。
要做的后台接口监控不涉及视图层，只涉及网络请求。所以最终选择的代码：全部的层部分层。 
只是一个整体的思想，具体的对应到的代码，还需要进一步划分：

所以最终的就是模块的所有代码、和模块的部分代码。
的具体实现
、模块：是腾讯内部通用协议，用来规定客户端和服务端调用时具体的字段，该模块包含了对应的文件解析出来的类、公用的组包方法、解包方法具体可以参考腾讯相应的开源项目。
例如发送消息的类的定义如下：

、代码的组合：哈雷的初始化、组包、发包功能、验包功能。
初始化：静态初始化一次自模块。

组包发包：通用的发送方法自模块，具体发送内容自模块。

返回内容校验：自模块。
涉及到具体的字段含义、判断条件，较敏感，就不写示例代码。
、实现和的通信：
对外暴露常规的，切勿随意暴露，会有安全风险：

接收的启动指令，满足条件，则启动线程，开始发送请求：

对应的命令：使用发送信息，并填写相应的字段       _     
、结果输出日志：

层
比较简单，大约几十行左右的实现：
、任务触发：发送命令，触发对应的接口监控。

、用命令捕获日志：
主要关注点：
这里不要用多线程实现，要用多进程实现。日志捕获是一个阻塞式的，不停止的话会一直进行下去，所以一定需要一个终止的方法，而的多线程没有终止命令，只能用多进程了。
返回值中的、，代表着打开的进程和文件，分别用来终止进程和关闭文件，调用以及方法即可。
、日志分析：
监控日志看是否完成测试：执行完任务后，会输出“__”。

校验结果：主要是分析，做字段校验，较敏感不做具体字段的介绍。
、报告以及告警
将步骤校验结果的做成报告，如果有校验失败的情况，根据情况发送告警。
、定期触发
目前的监控任务比较简单，暂时先采用了：  。

因为都是脚本实现的，后续可以根据需要无缝迁移到等平台。
任务执行效果
、执行效率：每一个测试一个都只发送一条请求，只涉及到网络请求发送  打  抓  分析，没有任何界面的操作，执行耗时都在秒级，满足了后台接口监控的准实时性要求。
、稳定性：必须有一个手机节点来执行。
最初使用实体手机，出现连接不稳定、电池出问题等情况，一天内需要维护多次。所以切换到了虚拟机来运行。
经过实测，官方的版本模拟器了，选择的，性能好，稳定也满足要求，可以做到一星期内稳定运行宿主选取的是酷睿内存开启，详细配置如下：

目前的方案满足了需求，可以说这次新方案的尝试成功了！
后记
后续遇到类似的需要选择方案解决一个问题时，我们应该如何去分析选择，尤其是面临各种选择都存在风险的情况下，应该怎么做呢？
总结了一个简单的分析流程：

核心的关注点：
、首先要明确我们做一件事的目的是什么。
对于测试而言最终目的一定是落地到产品的质量保证维度上；而实现自动化、后台接口测试只是一个手段，这些手段对应的产品的质量维度才是目的，不能把手段当成最终的目的。
、可行、不可行的方案都要列举。
不可行的方案未必真的是不可行，可行的方案也未必真的可行。
、列举可行或者不可行原因，确认这些原因是否真的成立。
这个要结合最终目的来分析。有时候分析到最后，我们会发现可能有以下几种的情况。
倒推因果：根本就找不到可行或者不可行的原因，可行只是因为有人这样做了，所以认为是可行的，成为了传统；不可行只是没人这样做过，所以不可行。此时要仔细和最终目的进行对比，仔细分析可行性
技术革新以及时代变革，不可行的方案可能变成了可行的，可行的方案又变成不可行的了。
、遇到问题多思考，必要时拉上一群人一起脑暴。
思考的过程一定要记录下来，方便后续回溯，否则会陷入胡思乱想的怪圈记录方法不限。
后后记
这次后台接口监控实现，主要的工作量全在了客户端源代码的学习以及理解以及自己写代码。类似于了客户端的网络数据模块的源代码，针对这一个模块做了接口测试。的代码也随着开发的代码进行更新，也和开发的代码一样，有了版本的概念。
后续和开发同学沟通，也可以这样说了：“开发大哥，没听懂吗？那我们直接看代码吧。”
这一次的方案意外地有如下几个好处：
整体的效率提高了：开发的代码比直接自己写代码，效率提升很多，而且质量也不差；
对开发的整体代码架构有了深入的了解：为后续的定位以及测试方案的制定等，提供了重要的依据；
顺便测试了客户端代码逻辑：本方案主要是为了做后台接口监控，最终也实现了后台接口监控，同时也对开发的层以及层的代码逻辑进行了校验。 
这个方案实施的前提：
当然这个方案能够快速实施并有较好的效果，也是有一些前提条件的，大家想用这个方案也要先考虑一下这些前提是否成立。
开发要遵从架构：本次能够快速开发代码完成测试的开发，主要原因还是开发遵从了架构，真的可以做到过来就可用的地步，自己需要修改的很少。谷歌提出的架构真的真的很强大。
如果开发没有遵从架构，数据存储、视图展示、数据控制混在一起，根本找不到从哪里，此时建议测试同学优先推动开发同学，优化一下开发的代码架构。
测试也要能读得懂代码，会写代码。本方案实施至少需要做到以下三点：
、获取项目的源代码，并正常编译运行；
、能进行简单调试追踪，了解项目代码逻辑；
、掌握的基本开发知识，进行简单的开发 。
总之测试了解开发的代码，并将开发的代码为我所有，好处多多。
获取更多测试干货，请搜索微信公众号：腾讯移动品质中心！作者介绍：王天夫 腾讯云后台开发工程师

腾讯云容器服务是基于打造的。在中，创建和管理容器都是以来实现，例如： ，等。使用来管理容器，可以使用户方便的对容器数量做扩缩容，升级容器等操作。此文主要选择了两个最常用的，从各自功能，优缺点方面进行对比，方便大家在后续自己直接使用原生的功能时做参考。
 
 为的一个核心内容，应用托管到之后，需要保证应用能够持续的运行， 就是这个保证的，主要的功能如下：

确保数量：它会确保中有指定数量的在运行。如果少于指定数量的， 会创建新的，反之则会删除掉多余的以保证数量不变。

确保健康：当不健康，运行出错或者无法提供服务时， 也会杀死不健康的，重新创建新的。

弹性伸缩 ：在业务高峰或者低峰期的时候，可以通过 动态的调整的数量来提高资源的利用率。同时，配置相应的监控功能  ，会定时自动从监控平台获取 关联的整体资源使用情况，做到自动伸缩。

滚动升级：滚动升级为一种平滑的升级方式，通过逐步替换的策略，保证整体系统的稳定，在初始化升级的时候就可以及时发现和解决问题，避免问题不断扩大。


最后，来看一下官方的解释：

          “”                                                                                                                                           


同样为的一个核心内容，主要职责同样是为了保证的数量和健康，的功能与 完全一样，可以看做新一代的 。但是，它又具备了 ，之外的新特性：
 全部功能：继承了上面描述的 全部功能。
事件和状态查看：可以查看的升级详细进度和状态。
回滚：当升级镜像或者相关参数的时候发现问题，可以使用回滚操作回滚到上一个稳定的版本或者指定的版本。
版本记录 每一次对的操作，都能保存下来，给予后续可能的回滚使用。
暂停和启动：对于每一次升级，都能够随时暂停和启动。
多种升级方案：删除所有已存在的重新创建新的 滚动升级，逐步替换的策略，同时滚动升级时，支持更多的附加参数，例如设置最大不可用数量，最小升级间隔时间等等。
下面同样是官方的解释：

                                                           

   
做为新一代的 ，好处不言而喻，不仅在功能上更为丰富，同时官方的文档中，也都推荐使用来管理在容器服务中，集群的系统例如也都使用来管理的，所以当大家需要选择的时候，也推荐使用在来管理。
      
 
 是使用  来进行升级
    \
    _ = |  
首先 我们定义一个的文件，副本数量为
 
 

   

   
  
   
  
  
   
  
   
  
  
    
   
  
    
创建
    
然后是用查看创建的
   
现在需要将的版本进行升级，从升级到我们在定义一个版本的 的文件：
 
 

   

 

 


 

 


  
 

  
开始滚动升级为更新间隔，这里设置的是
      =
            
    
    
    
    
  
     

直接使用   或者 方法就可以直接升级：
首先 我们同样定义一个的文件，副本数量为
 
 

 

 



 


  
 

   
创建
    
然后是用查看创建的
   
现在需要将的版本进行升级，从升级到有两种方法可以使用： 直接镜像
     =
   
或者直接
   
  
最后，查看详细信息来确定升级进度
   
同时介绍一下附加的一些操作暂停和继续，回滚升级
    
    
    
总结：在腾讯云容器服务中，我们创建的无状态服务都是以来管理的容器，因为功能更多，并且也是官方推荐的，下一代的 。

相关推荐 容器编排系统介绍 如何搭建及使用  提速应用部署，快速上云声明：
你知道写了一半，需用的资源被墙掉了的滋味吗！！！
有各种的便宜的实现方案，求方法、求教程、冷嘲、热讽请在下面留言区毫不留情的留下笔墨，不然还真瞧不出您看过本文，不然还真证明不了您不考虑不用这个方案。
本方案奔着不求最实惠，只求最装逼的方法进行便宜的我不用 ，我就用贵的。
时时备份我最喜欢，可是呢最近国家又不允许私自购买各种梯子，所以我决定自己搭建备份服务器。
 用户 、 手机用户、非智能机用户退下吧，没有客户端。
今天方案的主角是 ，一个开源的客户端——一个号称你的数据你做主的软件，一个值得信赖的软件。
准备
主角当然是腾讯云的，还没有购买的同学可以点击这里购买，建议年付就好啦，或者买半年一个月的，装逼过去就好了。
软件 管理使用
软件版、版、版本
可以从首页 的「     」里找到对应版本的下载地址。

备份手机图片当然是先说手机：

按上面的网址和图示下载手机的客户端然后安装，或者打开 安装
安装完成这个标志
打开软件，习惯性的打开设置
我们看到设备标识，复制一下，放到记事本备用

然后打开设置，看看让软件怎么运行，如果需要的话可以选择仅在充电时同步，节省更多电量


然后建一个备份文件夹，第一行是自己取的备注名，第二行是文件夹标识，用来区分文件夹，第三行是需要备份的文件夹，下面选项允许备份到那个设备，您还没有添加设备的话就是没有这个选项的，下面主文件夹的选项意思就是我只往外发，以我的文件为准不选择的话其他电脑删除照片手机也会删除，选上就只能手机删除其他的跟随

腾讯云这边
创建的时候记得把高端口号全部打开，特别是端口，系统版本选最新的或者以上的版本
如果选择了系统就按以下教程，选的系统就跳过本段
新的账号密码在右上角的《消息中心》——《站内信》——《【腾讯云】请查收您新购买的云服务器》
打开如图：

复制账号密码，放入记事本
我们选择网页登陆，更一些
找到我们的，然后点击右侧的登陆

弹出页面如上图，图中“请点击这里”，可以粘贴账号和密码，以及各种命令，省去了敲打的烦恼
用上面的账号密码登陆
位的系统执行
 
多尝试几次，放资源的服务器不稳定，经常下载失败
你说我怎么下载的这个资源？
我才不告诉你，是用浏览器梯子下载然后用放上去的呢
其他的系统需要自己去页面查看，反正文中第一图都圈点了
执行解压命令
  
其实只需要输入到    ，然后按一下键，按一下回车键就好了
 
  


看到这个图 我们就是安装成功了
按下 中断软件运行，我们要配置一下软件
 
然后按向下的方向键，一直到出现的地方，右方向键把光标移动到上，然后按一下    键
  
把 修改为
然后按一下键
输入
：
  
  
   
打开管理员页面：你的公网
首先提示有安全隐患

我们先设置一下后台密码

自己改一下设备的名字 自己取账号自己取密码 保存，重新登录一下
添加我们的手机，设备就是刚才放记事本的那个

保存就好

然后添加一个放照片的文件夹的文件夹，文件夹的写刚才手机写的那个文件夹

选好本地放照片的文件夹，我们用的账号， 就放在 好了
然后看一下的设备

复制一下，放入记事本
返回到手机上我们添加一下设备我们的腾讯云

可以扫码可以输入

手机上操作给对方权限

等待一段时间，等待手机和相互发现

同步中
到现在手机的照片就自动的跑到我们腾讯云的备份目录啦！
 系统
下载完成

解压到一个不会被删除的文件夹

右键发送到桌面，然后双击运行因为我下载的是绿色版本，版本
熟悉一下界面

客户端和网页是一样的模式一样界面
接下来轻松的走一次
先添加设备

保存之后，腾讯云这边就提醒有新设备添加

添加上家里的电脑，顺便把手机备份到腾讯云的手机照片文件夹别名滕云阁的勾选上

电脑提示有新共享的文件夹，在家里电脑找一个文件夹来放照片

至此，我们建立了一个 手机→→腾讯云→→家里电脑  的照片备份路径
我们用相同的方法把相关文件夹共享给办公室的电脑，然后调整相关权限，电脑手机腾讯云相互备份。
有其他的需要可以自己理顺一下自己的备份逻辑


至此，我终于写完了。
折腾了这么多小时，我可以不开家里电脑或者办公室电脑，就能备份手机照片了。

 相关推荐
【腾讯云的种玩法】利用腾讯云搭建实用小工具【腾讯云的种玩法】搭建属于自己的服务器一、   开发新特性扫描

提供对 官方默认、 两种构建方式的支持。原来的    构建方式仍然可用，官方建议迁移。
构建生成的  文件将直接被  打包在  中。
以  为  层的调试器，提供跨  层和  层的  。
开发环境提供对  代码编辑的支持。


对  方法查找引用，可以看到  同时列出  层和  层的方法函数及其引用



新特性要求     版本必须为  及以上，且  版本必须为  及以上。

二、将现有  代码链接到   项目
考虑到  构建方式已经有很大的使用量， 支持在   使用  构建。开发者需提供  和可选的 ，并更新 。执行构建时， 将调用 ，并将生成的  文件打包进  当中。
方法一  使用   
  提供了一个自动配置 ，使之链接  源代码的方式：

在  选项卡选中当前项目，进入 “” 菜单，选择 “    ”；
在弹出的对话框中，构建方式选择 “”，并定位要引入代码的  文件位置；
点击 “”，如果幸运的话，等待   完成后，即可开始享受在   继续开发现有  项目的乐趣了。

以上过程针对  构建方式。要链接  方式构建的  代码，需提供  的路径，操作过程类似。
方法二  修改 
如果需要对执行构建时的具体参数进行调整，就需要通过修改  来实现。在不指定额外参数时， 将采用默认配置完成  库构建，例如  将告知  构建所有  的  库 即便已经在  添加了 _ 参数，这可能是不需要的。
三、认识  的新成员
本节介绍  中与  代码构建有关的新字段。
  块
如果通过上述“方法一”链接了  源代码， 将在  块下新增：
 {
     {
         被链接的  代码的相对目录
    }
}
其中， 指定了构建工具，如果使用 ，该字段即为 ， 字段的值为  文件的相对位置。
  块
可以在这个代码块中添加构建参数、 编译标志等。例如：
 {
  
   {
    
     {
         _=   参数
         ___   编译标志
         ____   编译标志
    }
}
另外，参考资料  提供了在使用  构建工具时，可以添加的一些自定义构建参数。比如  _=_ 指定  使用  的静态标准库。
  字段
该字段用于设定要构建和打包进  的 。该字段可存在于  块，也可在  块。其中前者指定构建和打包的  较为常用，后者仅指定构建的 。 的可选参数与在  添加的 _ 参数一致详见参考资料 。例如：
 {
  
   {
    
     {
       ，，，
    }
}
四、 初探
自   的最新版本起， 成为其用于构建  库的默认工具。 解释为   起源于  世纪初，是目前主流的跨平台构建工具。 脚本可以视为对构建过程中使用的  进行了一层封装，因此具有更好的可读性和易用性。本节试图把在构建   库时需用到的的  脚本进行简单的梳理。
 先举一个小栗子
下面的  构建了一个简单的  库的框架。经  调用  后，将会生成  文件，并可在  代码中通过  加载这个  库。
 
__ 
_ 
__ 
__ {_}
 __  
一般作为  正文的首行，用于指示脚本可被执行的  最低版本。对于   库的构建来说， 版本不应低于 。
  _   |  |    
添加一个  库。需指定库的名字唯一识别一个库，也是  文件的命名来源。这里与  一致和源文件相对路径列表。对于   库，一般需添加  或者  标志，指明加载方式。
  会将这里列出的所有源文件添加到  选项卡的  分组里。
  _   
指定头文件的目录。用于告知  在编译期寻找合适的头文件。
 _     
将由   预先构建的库的路径以变量形式存储，为后面链接构建库提供预备参数。例如 _ _  即为将  库作为变量 _ 的引用。
这里的库名称参数与在  添加的 _ 参数一致，可用的预构建库与  版本有关详见参考资料 。
  `_、_ 变量
  会自动定义 _、_ 等变量，其值分别为  的根目录路径和将生成的  库的目标 。
 __   
向将要构建的库中链接其他库。常见的可链接类型包括
   的预构建库，比如要链接上面的  库，则需添加

_ _ 
__  {_}
 通过 _ 新建的，引用源代码的静态库，例如：
_  
__ 
也可以利用   提供的源代码进行链接：
_  {_}_____
__ 
 另外，如果需要链接已构建的库，可以通过包含  标志的 _ 完成添加。例如：
 添加已构建的库，名字为 
_  
 设置  的属性，指定  库的位置
__  _ {_}
 指定包含文件夹，以便能在源代码中引用这个库 参考前述第  小节
_
 链接  到 
__ 
  应用更改并同步
在更新  之后，可以执行 “”→“   ” 应用更改， 触发执行  以备构建。应用更改后， 选项卡的 “” 节点将会同步更新。

当项目中包含多个  库时， 选项卡将会分开显示这些库


五、总结与展望
与更早引入   开发环境下的，用于  构建的    方案相比，官方支持  和  配合  用于构建，颇有一种“返璞归真”的意味。   对  开发的支持程度，已经足够吸引开发者们主动改变跨环境开发的现状了。
在本文所述之外，参考资料  中还提供了利用向导工具创建具有  支持的  新项目的方法。由于这个新特性比较明显，本文未做详述。另外，如果所处的网络环境不适宜在官方镜像下载所需的开发工具，可以访问腾讯  提供的镜像  
参考资料

       
 
 
  _ _
   _
    
  优图实验室研究人脸技术多年，不仅在技术方面有很好的积累，而且在公司内外的业务中有众多应用。笔者作为优图实验室人脸研究组的一员，在与产品、商务、工程开发同事交流过程中发现：不管是“从图中找到人脸的位置”，或是“识别出这个人脸对应的身份”，亦或是其他，大家都会把这些不同的人脸技术统称为“人脸识别技术”。
因此，笔者整理了一些常见人脸技术的基本概念，主要用于帮助非基础研究同事对人脸相关技术有一个更深入的了解，方便后续的交流与合作。
人脸技术基本概念介绍
 人脸检测
“人脸检测 ”是检测出图像中人脸所在位置的一项技术。
人脸检测算法的输入是一张图片，输出是人脸框坐标序列个人脸框或个人脸框或多个人脸框。一般情况下，输出的人脸坐标框为一个正朝上的正方形，但也有一些人脸检测技术输出的是正朝上的矩形，或者是带旋转方向的矩形。
常见的人脸检测算法基本是一个“扫描”加“判别”的过程，即算法在图像范围内扫描，再逐个判定候选区域是否是人脸的过程。因此人脸检测算法的计算速度会跟图像尺寸、图像内容相关。开发过程中，我们可以通过设置“输入图像尺寸”、或“最小脸尺寸限制”、或“人脸数量上限”的方式来加速算法。

图、人脸检测结果举例绿色框为人脸检测结果
 人脸配准
“人脸配准 ”是定位出人脸上五官关键点坐标的一项技术。
人脸配准算法的输入是“一张人脸图片”加“人脸坐标框”，输出五官关键点的坐标序列。五官关键点的数量是预先设定好的一个固定数值，可以根据不同的语义来定义常见的有点、点、点等等。
当前效果的较好的一些人脸配准技术，基本通过深度学习框架实现，这些方法都是基于人脸检测的坐标框，按某种事先设定规则将人脸区域扣取出来，缩放的固定尺寸，然后进行关键点位置的计算。因此，若不计入图像缩放过程的耗时，人脸配准算法是可以计算量固定的过程。另外，相对于人脸检测，或者是后面将提到的人脸提特征过程，人脸配准算法的计算耗时都要少很多。

图、人脸配准结果举例右图中的绿色点位人脸配准结果
 人脸属性识别
“人脸属性识别 ”是识别出人脸的性别、年龄、姿态、表情等属性值的一项技术。
一般的人脸属性识别算法的输入是“一张人脸图”和“人脸五官关键点坐标”，输出是人脸相应的属性值。人脸属性识别算法一般会根据人脸五官关键点坐标将人脸对齐旋转、缩放、扣取等操作后，将人脸调整到预定的大小和形态，然后进行属性分析。
常规的人脸属性识别算法识别每一个人脸属性时都是一个独立的过程，即人脸属性识别只是对一类算法的统称，性别识别、年龄估计、姿态估计、表情识别都是相互独立的算法。但最新的一些基于深度学习的人脸属性识别也具有一个算法同时输入性别、年龄、姿态等属性值的能力。

图、人脸属性识别过程最右侧文字为属性识别结果
 人脸提特征
“人脸提特征  ”是将一张人脸图像转化为一串固定长度的数值的过程。这个数值串被称为“人脸特征 ”，具有表征这个人脸特点的能力。
人脸提特征过程的输入也是 “一张人脸图”和“人脸五官关键点坐标”，输出是人脸相应的一个数值串特征。人脸提特征算法都会根据人脸五官关键点坐标将人脸对齐预定模式，然后计算特征。
近几年来，深度学习方法基本统治了人脸提特征算法，这些算法都是固定时长的算法。早前的人脸提特征模型都较大，速度慢，仅使用于后台服务。但最新的一些研究，可以在基本保证算法效果的前提下，将模型大小和运算速度优化到移动端可用的状态。

图、人脸提特征过程最右侧数值串为“人脸特征”
 人脸比对人脸验证、人脸识别、人脸检索、人脸聚类
“人脸比对 ”是衡量两个人脸之间相似度的算法
人脸比对算法的输入是两个人脸特征注：人脸特征由前面的人脸提特征算法获得，输出是两个特征之间的相似度。人脸验证、人脸识别、人脸检索都是在人脸比对的基础上加一些策略来实现。相对人脸提特征过程，单次的人脸比对耗时极短，几乎可以忽略。
基于人脸比对可衍生出人脸验证 、人脸识别 、人脸检索 、人脸聚类 等算法。

图、人脸对比过程右侧的相似度为人脸比对输出的结果
 人脸验证
“人脸验证 ”是判定两个人脸图是否为同一人的算法。
它的输入是两个人脸特征，通过人脸比对获得两个人脸特征的相似度，通过与预设的阈值比较来验证这两个人脸特征是否属于同一人即相似度大于阈值，为同一人；小于阈值为不同。

图、人脸验证过程说明最右侧“是同一人”为人脸验证的输出
 人脸识别
“人脸识别 ”是识别出输入人脸图对应身份的算法。
它的输入一个人脸特征，通过和注册在库中个身份对应的特征进行逐个比对，找出“一个”与输入特征相似度最高的特征。将这个最高相似度值和预设的阈值相比较，如果大于阈值，则返回该特征对应的身份，否则返回“不在库中”。

图、人脸识别过程右侧身份“”为人脸识别结果
 人脸检索
“人脸检索”是查找和输入人脸相似的人脸序列的算法。
人脸检索通过将输入的人脸和一个集合中的说有人脸进行比对，根据比对后的相似度对集合中的人脸进行排序。根据相似度从高到低排序的人脸序列即使人脸检索的结果。

图、人脸检索过程右侧绿框内排序序列为检索结果
 人脸聚类
“人脸聚类 ”是将一个集合内的人脸根据身份进行分组的算法。
人脸聚类也通过将集合内所有的人脸两两之间做人脸比对，再根据这些相似度值进行分析，将属于同一个身份的人划分到一个组里。
在没有进行人工身份标注前，只知道分到一个组的人脸是属于同一个身份，但不知道确切身份。另外假设集合中有个人脸，那么人脸聚类的算法复杂度为

图、人脸聚类过程右侧绿框内按身份的分组结果为聚类结果
 人脸活体
“人脸活体”是判断人脸图像是来自真人还是来自攻击假体照片、视频等的方法。
和前面所提到的人脸技术相比，人脸活体不是一个单纯算法，而是一个问题的解法。这个解法将用户交互和算法紧密结合，不同的交互方式对应于完全不同的算法。鉴于方法的种类过于繁多，这里只介绍“人脸活体”的概念，不再展开。
结束语
本文简要的介绍了一些主要的 人脸技术 的概念，目的是让非研究的读者对各项技术所能解决的问题有所了解。对于希望对这些技术有进一步深入了解的读者，可以多搜索优图人脸相关的文章。
相关推荐
人脸识别引言
  自从年月份正式立项，在近一年的时间里对  的读写性能、强同步、大并发量访问和稳定性等方面做了大量工作，读写性能在并发上升到一定程度时具有倍以上的性能提升，同时在  的版本发展过程中修复了多个影响线上稳定性的 如  死锁，实例异常关闭、字符集引起的主备异常等，在保证了内核稳定的同时，对腾讯云的稳定性提供了有力的保障。  不仅提升了实例性能与稳定性，而且在发展的过程中积极和社区进行交流，在  等社区发表了多篇具有影响力的文章，并作为演讲嘉宾，多次参与 、、、开源中国和  全球架构师峰会等社区会议，大大提升了腾讯云在业界的影响力，赢得了客户的信任与口碑。
什么是 ，为什么要做  
 是   的简称，是  基础架构部   团队在近十年发展过程中衍生出来的一个对  内核源码深度定制、对官方  版本进行二次开发的项目。其主要目的是在保证线上稳定性的同时，满足业务对数据库的各种需求。 的服务对象是公司内部用户和腾讯云上小至数大至数百的外部客户。 是支撑这些业务平稳运行的关键基石，在服务用户的同时，以打造腾讯自己的分支为己任。
 作为最受欢迎的开源数据库，也是云上使用最多的数据库，不同的业务场景对数据库有不同的功能需求与性能需求，这样就决定了数据库本身的多样化需求，同时  在不同使用场景下所衍生出来的各种问题，也影响着线上的稳定性， 主要包括以下工作：

数据库性能调优；
对内核进行深度改造，满足应用需要的性能要求，在活动促销时需要保证数据库的平稳；
提供业务需要的各种功能需求；
实现资源管理需要内核支持的功能；
  在运维过程中需要的诊断相关的功能；
 在运行过程中存在的问题定位并修复影响系统运行的  ；
保证数据库系统的安全，保证云上用户数据的安全；

做为云上客户的服务者，我们必须有及时响应用户并解决各种问题的能力，也应该满足用户的各种合理要求，对内支持业务的快速发展，满足业务要求；对外为腾讯云提供强有力的竟争力，这就是  存在与发展的目的。
 做了哪些事情
版本选择
其基准开发版本为 ， 选择  做为基准版本主要有以下原因：

 是当时大版本  中的最新版本，自     以来，版本已经相当稳定；
 版本刚刚 ， 但从官方  上来看有相当多的  ，因此未被采用，在现在看来选择  也是正确的，因为从  版本的   来看，除了   是新加入的功能，其它内容基本是  相关；虽然  存在着各种问题，但其新添加的功能  卓越的性能都会是未来  年的主流选择，我们也计划在今年对  进行支持，并且会对  新添加的功能  性能改进进行详细的源码级别的介绍。
 版本是接受程度最高的  版本，也是用户使用最多的数据库版本；

    综合以上原因，我们选择了  做为  开发的基准版本。
性能改进
  优化
  又称读视图，用于存储事务创建时的活跃事务集合。当事务创建时，线程会对 _ 上全局锁，然后遍历当前活跃事务列表，将当前活跃事务的存储在数组中的同时，记录最大事务 __ 　最小事务 __  最小序列化事务 __。 当事务执行时，凡是大于__ 的数据对于事务是不可见的，凡是事务小于 __ 的数据都是可见的，事务  是 _ 数组中的某一个时也是不可见的；  在执行  操作时，凡是小于 __ 的数据，都是可以被  的，  是   实现的基础；
由于_ 的创建和销毁都需要获取 _ 当并发量很大的时候，事务链表会比较长，又由于遍历本身也是一个费时的工作，所以此处便成为了性能瓶颈，详情可以参考 ，为了解决这个问题  做了以下事情：


在 _下维护一个全局的事务的有序集合，事务的 创建  销毁 的同时将事务的  从这个集合中移除；
在 _下维护一个有序的已分配序列号的事务列表，已记录拥有最小序列号的事务，供  时使用；
减少不必要的内存分配，为每一个 _ 缓存一个 _，_ 数组的大小根据创建时的活跃全局事务  集合做必要的调整；
参照  的实现，在  中将 __ 移除，减少只读视图的长度；


经过上述修改，读写性能都有很大的提升，详情可以参考文章 畅游数据库性能优化过程简析。
   
 有两种很重要的 ，分别为    ，前者是保证事务原子性操作所产生的日志，后者是主备数据同步所产生的同步日志。 其中  在 _ 时进行   而   则是在事务提交的时候分别调用 _ 使   落地，导致 _ 竟争较为严重；从   的逻辑来看，只要   早于  落地，就不会有数据问题，因此在 _ 的第一阶段时， 会收集各种引擎的最大的   ，然后将小于该  的   落盘，从而提升写性能。更详细的分析与测试，可以参考 。
  双缓冲区
   是一个顺序写的单缓冲区，_ 锁资源竟争激烈，在事务落盘的过程中对  相关的读、写都被阻塞，为了解决 _ 的锁竟争问题，引入双缓冲区机制  _ 锁，在    的过程中释放 _，继续持有  __，从而阻塞写，不阻塞  相关的读操作， 完成后释放 _；从而提升并发性，提升性能。
   锁拆分
 一次定位  的过程是从根结点到叶子结点的路径，时间复杂度为：    ，上述的两个优化过程无法省略定位  的中间结点，因此需要引入一种可以从   定位到叶子结点的方法，从而省略根结点到叶子结点的路径上所消耗的时间，而这种方法即是 自适应索引   。查询语句使用  的时候有以下优点：


可以直接通过从查询条件直接定位到叶子结点，减少一次定位所需要的时间；
在   不足的情况下，可以只针对热点数据页建立缓存，从而避免数据页频繁的 ；


 的 __     是  中两个比较大的锁，详情可以参考      –     ， 通过对  锁拆分     以及引入不同的索引锁协议  解决了这两个问题。但是  并不总能提升性能，在多表  模糊查询  查询条件经常变化的情况下，此时系统监控  使用的资源大于上述的好处时，不仅不能发挥  的优点，还会为系统带来额外的  消耗，此时需要将  关闭来避免不必要的系统资源浪费，关于  的适应场景可以参考：____。
 则是和  的解决思路类似，只是使用的分区算法不同，关于自适应索引的详细说明可以参考：  实现解析。
当然，以上这些只是我们所做优化的一部分，还有其它一些优化如  优化、强同步优化、针对业务所做的特殊优化等，这些优化都在线上发挥了不可小觑的作用，以后再以文章的方式一一给大家进行介绍。
功能添加
 支持多种工作模式
 根据配置的不同，支持不同的工作模式，分别为只读、读写、不可服务，在不同的模式下实例表现形式不同：

只读模式：实例只接受读请求，不接受非管理用户的写请求操作；
读写模式：实例可以接受读写请求，但系统管理的相关权限被禁用；
不可服务模式：此模式下， 正常运行但不接受除管理账号以外的其它操作；

     在实现跨园区容灾的时候会根据结点的角色设置不同的工作模式，从而避免双写的问题；
    功能
 在执行过程中需要获取对应的表锁，然后进行操作，如果此时有事务获取表锁，则会造成此语句的阻塞，而后绪操作此表的请求也会被此  阻塞，因此我们引入了  中的   超时失败的功能，即     |    的功能以降低  对线上的影响， 中    |   则可以通过设置参数 ___ 来实现；
 锁系统的扩展
 锁系统有两个特征：

 中的锁与连接强依赖，在连接断开之后便会释放其占有的锁资源，包括  层   层的所有锁资源；
用户线程获取锁之后，如果没有显示释放锁资源，连接没有断开亦或事物没有提交，则会一直占有锁资源；

 对 的锁系统进行了扩展，实现了一种跨事务的、与连接无关的租约读写锁，用于应用层实现分布式事务，提供接口 _ _ 用于上锁与解锁请求，从而满足业务需求，详细接口介绍如下：
 _    _ _ _ _
  多用户对同一个锁对象加锁，会在加锁超时前等待。直到获取到锁或者超时返回。
  锁类型目前支持两种，共享锁和排它锁。共享锁是读锁，允许多个客户端对锁加共享锁。排它锁是写锁，同一时刻只允许一个请求占有排它锁，其他请求需要等待锁释放。排它锁比共享锁有更高优先级，防止过多的共享锁等待情况下，排它锁长时间无法获取。
  同一个锁持有者对同一锁发起多次加锁，会认为重复加锁，相同锁发起者同一时刻只能对同一锁成功发起一次。
  获取的锁，不会因为连接断开而释放。锁持有时间是有指定的，超过持有时间以后锁会自动释放。

 _ 
  主动锁释放。会对指定锁的持有者释放锁，只有在锁持有情况下才会成功。
基于  的强同步
原生  存在着以下问题：

 在时间超过 ____ 会退化为异步 
采用  进行监听，当句柄值大于  时则会出现异常，详情可参考  
在   后等待  容易出现幻读的问题；


为了解决上面的问题并对强同步进行优化及显示状态信息， 做了以下事情：

优化半同步，增加线程，收发并行化；
修正时超过导致异常的，改为；
优化线程判断自身是否为半同步的方法：在线程自身变量上记录；
在半同步基础上实现强同步，一直住直到收到；
修改同步方式时，唤醒正在等待的用户线程，继续等待或者退出；
增加一些状态，用于展示当前等待的情况正在等待的位点，已等待时间；

这些只是我们暂时做的，在以后的版本中，我们将会引入  、更完善的审记、防火墙等内部用户  云用户都需要的功能，随着时间的积累与版本的推移，的功能将会越来越丰富。
稳定性改进与测试
稳定性是数据库服务首先要解决的问题，原生  在稳定性方面存在着以下问题：

在压力持续增大的过程时，会存在着内存分配的问题，原生  在内存分配的过程中会调用  _____，在并发量加大且线程数量变化较大时，内存分配会造成系统性能的抖动，详情可以参考：        、       
随着并发的加大，由于原生  没有流量控制或者  层线程调度的功能，导致线程之间资源争夺比较剧烈，直接导致  性能的不稳定，性能曲线先升后降；
   刷脏算法在   类型时，很容易成为瓶颈；
主备同步时备库性能过低导致的延迟问题等；
 各个版本在实现的过程中存在的  如   死锁 典型的字符集问题、   等 


 在服务业务的过程中不断的自我完善和发展，解决在发展过程中遇到的各种问题，如：

解决在线上遇到的各种 内核 
引入  解决内存分配的效率问题；
对复制线程进行改进，减缓主备延迟； 
引入   在  层进行线程高度，从而避免过多资源浪费在资源争夺等内测中；
实现  需要的功能，结合  实现强一致功能等；


为了保证版本稳定性， 对每一个  都有对应的  文件和覆盖率测试，对于比较重要的改动，不仅要有理有据，还会邀请  官方人员进行必要的  ； 每个小版本发布之前，都会进行回归测试、覆盖率测试、稳定性测试、性能测试以及压力测试，然后才会进行灰度发布；当然，对于每一次的版本发布，都有详细的   以供参考。
金融业务支持
数据的可靠性是金融业务必然的需求，由于  自身存在的问题，很难保证数据的强一致性，这些问题包括：

 是典型的两段提交，在  的过程中依赖  是否存在 决定事务的  或 ，对于已经写  的事务，一定会提交事务，这样在主备切换后容易出现双写的问题；
当 _____=_ 时，主备切换时存在着幻读问题，当 _____=_，如果用户线程在等待备库  的过程中被  那么其它用户线程可以看到被  线程的提交，此时主备切换，仍然存在着幻读问题；
当 _____=_ 时，用户线程在  切换时容易出现死锁问题  详情如下：

                           _                       
                          _     
                        
为了解决上述问题并实现主备数据的强一致， 结合  管控平台针对金融业务的需求，实现了以下特性：

为了规避幻读，强同步插件在线程等待  的过程中，禁止用户  线程，同时本地  会通过实例状态变量 _______ 监控是否出现长时间  问题，触发告警和  操作，减少  住对实例的影响；
本地  在主库  后，会向  获取故障切换时的  位点信息，并以这个位点启动实例， 将截断多余的 ，并回滚相应事务，与新主库建立主从，确保可以快速补充节点；
跨园区高可用的支持。 是常见的  架构：由本地  负责监听  实例，如果实例出现故障，则上报总控节点 ， 选择拥有最多数据的 ，将其提升为 ，并更新接入层的  为新 。在跨园区环境中，如果主库所在园区故障，  时可能无法更新该园区的接入层，而该园区的  依然能够操作原主库，导致出现双写的问题，为了规避网络分区情下的双写问题，实现了租约功能，租约过期的实例将拒绝服务。本地  只有成功向  续租后，才会更新实例的租约，确保实例的租约小于，从而解决双写问题；
对主库 _ 进行拆分，解决死锁的同时提升主库写性能；

除了数据强一制的支持， 还实现了一套与连接无关的分布式锁来支持业务部门实现分布式事务，后绪随着对业务的深入，更多更好的金融特性将会在  中一 一实现，比如热点更新等；
版本表现
 的首要发展目标是解决线上存在的问题并支持业务的稳健发展，同时在解决问题的过程中推动  自身的发展。
在近一年的发展过程中  共发布了  个版本，分别为 _、_ 以及 _ 版本，每个版本包含若干 ，每个  的紧迫程度决定其优先级，每一次版本发布都会对新版本的实例做严密的监控，以保证新版本的稳定性。下面我们从版本在线上的表现以及与官方数据的性能对比来对  做简单的介绍。
线上业务表现


_ 引入业界先进思想并  ，成功解决了业务在高并发下的性能下降问题，并支持业务在大压力下的稳定运行，详情可参考之前的文章：畅游数据库性能优化过程简析；
_ 版本对   做了必要的优化并对写   的代码 ___ 进行了重构，使写性能得到了一定的提交，在与竟品的性能测试  压力测试 长时间的进行压力测试且数据不能出现抖动 的对比过程中脱颖而出，对  站在腾讯云上的最终落户起到了一定的积极作用；同时通过租约控制  的在线离线模式，规避双写，满足跨园区需求；
_ 版本除了必要的优化外， 了影响较为广泛的字符集问题、   问题，使得线上的稳定性得到提升；



 与官方性能测试对比
_ 版本目前处于开发状态，所以我们选取了 _ 版本与  的基准版本  、  的最新版本  以及   的最新版本  做了性能对比，测试机器为  测试详情如下：
测试说明
测试概况：测试结果为  端统计出来的数据，其中   _ 为单语句事务，  中包含 个语句，配置文件为：，测试数据为 个表，每张表 条数据；
 与各版本  性能对比

 与各版本 _ 性能对比

 与各版本  性能对比

从测试的过程与测试结果来看， 不仅拥有更好的性能，还拥有更好的稳定性，在新的  不断实现的基础上，我们对  的表现拥有更多的期待。
 的发展必然也应该是开放的，其特性来源并服务于用户，当版本内容丰富到一定程度时，我们会把  中不影响线上安全  非专利部分的代码进行开源，在没有开源之前，可以将安装包提供给公司内部有兴趣的同学进行对比测试，以增加大家对  的了解与支持。
关于  
  自  以来已经有年有余，社区  用户的呼声也越来越高， 会在今年上半年增加对  的支持，同时会对  的特性进行详细的分析以飨大家，另外在阅读代码  文档的过程中，笔者做了一些整理，希望对大家理解  有帮助； 


 中对   的锁拆分，详情可参考：
支持强同步的  ，原理可参考：       
新的数据格式的支持  
更为方便的优化器控制选项  代价计算，详情可参考： ；
对独立表空间加密的支持，暂时不支持    的加密，详情可参考：  ；
虚拟列  函数索引的支持       
  功能 调整执行计划出错的利器，但现在有性能问题，详情见 
更为详细的系统运行信息监控  



其实，我们在   中做了很多  的事情，如   优化、  创建优化等，在新的   中，我们会有更多可以做的事情，比如执行计划缓存、比如写优化、再比如基于于   服务等等，我们相信   会是一个不俗的版本。
 未来的发展发向
 的发展只是刚刚起步，相比   等这样的公司我们做的还远远不够，还有很多需要改进的空间，但路总是一步步走出来的，我们的差距也在讯速的缩小，在未来的发展过程中  仍然会以云用户为导向从以下方面不断的进行改进：

功能开发，以业务需求为出发点，实现业务所需要的各种功能，如审记、防火墙等；
性能优化，在保证稳定性的前提下不断提升单机性能，并根据业务特性有针对性的进行优化，如热点更新、多语句提交等；
提高内核的抗风险能力，提升对烂、索引异常、流量异常等异常的防范能力，在不修改应用的前提下，保证系统的稳定运行；
兼容并包，不断加强与开源社区的联系，并引入  需要的功能或性能 ，并将有价值的  提交至官方；
以线上稳定为基础，不断提升内核能力的同时，实现运维需要的各种功能，方便运维兄弟；

所以，大家在使用数据库的过程中如果有好的想法或者需求也可以和我们联系，我们会尽最大的努力来满足大家的需求，支持业务的发展。
最后打个广告，数据库是一个很有吸引力的领域，数据库内核研发和算法、操作系统、文件系统、体系结构等有着很多的联系，如果你对数据库有着浓厚的兴趣、对数据库的原理比较清楚、又有着比较好的  或  的基础，最重要的，你有挑战各种困难的勇气，那么你就是我们要找的人，没有专业限制、没有条条框框，我们将会一起努力，见证  在云上的魅力！作者：张祖优  腾讯高级工程师

前言
每一次重要通用漏洞的爆发总是会带来一片腥风血雨，任何微小的漏洞，基于亿地址这个大基数，总是可以被放大！
从开始到，黑客瞄准了数据库服务，通过黑客手段获取数据库服务的权限，然后删除数据，在数据库中插入勒索信息，要求支付比特币以赎回数据可见扩展阅读。那么黑客是如何实现这整个过程？
勒索事件
在的勒索事件里，黑客攻击通过攻击存在未授权访问问题的数据库，加密原数据内容，在数据库中插入勒索信息，要求支付比特币以赎回数据。具体可见雷锋网的报道

在这个事件中，我们来还原下黑客是怎么实现这个流程的：

大概是这样一个流程，通过探测互联网上符合的目标，然后使用对应的攻击脚本针对探测得到的目标实现自动化的攻击。
而细化到具体的探测目标和的功能，以数据勒索这个例子，探测目标主要是探测互联网上开放了端口的目标，然后进一步探测是否可以未授权直接连接目标：

而攻击脚本的功能大概是这样的：

就这个例子，主要是利用了未授权访问的这个问题；默认安装是没有密码的，并且没有绑定，导致的问题就是外网可以访问这些，并且由于无需授权，就可以直接未授权访问。
其实，这是一个自动漏洞批量利用的过程，不仅限于数据勒索，也不仅限于开始列的几种数据服务的未授权访问或者弱口令等安全问题，同样其他漏洞也是可以的。
黑客如何利用漏洞
往往一些漏洞在爆发之后，没多久就马上会爆发出漏洞的和，比如最近的新漏洞，漏洞在月日爆出，而在月日也就是第二天，和已经满天飞，就本次的漏洞来说，基本国内外大的互联网公司基本没有不受影响的；该漏洞可以导致命令执行，可以获得系统权限，在和出现的第一时间，已经基本是地上地下都在利用和扫描了。
 
 

 
     = {==____=== \    =}
     = {}
     = 
     =  =
       
         
     

 ____ == ____
      == 
           
        
     
         
    
          
 上面是这次的，通过这些攻击脚本，黑客可以实现自动化的对漏洞进行利用
年月也出现过一个安全事件，就是有黑客团体利用设计缺陷成功入侵了至少家的服务器具体见的报告。在这个事件里，黑客基于未授权访问问题，通过配合 的技巧批量的入侵了服务器。

上面的视频是通过手动的方式演示了如何利用这个问题获取服务器的系统权限，而往往这个过程黑客是通过自动化的手段进行的，下面是的视频演示了如何通过工具自动化的获取攻击目标，利用进行验证是否存在未授权访问问题的。

其实每一次爆发的漏洞对于相关黑客来说，利用的过程不外乎如此；还有个例子，之前国外有个团队，捕获了一个使用漏洞构建的僵尸网络，利用的漏洞，对服务器进行控制，整个僵尸网络最终可以用来进行攻击分析报告。


经过跟踪公开的漏洞，他们发现，尤其在中国的相关论坛， 被多次讨论和引用，这是一个  脚本引擎的漏洞导致攻击者可绕过沙箱检查执行命令的命令执行漏洞。

这是个影响 以及到的漏洞，相关的也就是漏洞验证代码以及都已经在网上公开，黑客可以利用这个漏洞，执行命令，通过执行一个脚本，来进行反弹，可以达到对服务器的控制。

什么是反弹呢？正常我们通过连接等服务器，是主动的方式连接，而反弹，其实跟我们通过连接的没什么大的区别，而反弹的意思是，控制端通过一些软件，比如，也就是在控制端监听某个端口，被控制端，比如说 服务器，发起请求到该端口，并将其命令行的输入输出转到控制端。

我们通过一个视频来看下如何利用这个漏洞进行反弹来控制服务器的：

而其实黑客如何利用这个漏洞组建僵尸网络，也只是将这个利用过程自动化，批量化。
看到这我不知道大家是否可以发现，例子中黑客使用的漏洞都不是或者，应该算是这里的数字指距离漏洞爆发已过去的时间；其实，正如你所见，可能大家平时更多的觉得是的危害很大，但实际的情况是，更多的时候是作为一种最后的手段，并不是随手就能有，大部分的这种批量的攻击场景基本是，每次漏洞爆发，都有一大堆目标受影响，但这些受影响的目标，最终又有多少修复了漏洞，这就得另说了；实际的情况就是即使漏洞爆发过去很长时间，甚至一两年的时间也仍有众多的目标受影响，比如年爆发出来的心脏出血漏洞，年仍有众多目标受影响，甚至包括一些安全厂商的设备和知名互联网公司的服务器，甚至于现在去做检测，也仍有存在漏洞的目标。
漏洞的利用与修复一直都是安全对抗中一个主要的工作内容！
如何获取攻击目标
在上面的内容我们介绍了很多黑客攻击流程和黑客对漏洞的利用，但是似乎唯独漏了黑客是哪里得到这些攻击目标的。其实在一开始的的说明中已经大概提到了。

每一次重要通用漏洞的爆发总是会带来一片腥风血雨，任何微小的漏洞，基于亿地址这个大基数，总是可以被放大！

不知道大家有没有注意到引言的这段话，黑客的攻击其实都是基于亿的而进行的，一个再小的漏洞，基于这个基数，那么得到的可攻击目标就不是一个小数。
最简单粗暴的方式，就是拿着攻击脚本通过分布式、自动化的方式全部攻击一遍，当然这个量就有点大，所以更合理的方式是探测符合的目标，比如那个事件，需要探测存在的服务器，也就是探测端口开放的服务器服务默认端口为，一般情况等情况也有可能，所以黑客在尝试的时候可能不止探测这个端口，然后进一步的探测是否符合漏洞利用条件，就的例子也就是需要是存在未授权访问的情况，即不需要密码并且可远程连接。
类似的端口其实就是指纹，黑客通过这些指纹去探测存在漏洞影响组件的服务器，不同的组件和服务都有不同的指纹，比如同样是通过端口的方式，那么也就是，有是，还有比如说  =这个存在于头部的指纹可以探测 路由器；当然，不排除自定义的情况，但出于成本等方面的，一般黑客在攻击的时候选择忽略特殊的情况。通过探测出符合漏洞影响组件的目标后，这些目标就成为攻击脚本执行的目标。
除了指纹探测服务或者组件的存在与否，也可以进一步探测安装的组件的版本是否在漏洞影响的版本范围内，以此来缩小最终要使用攻击脚本进行攻击的目标范围。精确的指纹和版本信息，可以缩小需要攻击的目标范围，从而减少攻击成本。
其实，通过指纹的方式对于相关目标进行服务和组件的探测，国内外已经有一些安全平台，比如、撒旦，如下图搜索服务的目标等，大家如果想尝试，可以直接访问去搜索相关组件的目标，比如 在上搜索搭建的站点；在那个未授权访问问题的自动化演示的视频中，其实就是调用了的来获取存在服务的目标。

当然，看到这些平台，你可能第一时间想到的是帮助了攻击者，这个具体怎么看待把，因为这些平台的初衷肯定不是如此，就像早期的电脑到底是好是坏的讨论一样；在相关黑客的手里其实也存在这样的平台，或者就是通过脚本直接根据不同的漏洞对亿或者其他已知目标列表进行探测，然后自动化的攻击。

讲到最后，其实大家可以发现，不仅仅是数据勒索，这其实更多的是一种通用的漏洞自动化攻击利用的流程，唯一的区别在不同的漏洞能够获取的权限不同，对应的在获取到权限后能做的事也不同，所以就存在对应的利用，比如数据勒索，比如组件僵尸网络用于，比如用来挖矿，还比如批量黑了路由器进行劫持等。
在企业的安全风险的不同维度里，通用漏洞一直是个棘手的问题，因为你没法事先知道问题，只能在漏洞爆发的时候第一时间去修复漏洞，所以，尽可能的选择一些靠谱的组件，多关注安全，加强漏洞和安全的应急响应，避免由此导致的安全风险！

相关推荐泄露资料分析黑客工具技术—篇成勒索新目标，数据服务基线安全问题迫在眉睫一、背景
随着近些年网络安全事情的频繁发生，使得用户对网络通信安全的意识越来越强。国内外的网络服务提供商都逐渐提供全站的安全通信服务，如国内的淘宝、百度先后宣布已经完成了全站部署 。微信现有的安全通信协议是基于用户登录的时候派发的  对应用数据进行加密的，该协议在工程实现上，已经过多次迭代优化，但是仍然有一些缺点：
、原有的加密通信协议是存在于业务层的。加密保护的是请求包包体部分，但是包头部分是明文，包头包含用户  和请求的业务  等信息，这主要是为了在  做路由所需要的。这样会存在数据被截获后建立映射关联分析的风险。　
、原有的加密通信协议使用的密码学协议和算法与业界最新成果有差距，安全强度有待加强。　　鉴于上述原因，微信需要一套能够加密保护  到  之间所有网络通信数据、且加密通信保护必须对业务开发人员透明的安全通信协议，由此诞生了 。
二、目标
考虑到系统安全性与可用性和性能等指标之间可能存在相互影响，某种程度上，安全性与这些指标是负相关的。因此在设计的时候对  提出了以下要求：　

安全性。主要体现在防窃听，防篡改，防重放，防伪造。　
低延迟、低资源消耗。要保证数据在传输过程中不会增加明显的延迟；后台负载增加在可接受范围。
可用性。在一些极端情况下如  负载过高，后台能够控制提供降级服务，但是要注意不能被攻击者利用，进行降级攻击。
可扩展性。协议要可扩展、可升级，方便添加安全强度更高的密码学组件，方便禁止过时的密码学组件。

通过分析一些业界公开的安全通信协议发现，它们都不能完全满足我们的要求，例如  中每次建立一个安全连接都需要额外的  个 全握手需要 ，对于微信这么一个需要频繁网络通信的  软件来说，这对用户体验的伤害是极大的，尤其是在大量短连接存在的情况下，额外的  对用户延迟的影响是相当明显的。好在  草案标准中提出了 不额外增加网络延时建立安全连接的方法，另外  协议本身通过版本号、、 机制提供了良好的可扩展性。但是， 草案标准仍然在制定过程中，基于标准的实现更是遥遥无期，并且  是一个对所有软件制定的一个通用协议，如果结合微信自己的特点，还有很大的优化空间。因此我们最终选择基于  草案标准，设计实现我们自己的安全通信协议 。
三、 协议设计
 总体架构
　
业务层数据加上  之后，由  提供安全性，保护业务数据，这类似于  加上  后，变成 ，由  保护  数据。 处于业务层和原有的网络连接层之间，不影响原有的网络策略。对于微信来说这里的网络连接层就是微信长连接私有协议和微信短连接 协议，都是基于  的。
图  描述的是把  看成一个整体，它所处的位置。进入  内部，它包含三个子协议： 协议、 协议、 协议。这其实是和  类似的。它们之间的关系如下图：  

 和  协议是  协议的上层协议，业务层协议 也是  协议的上层协议，在  协议包中有一个字段，用来区分当前这个  数据包的上层协议是 、 还是业务协议数据包。 协议用于完成  与  的握手协商，协商出一个对称加密密钥  以及其他密码材料，用于后续数据加密。 协议用于通知对端发生错误，希望对端关闭连接，目前  为了避免  存在过多   状态， 消息只会  发送给 ，由  主动关闭连接。
说明：在下文中，会出现多个对称密钥和多个非对称密钥对，在本文中我会给有些密钥取一个专有的名字，以方便理解避免混淆，如__，__，__，__ 等，凡是类似 __、__ 这种名字的都是一对非对称公私钥，_ 和 _ 是一对签名验签的密钥，其他的以  结尾的 _ 都是对称密钥。
  协议 — 安全地协商出对称加密密钥
 协议其实做的最主要的事情就是完成加密密钥的协商，即让通信双方安全地获得一致的对称密钥，以进行加密数据传输。在此基础上，还完成了一些优化工作，如复用  以减少握手时间。
在这里说明一下，为什么  以及  协议需要一个  子协议和  子协议？其实认证密钥协商 对称加密传输这种混合加密结构，是绝大多数加密通信协议的通用结构，在  中  子协议负责密钥协商，  子协议负责数据对称加密传输。造成这种混合加密结构的本质原因还是因为单独使用公钥加密组件或对称加密组件都有不可避免的缺点。公钥加密组件计算效率往往远低于对称加密组件，直接使用公钥加密组件加密业务数据，这样的性能损耗任何  都是无法承受的；而如果单独使用对称加密组件进行网络加密通信，在  这种不安全的信道下，这个对称加密密钥如何获取往往是一个难以解决的问题，因此结合两类密码组件的优势，产生了认证密钥协商 对称加密传输这种混合加密结构。另外， 这种安全性和扩展性都很强的安全通信协议，在解决实际安全通信问题的时候，会有非常多的细节问题，因此分离出两个子协议来隔离复杂性。
 带认证的密钥协商
根据  的描述，实际上有  种  的密钥协商方式 、  和  种  的密钥协商方式       ， 结合微信的特点，在保证安全性和性能的前提下，只保留了三种密钥协商方式     ，并做了一些优化，后面会详细分析如何产生这种决策的。
  密钥协商
 密钥协商
首先看一个，会遭受到攻击的密钥协商过程。通信双方  和  使用  密钥交换协议进行密钥协商， 密钥交换协议拥有两个算法：

密钥生成算法 __，输出一个公钥和私钥对 __ __，__ 需要秘密地保存，__ 可以公开发送给对方。

密钥协商算法 __，以对方的公钥和自己的私钥作为输入，计算出一个密钥 ，__ 算法使得通信双方计算出的密钥  是一致的。


这样一来  和  仅仅通过交换自己的公钥 __，就可以在  这种公开信道上共享一个相同密钥 ，然后用这个  作为对称加密算法的密钥，进行加密通信。

但是这种密钥协商算法仍然存在一个问题。当  将他的 ___ 发送给  时，攻击者可以截获 ___，自己运行 __ 算法 产生一个公钥私钥对，然后把他产生的公钥发送给 。同理，攻击者可以截获  发送给  的 ___，再运行 __ 算法 产生一个公钥私钥对，并把这个公钥发送给 。 和  仍然可以执行协议，产生一个密钥 。但实际上， 产生的密钥  实际上是和攻击者  协商的； 产生的密钥  也是和攻击者协商  的。这种攻击方法被称为中间人攻击    。 

那么，有什么解决办法中间人攻击呢？产生中间人攻击的本质原因是协商过程中的数据没有经过端点认证，通信两端不知道收到的协商数据是来自对端还是来自中间人，因此单纯的密钥协商是不够的，还需要带认证的密钥协商。对数据进行认证其实有对称和非对称的两种方式：基于消息认证码  的对称认证和基于签名算法的非对称认证。消息认证码的认证方式需要一个私密的 ，由于此时没有一个私密的 ，因此  认证密钥协商就是  密钥协商加上数字签名算法。在  中我们采用的数字签名算法为 。
双方密钥协商时，再分别运行签名算法对自己发出的公钥 __ 进行签名。收到信息后，首先验证签名，如果签名正确，则继续进行密钥协商。注意到，由于签名算法中的公钥 __ 是一直公开的，攻击者没有办法阻止别人获取公钥，除非完全掐断发送方的通信。这样一来，中间人攻击就不存在了，因为  无法伪造签名。具体过程如图  所示：  

事实上，在实际通信过程中，只需要通信中某一方签名它的协商数据就可以保证不被中间人攻击， 就是只对  做认证，不对  做认证，因为微信客户端发布出去后，任何人都可以获得，只要能够保证客户端程序本身的完整性，就相当于保证了客户端程序是由官方发布的，为认证合法的客户端，而客户端程序本身的完整性不是  协议保护的范畴。在这一点上， 要复杂一些， 作为一个通用的安全通信协议，可能会存在一些需要对  进行认证的场合，因此  提供了可选的双方相互认证的能力，通过握手协商过程中选择的  是什么类型来决定是否要对  进行认证，通过  是否发送  握手消息来决定是否要对  进行认证。由于  不需要对  做认证，在这块内容上比  简洁许多，更加轻量级。
 密钥协商
 是在一次  握手中由  下发的内容，它的大致数据结构为 {，{}}，即  包含一个用来做对称加密密钥的  明文，以及用 _ 对  进行加密的密文 ，当然  是在安全信道中下发的，也就是说在网络中进行传输的时候  是加密的，中间人是拿不到  的。其中 _ 只有  才知道，由  负责私密保存。
 协商比较简单， 将  的 {} 部分发送给 ，由于只有  才知道 _，因此  是不会被窃听的。 拿到  后，使用 _ 解密得到 ，然后  用基于协商得到的密钥 ，对协商数据计算消息认证码来认证，这样就完成了  认证密钥协商。 认证密钥协商使用的都是对称算法，性能上比  认证密钥协商要好很多。

  密钥协商
上述的两种认证密钥协商方式   都需要一个额外  去获取对称加密 ，在这个协商的  中是不带有业务数据的，全部都是协商数据。那么是否存在一种密钥协商方式是在握手协商的过程中就安全地将业务数据传递给对端呢？答案是有的， 草案中提到了  密钥协商的方法。
   密钥协商
 握手想要达到的目标是在握手的过程中，捎带业务数据到对端，这里难点是如何在客户端发起协商请求的时候就生成一个可信的对称密钥加密业务数据。在   中， 生成一对公私钥 __ __，然后将公钥 __ 传递给 ，然后  生成一对公私钥 __ __ 并将公钥 __ 传递给 ， 收到 __ 后才能计算出对称密钥。上述过程 __ __ 由于是临时生成的，需要一个  将 __ 传递给客户端，如果我们能够预先生成一对公私钥 ___ ___ 并将 ___ 预置在  中，那么  可以在发起握手前就通过 ___ 和 __ 生成一个对称密钥  ，然后用  加密第一个业务数据包实际上是通过  衍生的密钥对业务数据进行加密，后面详述，这样将  加密的业务数据包和 __ 一起传给 ， 通过 __ 和 ___ 算出 ，解密业务数据包，这样就达到了  密钥协商的效果。

这里说明一下： 协商中，如果公私钥对都是临时生成的，一般称为 ，因此  的  协商方式被称为   握手， 中有一个静态内置的公钥，因此称为   握手。
   密钥协商
  握手比较简单，回顾   握手，其实在进行   握手之前， 已经有一个对称加密密钥  了，就直接拿这个对称加密密钥  加密业务数据，然后将其和握手协商数据 {} 一起传递给  就可以了。
提高  密钥协商的安全性
  ，中文可叫做完全前向保密。它要求一个密钥被破解，并不影响其他密钥的安全性，反映的密钥协商过程中，大致的意思是用来产生会话密钥的长期密钥泄露出去，不会造成之前通信时使用的会话密钥的泄露；或者密钥协商方案中不存在长期密钥，所有协商材料都是临时生成的。
上面所述的   密钥协商加密的数据的安全性依赖于长期保存的密钥 ___，如果 ___ 泄露，那么所有基于   协商的密钥  都将被轻松计算出来，它所加密的数据也没有任何保密性可言，为了提高前向安全性，我们在进行   协商的过程中也进行  协商，这种协商方式称为   密钥协商。如下图所示： 

这样，我们基于 ___ 保护的数据就只有第一个业务数据包 ，后续的包都是基于   对业务数据进行保护的。这样即使 ___ 泄露，也只有连接的第一个业务数据包能够被解密，提高前向安全性。
同样的，  密钥协商加密的数据的安全性依赖于长期保存密钥 _，如果 _ 泄露，那么所有基于 _ 进行保护的数据都将失去保密性，因此同样可以在   密钥协商的过程中，同时完成  密钥协商，提高前向安全性。
 密钥协商需要关注的细节
根据前面的描述可以知道，要使得密钥协商过程不被中间人攻击，就必须要对协商数据进行认证。下面拿   握手方式来说明在进行认证过程中需要注意的细节。在   中的认证方式是使用  签名算法的非对称认证方式，整个过程大致如下： 在收到客户端的 __ 后，随机生成一对  公私钥 __ __，然后用签名密钥 _ 对 __ 进行签名，得到签名值 ，并把签名值  和 __ 一起发送给客户端。客户端收到之后，用 _ 进行验签_ 和 _ 是一对  密钥，验签成功后才会继续走协商对称密钥的流程。
上面的认证过程，有三个值得关注的点：

_ 如何下发给客户端？

这实际上是公钥派发的问题， 是使用证书链的方式来派发公钥证书，对于微信来说，如果使用证书链的方式来派发  的公钥证书，无论自建   还是从  处申请证书，都会增加成本且在验签过程中会存在额外的资源消耗。由于客户端是由我们自己发布的，我们可以将 _ 直接内置在客户端，这样就避免证书链验证带来的时间消耗以及证书链传输带来的带宽消耗。

如何避免签名密钥 _ 泄露带来的影响？

如果 _ 泄露，那么任何人都可以伪造成  欺骗 ，因为它拿到了 _，它就可以签发任何内容， 用 _ 去验证签名必然验签成功。因此 _ 如果泄露必须要能够对 _ 进行撤销，重新派发新的公钥。这其实和前一问题是紧密联系的，前一问题是公钥派发问题，本问题是公钥撤销问题。 是通过  和  两种方式来撤销公钥的，但是这两种方式存在撤销不及时或给验证带来额外延迟的副作用。由于  是通过内置·_·在客户端，必要时通过强制升级客户端的方式就能完成公钥撤销及更新。另外，_ 是需要  高度保密的，一般不会被泄露，对于微信后台来说，类似于 _ 这样，需要长期私密保存的密钥在之前也有存在，早已形成了一套方法和流程来应对长期私密保存密钥的问题。

用 _ 进行签名的内容仅仅只包含 __ 是否有隐患？

回顾一下，上面描述的带认证的  协商过程，似乎已经足够安全，无懈可击了，但是，面对成亿的客户端发起  握手到成千上万台接入层机器，每台机器对一个  连接随机生成不同的  公私钥对，这里试想一种情况，假设某一台机器某一次生成的  私钥 __ 泄露，这实际上是可能的，因为临时生成的  公私钥对本身没有做任何保密保存的措施，是明文、短暂地存放在内存中，一般情况没有问题，但在分布式环境，大量机器大量随机生成公私钥对的情况下，难保某一次不被泄露。这样用 __ 是长期保存，且分布式环境共享的对 __ 进行签名得到签名值 ，此时攻击者已经拿到 __，__ 和 ，这样他就可以实施中间人攻击，让客户端每次拿到的服务器  公钥都是 __：客户端随机生成  公私钥对__ __ 并将 __ 发给 ，中间人将消息拦截下来，将 __ 替换成自己生成的 __，并将 __ 和  回给 ，这样  就通过计算 ____ __=  通过计算 ____ __=，中间人既可以计算出  和 ，这样它就可以用  和  通信，用 和  进行通信。
发生上述被攻击的原因在于一次握手中公钥的签名值被用于另外一次握手中，如果有一种方法能够使得这个签名值和一次握手一一对应，那么就能解决这个问题。解决办法也很简单，就是在握手请求的  消息中带一个 _ 随机值，然后在签名的时候将 _ 和 __ 一起做签名，这样得到的签名值就与 _ 对应了。 在实际处理过程中，为了避免  的随机数生成器有问题，造成生成不够随机的 _，实际上  也会生成一个随机数 _，然后在对公钥签名的时候将 _、_、__ 一起做签名，这样由 _、_ 保证得到的签名值唯一对应一次握手。
  对认证密钥协商的选择
上面一共介绍了  种  密钥协商方式和  种  密钥协商方式。

 握手全程无非对称运算， 性能消耗小，但前向安全性弱， 握手有非对称运算， 性能消耗大，但前向安全性相对更强，那么如何结合两者优势进行密钥协商方式的选择呢？
首先  是如何获得的呢？ 是在一次成功的  握手中下发的在上面的图 、图  没有画出下发  的部分，如果客户端没有 ，那么显然是只能进行  握手了。由于  握手和  握手的巨大性能差异，那么在  有  的情况下，应该进行  握手。那么在没有  的情况下，上面的  、 、  具体应该选择哪一种呢？在有  的情况下，应该选择  、  还是   呢？
对于握手方式的选择，我们也是几经过修改，最后结合微信网络连接的特点，我们选择了   握手、  握手、  握手。微信目前有两个数据传输通道：基于  协议的短连接 基于私有协议的长连接。
微信长连接有一个特点，就是在建立好  连接之后，会在此  连接上先发一个长连  包，目的是验证长连接的连通性由于长连接是私有协议，部分中间路由会过滤掉这种私有协议的数据包，这就是说长连接在建立时的第一个数据包是不会发送业务数据的，因此使用  的握手方式，由第一个握手包取代之前的  包去探测长连的连通性，这样并不会增加长连的网络延时，因此我们选取在长连接情况下，使用   和   这两种密钥协商方式。
微信短连接为了兼容老版本的  协议，整个通信过程就只有一个 ，也就是说  建立  连接后，通过   一个业务请求包到 ， 回一个  响应， 处理后立马断掉  连接。对于短连接，我们应该尽量使用  的握手方式，因为一个短连接原来就只存在一个 ，如果我们大量使用  的握手方式，那么直接导致短连接至少需要  个  才能完成业务数据的传输，导致时延加倍，用户体验较差。
这里存在两种情况： 客户端没有 ，为了安全性，这时和长连接的握手方式一样，使用  ； 客户端有 ，这时为了减少网络时延，应该使用   或  ，在这两种握手方式下，由于业务请求包始终是基于  进行保护的，同一个  多次协商出来的对称加密  是同一个，这个对称加密  的安全性依赖于 _ 的安全性，因此  情况下，业务请求包始终是无法做到前向安全性。  这种方式，只能保证本短连接业务响应回包的前向安全性，这带来安全性上的优势是比较小的，但是与   握手方式相比，  在每次握手对  会多  次  运算和  次  运算。微信的短连接是非常频繁的，这对性能影响极大，因此综合考虑，在客户端有  的情况下，我们选择使用   握手。由于   握手安全性依赖 _，为了加强安全性，在实现上， 必须要限制过期时间，避免长期用同一个  来进行握手协商；_ 必须定期轮换，且具有高度机密的运维级别。
另外，为了提高系统可用性，实际上  在一次成功的  握手中会下发两个 ，一个生命周期短保证安全性，一个生命周期长保证可用性。在一次  握手中，请求会带上生命周期长的 如果存在的话，后台可根据负载情况进行权衡，选择使用  握手或者  握手。
相关推荐：基于  的微信安全通信协议  介绍上腾讯云沙龙继月北京站后，将于月日来到广州站，继续与游戏厂商和游戏开发者，畅谈游戏全球化。期待您的光临！

沙龙简介：
全球化在整个互联网领域仍是大势所趋，而在红海时代来临的游戏行业，“游戏全球化”已成为近年来的热点。 
游戏全球化运营，对节点分布、网络稳定、网络加速、安全防护等云端基础能力提出了很高要求。腾讯云作为国内游戏行业领先的公有云，腾讯云的全球 化布局一直走在快车道，更好地助力游戏厂商实现全球化运营。
本期腾讯云沙龙广州站，将和来宾聚焦探讨腾讯云在全球化方面的技术布局，并邀请到了游戏全球化先行者的代表分享实践与洞察。
沙龙议程：

演讲嘉宾：

兰磊 福建网龙游戏制作人
嘉宾简介：
网龙《英魂之刃口袋版》制作人，在网龙任职年，曾先后负责游戏引擎、分布式服务器等技术方案的研发和支持，参与和负责多个百万级的游戏。
演讲主题：
《网龙英魂之刃口袋版开发经验分享》
《英魂之刃口袋版》从年底上线，面对强大的竞品，在短短不到一年的时间，无论在国内还是在国外的手游市场都获得了一定的成绩，在多个渠道连续几个月排行榜都在前三，累积安装量已经破亿，也破百万，在这个过程中积累了一些成功、或失败的经验，本次就把这些东西分享给大家：
 控制包体大小 提高游戏客户端的兼容性以及对低端机的适配性 弱网络解决方案 带宽动态加速

陈长庆 广州三七互娱海外事业部技术总监
嘉宾简介：
在三七互娱任职年，现任海外事业部技术总监，负责公司出海游戏的规划、地区选点部署、游戏基础架构建设及运营体系。
演讲主题：
《三七互娱游戏全球化运营心得分享》
互娱游戏在全球化的游戏运营，在页游跟手游都积累了一定的成败经验。本次主要对《永恒纪元》游戏海外运行中，遇到的问题和解决方案进行分享。以及针对游戏在海外需要面对不同文化、不同地域、不同网络以及不用设备的情况，怎么样做才能提高研发效率规避研发风险，降低研发周期进行分析。

徐雨霏 商务总监 
嘉宾简介：
多年海外发行经验，成功引入数款国内产品发行海外，如《最强猎人》《暗黑起源》，现担任业务部总负责人。
演讲主题：
《海外发行实践分享》
 海外发行道路上一直低调前行，为更多朋友的海外发行寻找更多的机会。本次演讲将从代表作《最强猎人》《暗黑起源》为例，分享如何在众多大厂大作的市场环境下赢得一席之地。

黄文婷 腾讯云网络规划资深工程师 
嘉宾简介：
从事网络相关工作超过年，曾任思科售前架构师及某世界强资深网络工程师，现任腾讯云网络规划资深工程师，有丰富的网络规划、设计和运营经验。
演讲主题：
《与腾讯云携手出海——腾讯云海外和网络规划践行》
在一带一路的国家政策下，腾讯云海外的背负着引领行业的使命。面临文化及国情差异，复杂的各国生态，腾讯云如何务实地打造开放我们的本地能力？面对运营商割据等挑战，如何拓展网络满足业务拓展和突发需求？本次演讲将分享，腾讯云精细化整合属地化、建设的能力，以及实现运营商资源互联，全球网络拓展、动态网络质量管控等方面的心得和经验。

马亮 腾讯游戏云资深产品经理
嘉宾简介：
曾任畅游游戏公司研发经理、运维经理；现任腾讯云资深产品经理，负责游戏云全球化布局和游戏生态建设。
演讲主题：
《腾讯游戏云全球化实践》
游戏出海增长迅猛，新兴市场增长比例超过，全球同服架构渐渐成为游戏的标准框架，如何满足游戏厂商新兴市场的布局需求，如何让全球同服架构更简单、更安全、更可靠，游戏云全球化实践为您解读腾讯云全球化最佳的解决方案和案例分享。
参会指南：

报名方式：欢迎识别下方二维码，或访问 填写报名问卷。我们将在会前发送确认短信给参会嘉宾。如有关于沙龙参会与合作的问题，欢迎联系和。

邀请函：基于用户画像大数据的电商防刷架构

作者：颜国平摘要：最近几年，电商行业飞速发展，各种创业公司犹如雨后春笋大量涌现，商家通过各种活动形式的补贴来获取用户、培养用户的消费习惯，即将到来的“ 购物狂欢节”尤其明显。但任何一件事情都具有两面性，高额的补贴、优惠同时了也催生了“羊毛党”。“羊毛党”的行为距离欺诈只有一步之遥，他们的存在严重破环了活动的目的，侵占了活动的资源，使得正常的用户享受不到活动的直接好处。这篇文章主要分享下腾讯自己是如何通过大数据、用户画像、建模来防止被刷、恶意撞库的。

黑产“羊毛党”现状介绍
“羊毛党”一般先利用自动机注册大量的目标网站账号，当目标网站搞促销、优惠等活动的时候，利用这些账号参与活动刷取较多的优惠，最后通过某宝等电商平台转卖获益。
一“羊毛党”分工
据初步估计，全国“羊毛党”在万人左右，他们往往有着明确的分工，已形成了几大团伙：
软件制作团伙：专门制作各种自动、半自动的黑产工具，比如注册自动机、刷单自动机等；他们主要靠出售各种黑产工具、提供升级服务等形式来获利。短信代接平台：实现手机短信的自动收发。这其中，有一些短信平台是亦正亦邪，不但提供给正常的商家使用，一些黑产也会购买相关的服务。账号出售团伙：他们主要是大量注册各种账号，通过转卖账号来获利；该团伙与刷单团伙往往属于同一团伙。刷单团伙：到各种电商平台刷单，获取优惠，并且通过第三方的电商平台出售优惠，实现套现。
也就是说，这些“羊毛党“在电商促销或优惠活动中，已逐步形成了相对完善的刷单及变现工作流程见图：电商刷单团伙工作流程图：电商刷单团队的工作流程
二“羊毛党”从业特点
从“羊毛党“的分工与工作流程看，他们具有以下从业特点：专业化：有专业团队、人员、机器来做。团伙化：已经形成一定规模的团伙，而且分工明确；从刷单软件制作、短信代收发平台、电商刷单到变卖套现等环节，已经形成完整的刷单团伙。地域化：刷单黑产团伙基本分布在沿海的一些经济发达城市，比如，北京、上海、广东等城市，这或许跟发达城市更加容易接触到新事物、新观念有关。下图显示了我们的黑产刷单团伙分别位于：北京、上海、广州、江苏、浙江这些沿海较发达的经济区域。图 黑产刷单团伙的地域分布
三对抗刷单的思路
面对黑产刷单，我们有什么对抗思路呢？一般来讲，对抗刷单主要从注册、登陆、活动三个环节入手：注册环节：识别虚假注册、减少“羊毛党”能够使用的账号量。在注册环节识别虚假注册的账号，并进行拦截和打击。登录场景：提高虚假账号登录门槛，从而减少能够到达活动环节的虚假账号量。比如，登录环节通过验证码、短信验证码等手段来降低自动机的登录效率，从而达到减少虚假账号登录量、减轻活动现场安全压力的目的。活动环节：这个是防刷单对抗的主战场，也是减少“羊毛党”获利的直接战场；这里的对抗措施，一般有两个方面： 通过验证码短信、语音降低黑产刷单的效率。 大幅度降低异常账号的优惠力度。
电商防刷架构
一 腾讯防刷总体架构
面对疯狂的黑产刷单，按照对抗刷单的思路，基于腾讯的多维度大数据，腾讯专门设计并构建了电商防刷技术体系。总体防刷架构见下图：图：腾讯防刷单技术架构从上面的总体架构我们可以看到，整个系统分三层：接入层、实时计算层、存储挖掘层。整个系统充分利用了腾讯海量业务生态中的多维度大数据，以及全方位的风控经验与能力。接下来我们详细介绍其中的一些核心模块。
二防刷单技术架构核心模块与框架介绍
风险学习引擎
对于风险学习引擎而言，效率问题非常关键。该模块线上采用的都是实现的等针对大数据的快速聚类算法，性能卓越；而且主要的工作都是线下进行，所以线上系统也不存在学习的效率问题。风险学习引擎采用了黑白双分类器风险判定机制，可以很好地减少对正常用户的误伤。例如，某个是恶意的，那么该上可能会有一些正常的用户，比如大网关。再比如，黑产通过拨号上网，那么就会造成恶意与正常用户共用一个的情况。其中，黑分类器风险判定是根据特征、机器学习算法、规则经验模型，来判断本次请求异常的概率。而白分类器风险判定则是判断属于正常请求的概率。见下图示意：
图 风险引擎的宏观构成
分类器逻辑框架
如何实现风险评估的判定呢？我们以黑分类器为例，来详细剖析下分类器的逻辑框架。
系统总体是采用一种矩阵式的逻辑框架。
黑分类器最初设计是整体检测判定，即按需随意地建立一个个针对黑产的检测规则、模型。但这种设计出来的结果，发现不是这个逻辑漏过了，而是那个逻辑误伤量大，要对某一类的账号加强安全打击力度，改动起来也非常麻烦。
因此，我们最终设计出一套矩阵式的框架见下图，较好地解决上述问题。图 黑分类器的矩阵逻辑框架矩阵的横向采用了方法，该方法是一种迭代算法，其核心思想是针对同一个训练集训练不同的弱分类器，然后把这些分类器集合起来，构成一个最终的分类器。而我们这里每一个弱分类器都只能解决一种帐号类型的安全风险判断，集中起来才能解决所有账户的风险检测。这个矩阵逻辑的横向方法，在工程实现上也带来三个好处：便于实现轻重分离。比如某平台虚假账号集中在邮箱账号，策略就可以加大对邮箱账号的打击力度，影响范围也局限在邮箱帐号，而不是该平台所有的账号。减少模型训练的难度。模型训练最大的难度在于样本的均衡性问题，拆分成子问题，就不需要考虑不同账号类型之间的数据配比、均衡性问题，大大降低了模型训练时正负样本比率的问题。逻辑的健壮性。某一个分类器的训练出现了问题，受影响的范围不至于扩展到全局。
矩阵纵向则采用了方法，该方法是一种用来提高学习算法准确度的方法。它在同一个训练集合上构造预测函数系列，然后设法将他们组合成一个预测函数，从而来提高预测结果的准确性。
腾讯大数据处理平台－魔方
毫无疑问，对抗黑产刷单离不开大数据。大数据一直在安全对抗领域发挥着重要的作用，从我们的对抗经验来看，大数据不仅仅是数据规模很大，而且还包括两个方面：数据广度：要有丰富的数据类型。比如，不仅仅要有社交领域的数据、还要有游戏、支付、自媒体等领域的数据，这样就提供了一个广阔的视野让我们来看待黑产的行为特点。数据深度：黑产的对抗，我们一直强调纵深防御。不仅仅要有注册数据，还要有登录，以及账号的使用的数据，这样我们才能更好的识别恶意。所以想要做风控和大数据的团队，一定要注意在自己的产品上多埋点，拿到足够多的数据，先沉淀下来。腾讯安全团队研发了一个叫魔方的大数据处理和分析的平台，底层集成了、，、等技术，在用户层面我们只需要写一些简单的语句、完成一些配置就可以实现例行分析。这里我们收集了社交、电商、支付、游戏等场景的数据，针对这些数据我们建立一些模型，发现哪些是恶意的数据，并且将数据沉淀下来。沉淀下来的对安全有意义的数据，一方面就存储在魔方平台上，供线下审计做模型使用；另一方面会做成实时的服务，提供给线上的系统查询使用。
一腾讯用户画像沉淀方法
用户画像，本质上就是给账号、设备等打标签。但我们这里主要从安全的角度出发来打标签，比如画像，我们会标注是不是代理，这些对我们做策略是有帮助的。我们看看腾讯的画像，目前沉淀的逻辑如下图：图 画像系统构成一般的业务都有针对的频率、次数限制的策略，那么黑产为了对抗，必然会大量采用代理来绕过限制。既然代理的识别如此重要，那我们就以代理为例来谈下腾讯识别代理的过程。识别一个是不是代理，技术不外乎就是如下四种：反向探测技术：扫描是不是开通了等代理服务器经常开通的端口，显然一个普通的用户不太可能开通如上的端口。头部的__：开通了代理的可以通过此法来识别是不是代理；如果带有信息，该是代理无疑。报文：如果带有的报文，该毫无疑问是代理。查看上端口：如果一个有的端口大于，那么该大多也存在问题，普通的家庭开这么大的端口几乎是不可能的。以上代理检测的方法几乎都是公开的，但是盲目去扫描全网的，被拦截不说，效率也是一个很大的问题。因此，我们的除了利用网络爬虫爬取代理外，还利用如下办法来加快代理的收集：通过业务建模，收集恶意黑产使用代理的可能性比较大然后再通过协议扫描的方式来判断这些是不是代理。每天腾讯都能发现千万级别的恶意，其中大部分还是代理。
二腾讯用户画像类别概览
腾讯用户画像的维度与类别很多，这里仅举部分用户画像数据来说明。比如用户画像其中有手机画像和画像这两个重要类别。涉及画像的标签见下图：以的画像为例，比如，一个只登录、不登录其他腾讯的业务、不聊天、频繁的加好友、被好友删除、空间要么没开通、要么开通了空间但是评论多但回复少，这种号码我们一般会标注养号色情、营销，类似的我们也会给打上其他标签。标签的类别和明细，需要做风控的人自己去设定，比如：地理位置，按省份标记。性别，按男女标记。其他细致规则以此规律自己去设定。
三 风险判定的基础逻辑
有了用户画像的基础数据，我们就可以进行风险判定了。腾讯风险判定的系统现已开放为腾讯云的能力，即天御系统。我们来看一下风险判定的基础逻辑，见下图：图 腾讯云天御系统防御逻辑示意图
实时防御系统使用开发实现，所有的数据通过共享内存的方式进行存储，相比其他的系统，安全系统更有他自己特殊的情况，因此这里我们可以使用“有损”的思路来实现，大大降低了开发成本和难度。
但这里在安全策略方面，可能会面临一个挑战：多台机器，使用共享内存，如何保障数据一致性？其实，安全策略不需要做到强数据一致性。
从安全本身的角度看，风险本身就是一个概率值，不确定，所以有一点数据不一致，不影响全局。但是安全系统也有自己的特点，安全系统一般突发流量比较大，我们这里就需要设置各种应急开关，而且需要微信号、短信等方式方便快速切换，避免将影响扩散到后端系统。
电商企业接入天御系统，启用带防刷能力的业务架构
通过剖析腾讯对抗“羊毛党”刷单的防刷系统技术架构与原理，我们了解到了天御系统可以帮助咱们电商企业在促销、优惠活动时，有效打击黑产刷单团伙。特别是马上到来的双十一“购物狂欢节”，该系统将让广大电商企业更好地服务用户，真正为用户带来贴心的实惠与好处。
天御系统可适应的场景包括但不限于：

电商刷单、刷券、刷红包
防止虚假账号注册
防止用户名、密码被撞库
防止恶意登录

那么如何接入并使用天御系统呢？其实，电商企业接入天御系统仅需要四步，见下图：其中：第一步离线数据分析与第二步搭建实时模型为前期的准备工作，第三步正式接入其实并不耗费多少时间，不过第四步上线后，还需要持续的优化，以进一步提高对抗的能力。
图 企业接入天御系统步骤业务接入天御系统后的架构图，见下图：图 业务接入天御防刷后的架构图从上图可以看到，接入天御防刷是旁路接入，不需要调整现有业务任何核心逻辑、关键流程，可以快速上线。另外，运行过程中，即使天御防刷有任何异常也不会影响业务主逻辑。
：风险学习引擎是自研的，还是使用的开源库？风险学习引擎包括两个部分，线上和线下两部分：线上：自己利用来实现。线下：涉及利用开源库来做的，主要是一些通用算法的训练和调优。：请问魔方平台中用到的是不是经过改造？因为一直不被看好，出现问题也比较多。我们做了部分改造，主要是的引擎方面。：请问黑分类器和白分类器有什么区别？白分类器主要用来识别正常用户，黑分类器识别虚假用户。：风险概率的权重指标是如何考虑的？先通过正负样本进行训练，并且做参数显著性检查；然后，人工会抽查一些参数的权重，看看跟经验是否相符。：安全跟风控职责如何区分呢？相比安全，风控的外延更丰富，更注重宏观全局；针对一个公司来讲，风控是包括安全、法务、公关、媒体、客服等在内一整套应急处理预案。：如果识别错了，误伤了正常用户会造成什么后果么？比如影响单次操作还是会一直失败。如果识别错了正常用户不会被误伤，但是会导致体验多加了一个环节，如弹出验证码、或者人工客服核对等。

作者：颜国平，原腾讯云－天御系统研发负责人。一直负责腾讯自有验证码、业务安全、防刷、账号安全等研发工作。内部支持的产品游戏、电商、腾讯投资的企业非常广泛。在业务安全领域项目经验丰富，并且具备深度学习、大数据架构搭建等实战经验。

相关推荐
免费试用活动防刷服务一站式满足电商节云计算需求的秘诀作者：

 是微信后台大规模使用的  协程库，年至今稳定运行在微信后台的数万台机器上。 在年的时候作为腾讯六大开源项目首次开源，我们最近做了一次较大的更新，同步更新在  上。 支持后台敏捷的同步风格编程模式，同时提供系统的高并发能力。
支持的特性

支持框架，轻松构建服务；

支持、、等常用第三库；

可选的共享栈模式，单机轻松接入千万连接；

完善简洁的协程编程接口：

类接口设计，通过_、_等简单清晰接口即可完成协程的创建与恢复；

类__的协程私有变量、协程间通信的协程信号量_；

非语言级别的实现，结合协程原地编写并执行后台异步任务 ；

基于实现的小而轻的网络框架，基于时间轮盘实现的高性能定时器；




 产生的背景
早期微信后台因为业务需求复杂多变、产品要求快速迭代等需求，大部分模块都采用了半同步半异步模型。接入层为异步模型，业务逻辑层则是同步的多进程或多线程模型，业务逻辑的并发能力只有几十到几百。随着微信业务的增长，系统规模变得越来越庞大，每个模块很容易受到后端服务网络抖动的影响。
异步化改造的选择
为了提升微信后台的并发能力，一般的做法是把现网的所有服务改成异步模型。这种做法工程量巨大，从框架到业务逻辑代码均需要做一次彻底的改造，耗时耗力而且风险巨大。于是我们开始考虑使用协程。
但使用协程会面临以下挑战：

业界协程在  环境下没有大规模应用的经验

如何控制协程调度

如何处理同步风格的  调用，如 、 等

如何处理已有全局变量、线程私有变量的使用


最终我们通过  解决了上述的所有问题，实现了对业务逻辑非侵入的异步化改造。我们使用  对微信后台上百个模块进行了协程异步化改造，改造过程中业务逻辑代码基本无修改。至今，微信后台绝大部分服务都已是多进程或多线程协程模型，并发能力相比之前有了质的提升，而也成为了微信后台框架的基石。
 框架

同步风格  的处理
对于同步风格的  ，主要是同步的网络调用， 的首要任务是消除这些等待对资源的占用，提高系统的并发性能。一个常规的网络后台服务，我们可能会经历  、 、 等步骤，完成一次完整的网络交互。当同步的调用这些  的时候，整个线程会因为等待网络交互而挂起。
虽然同步编程风格的并发性能并不好，但是它具有代码逻辑清晰、易于编写的优点，并可支持业务快速迭代敏捷开发。为了继续保持同步编程的优点，并且不需修改线上已有的业务逻辑代码， 创新地接管了网络调用接口  ，把协程的让出与恢复作为异步网络  中的一次事件注册与回调。当业务处理遇到同步网络请求的时候，  层会把本次网络请求注册为异步事件，本协程让出  占用， 交给其它协程执行。 会在网络事件发生或者超时的时候，自动的恢复协程执行。
大部分同步风格的  我们都通过  的方法来接管了， 会在恰当的时机调度协程恢复执行。
千万级协程支持
 默认是每一个协程独享一个运行栈，在协程创建的时候，从堆内存分配一个固定大小的内存作为该协程的运行栈。如果我们用一个协程处理前端的一个接入连接，那对于一个海量接入服务来说，我们的服务的并发上限就很容易受限于内存。为此， 也提供了  的协程共享栈模式，可以设置若干个协程共享同一个运行栈。同一个共享栈下的协程间切换的时候，需要把当前的运行栈内容拷贝到协程的私有内存中。为了减少这种内存拷贝次数，共享栈的内存拷贝只发生在不同协程间的切换。当共享栈的占用者一直没有改变的时候，则不需要拷贝运行栈。

 协程的共享协程栈模式使得单机很容易接入千万连接，只需创建足够多的协程即可。我们通过  共享栈模式创建千万的协程      内存，每万个协程共享的使用内存，整个稳定  服务的时候总内存消耗大概为。
协程私有变量
多进程程序改造为多线程程序时候，我们可以用__来对全局变量进行快速修改，而在协程环境下，我们创造了协程变量 _ ，极大简化了协程的改造工作量。
因为协程实质上是线程内串行执行的，所以当我们定义了一个线程私有变量的时候，可能会有重入的问题。比如我们定义了一个__的线程私有变量，原本是希望每一个执行逻辑独享这个变量的。但当我们的执行环境迁移到协程了之后，同一个线程私有变量，可能会有多个协程会操作它，这就导致了变量冲入的问题。为此，我们在做异步化改造的时候，把大部分的线程私有变量改成了协程级私有变量。协程私有变量具有这样的特性：当代码运行在多线程非协程环境下时，该变量是线程私有的；当代码运行在协程环境的时候，此变量是协程私有的。底层的协程私有变量会自动完成运行环境的判断并正确返回所需的值。
协程私有变量对于现有环境同步到异步化改造起了举足轻重的作用，同时我们定义了一个非常简单方便的方法定义协程私有变量，简单到只需一行声明代码即可。
 的  方法
对于现网服务，有可能需要通过系统的    接口去查询  获取真实地址。我们在协程化改造的时候，发现我们  的  族函数对  不适用，当一个协程调用了  时会同步等待结果，这就导致了同线程内的其它协程被延时执行。
我们对  的  源码进行了研究，发现  不生效主要是由于  内部是定义了__方法来等待事件，而不是通用的  方法；同时  还定义了一个线程私有变量，不同协程的切换可能会重入导致数据不准确。最终协程异步化是通过 __方法以及定义协程私有变量解决的。
 是  提供的同步查询  接口，业界还有很多优秀的  的异步化解决方案，但是这些实现都需要引入一个第三方库并且要求底层提供异步回调通知机制。 通过  方法，在不修改  源码的前提下实现了的  的异步化。
协程信号量
在多线程环境下，我们会有线程间同步的需求，比如一个线程的执行需要等待另一个线程的信号，对于这种需求，我们通常是使用 _  来解决的。在  中，我们定义了协程信号量 _ 用于处理协程间的并发需求，一个协程可以通过__与__来决定通知一个等待的协程或者唤醒所有等待协程。
总结
 是一个高效的  协程库，提供了完善的协程编程接口、常用的  族函数  等，使得业务可用同步编程模型快速迭代开发。随着几年来的稳定运行， 作为微信后台框架的基石发挥了举足轻重的作用。

相关推荐腾讯云上搭建微信机器人微信个人订阅号后台搭建入门教程长连接应用场景谷歌大神又出开源新技术啦，这次是对格式的图片采用全新算法重新编码，输出的图片还是但是图片大小明显缩小，而质量不但没有损失，甚至还更加优化，速速来体验一把。
一、环境安装
下载谷歌开源软件，编译安装以后实际上是一个工具。输入图片，输出格式图片。

项目地址：

文档下面有写、 、、的安装方式。我们以  系统为例，介绍如何安装 。
首先，克隆谷歌的项目文件：
  
然后，安装  软件包：
   
 
然后直接  ，生成文件，强大的开源工具  于是就生成了。
二、实战测试
的使用比较简单，参数很少。默认采用的质量，也可以通过  来指定大于等于的质量，如果要小于，需要修改源码。输入必须是符合转换要求的图片，输出则是格式图片。
什么是符合要求的图片？
官方说明：

       

实测发现，使用透明通道的图、非的比如黑白图、图都是不能转换的。
效果如何？
批量实测张图片。使用默认参数，也就是原图的质量。
张转换成功，占比，其中张转换以后图片比原图更大，占比。张无法转换，占比。
原图平均大小，压缩后，平均压缩率，平均每张耗时毫秒。
单张最大的图片，压缩后，压缩率，耗时毫秒分钟。
单张最小的图片，压缩后，压缩率，耗时毫秒。
另外借用国外媒体报道中使用的对比图片，直观地感受下压缩后的效果：

左边是原图，中间是  压缩后，右边是使用  压缩后。
的资源消耗如何？
官方文档说，的图片处理需要消耗内存。
实测一个大小的图片，有。理论消耗内存，实际消耗内存，实际与理论基本相符。由此看出这个工具是个内存消耗大户，内存只够处理，也就是同时处理张左右的图片。
消耗则一直是单核占用。当然实际使用多核机器可以同时跑多个进程。有多少核就能跑多少个任务。
压缩图片耗时跟图片大小程离散相关，图片越大，耗时越久：

测试环境使用的是核内存的机器。单核平均处理的图片需要约秒钟，这个耗时比较长，注定无法进行在线实时压缩。
三、优劣对比
的优势在哪
实测对质量在或以下的图片，输出的新图质量不会降低。而实际压缩率能够达到平均压缩率。
兼容性比较好，输出的格式图片通用性非常高。没有、那种协议不兼容的困扰。
在客户端格式的图片编解码速度比其他私有协议快很多。
有哪些劣势？
处理类型局限性，并不能应对全部类型的图片。只能处理颜色编码的图片。
时效性较差，图片越大处理越慢。的图片处理需要秒，本次测试平均的图片需要秒。

相关推荐 图片流量节省大杀器：基于的自适应图片技术实践关于图片资源瘦身的奇思妙想 整合万向优图图片管理能力，打造高效图片处理服务我叫李宜东，是一名华中科技大学的大二学生，一名网站开发的萌新，在大一上半学期，就想做一个我们班级专属的网站，方便同学们方便我这个学委偷懒。
下面放出我的网站信息架构、技术组合和从一个小白成长到现在一个小小工作室负责人的一些经验分享。
一当前网站信息架构

二网站运行环境及技术组合

注：左侧为现在的技术组合，右侧为未来可能选择的组合
三腾讯云上环境的搭建和代码托管：

 ：  ，  或者按文档手动安装

 ：我们的工作室的同学写的完整安装文档

代码托管： 项目地址


四经验分享

从一个大一小白开始，我是如何在不到一年的时间从前端到后端搭建起自己的网站呢，又为何选择这个技术组合，踩过什么坑呢？

学习及开发经验

利用网上平台，慕课网，实验楼，极客学院等等许多免费的学习平台都是很好的学习途径。

会用插件，多  ，  上有很多问题的解答

最重要的还是保持对编程的热情，做编程会占用你大量的时间，如果没有兴趣是很难坚持下来的，多做点自己想做的，往往可以带来学习的动力。

……


如何偷懒

环境配置篇：一键化安装，注意留存或收藏环境配置的文档，开发环境更新做好备份。

团队协作篇：使用团队协作工具如  ，良好的版本控制和工作流会减少冲突的代价，重要的是别人的代码不乱改：

轮子篇：合理利用现有的开源组件而不是一味造轮子，基于模板 框架的开发会迅速很多。

重构、封装篇：不要老想着重写代码，可以尝试将已有的服务封装为服务，在不改动底层的情况下进行开发：

编辑器篇：好的编辑器的代码补全，快捷键可以省不少时间。


选择当前技术组合的原因

前端的变化现在  和  使用越来越广，同时出于这学期响应式设计的需要，前端从最初的  转向了  和  ，也开始使用更多的插件。

后端语言及框架选择在性能要求不高的前提下，  无需编译，学习成本也比较低，容易上手，但是也因为这个原因，所以需要使用框架来使项目结构和编码规范更清晰一些，而  作为流行，文档较完善的国内  框架被我作为首选。

数据库选择  的原因：  的良好支持，  ，开源免费 最后由于一些校内网站数据的收集和四六级成绩的查询使用了  来做网络爬虫。

服务器的选择：腾讯云学生服务器  元支持  ，访问快，稳定性比较好。


技术上踩过的坑：
最初使用  框架时，没有模型的概念，把数据库操作也写在了控制器，维护、复用和扩展都很麻烦。 
数据库最初设计没有考虑扩展性，最近数据库向高版本迁移时懒得导出  ，复制了  目录到高版本 然后数据异常，至今个人论坛还没来得及恢复数据。 
最初密码设计只做了简单的  加密，导致现在也没能加字符  。 
开发文档和项目文档的编写，有一天，突然翻到之前的文档，发现我写的代码已经偏离最初设计软件课设作业学生管理系统，成了班级网站，  ：更新日志
五网站截图：
首页

学生登陆页面

个人信息页

部门招新

官网地址链接
六结语
这样，我上学期在一元服务器上折腾出了班级网站，这学期，我想将全站做成响应式网站，做出更多方便同学的功能。最后，感谢腾讯云给了同学体验云服务的机会，也希望其他同学也可以在云上做出自己想要的网站  。

相关推荐云数据库建站基本流程腾讯“云校园”背景闲扯
作为一个程序员，都会想搭建一个自己的技术博客的，我也不例外。刚工作的时候，不会网站相关技术，只能利用部署一套现成的博客。服务器先是跑在国外免费的主机上，后来用过新浪的。，很简单，很方便，功能也很全，作为技术博客肯定完全没有问题。但是我一直的想法就是自己实现一套简单的博客系统，功能不要太复杂，符合自己需求就行。更主要的是还能作为自己的数据后台，提供数据给前端或者客户端调用。当然像早期的主机，或者后来的新浪云上的服务，这种的服务也不是我想要的。我想要的是一台属于自己的，能连公网的主机。所以自己编写的博客独立云主机，是我一直追求的目标。编写博客尝试过修改代码搭建；尝试过 搭建；尝试过采用 框架搭建。后来都因为各种原因不了了之，没完成。这期间主机用过阿里云，用过。最近一年，做了一些前端的项目，技术又积累的一些，于是开始了我的第=次搭建。这次我选择了腾讯云。
 整体架构
后台： 提供返回数据的。框架采用。  
客户端：采用，打包，构建，采用的语法编写。  
管理员端：，采用语法编写。    
后台的，前端和都是有所了解，但是没有实际使用过。只能边学边写。  
 腾讯云申请
主机采用腾讯云机器，数据库采用腾讯云的，一些静态图片，放在云对象存储中。 
 云主机

 云数据库

 云对象存储

 项目部署
 后台服务部署
安装   启动后台服务    
 配置

 客户端 管理端 后台

相关推荐
【腾讯云的种玩法】在下搭建个人博客系统
在云端快速构建一个个人站点
云服务器还有哪些应用场景呢？在“人人都是自媒体”的今天，很多人都想把自己的学习经历、一技之长分享出来，让更多的人了解和认识自己。从而进一步树立自己在互联网上的个人品牌。建立属于自己的独立博客网站，忘掉那些空间、各种博客吧。下面简单分享一下建站流程。
一、域名
墙裂建议选择规的域名注册商，比如三大巨头百度、腾讯、阿里。因为我们的域名是要续费的，如果说你买的域是那种不正规的域名商，哪天域名商跑路了，那么我的域名也就了。域名购买建议：简单易懂，有特殊意义。另外，不要选择那些怪异的后缀，有些后缀不支持备案，这个稍后会提到。
二、服务器
如果是纯小白，对、、之类的动态语言一脸懵逼，可以选择部署上开源免费的系统，如、帝国等，就能快速的搭建了。建议选择虚拟主机，便宜还不费力。
如果想钻研技术、想折腾，就可以选择云服务器。同样道理，服务器也得选择大厂商的。比如阿里的、腾讯云的等。初期用于学习或者访问量不大时，可以选用最低配置核的，毕竟也得好几十块，土豪随意。购买好服务器后，在服务器搭建好环境，解析好域名，就能愉快的访问了是不可能的。
天朝的特殊规定，在大陆的服务器用于网页访问，就必须备案，不备案是不能访问的。这就涉及到之前域名的选择，奇葩的后缀是暂时不支持备案的。备案流程也简单，目前服务器的提供商都会帮你备案，按步骤填写相关信息提交就行了。香港或者境外的服务器无需备案，可以省去备案的等待，但是访问速度慢。建议无需特殊需求的话就选择大陆服务器备案吧，毕竟一些第三方的服务是需要备案号的。备案时常一个月左右，在等待的时间里可以对自己的网站在本地进行测试。
云服务器推介：
腾讯云服务器，价格比阿里云稍微便宜一点。点此查看。
三、网站建设
对于那些博客系统，都有现成的主题，自己网上搜一个安装上就行。不过，想做一个自己喜欢风格的网站，还是需。要自己亲自动手去设计。咳咳，我这套模板也是过来的本人前端是在太渣，审美又差。网站制作本着“先静后动”的原则，先设计好前台页面后，再编写后台。
四、测试以及上线
网站上线前先测试网站有没有什么。如没有什么问题，就可以上传到服务器了。备案后解析好域名就能访问了。

相关推荐
使用  和  快速搭建个人博客【腾讯云的种玩法】利用腾讯云搭建个人博客【腾讯云的种玩法】快速通过搭建个人博客 账号下首个开源项目的开发者受邀参加腾讯开源线下沙龙，分享他经过开源后在技术和个人影响力方面获得了怎样的成就，并追根溯源，表达开源项目应该“大而全”还是“小而美”的独特见解。开源不应该是压在开发者身上的额外负担，而是技术完善，个人绩效提升，塑造公司与团队形象的有效途径。
作者简介
，张绍文，来自腾讯微信事业群，从事安卓开发，主要负责  的性能优化以及终端质量平台相关工作，参与热补丁技术的开发。
项目简介
热补丁开源框架，具有稳定性高，兼容性强，简单易用等特性，支持在无需重新安装的情况下，完成对文件，库和资源的更新，紧急修复的，或发布新功能。
应用宝 的应用中，有包括微信之内的多个应用已经使用了进行的热补丁。首日数破千，登上全球日榜热度第一，取得首周数的成绩。
地址：
演讲实录
今天我主要分享一下，开源可以让我们得到什么，可以获得怎样的成长？开源有比较长的时间了，因此我以为例，结合开源经历，向大家分享开源给了我怎样的帮助，希望大家能有所启发。
技术影响力
重构代码，取悦自己
程序员的使命，就是写伟大的代码取悦自己。但由于历史原因，或产品需求变更和迭代，我们往往只能恶心自己，写出来的代码连自己都看不下去。开源就不一样了，代码不仅自己看，还要放到上给所有人看。代码风格代表公司的形象，也代表我们开发人员的形象。于是，我们在代码规范、注释、项目架构上面都需要更费心思。这就给了我们对项目进行代码重构的好机会，可以优化那些写得不规范的旧代码，让它能被读者更好地接受。
技术视角
我们在公司做产品，要么跟以前版本做比较，要么跟公司其他产品做比较。开源就不一样了，我们的产品需要跟开源社区的业界同类产品做比较，分析他们的优缺点，挖掘他们没有解决的痛点，找到我们比他们优胜的方面。这是做开源前必须经历的步骤。当真正把项目开源时，我们会提供对比结果作为项目的介绍文案，例如微信终端跨平台组件的网络库与其他网络库相比的优势，为什么比其他热补丁方案好。
“既要埋头苦干，也要抬头看路”，开源使我们站在很高的视角上，去了解社区的新技术，让我们意识到改变，阔斧革新了安卓客户端的开发工具链。
社区支持
开源除了把自己的技术向社区展示，同时我们也希望得到社区的支持。对兼容性有极高的要求。开源后便得到非常广的测试场景，先后在多个中得到验证，其中不乏、百度等知名公司。现在，华为、小米等厂商也会帮我们运行各种自动化的用例，项目出现问题就会及时反馈给我们。这是我们期望的社区帮助。
然而，目前国内的开源社区环境不是特别的好，左右的用户仅停留在用的层面，会提出或指出待完善的地方，而提出优化解决方案，并做出 的用户不及，而且大部分集中在大公司。因此，我们筛选出一批只有多人的来自阿里、百度、华为等知名公司的种子用户。他们能给到非常多的 和优化方案。
个人影响力
情怀传递
开发者，尤其是新员工，都不会很在意个人影响力，认为只需要写好代码就行了。其实作为新时代的程序员，这样做远远不够。写好代码只是最基本的诉求，程序员还要会做总结，沉淀自己的工作成果，通过分享去引导大家进步。这恰好是开源对程序员的要求。、、等微信事业群的优秀开源项目，都离不开大量技术文章作为沉淀。项目开源前期和后期，我们都会输出一些有价值的文档，收拢起来，让大家了解一个项目开源的始末。
技术大会沙龙直播
开源一个项目就像对外发布一个产品。我们的项目即使再好，也需要发声，让更多的人知道。因此，我们积极参加、等大型技术大会，还参加一些线下沙龙和直播，把我们的项目放到大舞台上曝光，得到向同行请教和学习的机会，同时也可以了解到业界的新技术。
社区交流
项目开源需要跟社区做一些反馈与交流，例如处理和 ，筛选出种子用户并跟他们深入交流。我们还会给项目比较优秀的贡献者寄礼品作为奖励，已经寄出两三批了。
个人发展
个人影响力的提升，无论是对你的晋升还是个人成长都非常有帮助。大部分参与晋升考核的员工，只是与过去的自己或公司其他人进行比较。可当你拿出的方案是，经过开源社区的验证，我在业界是什么水平，达到了怎样的高度。这显然比其他人更优胜。以我的晋升经历看来，开源绝对是锦上添花的一笔。
开源还有一个很重要的意义是，无论你在哪里，都可以继续为自己的项目做贡献。所以我希望大家都能加入到开源的行列当中。
开源项目的选择
中国人的思维习惯倾向于一个项目做到大而全，能满足所有功能。但我认为，不妨尝试一下小而美。项目质量好坏的关键，在于它能否直击一个特定的痛点，能否有特定的市场定位。它与竞品相比具备怎样的性能优势，在哪些场景下可以解决问题但竞品不能。可能是一件简单的事情，但数却非常多。因此，优秀的开源项目不一定是功能全面的软件，也不一定是超级庞大的系统，只需要能解决某些人在某个场景下的痛点就可以了。

结语
地址：， 
欢迎 ！
去年月，在开源社区，尤其是安卓热补丁技术领域掀起热潮，一时名声大噪，带动腾讯开源迅猛发展。但事实上，部分开发者认为，做开源劳累于代码审核、项目运营和社区交流，而这些工作的成效却不一定是立竿见影，因此做开源成为了自己的负担。
打造个人影响力，已经成为新时代程序员对自己职业生涯长期规划的保证。回顾的经历，我们看到开源可为自己赢得更多的上升空间。同时，开源能够为团队的技术能力注入新鲜血液。这些都将吸引着更多开发者加入到开源的行列当中。

文章来源： 腾讯开源 公众号安装=
安装
安装 ：
  
  
  

        
          
 
 _=

     
  
  
  
  
  
  
  
  
  
  
  
  
安装
   
 
如果需要，请修改全局配置文件，并创建库
     
在使用版本时，如果有如下报错：
  __

             

            

 

           __

  
需要变更
______
将 = 全部改为 或将升级到或以上的版本。
启动后台 
如果使用了，需要启动
  
启动后台
  
启动
        
    
启动
如果使用了
 
查看配置文件
  
        
开启用户认证
启动认证
 

       
 
 = 
 = 
_ = _
创建用户
 

    
 _  
 = 
 =   
 = 
 =  
 = 



作者 | 徐慧编辑 | 顾乡
现如今，云计算已成为领域标配，甚至有趋势作为基础服务成为未来领域的水和电。当业务规模蓬勃增长，面对数以万计的请求量，庞大的业务流量，高并发的数据访问量，仅靠人工看守，时刻准备着当“救火员”，哪儿有问题冲向哪儿，是不可能的事情。腾讯云自动调度系统—弹性伸缩震撼来袭，能自动发现异常，帮助业务容量自动伸缩，协助故障自动愈合，用程序解决人工很难解决的问题。

横向伸缩和纵向伸缩 
弹性伸缩分为横向 和纵向 两个方面。 
横向伸缩指增加更多实例资源，整合成一个整体来工作和对外提供服务。例如：一台云主机不够支撑前端请求量，则加台，台不够加台、台、台，形成一个处理集群，也就是常说的分布式架构。这种架构的是扩展性非常强，根据业务量快速升高和降低云主机。 
纵向伸缩指在现有的实例资源上增加配置来提高处理性能。例如：在现有的云主机上增加、内存或磁盘资源。由于硬件限制，增加配置会有上限，加到最后无法再增加配置。所以这种方式扩展性有限。 
腾讯云除了纵向伸缩最近推出弹性伸缩即横向伸缩，根据现有业务需求变化，动态调配资源，实现高度弹性伸缩，用户不必介入具体操作流程，只需关注结果即可。 
一、弹性伸缩关键优势 
 智能自动化系统，解决业务突发情况 
业务千变万化，后端资源又庞杂，传统的人工看守，早已无法解决现在技术人员面临的问题。不清楚什么时间突增请求量，需保证业务高峰期无异常发生。如果您知道在具体时间需要扩容和缩容，使用弹性伸缩定时任务，实现在具体时间内按配置扩缩容云服务器。如果您不确定业务高峰期来临时间，可使用弹性伸缩告警触发策略，当业务突增导致后端服务异常，影响正常对外提供服务时，则根据策略自动扩容云服务器，为您的业务保驾护航。 
支持多种伸缩模式和策略，帮您应对各种复杂场景，释放您的人工成本。 
 弹性自愈，系统自带容错能力 
业界共识，业务情况复杂，谁也无法保证下一秒是否有异常发生。当异常发生时，如何保证业务可靠性，此时需要一个智能稳健具备容错能力的系统来保证业务质量。弹性伸缩组中云主机处于非健康状态时，若一台云主机长期发现不可达，则系统会自动判断出该云主机异常，创建新实例替换非健康状态的旧实例，保证伸缩组对外正常提供服务。 
 节省成本，您身边的好管家 
一般来说，业务高峰期是阶段性，不是长期状态。业务高峰过后，请求量下降，云主机的资源消耗也大幅下降。按常规做法，技术人员需要花费大量时间处理闲置资源，销毁云主机，节省成本。腾讯云弹性伸缩正好帮您解决此问题。结合腾讯云监控告警平台和指标监控，实时检查云主机资源使用情况，再结合腾讯云按量计费能力，请求量增加时，按需增加资源，请求量减少时，按量小时计费结算销毁资源，让您的每一笔开销都使用在刀刃上，不浪费一分一厘，做您身边的好管家。 
二、弹性伸缩大功能 
  定时伸缩 
在指定时间内根据预先配置，自动生产或销毁云服务器，除了设置一次性操作外，还可设置周期性重复的定时任务。帮助您周期性业务变化自动调整业务容量，省去人工看守成本。 
 根据负载智能伸缩 
基于云监控指标实时检测伸缩组内云服务器利用率、内存利用率、内网出入带宽，自动增加或减少云服务器实例。帮助您业务突变时，第一时间发现并解决，保证业务质量。 
 自动注册 
自动将新增云服务器注册到负载均衡中，无需手工干预即可在线支持业务。 
 弹性自愈 
如果伸缩组中云服务出现不可达，则自动将生产一台健康云服务器替换不监控云服务器。实现弹性自动发现异常，自动愈合的能力。 
弹性云，可靠云
弹性是云计算技术中公认的从资源利用角度最重要的特点之一。弹性的主要特性是按需增减计算、存储、网络等各种资源。而腾讯云弹性伸缩基于层，以用户业务负载和请求量作为触发条件，动态调整资源，使云计算平台具有跟充分自如的伸缩性和扩展性。相信未来的云计算平台将越来越具有弹性能力。

相关推荐
    【就是快】分钟搭建一台服务器！怎么生成主机最快一、自动化部署工具介绍
、业务入口
申请
 ①界面地址：

②注意事项：

提供测试库和正式线上库两种服务类型测试库仅提供功能测试
压力测试报告
详细填写使用“容量模型”，便于评估所需资源
当前版本暂不支持分片和多地同步
回执查看
①界面地址：



②注意事项：

可在回执查询界面查询用户名、密码
通过解析名字服务，取得服务多入口的和
客户端版本不兼容版本的，请升级客户端至以上
账号密码验证，统一在“”库中认证 实时监控
①界面地址：



②注意事项：

针对线上业务提供多维度监控，测试业务仅提供“容量历史”和“慢日志”的监控
容量历史”监控精确到集合级别，可查询“库”—“集合”的容量

、运维入口
机器上架
① 界面地址：
②数据表名：
③注意事项：

上架机器时注意区分业务机_、_和备份机_
上架机器时，标记“是否独立部署”
复用备份机时，必须确定其具有可用端口数
备份查看
①界面地址：
②数据表名：_
③注意事项：

备份分为“全量备份”和“备份”，按需提取文件

备份文件存放地址、状态、时间等详细信息

二、部署流程
、服务类型

、“”模式业务接入
概述
“”模式业务，即业务采用全新各机器上均未部署过业务三台机器台业务机、台业务机、台备份机进行部署独立混合，在部署时需进行如下步骤：
操作流程
 ①业务接入


上架机器
   扁鹊平台  机器上架

选择部署集群
   在上执行命令：




选择可用端口



选择上线业务



是否独立部署



确定相关信息


 ②软件包部署

软件包传输在“”模式下，三台机器均未部署过，故软件包均需传输。



软件包安装

③监控初始化
 监控系统会部署到每台机器上，并完成初始化和自启动。

 ④集群初始化

配置、、
启动、、
建立集群主从副本配置、根据业务需求调整参数
管理授权和的管理权限配置


⑤用户授权
根据既定规则，生成用户名、密码，并且设置相关权限，提供给用户使用，并将其写入__表中，用户可在回执中查看。

 ⑥备份初始化

备份系统安装仅备库
 在“备机”上安装备份系统，这样可以保障备份操作不用影响主库和从库的读写。




完成信任关系建立

由于备份机制的规则约束，完成“”模式业务上线后，必须完善“备机”与“冷备存储”的信任关系建立，之后整个上线过程结束了。
、“”模式业务接入
概述
“”模式业务，即业务采用全新各机器上均未部署过业务两台机器业务机，以及复用一台大存储备份机机器上部署过业务的备份机进行部署独立混合，在部署时需进行如下步骤：
操作流程
 ①业务接入

上架机器
选择部署集群
选择可用端口
选择上线业务
业务是否独立部署
确定相关信息

②软件包部署

软件包传输仅业务机

由于“”模式的备份机属于多业务混用，已经部署过软件包，故无需重新传输。


软件包安装仅业务机

由于“”模式的备份机属于多业务混用，已经部署过软件包，故无需在重新安装。
③监控初始化

由于“”模式的备份机属于多业务混用，其上已经安装过监控系统，故无需安装。


④集群初始化

配置
启动
建立主从
管理授权

⑤用户授权
、测试业务接入
概述
测试业务，即给业务提供功能测试的平台，将接入业务部署到托管平台所提供的测试集群中_，进行混合部署，在部署时需进行如下步骤：
操作流程
①查找测试集群

在机器上架界面查看测试集群
在脚本帮助界面查看_的地址
在数据库中的表中查看“”字段
②用户授权
在机器中，使用脚本进行用户授权，帮助信息如下：



三、关于监控
、结构说明
采集到的数据保存到里，采集间隔为一分钟，可在采集程序配置文件修改。采集通过连接，获取，，，等系统内置命令获取。每个机器上可能有多个实例，可在配置文件里配置相应的端口，每个实例启动一个线程采集数据。连接使用账号 需要在每台里添加认证，采集脚本里也需要配置，如果需要改动，需要更改自定义采集脚本和代码。
由于采集数据的时候依赖于，，无法方便的与产品线关联，在配置的时候，会把标志每个产品的，配置成的里，获取数据的时候联同一起写入，这样就实现了监控数据和产品的映射。
报警由触发，可在上配置监控策略，调用脚本进行告警。告警脚本调用微信的接口，接口文档可在查看。
当触发报警时，会调用目录下，后续可根据发送的报警信息，去里查询业务信息，然后发送到微信群。
、采集程序部署、配置
采集程序部署在
部署在

启动采集程序使用目录里的脚本
  启动程序
         查看运行状态
   停止程序
日志保存在目录下

 ①部署
每台需要监控的机器上都需要部署 
 部署在下面两台机器，需要在每台上部署
    
   
②报警
报警脚本在机器的下面目录里
           _
该脚本根据相关报警信息发送报警消息
③配置
  配置文件在目录
只需要修改为本机即可
、日报
日报程序在的_目录下，由两个脚本构成：

___    生成按天统计数据
_    发送日报

统计数据保存在上，每天点分生成前一天的按天统计数据，十点发送日报。
、数据库表结构
库地址  ：
库名       _
表结构：
①监控信息
   

        ``  _                自增

        ``                                      

        ``                   实例，格式为

        ``                   是否是

        ``                                 操作的量

        ``                                 操作的量

        ``                              操作的量

        ``                                操作的量

        ``                      操作的量

        ``                操作的量

        ``                              网络进流量

        ``                                网络出流量

        ``            请求量

        ``     

        ``                    总连接数

        ``                    可用连接数

        ``                     当前连接数

        ``              物理内存使用量

        ``     

        ``                        页错误量

        ``             

        ``     

        ``     

        ``     

        ``     

        ``        等待读锁的队列数

        ``       等待写锁的队列数

        ``        等待锁的队列总数

        ``        执行读操作的活动连接数

        ``       执行写操作的活动连接数

        ``         活动连接总数

        ``                                  主从同步延时

        ``   

        _ ``

        _ ``

        _ ``

        _ ````

        =  =
 ②保存库信息数据
   

        ``  _  

        ``   

        ``   

        ``                         库名

        ``                        的量

        ``                                的量

        ``                        平均大小

        ``                    压缩前数据大小，

        ``                        存储空间大小，

        ``                              索引数量

        ``                   索引大小，

        ``                              慢日志条数

        ``   

        _ ``

        _ ``

        _ ``

        _ ````

        =  =
 ③保存信息数据
   

        ``  _  

        ``   

        ``   

        ``                         库名

        ``                         名

        ``                         量

        ``                             总记录大小，

        ``                        平均单个记录大小

        ``                        总存储空间，

        ``                              索引数量

        ``          总索引大小，

        ``     

        ``     

        ``   

        _ ``

        _ ``

        _ ``

        _ ````

        =  =
 ④保存存储容量日报信息数据
  `__` 

  ``    _

  ``   

  `_`     

  `_`     

  `_`     

  ``     

  ``     

  `_`     

  ``     

  `_`   

    ``

    `_` ```_`

   `_` ``

   `__` `_`

 = _=  =
 ⑤保存访问量日报信息数据
  `__` 

  ``    _

  ``   

  ``     

  ``     

  ``     

  `_`   

    ``

    `_` ```_`

   `_` ``

   `__` `_`

 = _=  =
 ⑥保存，实例映射信息
  `` 

  ``    _

  ``   

  ``   

  ``   

  `_`   

  ``   

  ``   

    ``

   `` ````

   `_` `_`

 = _=  =
四、关于备份恢复
、备份策略
每天点备份全库，每小时备份一次
 、备份实现

使用备份，备份前锁库，备份完成后解锁
备份同样使用，指定查询条件，只备份一个小时的数据。
备份脚本保存在 
备份数据备份在 
为了节省空间，备份完成后删除备份数据
备份数据压缩后传输到 目录下

目前备份会在两台上其中一台固定执行，这台机器一般需要使用磁盘容量较大的机器，这台机器优先级较低，不会被选成。因为磁盘容量大，这台机器可多跑几个实例，但是不能影响复制延时。注意 备份的机器需要跟建立信任关系，方便传输备份文件到上面。
、备份状态查询
备份数据相关信息写入， 在_库，_表里。
表结构如下：

  `_` 

``    _

``               ，也就是的

``         文件名

``              文件大小

``             备份类型 全库备份，

``              状态  ， 

`_`   

  ``

 `_` ``

 `_` `_`

 `_` ```_`

 =   =
、恢复数据
原则
数据恢复原则一般为：
 ①优先用冷备数据，冷备数据无法满足备份失败、实时性差等时，采用在从库数据，并进行恢复
②误操作、分子操作回滚等优先使用进行恢复
 ③为保证数据一致性，在进行数据时，必须先进行锁表操作
 ④在集群机器替换和数据恢复前，需将机器出集群配置在主上操作
常用恢复语句
①锁库、解锁





 ②状态命令
 查看状态

机器授权查询

 查看副本集状态
③节点操作
           删除节点在主服务器执行

           增加节点

       ④数据备份

          _
 ④数据恢复
_             _  _ 
相关推荐：     第一期 ：集群搭建  第二期：压缩与索引     第三期：托管  存储服务     第四期： 与  映射入门作者 | 程丽萍编辑 | 顾乡

 快手是北京一笑科技发展有限公司致力于为中国网民打造的更好玩的移动生活平台。 快手是一款基于移动端的短视频应用，用户可以通过  快手非常方便快捷的制作  动画：直接用摄像头拍摄短片或是从相册中挑选一组拍好的照片。短片拍摄完成后， 快手会截取部分画面用来制作  图像，用户可预览动画后即可制作生成  文件，并进行分享和传播。
 快手是  时代的开创者，目前在应用市场上已获得上万个星评价。
客户挑战
 社区用户对浏览  图的速度有很高的要求，因此  快手要求视频文件播放的失败慢速比在以下。
此外， 热门动画经常一不小心爆红，尤其在热点事件，节假日活动营销等时间节点。 快手要求  的带宽储备，技术运营能力以及链路质量能够抗住任何突发带宽，不管任何时候，都给用户一致的流畅浏览体验。
腾讯解决方案
腾讯云  针对快手给出了定制化解决方案，高峰期失败慢速比达到客户要求，获得快手认可：
、 在技术层面实施  协议栈策略，以及进行  协议栈调优，大幅优化性能。
、 回源链路优化，引入超级中间源设备，通过多路归并和回源收敛，有效应对突发带宽高峰，提供流畅的视频播放体验。
、 制定灰度分批切换计划，保障客户业务切换无感知，业务正常运行无风险。
、 专业完善的支撑团队：从客户、业务、时间、技术等多重纬度指定割接计划，保障业务的平稳运行。提供小时不间断专业服务，包含企业  服务、工单系统服务及值班电话服务等多种服务渠道。
为客户带来收益
、 快手正式业务切换到腾讯云  后，即使是突发高峰，短视频播放的失败慢速比维持在左右，保证了快手用户的体验。

、 没有改变原有的系统，平稳完成切换，源站流量稳定。
附录：快手压测场景相关数据披露
压测目的：通过压测，考察腾讯在带宽突发场景下的服务质量
压测手段：快手将带宽从瞬间提高到，且都是在腾讯上没有缓存的文件。压测成功后，将持续按照运营若干星期。
考察指标：
腾讯对于每个文件只到源站回源一次
腾讯的回源不会对源站造成冲击
腾讯保障快手业务质量稳定是多维分析利器，使用步骤分为索引创建和数据分发两个步骤。
目前尚未集成到套件版本中且外部有客户需要在自己部署的集群上使用组件，这里就遇到了与外部集群的适配问题。
与某客户外部集群集成后，一次压测时数据量，行，字段全索引使用单机版的索引创建插件由于数据量过大，出现  等异常现象导致索引插件程序崩溃，实际产生的数据索引量和实际数据量差距很大。基于以上考虑，数平提供了基于的索引创建插件，提升索引创建效率。
以下记录了基于版本的索引插件和外部集群的适配过程。
一集群相关组件版本
版本：_集群版本： 插件使用的：
二插件使用方法
需修改配置：以___表示插件主目录

___修改内容：更改为本集群的地址；修改为本集群的配置目录；修改为本集群的安装主目录。

____修改内容：更改为本集群的配置目录；更改为插件的用户配置文件绝对地址。

____修改内容：该配置即插件的用户配置文件，一般默认配置项即可。需要注意的是插件支持指定被索引文件的字段分隔符。配置项为和。其中的优先级高于前者，指定后第一个配置将无效。其中的项直接指定分隔符内容如|，\，；等；指定分隔符对应的码数字。

运行插件

执行命令：在插件主目录下其中为的通过做的名称：
 __ \
____ \
 \
____ \
_____ \
______ \
_ \


参数介绍： __表名 数据时间时间分区 源数据在上地址单文件或目录 索引输出的目录 文件在的地址需手动创建上传 主键 索引分片数


日志观察：
创建索引插件在运行后会在___输出和。前者为相关的记录，后者为索引创建过程记录包括任务相关信息。正常情况下会记录提交任务成功与否以及相关，可通过的管理页面看到状态，也会记录的进度，完成后会输出 {}  以及任务相关信息如图。如果出现错误日志，需具体分析，下文会总结本次集群适配遇到的一系列问题，目前已在集群里测试通过。
适配基本过程
前面已提到插件使用的版本为，但集群本身为。在直接执行插件创建索引时出现以下“奇怪”异常。
   
  _____
  
   = 
 
 
 
 
 
 
 
 
 
 
查询了所有异常日志后一无所获，和数平大神请教后，建议替换插件里用到包为集群内版本。这样开始还是遇到了一系列问题，最终在环境下插件运行正常。
整理了以下思路进行适配：将插件用到的全部替换为集群内使用的版本；执行插件看日志错误一般会因为新版有新的包依赖关系，提示错误，根据错误提示缺少的类找到对应包，添加到___目录，重复此操作，直到不再提示缺少类错误。执行以上操作时同时需要注意缺少的类关联的包的版本必须和实际集群用到的版本一致重复步骤时发现的问题。
问题汇总
插件和集群的适配过程中遇到的问题总结如下：

配置项异常
   
  
   
      
       
 
       
      
     
解决方法：查看集群的相关配置即里指定的配置路径里配置目录，也可以复制集群的出来，自己做单独修改里的配置项内容为，但目前插件只支持到，故单独修改此项配置为后保存，异常解决。

插件无法向集群提交任务
  
  
   
      
   
     
解决方法：使用用户向提交任务时无权限提示。修改集群的权限允许即可。有很方便的访问控制页面进行操作。

提交任务时变量替换异常
 

_______
_   
__













{}

{}
  

_______
_   _ 
= 
=
_____
__ = 
= ={}  
 

_____
__ 
_____
__   
   = 

_______
_   
__













{}

{}
  

_______
_   _ 
= 
=
_____
__ = 
= ={}  
 

_____
__ 
_____
__   
解决方法：从 可以判定为是某些配置的参数没有正常替换造成。查看具体异常里面用到的变量有，_，{}和__以上变量在的配置文件里找到逐个替换为实际值而不用变量直到错误提示不再出现。实践中发现是因为这个变量没有值造成的，可以在配置里增加一项此配置或者将用到该变量的地方替换为实际值即可。

一个“奇怪的”错误
     
 __       
 __       
  ___    
 
       
__
        
   
  _____
  
   = 
 
 
 

 

 


解决方法：这个错误是最难解决的错误，最终是用本文提到的插件和集群版本适配的办法解决，解决方法及思路见“适配基本过程”。替换或者增加了的包列表如下：























无法连接的任务提交端口在的环境下提交任务后日志提示重连失败，一直提示该错误解决方法：查看启动进程发现内部集群接收请求的端口为，修改项里的配置的端口后任务通过

适配完成替换新增所有包后出现的异常
      
   
 

  
 
 
 
 
 
 
  
 
 
 
 
  
 
 
 

 
 

 
 __

 _
 
 
解决方法：查询这个异常类属于，那问题就出在这一系列的包身上，检查发现插件的目录下有




这两个包的版本有个，检查集群用的版本为，将插件目录下的版本的两个包删除后，插件正常运行。原因归结为包版本冲突。

提示无法找到框架路径
      
       

 

 
 
 
 
 
 
  
 
 
 
 
 
 
 
 
 
解决方法：提示配置里没找到框架的路径，检查的该配置项确实配置有异常，在该配置项里增加框架路径后通过以下红色为新增配置。



      











相关推荐
大数据解决方案个人介绍：梁定安，现就职于腾讯社交网络运营部，负责社交平台、增值业务的运维负责人，开放运维联盟专家委员，腾讯云布道师，腾讯课堂运维讲师。

 社交网络运营部管理着近万台的  服务器，以此支撑着腾讯社交业务海量业务与用户，如日活亿的 、月活亿的  空间数据来源：腾讯财报等众多千万级在线的胖子业务。

面对业务体量的不断增胖的社交类  业务，如何能既保证业务的发展，又能有效的控制运营成本的增长？是运维团队迫在眉睫要解决的运营成本难题。经过不断的探索和深挖，我们庆幸在过去的年中，找到了一条有效的设备成本管理的路子——精细化容量管理的设备成本优化之路，并连续年，每年为公司节约过亿的运营成本。
众所周知，提升设备的使用率是运维界常用的管控运营成本的有效办法，那么如何能够针对不同的设备使用场景、不同的设备类型制定出适宜的度量与管理办法呢？请看腾讯运维在实践中总结出的个方法：

方法：性能管理法
在衡量服务器的使用合理性中， 使用率当仁不让的成为头号被关注对象。随着多核超线程技术  的普及， 负载不均的问题逐渐在海量运维场景下，成为了设备运营成本的吞噬者。

为了发现并优化多核  负载不均的现象，我们提出了极差的度量指标，极差=，若极差，则该设备存在使用率不合理的问题，需优化整改。备注：优化方法可参考多队列网卡优化与亲和，本文不展开。
同理，在分布式集群的模块容量管理中，运维规范要求实现模块的一致性管理，包括容量一致性，为此我们同样提出模块的容量极差的度量指标，模块使用率极差= 最高的的使用率  最低的设备的使用率，若同模块下不同设备的使用率极差，则该模块容量使用不合理，需要优化整改。备注：一般此类情况源于配置、权重、调度等不一致管理问题，不问不展开。
方法：密度管理法
对于内存使用的合理性，很难直接用内存使用率来度量，为此，在内存型设备使用中，我们提出了密度管理的管控办法——访问密度。访问密度计算公式：，模块下的设备内存访问密度应该一致，否则纳入负载不均的一致性整改范畴。通过对全量内存型模块访问密度的统计分析，我们可以得出一条平均负载水平线，结合容量管理的实际需要，提高平均水平线或优化低于水平线的模块，都能实现优化设备成本管理的目的。同时，密度管理法也适用于盘的使用场景。备注：访问密度会受业务请求包大小的影响，但是在海量的运维场景下，个别情况可以忽略。
方法：特性管理法
特性管理法，同功能模块的管理类似，就是用来衡量在特定业务场景下，业务逻辑的处理性能是否最优，要结合不同产品下的同类应用场景的同比来得出分析结论。这种管理办法因业务逻辑而异，本文主要举例说明下。
例如，在移动互联网的业务运维场景中，有些场景是非常规容量管理手段能度量的，针对一些个性但是规模庞大的模块，我们提出了特性管理法。举个例子，、空间、信鸽等业务都有长连接功能模块，该场景的容量少而使用内存多，因此可以使用每内存维持的长连接数量来横向比较、空间、信鸽等业务，督促性能低的业务程序整改优化。
又例如，在直播场景中，有对主播视频实时在线转码的需求，不同的开发可能使用的转码技术方案不一，也可以利用同样的特性管理法来衡量在线转码的性能是否有优化空间。
方法：碎片管理法
腾讯社交网络业务历史悠久，从“大哥”到“新秀”企鹅，业务类型覆盖 、、多媒体、阅读、动漫、游戏、直播等主流的娱乐化社交玩法，其中有当红的产品，也有长尾的产品；有几十亿次每秒功能模块，也有几十次每秒的功能模块。碎片化管理法，就是针对请求量不高的小集群准备的。因为分布式高可用的运维要求，通常生产环境的部署最小单元都为台设备，在物理机时代，访问量小的模块浪费成本严重，但随着虚拟化技术的广泛应用，该场景遇到的问题迎刃而解。利用虚拟化技术将硬件资源碎片化，让小模块可以很好的兼顾设备成本和高可用。
与虚拟化解决碎片资源利用率的方案类似，我们还有平台“蜂巢”，基于腾讯社交的标准开发框架，解决小业务小模块的容量管理难题。后续专题聊蜂巢。
方法：木桶管理法
腾讯平台级的业务，如 、 空间、 音乐等，基本上都普及了三地三活的  专区容灾架构能力，这是真正意义上的异地多活。正巧在上海运维大会的海量运维专场，会有个主题与异地容灾的海量运维实践分享，如果大家感兴趣的话，诚邀大家参加。对于平台级业务的运维，我们会根据运维规范管理的要求，将实现一定业务场景的多个模块划分为  减少运维对象，在不同的社交场景下，我们就得出了各种不同类型的，通过自动化运维能力扩大到  的自动化运维能力，运维能很轻松的实现  异地化部署，如此实现该业务场景异地多活的容灾容错。

再说  的容量管理，平台级就意味着用户量和请求量不会暴增，那么对于的可运维性而言，我们必须要对的请求量和用户量等指标进行量化度量。为此，运维赋予一个可量化的指标，在我们的场景下，如在线用户数、核心请求量等视的用途而定，基于压测可以得到单的最合理的容量值，该值符合木桶原理，也就是我们的木桶管理法，由多个模块组成=木桶，模块=木板，支撑一定的用户量，的容量管理就像木桶原理一样，木桶的水位高低取决于最短板，因此的最大容量取决于中性能最低的模块容量。

腾讯的平台级业务同时在线用户数是相对稳定的，也就意味着全国要实现多地多活，需要准备多少冗余容量是可预期可规划的，换而言之，要部署的的数量是能被提前量化的。同时，结合业务的自动化部署、调度方案、柔性策略和有损服务能力，我们就可以利用很合理的成本就能实现异地多活。
举例说明，假设我们共有的同时在线用户，且用户量相对稳定，我们就可以规划个支撑在线的，利用业务架构的调度能力分别让个的容量平均化，在灾难场景时，个不可用，另外两个可以完全容灾，在此规划下，极端场景个不可用是要开有损服务的。通过量化管理，业务运维则可以灵活的根据成本管理的需求调整的容量水位，以达到最优性价比的高可用架构。
方法：硬件选型法
关注硬件瓶颈，升级硬件降低单机运营成本。比如，过去做  内存存储时相册、视频，使用了大量硬盘，当、硬盘成本量产使用，及时的升级硬盘容量，可以有效的提升单机存储量，以规模效应实现花小价格换来了大成本。又如，在图片社交或视频社交的业务场景下，因玩法的多样性需求，会延伸出很多计算量繁重的逻辑，像人脸识别、鉴黄等功能，这时候选用设备代替设备，也是让性能飞的一种有效做法。该方法尤为适用于类的存储量只增不减的业务，如微云、网盘、图片存储、视频存储等。
后记：
包括但不限于上述种容量管理的方法，使得我们能在用户数据只增不减社交业务中，能稳步的可持续前行。设备成本管理还涉及很多细节的技术手段和业务代码优化，本文只是从运维的视角阐述对容量管理的思考，希望能够抛砖引玉，对各位同行有帮助。带宽成本管理的优化带来的成本节省价值会更大，因为其中涉及的技术点和方法论更多，此文不深入探讨。

相关推荐容量管理系统设计方案榨干运营成本：一亿之后再省两亿认识多种处理芯片的特性和实战上篇前言
是最基本的库函数了。下文选择几版代码，来对比分析性能。
分析
 
代码选自
       _ 
{
        
      = 
      =   =       
          =    = 
            
     
}
一个一个的循环比较。语言的简洁明了一览无遗。
 
代码选自：
 _    _ 
{
    _  =   
      
    ____ ____
    
      \\
      \\
             \\
           \\
            \
     
      =       
       
      
     
}
因为是比对页面的函数，是的整数倍，所以没有另外判断。
 
代码选自_
以下的代码是使用汇编语言实现，针对的加速，寄存器是宽的，效率更高。
 
         
      
         
     
         
         
         
     
                 

        
      
       
        
         
      
         
         
     

        
      
       
        
         
      _
         
         
     _

        
      
         
          
         
      _
         
         
     _

        
      
         
          
         
      _
         
         
     _

         
          
        
       
           
           
        
           
           
        
         
      
      

       
       

         

    
      
_
         
      
         
         
         
         
         
         
       
         
       
         
    
      

         
    
          
                 
                 
             
                 
             
                  
           
    
      

         
         
         
         
      
           
       
        
        
       
           
           
      
          

            
        
          
        
      
        
        
       
           
           
         

         
         
         
         
              
        
      
         
        
       
           
           
            
         
       
       
           
           
            

         
         
         
         

         
        
       
           
           
            
         
        
       
           
           
            
         
        
       
           
           
            
         
       
       
           
           
            
            
           

         
         
         
         

         
        
       
           
           
            
         
       
       
           
           
            
            
           

            
        
           
       
      

           
         
          
        
      
      

         
         
         
         
        
      
         
        
       
           
           
            
            
           

         
         
        
      
         
        
       
           
           
            
         
        
       
           
           
            

            
         

         
        
       
           
           
            
         
        
       
           
           
            
         
        
       
           
           
            
         
        
       
           
           
            
            
           
         
         
         
         

         
        
       
           
           
            
         
        
       
           
           
            
           
           
            
        
           
       
             
      

  
方法修改一下，单次比较 的长度。
       _ 
{
        
      = 
      =   =     {
          =    = 
            
         = 
         = 
         =  
    }
     
}

使用，对两个大小的内存进行比较，一共比较，统计执行时间：
方法用时大约。方法用时大约。方法用时大约。方法用时大约。方法的时间是方法的八分之一左右，这个是预期的逻辑。使用寄存器最快。
使用，对两个大小的内存进行比较，一共比较，统计执行时间：
方法用时大约。方法用时大约。方法用时大约。方法用时大约。方法的时间还是方法的八分之一左右，但是他们都明显的缩短了时间，方法甚至比方法还要快一些，可见，的优化效果真的好厉害。
后记
真的应了一句话：没有对比，就没有伤害。导语 本文从从图片的，，，颜色分布向量到基于语义的，，特征，构建一套分层相似图片检测系统。本文致力于零基础单机快速搭建一个可用的相似图片识别系统。

 背景
相似图片检测的定义是人眼看起来像，比如下面的俩图。














相似图片的检测广泛用于图片去重，仿冒图标检测，图片检索等。本文也是基于图标相似检测的需求去做的，本意是用于打假。然而专家老中医告诉我，打假不如推荐相似受市场欢迎，并且不同应用场景下我们做事的思路也会不同。不管了，先把相似图片识别出来
 检测的原理
图片相似检测无非是提取图片某个维度的特征，根据算法两两计算相似度。基于机器学习，深度学习的方法则会先构建一个模型，然后将新样本特征输入模型即可。简单流程可以描述为：

检测过程中可能用到的个基础特征如下：

简单解释下，，，是根据基于分块等某种算法得到的基于图片值的某个哈希其详细描述可参考 ；向量则是将色彩从映射到较小的区间如，然后计算图片在每个区间的分布形成一个数组；
则不再是值的某种统计，而是试图构建人能理解的图片意义，如关注图片关键点或者理解为重要的点的信息，则从自然度，开放度，粗糙度等描述图像。下图是这种专业的图片处理，很高大上有没有。

 如何搭建一个仿冒图标检测系统
相似图片的检测可以用于去重，图片搜索等。底层技术是基于上文描述的方法，但是在根据目标不同，又有不同的结构。本工程的初衷是检测图标仿冒，系统结构如下：

思路：先把已标位正牌的图标特征等收集起来形成一个特征库，新图标来了则提取其特征去特征库里匹配，如果匹配到了相似度极高的则直接认定其为仿冒图标；如果匹配到了相似度较高的则转入，高级特征匹配。
    效果
下面是一些相似图标示例：



图标大小缩放，添加元素，添加文字，颜色块变化等都是可以识别的。仿冒数量不便展示 □ 
 提升性能和效果的关键点，坑
本工程最终在单机完成了数百万官方图标库，每天新进数十万图标的检测。在构建过程中遇到了不少坑，这些坑一部分是计算速度单一图标匹配从秒降低到秒，鬼知道我的小心脏经历了什么，还有的是识别效果：
官方图标特征需先聚类，数百万的特征存储和匹配都比较麻烦。对官方库聚类后可以形成特征对图标的一对多关系，而不是维持原有的图标对特征的一对一关系；
匹配策略分层，如本工程一开始综合及等，参数和策略调整非常复杂。分为两层后哈希策略过滤，精确匹配，每一层的准确率和参数，策略调整非常方便；
哈希值的海明码距离计算耗时较多，在明确海明码距离范围的情况下可以采用分段匹配而非计算不同的位数。具体见
 工程经验上：不直接提供，算法了。可以用这个库。可以用这个库，其依赖安装见
 潜在的改进点
海量图片匹配，第一步必须是生成图片的特征哈希，且改必须是局部敏感。局部敏感的特点是原始数据相似的情况下，生成的值也会尽可能的保持相似。从图片，，的算法过程可以认为它们就是一种局部敏感哈希。所以可以用来检测相似。

但是在特征中，即使图片相似，生成的维向量的每一个值几乎都不同，不直接具备利用它生成局部敏感哈希的条件。这个时候需要对向量元素归一化，使得相似图片的大部分特征相同。这一点在的官方页面 下方有说明，但并没有讲怎么做。有文章说用，但是对于生成过程中的每个维度的权重一笔带过。个人很怀疑不采用归一化就生成的做法。这里待研究
 总结
当前图像处理发展多年，已经提出了多种特征，算法。在工程应用中需要结合自己的场景选用适当的特征怎么适当不确定的话就多试试 □ ，注重底层数据的质量，优化性能以便快速调整匹配策略。作者 |董超编辑 | 顾乡

| 导语 上一讲我们介绍了一下线性回归如何通过训练，这一讲我们介绍下逻辑回归模型，并通过该模型进行手写识别的训练

在本文的开始前，强烈推荐两个深度学习相关的视频集台湾李宏毅教授的 ，清晰明了，很多晦涩的原理能让你看了也能明白：==_周莫烦的教程，同样清晰明了：===
 概念
什么是逻辑回归
线性回归通常用于对于连续值预测，比如根据房价走势，给个房子的面积预测该房子以后的房价等。
然而，有时我们需要对事物分类而不是去预测一个具体的数值，例如给定一张含有数字 十个数字中的一个的图片，我们需要将其分类为 ，，，，，，，，， 十类；或者，我们需要将一首歌曲进行归类，如归类为流行，摇滚，说唱等。集合 ，…，、流行，摇滚，说唱，等等 中的每一个元素都可以表示一个类；或者给一张照片判断该张图片是猫还是狗集合、猫，狗。一句话说概括，逻辑回归就是多分类问题。数字的手写识别也是输入一张图片，然后我们将其分类到，所以也是可以运用逻辑回归滴～
逻辑回归模型构建
在解决问题之前，我们首先要建立个模型才能进一步解决问题，不过非常幸运的是线性回归中的许多概念与逻辑回归有相似之处，我们仍然可以使用 =     来解决逻辑回归问题，让我们看下线性回归和逻辑回归之间有什么差别：
区别：结果：对于线性回归，结果是一个标量值可以是任意一个符合实际的数值，例如 ， 等；对于逻辑回归，结果是一个整数表示不同类的整数，是离散的，例如 ，… 。特征：对于线性回归，特征都表示为一个列向量；对于涉及二维图像的逻辑回归，特征是一个二维矩阵，矩阵的每个元素表示图像的像素值。损失函数：对于线性回归，成本函数是表示每个预测值与其预期结果之间的聚合差异的某些函数；对于逻辑回归，是计算每次预测的正确或错误的某些函数。
相似：训练：都是去学习和的权值预测：都是通过学习到的和进行预测
模型修改
输入修改
一般我们输入的图像是二维的数组，为了能够使用线性回归的方程我们需要做些修改，我们将输入的图像从二维压缩成一维，其实方法也很简单就如上图一样，将第，，…行依次放到第行后面即可。
输出的修改
我们在执行预测的时候是没法打包票说，预测的是什么东西的，我们一般会输出个概率数组，来表示我们要预测的东西属于某一类的概率如上图，我们给出每一个类别的得分情况大部分情况得分是概率，从上图我们亦可以看出，预测的结果是 ，因为他的得分最高。
 实现
我们拿手写识别来讲述下如何实现逻辑回归，手写识别的例子也算是机器学习祖传例子了，大家基本上都是拿这个例子入门的。
当然照惯例先上代码
=
   
   _

 = ____ _=

 =   
 =  
 = 
 =    
_ =   

_ = ___   _=

_ = _

 = __
 = 


   
  _ _ = _
  _ _={ _ _ _}

_ =  _
 = __ 

 _={  _ }
然后我们详细讲述每一行代码的作用，一些上一讲已经介绍的概念这里我就不再介绍了～

   _

 = ____ _=
这两行是导入的数据，如果本地没有数据，会自动从网络上下载。因为有监督的学习任务，所以还有对应的标签也就是图像对应的真实数字，这部分位于，标签也是以就是有一个长度为的数组，只有一位是表示是某一个分类，其他位都是的方式表示，即这个数组共有位，第位就是证明这个图像是数字的图像。例如，数字的照片可表示为：每一个位置代表了每一个像素灰的程序，取值到。这个矩阵可表示为一个=的数组。对应的数组为。

 =   
 =  
 = 
 =    
_ =   
这里定义
 =   
是因为的输入图像是的，所以转换成列是，前面的代表任意多个输入。意思就是我们可以输入一个矩阵，代表张图像数据。定义
 =  
这里有个小技巧，虽然模型是 =     但实际上我们写代码的是都会写成 =     这个地方我觉得是两个原因我们输入_的数据，输出一个_的预测结果，如果是  的，我们可以让  =  _； = _ _这样 得到就是_矩阵，每一横行都代表一个输入数据的预测结果，比较直观。如果我们使用  的形式的话，定义的矩阵就没有这么直观。我还搜索了一下，发现有些资料说  的形式计算导数更加容易。
所以我们这里定义的便是_ _，因为输入的图像是所以_＝，我们要分类成这十个数字，所以_＝，因此便是
 = 
因为输出的是，所以这里定义一个长度为的数组。
 =    
_ =   
是我们预测的输出，_是真实的结果。我们对进行一下讲解，   是应用 =     模型，前面我们说过我们每次预测是很难确定我们预测的东西是什么，所以我们会输出一个概率数组，每一项标识是某一分类的概率。那怎么才能得到这个概率数组呢？这里我们使用函数，那什么是函数呢？我们简单介绍下，让大家有个简单的认识～首先我们先引用下维基百科上的定义
简单的说把一个维的向量…映射成…其中是一个的常数，然后可以根据的大小来进行多分类的任务，如取权重最大的一维。也有一个激活函数叫通常也用于二分类任务。这里有人可能要提问了，为什么不直接用 =     的输出来判断，而是再套一层？
这里我觉有两个原因：我们在训练的时候往往是通过改变和的值来拟合的，如果我们直接用 =     的输出结果，可能和值的一点小变化就会导致输出值产生比较大的波动，这样损失函数的波动也会比较大，这对我们进行预测是不利的，所以我们套一层这样可以确保和的小幅改动时输出结果也是小幅改动，这样更利于训练。通常直接的输出结果是不太直观的，比如输出    我们要进行一些转换，可以更好的将输出结果和输入结果进行结合，比如我们可以转换成   ，表示我们预测的是第四个分类，但这个转换不太好不是就是，很多波动都没表现出来，同样不利于训练，所以我们还是采用，这样输出结果就不会都为，利于训练。当然跟我们采用的损失函数是交叉熵也有一定关系，下面还有介绍。
假如我们预测的这个图像它的  向量是 ，然后我们得到的_是         ，绘制如下然后我们使用公式进行概率转换上面的公式还是比较简单的，如 =   则        如下图所示图形在形状上与   相似，且所有项相加和为，绘制如下
那怎么判断后的结果和真实结果的相近程度呢？也许有人想说想使用欧几里德距离，余弦距离等等前面这些也是可以的，但这里最适合是交叉熵。相关数学证明我们这里就不详细说明了。交叉熵的公式其中是真实的值，是我们预测的值套用我们的_和得为了便于理解我们对这个公式分为部分蓝：实际图像类’对应的  图红：由预测向量元素经过，一系列变化而来：绿：每一图片类别 ，其中， =    …  红蓝部分相乘的结果于是有了下面这行代码
_ = ___   _=_的默认值时，即把_降到维，也就是一个数。对于维_，_=时，按列；_=时，按行。因为我们每行都是一组输入，所以这里按行。

_ = _这里我们仍旧采用梯度下降的方法，学习速率，目的是减小损失函数_。

 = __
 = 


   
  _ _ = _
  _ _={ _ _ _}
这里开始输入数据进行训练，分为个迭代，每次迭代输入组数据，是用的小批梯度下降   ，每次迭代都会自动学习和的值。

_ =  __便是我们预测的正确与否的数组。 是一个非常有用的函数它能给出某个对象在某一维上的其数据最大值所在的索引值。后面的也是代表按行。我们实例运行输出一下看看值        我们对其便可以得到，因为下标为的位置概率最大从开始。这样每一行数据都会得到一个数表明该行数据预测的值是多少。
会将相应位置的值进行比较相同，不同得到。经过上面的运算_便得到了一个对所有数据预测正确与否的数组。
 = __ 
_ 是将我们前面得到的…数组转换为…
_对转换得到的数组求平均数，这个值便是预测正确率。
我们运行整个程序的电脑耗时秒左右，最后的正确率在左右。
参考附录


相关推荐
深度学习入门实战一像一样算法生成梵高风格画像深度学习入门实战二用训练线性回归用进行手写数字识别接系列文章
《 海量之道系列文章之弱联网优化 一》《 海量之道系列文章之弱联网优化 二》《 海量之道系列文章之弱联网优化 三》《 海量之道系列文章之弱联网优化 四》
   接入调度
①　就快接入
在客户端接入服务器调度策略的演化过程中，我们最早采用了“就近接入”的策略，在距离客户端更近的地方部署服务器或使用，期望通过减少来提高网络交互响应性能。这个策略在国内的落地执行还需要加一个前缀：“分省分运营商”，这就给广大负责建设的同学带来了巨大的精神和肉体折磨。
在持续运营的过程中，根据观察到的数据，发现并非物理距离最近的就是最快的。回忆一下前面谈到的吞吐量指标，它与链路带宽和成正比关系，而是受物理距离、网络拥塞程度、吞吐量、跨网时延等诸多因素综合影响的，单纯的就近显然不够精细了。
“就快接入”在“就近接入”策略的基础上改善提升，它利用客户端测速和报告机制，通过后台大数据分析，形成与客户端接入按就快原则匹配接入服务器的经验调度策略库，令客户端总能优先选择到最快的服务器接入点。
对于接入服务器，我们按照访问目标数据属性纬度的不同，可以分为至少两个集合，它们分别是：
业务逻辑服务器集合；
富媒体服务器集合，富媒体包括头像、图片和视频等尺寸比较大的数据；
这两类服务器集合通常由独立的接入调度管理。
客户端在访问不同的数据类型时使用不同的服务器集合，这样的划分体现了轻重分离、信令和数据分离的架构理念。
每个服务器集合又可按接入调度的优先秩序划分为三个子列表：
        【动态服务器列表】
服务器按策略比如就快接入并结合设备负载情和容量情况、网络容量情况综合计算下发的一系列服务器地址，某些产品还会在动态服务器列表靠后的部分加上动态服务器域名该域名与静态服务器域名列表内容不同，是一种动态扩展方式，对于下载类业务，动态服务器列表最后会包含动态回源服务器地址等。客户端应当持久化存储动态服务器列表，并在启动时加载到内存缓存中，其缓存索引的通常是网络类型，对于网络，的内容中再加上一个，以便区分不同的热点。客户端在持久化和内存中基于不同的缓存  组建议值，可根据业务特点灵活选择和配置动态服务器列表数据，并按照方式做更新淘汰；
        【静态服务器域名列表】
预埋在客户端持久化存储中，在首次启动或动态服务器列表访问全部失败时使用；
        【静态服务器列表】
预埋在客户端持久化存储中，其主要价值在于，当使用客户端遇到动态服务器列表和静态服务器域名列表访问都出现异常时，有最低限度的可用性保障。静态服务器列表贵精不贵多，能分别服务国内和海外用户即可。对于下载类业务，静态服务器列表最后还有包含静态回源服务器地址；
每个服务器列表都包含一批列表项，一般为  个。每个服务器列表中的列表项按照优先顺序从前到后排列，故也需维护一个自己独立的调度机制，我们称之为服务器列表调度。
基于以上的分类基础，客户端和服务器接入调度机制的具体的做法通常为：
        客户端实现接入调度模型和服务器列表调度模型，这两个是嵌套关系，可以理解为外循环和内循环的关系，就好比地球围着太阳公转的时候也没耽误自转；
        客户端存储预埋业务逻辑和富媒体两个服务器集合，每个服务器集合都包含静态服务器域名列表和静态服务器列表；
        服务器实现就快接入调度算法，依托异步计算持续更新的经验调度策略库，进行动态匹配计算；
        客户端和服务器共同实现一套动态服务器列表下发和更新机制；
        实践中有些服务器还要求客户端支持跳转的能力，这个逻辑机制上可以有，策略上不提倡；
我们先考察接入调度，如【图十九 接入调度示意】，它的状态变迁驱动力来自：
        当前状态下相应的服务器列表无有效数据数据项为空或全部试完一轮；
        服务器下发了新的动态服务器列表；
接入调度状态变迁的原则是：
        客户端首次使用时，接入调度状态入口在静态服务器域名列表；
        客户端在冷启动除首次使用、热启动时，接入调度状态入口在动态服务器列表。动态服务器列表通常在冷启动时从本地持久化缓存加载，在内存缓存中会被服务器下发的数据更新，一旦更新，客户端应择机持久化到本地存储中；
        接入调度状态变迁时，以进入服务器下发的动态服务器列表状态为最高优先级，即三个服务器列表发生状态变迁时，都先向服务器动态列表跳转；
        第点之特例：当刚从动态服务器列表变迁到静态服务器域名列表且未收到服务器下发新的动态服务器列表时，静态服务器域名列表变迁的下一站是静态服务器列表。这里要特别谈一下前面那个时间限定词“刚”，这个前提设定的原因是移动网络易抖动，分钟前动态服务器服务器列表不可用不代表分钟后依然不可用，因此，我们把这个“刚”设定为：一直在前台运行的分钟以内的时间；
        特别的，如果是因为服务器下发新的动态服务器列表导致状态变迁，那么接入调度状态要置位还原，重新按第条原则执行；
 
【图十九 接入调度示意】
我们以动态服务器列表为例来考察服务器列表调度，先说明一下，同其他两个列表不同的是，动态服务器列表中的列表项数量完全由服务器下发时控制。如【图二十 动态服务器列表调度】所示，服务器列表调度的状态变迁驱动力来自：
        链接建立失败或超时；
        链接建立成功但收发数据错误包含网络类型切换、无网络等或超时；
        服务器下发新的动态服务器列表；
服务器列表调度状态变迁的原则为：
        冷启动时，服务器列表调度状态全部重新置位，按第条原则  执行；
        客户端由前到后顺序尝试服务器列表中的数据项，不可逆向执行、不可乱序执行；
        客户端尝试一遍本服务器列表所有数据项，如果全部失败，则退出这个服务器列表调度，进入到接入调度；
        链接建立失败建议要再做  次重试，重试间隔  ，这两个参数   云端应该可配可控，相关详细讨论可参考链路管理或超时、链接     建立成功收发数据错误或超时、服务器下发新的动态服务器列表时，服务    器列表调度状态要变迁；
        特别的，如果是因为服务器下发新的动态服务器列表导致状态变迁，那么服务器列表调度状态要置位还原，重新按第条原则执行；
 
【图二十 动态服务器列表调度】
客户端接入调度首要目标是确保可用性，其次是选择最快的链路。客户端无论同哪个集合中哪个服务器列表的接入服务器建立链接，服务器都应按照就快策略的标准评判此时客户端选择的服务器接入点是否符合要求，有没有更快的接入点，如果有，就随着业务数据响应一并下发至客户端，客户端同步更新动态服务器列表的数据，驱动调度和服务器列表调度发生状态变迁，使得下次再发起服务器访问时能使用更优的接入服务，接入链路切换时机这里有三个方案可供探讨后续链路管理也会有相关的讨论：
        直接关闭当前链路，立即尝试使用新的动态服务器列表建立链接；
        直接关闭当前链路，当有网络访问时尝试使用新的动态服务器列表建立链接；
        保持当前链路，立即尝试使用新的动态服务器列表建立链接，一旦成功，马上切换新的业务请求到新链路上，然后在旧链路空闲时将其关闭；
实践中可以根据的特点来选择链路切换方案。
那么，客户端报告什么样的数据可以作为服务器调度策略计算的依据呢？
        网络类型，比如、等，时多提供一份信息；
        接入归属，比如电信、联通、移动、海外及其所属省市等，注：归属由服务器判断；
        目标域名，用于服务端校验访问目标和自己提供的服务是否匹配；
        访问目标服务时的测速数据次数、每次字节和耗时、估算值等和服务质量数据如接入调度状态、服务器地址、链接成功或失败、链接成功所需时长、链接失败错误码、重试次数等；
说了半天，这一切的基础是我们要部署足够多和广的服务器接入点，也可以使用，依托在一个分省市分运营商甚至覆盖全球的库和通过大量客户端测速报告的业务质量统计数据计算出来的、接入按就快原则匹配接入服务器的经验调度策略库之上。
总结一下与就快接入相关的内容：
        服务器分省分运营商分国内外的部署及使用，广度和深度并举；
        客户端测速报告及服务质量监控报告，测速这个话题，稍微多探讨一下，在有                     线网络，实时测速并调整调度策略数据是非常普通的方案，但放在移动网络条件下，就有重新思考的必要。移动网络易抖动和移动应用大部分短链接轻量交互的特点，使得我们很难在一个短的时间内做出网络速度的有效判断，即便有初步的判断，也可能因为没有马上使用的时机而导致过期失效。因此，我们更倾向于把这些质量数据报告到后台，通过大量的数据归并分析，形成接入速度调度策略的判断依据；
        客户端接入库与接入服务器就快调度匹配库需要持续更新；
        服务器调度中尽量减少跳转，做到一击即中；
②　去的直连：
不但需要个的时间消耗，而且移动网络下的还存在很多其它问题：
        部分承载全网用户以上的查询请求，负载重，一旦故障，影响巨大，这样的案例在互联网也有很多，一下即可感受触目惊心的效果；
        山寨、水货、刷等移动设备的 设置错误；
        终端解析滥用，导致解析成功率低；
        某些运营商有域名劫持问题，实际上有线也存在类似问题。域名劫持对安全危害极大，产品设计时要注意服务端返回数据的安全校验如果协议已经建立在安全通道上时则不用考虑，安全通道可以基于或者私有安全体系。对于劫持的判断需要客户端报告实际拉取服务数据的目标地址等信息；
        污染、老化、脆弱；
综上就是在前述就快接入小节中，接入调度会优先使用动态服务器列表的原因。
③　网络可达性探测
在连接建立过程中如果出现连接失败的现象，而终端系统提供的网络状态接口反馈网络可用时，我们需要做网络可达性探测即向预埋的或者地址发起连接尝试，以区别网络异常和接入服务异常的情况，为定位问题，优化后台接入调度做数据支持。
探测数据可以异步报告到服务器，至少应该包含以下字段：
        探测事件，要求全局唯一不重复；
        探测发生时间；
        探测发生时网络类型和其它网络信息比如时的等；
        本地调度的接入服务器集合类型；
        本地调度的接入服务器如使用域名接入，可忽略；
        探测的目标或地址
        本次探测的耗时；
   链路管理
链路就是运肥猪的高速路，就快接入是选路，链路管理就是如何高效的使用这条路。下面是一些实践总结：
①　链路复用
我们在开篇讨论无线网络为什么慢的时候，提到了链接建立时三次握手的成本，在无线网络高时延、频抖动、窄带宽的环境下，用户使用趋于碎片化、高频度，且请求响应又一次性往返居多、较频繁发起等特征，建链成本显得尤其显著。
因此，我们建议在链路创建后可以保持一段时间，比如短链接可以通过 ，私有协议可以通过心跳等方式来保持链路。具体要点建议如下：
        链路复用时，如果服务端按就快策略机制下发了新的接入动态服务器列表，则应该按照接入调度的状态变迁，在本次交互数据完成后，重建与新的接入服务器的链路，有三个切换方案和时机可选择：
         关闭原有链接，暂停网络通讯，同时开始建立与新接入服务器的链路，成功后恢复与服务器的网络交互；
         关闭原有链接，暂停网络通讯，待有网络交互需求时开始建立与新接入服务器的链路；
         原有链接继续工作，并同时开始建立与新接入服务器的链路，成功后新的请求切换到新建链路上，这个方式或可称为预建链接，原链接在空闲时关闭；
        链路复用时区分轻重数据通道，对于业务逻辑等相关的信令类轻数据通道建议复用，对于富媒体拉取等重数据通道就不必了；
        链路复用时，如与协议合并后面会讨论结合使用，效果更佳；
②　区分网络类型的超时管理
在不同的网络类型时，我们的链路超时管理要做精细化的区别对待。链路管理中共有三类超时，分别是连接超时、超时和任务超时。我们有一些经验建议，提出来共同探讨：
        连接超时：下  秒，下秒给三次握手留下次超时重传的机会，可以研究一下《详解 卷一：协议》中 的超时与重传部分；
        超时：下  秒无线网络不稳定，给抖动留下必要的恢复和超时重传时间，下秒个；
        任务超时：根据业务特征不同而差异化处理，总的原则是前端面向用户交互界                     面的任务超时要短一些尽量控制在秒内并有及时的反馈，后台任务可以长一些，轻数据可以短一些，重数据可以长一些；
        超时总是伴随着重试，我们要谨慎小心的重试，后面会讨论；
超时时间宜短不宜长，在一个合理的时间内令当前链路因超时失效，从而驱动调度状态的快速变迁，效率要比痴痴的等待高得多，同时，在用户侧也能得到一个较好的正反馈。
各类超时参数最好能做到云端可配可控。
③　优质网络下的并发链路
当我们在、要区分是路由器还是手机热点等网络条件较优时，对于请求队列积压任务较多或者有重数据富媒体等下载类数据请求时，可以考虑并发多个链路并行执行。
对于单一重数据任务的多链接并发协同而言，需要服务器支持断点续传，客户端支持任务协同调度；
④　轻重链路分离
轻重链路分离，也可以说是信令和数据分离，目的是隔离网络通讯的过程，避免重数据通讯延迟而阻塞了轻数据的交互。在用户角度看来就是信息在异步加载，控制指令响应反馈及时。
移动端大部分都是短链接模式工作，轻重数据的目标本身就不同，比较天然的可以达到分离的要求，但是还是要特别做出强调，是因为实践中有些轻数据协议设计里面还会携带类似头像、验证码等的实体数据。
⑤　长链接
长链接对于提升应用网络交互的及时性大有裨益，一方面用户使用时，节省了三次握手的时间等待，响应快捷；另一方面服务器具备了实时推送能力，不但可以及时提示用户重要信息，而且能通过推拉结合的异步方案，更好的提升用户体验。
长链接的维护包括链接管理、链接超时管理、任务队列管理等部分，设计实施复杂度相对高一些，尤其是在移动网络环境下。为了保持链路还需要做心跳机制从另外一个角度看，这也是针对简单信息一个不错的时机，但需注意数据传输要够轻，比如控制在以内，而心跳机制是引入长链接方案复杂度的一个重要方面，移动网络链路环境复杂，国内网关五花八门，链路超时配置各有千秋，心跳时长选择学问比较大，不但要区分网络类型，还得区分不同运营商甚至不同省市，历史上曾经实践了分钟的心跳间隔，最近比较多的产品实践选择分钟的心跳间隔。而且长链接除了给移动网络尤其是空中信道带来负担外，移动设备自身的电量和流量也会有较大的消耗，同时还带来后端带宽和服务器投入增加。所以，除了一些粘性和活跃度很高、对信息到达实时性要求很高的通讯类外，建议谨慎使用长链接，或可以考虑采用下面的方式：
        退化长链接：即用户在前台使用时，保持一个长链接链路，活跃时通过用户使                     用驱动网络保持链路可用；静默时通过设置 方式，亦或通过私有协议心跳方式来保持链路。一旦应用切换后台，且在分钟内没有网络交互任务则自行关闭链路，这样在用户交互体验和资源消耗方面取得一个平衡点；
        定时拉取询问：对于一些有需求的，我们可以采用一个云端可配置间隔时长的定时拉取询问方案。有三个重点，一是定时的间隔云端可以配置，下发更新到客户端后下次生效；二是拉取询问时，如果下发的指令有要求进一步时，可以复用已建立的链路，即前述退化长链接的模式；三是定时拉取询问时机在客户端要做时间上的均匀离散处理，避免大的并发查询带来带宽和负载的巨大毛刺；
        如果可能，优先使用内置的通道，比如的、的                 这个以工程师文化著称的公司，在做级基础设施建设时，却表现出了很差的前瞻性和系统思考的能力，的前身都没怎么普及使用就被替换了，这也意味着各种版本能力不 一致的问题。但无论怎么说，级的基础设施无论在性能、稳定性还是在效率上都会优于层自己实现的方案，实施推拉结合的方案。特别要提到的一点是，中国特色无所不在，国内运营商曾经封过的端口，也会干扰的端口，更别提这些底层服务的长链接会被运营商干扰。对于平台，还存在系统服务被各种定制修改的问题。别担心，办法总比问题多，保 持清醒；
⑥　小心重试
自动重试是导致后台雪崩的重要因素之一。在移动网络不稳定的条件下，大量及时的重试不但不能达到预期，反而无谓的消耗移动设备的电量甚至流量。因此，我们在重试前要有一些差异化的考虑：
        当前移动设备的网络状况如何，如果没有网络，则不必重试；
        重试设定必要的时间间隔，因为移动接入网络抖动到恢复可能需要一点时间，马上重试并非最佳策略，反而可能无谓的消耗电量。实践中，可以在一次连接或失败立即失败或超时时，过  秒后再试；
        重试应设定必要的总时限，因为三个服务器列表比较长，每个服务器地址都要重试和等待若干次，最终可能导致接入调度和服务器列表调度流转耗时过长，此时用户侧体验表现为长时间等待无响应。总时限参数可以参考前述区分网络类型的超时管理中的任务超时值。一旦某次重试成功，重试总时限计时器要归零；
        服务器下发特定错误码比如服务器故障、过载或高负载时，提示客户端停止重试并告知安抚用户，我们在强监控这个主题下有详细的讨论；
每个目标服务器地址的重试次数、重试总时限和重试时间间隔最好能做到云端可配可控。
特别需要提出的一点是，移动采用短链接模式实现交互时，广泛的使用了系统原生组件或者开源组件，这些友好的模块把超时和重试都封装起来，其缺省值是否适合自己的业务特点，需要多多关注。使用前，最好能知其然更知其所以然。
⑦　及时反馈
透明和尊重，会带来信任和默契，家庭如此、团队如此、用户亦如此。欲盖弥彰和装傻充愣也许短暂取巧，拉长时间轴来看，肯定要付出惨重的代价。及时和真诚的告知状况，赢得谅解和信任，小付出，大回报，试过都知道。
当发现因为网络不存在或者其它属于移动端设备链路的异常时，应该及时和显著的提示用户，让用户注意到当前有诸如网络不存在、 接入认证页面需确认等等问题，使用户可以及时处理或理解问题状态。
当发现是服务器问题时，应及时、显著和真诚的告知用户，争取用户的谅解。
网络异常提示或服务器故障通告等信息的呈现要做到一目了然，无二义和二次交互。
我们在强监控这个主题下有详细的方法讨论。
接《 海量之道系列文章之弱联网优化 六》腾讯云一直以来十分重视对初创企业的扶持，致力于赋能创业公司，降低企业的  成本和研发成本。年月日～日，腾讯云“云未来”大会正式宣布新版“云创业”扶持计划，进一步提升对创业公司的支持力度。近期，我们又对扶持计划进行了升级，新增了门槛更低的『孵化计划』，帮助更多企业完成向云计算的转变。
三大扶持政策
 孵化计划
孵化计划申请通过之后，申请企业将获得个月企业免费套餐使用权以及价值  万元的腾讯云产品代金券。
申请条件：

从事软件开发、互联网或移动互联网相关业务
已有产品发布或上线
已完成腾讯云账号企业认证
无任何腾讯云消费免费套餐除外

 起飞计划家万元
起飞计划申请通过之后，申请企业将获得价值  万元的腾讯云扶持资源包。
扶持资源包：

价值万元的腾讯云代金券
折云产品购买优惠，可减免万元
价值万元的上云迁移服务
 技术支持新品体验、技术咨询、解决方案

申请条件：

满足孵化计划申请条件
并获得种子轮、天使轮或  轮融资

说明：代金券有效期个月，购买时长最长 年。
 腾飞计划家万元
起飞计划申请通过之后，申请企业将获得价值  万元的腾讯云扶持资源包。
扶持资源包：

价值万元的腾讯云代金券
折云产品购买优惠，可减免万元
价值万元的上云迁移服务
价值万元的护航服务
价值万元的腾讯云培训服务
对架构师咨询新品体验、技术咨询、解决方案

申请条件：

满足孵化计划申请条件
并获得轮或以上轮次融资

说明：代金券有效期个月，购买时长最长 年。
申请流程

第一步：注册腾讯云帐号；
第二步：完成企业实名认证；
第三步：访问 “云创业”官网页面，点击页面下方相应扶持计划的申请按钮；
第四步：按要求填写相关资料；
第五步：等待审核结果反馈。

整个流程将在个工作日内完成。“云创业”扶持计划最终解释权归腾讯云所有。作者：莫卓颖

随着 互联网的蓬勃发展，并且伴随着产品功能的越来越复杂，对于技术人员来说最大的挑战就是如何在保证业务快速发展的同时，也可保证不断复杂的业务对用户体验的影响，其中对用户来说最重要的体验指标是如何快速、稳定的访问业务网站以及产品功能，既是网站的性能。本系列文章将会从前后端性能指标定义、性能工具使用、产品业务核心性能指标、前后端性能解决方案出发对这个性能优化体系进行完整的阐述。
建议阅读人群：前端工程师、后端工程师、产品经理
核心性能定义介绍：
由于涉及前后端的性能指标、定义非常多，本文将重点介绍对前后端影响比较大的指标，让大家对性能优化的核心指标有个整体的认识与了解
后端性能定义

时间：用户在浏览器输入网址名称网址后，浏览器通过查询服务器所需要的时间。
建立连接时间：根据协议要求，请求方浏览器等与接受方服务器经过一系列协商所需要的时间。
服务器处理时间：接收方服务器处理请求所需时间。
数据传输时间：从请求方浏览器等到接收方服务器以及从接收方服务器到请求方的时间。

前端性能定义：

白屏时间：用户浏览器输入网址后至浏览器出现至少图片为止。
首屏时间：用户浏览器首屏内所有的元素呈现所花费时间。
用户可操作时间  ：网站某些功能可以使用的时间。
页面总下载时间网站中所有资源加载完成并且可用时间。

影响核心性能因素：

时间：与设置的时间以及服务器有关。
建立连接时间：与用户、服务器的网速、带宽有关。
服务器起处理时间：与程序复杂度、服务器性能相关。
数据传输时间：资源大小、用户、服务器的网速、带宽有关。
白屏时间：与后端性能指标、前端以及页面结构设计。
首屏时间：与白屏时间以及页面首屏程序设计有关。
用户可操作时间：与页面结构设计相关。
页面总下载时间 与页面资源多少相关。

总结
 其实在性能优化领域还有很多细节值得探索和挖掘，这篇文章先让大家对核心性能优化有一个直观的了解以及认识，下篇文章将会从性能工具角度考虑，如何检测性能优化中遇到的问题。

原文链接：


相关推荐磁盘读写速率测试人人都可以做深度学习应用：入门篇上导语
表情已经充斥在网络的各个角落。现在流行 “能发图就不打字”。在我们的表情项目当中需要从形形色色的网络表情中找出对应的文字，作为关键字搜索。这些表情中提取出的文字，亦可用于我们后续的文本分析，情感预测，语义理解等。因此，表情文字识别成为了重中之重。这篇文章是我们在文字识别上的一些积累和成果，分享给大家。
产品背景
相信大家都有使用过表情的经历，一张合适的底图配上逗比的文字往往比冰冷的文字更加能表达当时的一个心理状态。基于这个背景，我们团队想在表情上做一些创新的尝试，让用户能够搜索到他们想要的表情。因此，搜索成为了这个产品的关键，而一个搜索方式就是用户根据文字找到想要的表情。
为了打通图片和文字的桥梁，我们把重心放在了文字识别，也可以叫做识别上。使用了公司的通用后，发现针对复杂多变的表情文字，很难达到理想的效果。如何在表情文字识别这个垂直领域上做一些突破？我们针对这个问题进行了深入的研究并且取得了一定的成果。
识别算法介绍
目前主流的文字识别方法都差不多。主要分为两个模块，一个模块定位文字位置，另外一个模块针对定位后的文字进行识别。针对这两个模块，我们使用的是   的方案。
文字定位
 是从逐渐演变过来的。相对于它的前辈以及   提出了  网络。通过输出  。再通过和其他一些方法进行 。该方法对比以往的方案，性能更优，减少了 里面繁琐的计算。当然目前目标检测还有其他  的定位方案，例如， 等，其中 更多聚焦在 上。

图  的基本结构

图 文字定位后截取的图片
文字识别
文字识别使用的  技术在语音识别里很常用，后来也被用于文字的识别。文字识别中使用的也是基于端对端的。基本思路是将定位后的图片，用网络提取特征，输出特征给网络，再由网络输出预测序列。输出的序列通过 、最优路径等方法进行解码，并计算出损失。

图 模型输出
识别方案介绍
为了达到我们想要的效果，我们主要在数据扩增，网络结构，以及参数调优上面做了大量的工作。下面我们会大致介绍部分使用到的调优方法。
数据扩增
通过人工去标注大量的文字定位信息和文字内容信息用于训练显然是不可行的。对比其他业务的标签数据，文字识别是比较容易通过机器去生成。我们研究了后台表情图片的文字大致分布，然后模拟生成接近真实图片的训练数据。
方法包括：
 我们找了各种颜色的背景图，以便于生成多样性，例如偏蓝色背景图，偏红色背景图，黑白背景图等等。
 结合语料使生成的图片更加接近真实数据集。
 控制各种类型图片生成比例。
最终，在定位中使用的训练数据集大约万张，而在文字识别使用中生成的数据集大约万张。我们训练两个网络使用不同的数据集，目的是避免

图 生成图片采样
网络结构
 文字定位最开始用的是网络，定位出来的坐标不够准确。定位后发现是由于网络学习容易饱和导致。后采用深度残差网络替换，使得能够进一步降低。
 模型使用的是一个改进的网络，以及一个双向网络。在改进版网络中，每一层都加上 以及。
 
 由于我们在中使用的是双向网络，因此在训练过程中，前几个 不计算损失。目的是让网络在第一次计算的时候，能拿到前后的信息。
  。定位的图片输入后使用对输入进行空间变换，增加模型健壮性。
  权重初始化使用何恺明论文里提出的  。
 图片输入网络之前使用双线性插值。
 参数调优
除去常规的参数调优，这里列举一些值得关注的参数调整
 针对文字定位部分，主要调整了 的 。由于文字一般是长方形，因此我们希望长方形的 生成的更多，减少其他不必要的 。
 输出的序列不宜过长，否则效果会下降。
评估对比
公司在文字识别中做了不少的工作。我们主要对比的就是他们的通用。对比的数据集是我们人工随机抽取的张图片，并且标注了 文字内容。对比数据如下：



　　
 
 




  










针对我们业务最关心的整句准确率，可以看出一定的提升。
总结
以上就是我们在表情识别方面的一些经验和积累。对于不同的特定业务，需要收集该业务中尽可能多的标签数据，并针对这些标签数据做好数据扩增。使用适合的和参数提高上限。
目前我们已经把我们的模型接入到了运营环境中。如下图所示：

图 运营环境实际使用
未来工作
深度残差网络能够有效对抗梯度问题，但是由于网络太深，参数太多，会引起训练以及预测时候效率的下降。今年的中提到了 ，一种新的网络结构，能够有效降低参数数量，加快训练速度。也许可以用于替换我们现有的。
感谢
在这里特别感谢  数据计算平台对我们项目提供的各种计算支持

                   
                     
    
        
      á    
    ´               
                  
               导语
继上篇《个性化推荐》之后，同学们反馈还不够详细，可能对没有做过推荐的同学初上手还是不知所措，或者会踩不少坑，故根据自己的经验分三篇出一个系列更加详细的指导文档主要针对有监督二分类问题，一步步带大家入门，做推荐并不难，但是要做好也确实不易，欢迎大家一起学习一起进步。
一、推荐分类
从自身接触较多的推荐场景，我把推荐分为两类吧，
、出号码包：这类场景一帮是针对某一具体事件，通过算法模型预测给出一批高潜的号码包，用于精细化运营。比如中的拉新、拉活、拉回流和流失预警，针对某个或某类活动的高潜参与号码等等。这里我姑且把它也算做推荐的一类，因为严格说来它是推荐的一个特殊场景，因为推荐一般是对多的情况，而号码包这类场景更多的是对。
、个性化推荐：真正意义上的推荐，对多的场景，在复数的物品中找出最可能符合用户喜好的推荐给他，所以看得出个性化推荐的效果和落地是最直接的，因为我能直接把用户喜欢的物品推给他而得到数据层面的落地，但是号码包一般还需要配合具体的运营策略进行再加工，所以落地较后者是不够直接，不够高效的，当然也能通过个性化推荐的方式去出号码包，这个后面也会讲到。
二、推荐步骤
、 第一步：充分了解清楚推荐场景。这是很关键但是很容易被忽视的一步，很多同学接到一个推荐项目就马上开始搭特征训练模型了，其实在这之前你应该充分和需求方反复沟通清楚她们的诉求，比如标的群体是什么、事件或推荐的物品是什么、最终能以什么样的形式落地以及她们需求的目标和期望的效果是怎样的等等。只有都搞清楚了每个细节，才能对你要做的推荐有个大概的把握，才好规划下面应该要怎么去做好。
、第二步：提取训练样本。作为模型搭建的第二步，着实关键，一个不精确的训练样本，会严重影响最终预测或推荐效果的可用性，而这里样本的正确选择，直接取决于对推荐场景的理解是否到位。下面讲讲具体方法：
我们用的推荐算法更多是有监督的学习，就拿逻辑回归这类二分类算法为例，有监督的意思是我们是从已知去预测未知。首先针对一批用户群体，我们已经知道了他们针对这个推荐场景下的行为结果标签，对于二分类问题也就是或正样本或负样本，如参与了活动或没有参与，点击了游戏或没有点击等等，一般情况下有行为的用户作为正样本，当然也并不绝对，如流失预警中，流失用户是作为正样本的，因为我们的目标是预测可能会流失的用户。所以正负样本的选择取决于你的目标是什么。 
好，搞清楚了你的正负样本分别是什么后，再来看看应该分别选多少正负样本正负样本比例，这里可能有两种不同的情况：

 正样本是少数。比如活动的参与、游戏的点击等等，这类情况正样本较负样本一般是极少的，所以我们就需要在充分保留正样本的基础上来选负样本，所以这类情况建议保留全部正样本，再按：的比例去选择负样本，具体是多少并没有严格规定，可根据数据量适当决定，一般建议、比较合适。

 正样本是多数。比如流失预警，流失用户作为正样本占大多数，负样本的留存的是少数，那这种情况就需要对正样本做一个抽样，再按：的方式去选取负样本。


解决了正负样本的比例问题之后，就需要去框定你的群体范围，这个其实就是根据第一步的推荐场景来定的。这里存在两个点：

 取什么样本？比如拉新，那就需要取新用户群体；如果是流失预警，那就需要取还在活跃的用户群体；如果是某个活动，那就需要取在这个活动中有曝光的用户群体。总之取的样本中对正负样本的条件是公平的。

 取多长周期？这其实是个比较的问题，可以从以下几方面考虑：

按需求，也就是根据具体推荐场景要求来定。比如需求的推荐场景就是月流失预警，那你的样本周期就选取一个月就好了，因为我们一般月流失的定义就是上月活跃下月流失，所以取一个月就比较自然。

按频率，如果这个推荐场景是频繁做的，且变化比较大的，也就是说你的模型可能需要经常训练的，那可以根据这个变化频率来设定样本周期。比如例行化的活动，这类场景可能变化比较快，需要根据最近的情况来预测后面几天的情况，就可以把样本选取的周期缩短一些，具体还需根据具体场景情况来定。

按数据量，某些场景可能用户的行为是比较稳定的，是可累加的，这类场景就需要考虑样本的数据量了，太大的数据量可能增加计算和存储，所以这里就需要在周期、数据量和你所拥有的计算资源上做一个平衡了。比如游戏推荐场景，用户在某类游戏场景下，对游戏的偏好一般是稳定的，不会随时间发生太大的变动，也就是说可累加，这里就根据数据量来定，一般情况下，如果单日数据量不是特别大，可以考虑覆盖天的样本量，这样也能抹掉一周不同日带来的一些周期性变化。




最终提取完毕的样本库表字段是这样子的：

号码包




日期分区
用户标识
标签或











个性化推荐




日期分区
用户标识
物品标识
标签或











如果最终训练的时候，你的样本表和特征表可以分开输入模型来训练，在样本表时间分区上就有个需要注意的点：处于对例行化的支持，我们加入的日期分区，但对于一次训练来说，这里的日期分区一般只表示为一个日期分区，因此如果样本选取的周期为多天的情况，就需要保留多一个样本表存储保留每天日期分区的样本便于后续关联对应的特征表因为为了保证不同天样本在特征周期上的一致性，一般会采取每天的样本关联前一天的特征，再合并关联后多天的数据用于模型训练，后面会详细讲到。
、第三步：搭建特征。样本准备好了，模型的训练就还剩下特征的搭建和算法的选择了。如果说样本的好坏决定了你的方向正不正，那特征的好坏就决定了你的效果大致高低水平，是整个过程最难最繁琐的一步。所以这里又划分出了大概两种不同倾向的做法：
如果使用的是这类线性模型，想要刻画好非线性问题绝大多数现实中的问题都是非线性的，就需要把特征做的足够复杂和准确，从而引入足够的非线性性来弥补算法本身的局限，使其能够拟合复杂的问题，可以说在这类算法下特征的好坏直接决定了模型的好坏，所以对开发同学在业务和数据上的熟悉和敏感程度要求很高，会花不少时间在特征的选取、组合等操作上。
但如果你对现在的业务不够熟悉对数据不够敏感，是不是就不能搭建一个高效的模型来呢？也并不是，可以使用一些非线性的算法，比如、、乃至，这些算法本身对特征提取的要求就没有那么高了，甚至能自动筛选出对模型有价值的特征，自动去做组合特征，一定程度上减少人工提取组合特征的工作。
如果在缺乏特征数据的情况下，还可以通过协同过滤算法，只用用户对物品的对的行为数据矩阵来做基于相似度上的推荐，这里又可以大致分为基于用户的和基于物品的；当然还可以通过这类文本算法把用户有行为的物品或其他少量特征扩展为高维空间向量，用向量间的相似度去做推荐，以弥补特征不足的现状。这些方法后续会慢慢介绍。
那到底选哪种做法比较好呢？我想更多的人肯定选择 ，能简单的输出效果不就好了！嗯同意，但是方式并不是说不需要搭特征了，只是对特征的复杂度和精确性要求没有那么高，但是好的特征不是更能事半功倍，所以如果特征搭的好，一个简单的算法可能就会达到很好的效果，毕竟复杂的算法虽然对特征要求不高，但是相应要求的计算量也可能会较大。所以经常听到这样的事实，你用复杂的模型训练了好久出来的效果，可能还没有一个不懂模型的人用经验规则简单排序出来的效果好，说明对业务和数据的敏感在效果提升上的重要性。套用一句话呵呵，算法是死的，特征是活的。所以一开始还是建议同学们从特征入手，了解清楚如何搭建高效的特征，后续配合上合适的算法才能如虎添翼。下篇会着重讲下特征搭建的方式方法。
后续文章计划：
手把手带你做推荐二：特征搭建
手把手带你做推荐三：算法选择
相关推荐
个性化推荐 月  日，腾讯云在 「云未来」峰会上推出了战略新品——智能云，宣布将腾讯积累近  年的  能力向政府、企业和开发者开放，其中首批开放计算机视觉、智能语音识别、自然语言处理的三大核心能力。腾讯云技术社区陆续推出了系列文章，向普通开发者分享如何快速接入并使用这三大  能力，节省自身的开发成本，同时极大提升开发效率和用户体验。
本文将为广大云开发者介绍如何使用万象优图服务的  。
、开发准备
在使用万象优图服务的   前，你需要先下载  ，下载地址：地址 
 前期准备
获取项目，，_和_；
 获取方法

获取：

在开发环境命令行直接执行下面的命令即可导入  包。
  
然后，参考说明和中提供的，开发代码即可。对应版本的  对应版本的 。

直接下载源码集成：

您也可以直接下载上提供的源代码，集成到您的开发环境即可依赖。
、 详细说明
 生成签名
．接口说明
签名生成方法，可以在服务端生成签名，供移动端使用。
其中签名分为种：多次有效签名有一定的有效时间单次有效签名绑定资源，只能生效一次签名的详细描述及使用场景参见鉴权服务技术方案。
． 方法
签名函数会自动根据传入的，进行不同方式的签名，这里对使用者是透明的。
加强版的签名：
 ___  
版本的签名：
 __  =
版本的签名：
 _  =
． 参数和返回值
参数说明：



参数名
类型
必须
默认值
参数描述






是
无
需要操作的




是
无
签名过期时间戳



返回值：



参数名
类型
参数描述






响应码，请求正常时为




 错误码，成功时为




错误信息




 返回数据




签名串



示例代码：
 生成私密下载
 = __
 =   
 = ___  
_ = _
 _ _  =  

 生成上传签名
 = 
 =   
 = ___  
  
 图片上传
． 接口说明
用于图片的上传，调用者可以通过此接口上传图片并获得图片的和唯一标识用于调用其他。
． 方法
    = = _= ={}
 _ _   =   =  _ =   = {}
． 参数和返回值
参数说明：



参数名
类型
必须
默认值
参数描述






是
无
本地图片文件路径


_

是
无
编码后的字符串数据




是
无
空间名称




否
空
用户自定义文件名




否

开发者的账号体系的 如果没有，请使用默认值




否
空
上传成功后，用户自定义的回调参数




否
空数组
可选处理项，目前支持‘’ =  用于指定上传是中携带的请求参数



返回值：



参数名
类型
参数描述






响应码，请求正常时为




 错误码，成功时为




错误信息




 返回数据




图片的管理




图片的下载和访问




图片的唯一




图片宽度




图片高度



示例代码：
 = __
   =   
   
 图片复制
． 接口说明
用于图片的复制，调用者可以通过此接口复制已经上传的图片并获得新图片的和唯一标识用于调用其他。
． 方法
    =
． 参数和返回值
参数说明：



参数名
类型
必须
默认值
参数描述






是
无
空间名称




是
无
图片唯一




否
    开发者的账号
体系的 如果没有，请使用默认值



返回值：



参数名
类型
参数描述






响应码，请求正常时为




 错误码，成功时为




错误信息




 返回数据




图片的下载和访问




管理



示例代码：
 复制
   =  
  _ = _
   
 图片查询
． 接口说明
用于图片的查询，调用者可以通过此接口查询已经上传的图片并获得图片的各种参数信息。
． 方法
    =
． 参数和返回值
参数说明：



参数名
类型
必须
默认值
参数描述






是
无
空间名称




是
无
图片唯一




否

开发者的账号体系的 如果没有，请使用默认值



返回值：



参数名
类型
参数描述






响应码，请求正常时为




 错误码，成功时为




错误信息




 返回数据




图片的下载和访问




管理




图片的唯一


_

图片的上传时间




图片的大小




图片的值




图片的值




图片的宽度




图片的高度



示例代码：
  查询管理信息
   =  
 图片删除
． 接口说明
用于图片的删除，调用者可以通过此接口删除已经上传的图片。
． 方法
    =
． 参数和返回值
参数说明：



参数名
类型
必须
默认值
参数描述






是
无
空间名称




是
无
图片唯一




否

开发者的账号体系的 如果没有，请使用默认值



返回值：



参数名
类型
参数描述






响应码，请求正常时为




 错误码，成功时为




错误信息




空字典



示例代码：
   
 图片下载
图片的下载直接使用图片下载进行下载，
请求示例：
  
 
如果在控制台上面设置了空间样式或者样式下载别名，并且设置了样式分隔符，则访问样式图片的方式如下：
_样式分隔符样式名。
注：空间样式和样式下载别名的名字统称样式名。例如设置了样式名“”，样式分隔符“”则样式图片的访问方式如下：
  
 
若开启了防盗链，图片下载只能是私密下载，即必须_ =签名。请求示例
 =

 
 导语：本次很荣幸能邀请到邵宗文为我们带来《 腾讯网托管平台 》主题分享。邵宗文有多年运营开发、海量运维和架构规划经验，精通海量服务的架构设计和自动化运维建设，目前专注于大数据，高并发的实践探索。
他曾任新浪数据库平台主管，后来负责、新闻客户端、快报，视频，财经，体育等业务的后台数据运维规划工作。
演讲嘉宾：腾讯网络媒体事业群 运维工程师 邵宗文演讲主题：腾讯网托管平台引言
   对于容器实例的日志收集，并没有提供原生的解决方案。但提供使用 命令查看容器实例运行时的日志。 命令实现的基本原理为：容器运行时默认将标准输出和标准错误中的日志输出到磁盘上保存。保存至主机目录：_目录。用户调用 命令时，读取对应的日志文件中的数据，将数据回传给，再由返回到用户。从而实现用户对日志的查看。
   腾讯云容器服务利用 命令，实现在控制台即可查看对应容器实例的日志，并且提供查看某个特定时间段的日志的功能，这极大的方便了用户对容器实例中的程序进行定位和跟踪。但是，由于在容器实例日志保存在本地，当程序中大量打印日志时，很容易造成主机上的磁盘空间大量被占用。在日志服务上线一段时间后，发现用户遇到这种情况时，一般是手动去清理日志。我们就考虑是不是有比较简单的方式，在集群节点对日志进行定期清理和回卷。
通过服务实现日志定期清理和回卷
   是个十分有用的工具，它可以自动对日志进行截断或轮循、压缩以及删除旧的日志文件。例如，你可以设置，让日志文件每天轮循，并删除超过个月的日志。配置完后，的运作完全自动化，不必进行任何进一步的人为干预。   但如果按照之前的部署方式，需要手动在每个节点上都安装和配置对应工具。如果通过容器服务编排的能力，将通过中服务的方式部署到各个节点上，这样既可以实现只需要一次部署，部署到所有节点。并且通过容器的方式保证了配置的一致性。
 具体的实施方案如下图所示：
 
   方案的具体实现是在集群中，创建资源实现。资源会在每个节点上都部署一个的容器实例，并且在容器实例中设置映射主机的日志目录，从而实现日志的定时清理和回卷。
 创建的示例如下：
 
 

   

  
    
      
         
         
       
    
      
        
         
        
           
        
           
            
           
            
           
            
        
          _
            
          _
           
          _
           
      
          
              
            
          
              
            
          
              
            
使用这个文件，可以直接在中进行部署。
    _
  

在示例的文件中，服务将按照定时小时的对日志进行回卷，回卷超过个副本后则会对日志进行清理。如果有需要，可以修改相应的参数，设置不同的回卷规则和清理规则。详细的参数说明可以参考：。
通过修改参数进行回卷和清理
由于的日志收集，底层是通过来实现。而提供了一定的日志回卷和清理功能。可以通过在的启动参数中，增加参数实现对日志的回卷和清理其中参数设置日志一个副本的最大值，设置日志的最大的副本数。超过这个副本数则会对日志进行删除。
具体的修改过程包括三个步骤：、创建
{
  
  {
     
    }
}

参数说明： 设置单个容器日志超过则进行回卷，回卷的副本数超过个就进行清理。
、修改 服务配置文件在 文件中添加启动参数=
、重新启动服务
 
  导语：       

  到，从提出 ，取消全连接，到中计入层，减少  ，到的以及到中与网络思想的结合，一直都在逐步改进，本文主要是阅读的论文学习总结。
论文地址：

介绍了卷积网络在计算机视觉任务中。分析现在现状，本文通过适当增加计算条件下，通过   和  来扩大网络。并说明了取得的成果。
 
介绍后，推更深网络模型的提出。然后介绍 考虑了内存和计算资源，五百万个参数，比六千万参数的  少倍，  则是 的参数三倍多。提出了 更适合于大数据的处理，尤其是内存或计算资源有限制的场合。原来 架构的复杂性没有清晰的描述。本文主要提出了一些设计原理和优化思路。
   

避免特征表示瓶颈，尤其是在网络的前面。前馈网络可以通过一个无环图来表示，该图定义的是从输入层到分类器或回归器的信息流动。要避免严重压缩导致的瓶颈。特征表示尺寸应该温和的减少，从输入端到输出端。特征表示的维度只是一个粗浅的信息量表示，它丢掉了一些重要的因素如相关性结构。

高纬信息更适合在网络的局部处理。在卷积网络中逐步增加非线性激活响应可以解耦合更多的特征，那么网络就会训练的更快。

 空间聚合可以通过低纬嵌入，不会导致网络表示能力的降低。例如在进行大尺寸的卷积如之前，我们可以在空间聚合前先对输入信息进行降维处理，如果这些信号是容易压缩的，那么降维甚至可以加快学习速度。

平衡好网络的深度和宽度。通过平衡网络每层滤波器的个数和网络的层数可以是网络达到最佳性能。增加网络的宽度和深度都会提升网络的性能，但是两者并行增加获得的性能提升是最大的。所以计算资源应该被合理的分配到网络的宽度和深度。


     
 网络优异的性能主要源于大量使用降维处理。这种降维处理可以看做通过分解卷积来加快计算速度的手段。在一个计算机视觉网络中，相邻激活响应的输出是高度相关的，所以在聚合前降低这些激活影响数目不会降低局部表示能力。

    

大尺寸滤波器的卷积如，引入的计算量很大。例如一个  的卷积比一个卷积滤波器多=倍计算量。当然滤波器可以学习到更多的信息。那么我们能不能使用一个多层感知器来代替这个  卷积滤波器。受到的启发，用下面的方法，如图进行改进。

卷积看做一个小的全链接网络在区域滑动，我们可以先用一个的卷积滤波器卷积，然后再用一个全链接层连接这个卷积输出，这个全链接层我们也可以看做一个卷积层。这样我们就可以用两个卷积级联起来代替一个 卷积。如图所示。

     

空间上分解为非对称卷积，受之前启发，把的卷积核分解为来代替的卷积。如图三所示，两层结构计算量减少。


 
    
引入了附加分类器，其目的是从而加快收敛。辅助分类器其实起着着的作用。当辅助分类器使用了或时，主分类器效果会更好。
    
池化操作降低特征图大小，使用两个并行的步长为的模块  和 。是一个池化层，然后将两个模型的响应组合到一起来更多的降低计算量。

 
把卷积替换为个卷积。包含个部分。第一部分是，使用了个卷积代替了传统的；第二部分减小了 ，增多了，为，使用了结构；第三部分增多了，使用了卷积池化并行结构。网络有层，但是计算量只有的倍。

     
输入，模型计算得到类别为的概率

假设真实分布为，交叉熵损失函数

最小化交叉熵等价最大化似然函数。交叉熵函数对逻辑输出求导

引入一个独立于样本分布的变量
 
  
 。
=，=。，=。
，=，ϵ=。
=每个，衰减。
梯度最大阈值=。
     
对于低分辨有图像，使用“高分辨率” 。简单的办法是减小前个卷积层的，去掉第一个层。做了三个对比实验，实验结果

     
实验结果和对比
 

 
提供了几个扩大规模的设计原则卷积网络，并在其背景下进行了研究初始架构。这个指导可以导致很高的性能视觉网络有一个相对较小的计算成本比较简单，更单一架构。参数有效减小，计算量降低。我们还表明，输入分辨率×仍可以达到高达高质量结果。这可能有助于检测较小物体的系统。 我们研究了如何在神经网络中进行因式分解和积极维度降低可以导致网络具有相对低的计算成本，同时保持高质量。较低参数计数和附加正则化与批量归一化辅助分类器和标签平滑的组合允许在相对适度的训练集上训练高质量网络。
本文参考的博客


简介
整体认识
 是一个围绕速度、易用性和复杂分析构建的大数据处理框架。最初在年由加州大学伯克利分校的开发，并于年成为的开源项目之一。
在整个大数据系统中处于中间偏上层的地位，如下图，对起到了补充作用：

基本概念
框架是提供了的一个用于并行执行任务的框架， 是一个把大任务分割成若干个小任务，最终汇总每个小任务结果后得到大任务结果的框架。


第一步分割任务。首先我们需要有一个类来把大任务分割成子任务，有可能子任务还是很大，所以还需要不停的分割，直到分割出的子任务足够小。

第二步执行任务并合并结果。分割的子任务分别放在双端队列里，然后几个启动线程分别从双端队列里获取任务执行。子任务执行完的结果都统一放在一个队列里，启动一个线程从队列里拿数据，然后合并这些数据。具体可参考


核心概念

   弹性分布数据集介绍

弹性分布式数据集基于的研究论文或是框架中的核心概念。可以将视作数据库中的一张表。其中可以保存任何类型的数据。将数据存储在不同分区上的之中。
可以帮助重新安排计算并优化数据处理过程。
此外，它还具有容错性，因为知道如何重新创建和重新计算数据集。
是不可变的。你可以用变换修改，但是这个变换所返回的是一个全新的，而原有的仍然保持不变。
支持两种类型的操作：

变换

行动


变换：变换的返回值是一个新的集合，而不是单个值。调用一个变换方法，不会有任何求值计算，它只获取一个作为参数，然后返回一个新的。
变换函数包括：，，，，，，和。
行动：行动操作计算并返回一个新的值。当在一个对象上调用行动函数时，会在这一时刻计算全部的数据处理查询并返回结果值。
行动操作包括：，，，，，以及。
 共享变量 

广播变量 

累加器


 


：

 接受的注册请求，统筹记录所有的、等资源，并跟踪结点的活动状态；
接受中的注册请求 这个请求由  端的  发出 ，为在上分配、资源，生成后台进程；之后跟踪和的活动状态。

：负责接收的指示，为创建进程。在和之间起着桥梁作用，实际不会参与计算工作。

：负责用户侧逻辑处理。

：负责计算，接受并执行由划分的任务，并将结果缓存在本地内存或磁盘。


部署
关于的部署网上相关资料很多，这里进行归纳整理
部署环境

 

  
 
 

安装
由于会利用和，所以需要提前配置，配置教程可以参考：
          
安装教程_单机伪分布式配置_
安装
在安装好的基础上，搭建，配置教程参考：
快速入门指南 – 安装与基础使用
安装
作为编写的源生语言，更新速度和支持情况肯定是最好的，而另一方面本身语言中对于面向对象和函数式编程两种思想的糅合，使得该语言具有很多炫酷的语法糖，所以在使用的过程中我采用了语言进行开发。

最终编译成字节码需要运行在中，所以需要依托于，需要部署

作为一款开发的神器，在中当然也可以使用，有两种方式

  安装 

下载官网已经提供的集成好的 

基于以上两步已经可以进行开发，需要用到自带的编译的同学可以装下官网下载地址，本人一直使用进行包管理就延续的使用。


简单示例： 

开发： 
包管理：
开发语言：

创建项目
 跳过项目模板的选择

下载模板
 对项目添加属性：          
 调整下编译器的版本，与版本对应：                  
从 中移除 由于在中添加了 的依赖项，而是依赖于的，的包已经存在于 中：                
 添加包

 创建 和，用来作为的两个简单示例
 
源码
原理如下图：

参考文献：


_=__=____=___









相关推荐
【教程】核心概念如何依托腾讯云完成海量数据的存储和备份假如你是一个老司机，一眼看到一个这样的外网带宽曲线，你会有什么反应？

我擦，流量几乎掉底了，从一天前开始的，至今仍未恢复，这个服务是挂掉了吗？
这其实是近几个月在微信上异常活跃的儿童失踪预警平台的后台服务器的流量监控图

的发起人张永将，和我们一样有一个做中国的互联网安珀警戒 的梦想，从发起时我们就一直在尝试各种合作。去年底终于完成了大量前期工作，准备开始发力面向全国用户做推广，作为互联网老兵，我们深知要做一个面向海量用户的大平台需要面临巨大的技术挑战，于是邀请入驻到“云公益”计划，由腾讯云提供云资源和必要的技术支持。
果然，放量没多久，提出了新的需求：原来提供的台服务器不够用，而且面向全国的地区覆盖不够好，希望可以提供多几台分布在其全国各个机房的服务器来协助分发。
这其实是很常见的一类问题：用户需要的是一个墙上的洞，而他以为自己需要的是一把冲击钻。在这个案例中，需要的是更多的分发数据的能力，而他以为自己需要的是更多的分发数据的服务器。
的业务场景很特殊，每当有儿童走失案例上报，就会向走失地点附近的一大片区域进行和微信的消息推送，像这样

随后短时间内该片地区的大量的用户会点击这个消息，给服务器带来很大的流量冲击。

在大多数时间里面，服务器又没有什么压力。
因此如果我们面对服务器的峰值流量来做系统选型的话，系统就不得不设计的非常高规格，同时使用率必定非常低。
还好在云时代，我们不需要去买自己的“冲击钻”，分发能力早就通过、优图、这样的产品向公众提供服务了，所以问题变的很简单了：如何启用来提供透明的动静态数据的加速服务。
所以我们婉拒了增加服务器的需求，转而协助进行分发加速配置。

同时也协助配置缓存过期策略，确保动态数据透传，静态数据有效缓存，并且打开了“中间源”做二级的缓存。

经过的两级分发缓冲之后，服务器的压力急剧降低，流量监控出现了文章开始处的掉底曲线。以后需要进行大范围消息投放的时候，再也不用畏首畏尾，担心服务器会不会撑不住了。
同时服务器的真实也被隐藏到了后面，因此安全性也得到了很大增强。

相关推荐 部署在腾讯云的公益网站遭受了一次攻击 内部体验腾讯负载均衡的新功能零  自我介绍
我们是队，来自中国科学院大学。
第一次接触这样的比赛，前期花了很多时间来尝试错误的处理方式，特征筛选方式，靠了很多拍脑门决定的以及突发奇想的特征拿到了初赛名。想一想真是全看运气。
 不过，也是有很多特征是经过一个很煎熬的过程，直到某一刻才发现的。比如我在这篇文章中重点介绍的两个特征，_
一  特征概述
对特征工程的理解
特征工程是成功的。
单特征得分很高的，并不一定和其他特征很搭。
特征工程本质上是求特征的最优组合，是一个搜索问题。
你得先有特征才行。
制造交叉特征
这两个特征相关性不能太强，相关性太强，做了等于白做。比如第一个特征为，第二个特征为，假设相关性太强以至于=那无论你怎么交叉，你都是在用这一个属性。
尽量避免出现这样的交叉特征组合，保证每个特征只有一个交叉特征，原理同。
二阶的交叉特征其实都可以自动化生成，但其实对解决问题来说，并不一定有好效果。
你的交叉特征只是一部分。
由专业知识提取的特征
这才是解决问题的核心。
在这个回流率预估的情境下，又知道广告位价钱不等，所以我们可以先考虑一下，广告位有什么特点。
为什么会有推广计划，推广计划决定了对象，那么推广计划对于之外的回流率肯定很低吧？
有一个很重要的，但是又常常被忽略的特征，停留时间。
二 特征详解
铺垫了这么多，其实就是为了讲这俩特征。



还记得那天我刚加进去二群一群满了，抱着投桃报李的心态，这个特征我在二群提出来。。。可惜太年轻了。
当天我的快爆炸了，都是来要特征的。之后我在群里开源了，结果他们不会用。。。。。。。
这个特征就是贝叶斯平滑后的的回流率。
曾经有一段时间，我统计了的回流率，但是点击次数有的特别少，还有的竟然点击转化，这个要是当特征，简直爆炸。
我想，次数多的比较可信，但是次数低的怎么处理呢，而且次数低的在未来出现的次数会很多，又不能删掉，咋办呢？
于是我找到了一种方式：贝叶斯平滑
 

很明显，处理之后不会出现转化率为或的情况了，而且转化率连续性更好了。
这个使得点击次数多的，转化率几乎不变，次数少的，转化率大变。 
其实这个特征基于一个假设。
我先统计了所有的训练集然后放到训练集上当特征，其实这时候应该是过拟合的，，线上提高了两个千分点。
我思考了一下，可能所代表的广告位其实无论放啥，平均回流率都差不多，所以你统计的越多反而越准。

_

_=对同一用户，记录与上次点击的时间差，如果是第一次点击，置为
这个特征一开始我觉得应该不会有用，因为这个数不准。
，它解决了连点好几次的问题啊，这个就是。
复赛开始了，看到这个数据集大小我已经瑟瑟发抖，有空再继续更新    吧。。。  。。。
目前市面主流用于服务器进行计算的系列，主要有，，，，，这些卡性能指标有着不同差异导致成本上也相差很多。
鉴于是当下最火的技术方向，加速运算在这方面又有天然的优势，所以官方在介绍其性能差异时主要针对各个计算框架来展示其加速比。
而针对于图像压缩处理这样的场景来说，其计算量较又有着很大的差异。为此有必要针对于图像压缩处理这样的场景进行性能分析。
图像压缩流程
首先来看我们的应用的计算过程，部分代码在上运行，部分代码在上运行。在和上的数据需要通过在主存和显存之间进行交换。

数据交换阶段
以三通道的图像为例，从读取图片数据，解码数据，图像，编码图像，拼接图像的完整时序如下图所示：

进入的第一步是图像解码后的数据拷贝到显存，而拷贝是通过 来进行的。那么 的以及多卡时的物理拓扑就将决定数据拷贝延迟。
就目前我们配置的标准设备而言，不直接与相连，而是每两卡挂在 上， 再连接到，”            ”
每个 共五个端口，其中一个端口是和做连接，剩下的四个端口用于连接，我们拿到的设备每两卡挂一个，每卡的 为，理论传输带宽为。当配置卡时，每卡的 为，理论传输带宽为。与之间的 为。
那么如果同时两卡或四卡有数据在与之间进行传输时。那么的带宽将被共享。鉴于图片压缩这样的应用场景各个之间无数据共享的需求，那么无需配置 。
而采样直连这样的拓扑结构每张能独占的传输带宽。 实际测试单卡传输带宽双向。而多卡共同传输时带宽下降不显著。
标准设备物理拓扑

                                        
                                              
                                              
                                              
                                              
                                              
                                              
                                              
                                              



       = 
      =             
      =             
      =           
      =      
      =        
设备物理拓扑

                 
                
                



       = 
      =             
      =             
      =           
      =      
      =        
当在上述两者物理拓扑上进行图像压缩时，得到如下数据拷贝延迟数据传递的数据：分辨率单通道解码后字宽采样因子，：



设备类型
单卡线程数目
使用卡数
时延





























从上述实测延时上，也反映了这样的物理拓扑存在的带宽竞争问题。
数据计算阶段性能
不同型号的其计算能力间存在一定的差异，性能指标上也有所不同。以下是给出的各卡之间浮点运算能力，显存大小，显存带宽，与的连接方式，，以及功耗做了对比。

而图像编解码压缩过程中对浮点运算性能要求不高，速度快慢与的数量有较大关系。在缩放阶段需要目标像素宽高的线程来处理目标像素的生成。
各卡的 数目






















相对于机器学习的计算量，图像处理计算量就显得很少。上述物理核心数量虽然各不相同相较于少量计算而言，虽然处理耗时上存在差异，但就图像压缩处理场景而言，并不构成主要矛盾。
以下是在和上实测得计算过程消耗时延




单卡线程数目
使用的卡数目



含延时









































由上述实测时延与使用率分析，图像处理再上的消耗相对较少不构成图像压缩处理的主要矛盾那么对的 数目与浮点能力的要求就低很多。
测试过程中同样发现当单卡上的线程数目增加时在上运行的核函数增长会导致上的 时间变长 同时随着运行的卡的数目的增加，显存上内存分配释放的 时延会呈现数量级的增长。经过与的同学交流，该问题主要与运行的卡数量和卡自身显存的大小有关系。
单卡单线程处理过程

单卡单线程，数据拷贝没有竞争，核函数执行阶段没有延迟，数据准备好之后就开始进行计算。
双卡每卡四线程处理过程

每卡四线程处理流之间对形成竞争，核函数上也存在一定的延迟。
八卡每卡单线程处理过程

单机上运行的卡越多内存分配释放的 层面的调用延时就增长的越迅速，成数量级增加远远的超过了正常计算时延。
整体影响因素和性能结论
通过上述分析，针对图片压缩处理这样计算量相对较小，数据拷贝频繁的应用场景，尽可能的减少 上的传输带宽的竞争。适当控制每卡上运行的处理流，单机配置少量的卡，尽可能的将动态分配的内存静态化，这样有利于在利用率和处理时延上取得平衡。因为数据传输延迟远远大于实际计算延迟，所以我们倾向于将 的带宽跑满作为最大的处理量。其次的物理设备不需要最好的，普通的 系列的计算性能已经能满足该场景下的计算加速在物理拓扑上最好采用直连的模式与物理均匀分配连接。
利用当前的架构，在加速所取得的现网时延编解码部分没放到上进行



分辨率












































当图像分辨率超过之后，使用进行图像压缩相对于纯时延降低了以上。作者：李光，现任职于腾讯社交网络运营部织云产品团队，负责织云监控告警平台规划与运维新产品开发工作，具有多年业务运维、运营规划经验。
相关推荐：腾讯业务监控的修炼之路一

概述
本文作为监控告警产品的专题系列的第二篇文章，主要讨论的是层的监控服务器状态与性能、网络设备状态与性能、网络流量分析等等，从前文所述的监控类型来说，层一般来说属于基础监控层面。

、、这三个概念想必大家是耳熟能详了，其实就是云计算的三个分层，基础设施即服务， 平台即服务，软件即服务。
层其实就是一些显性可见的资源对象，如运维小伙伴经常接触的服务器、网络设备与存储设备等等。用一座大厦类比的话层就好比是负责了最基础的水电通信等能力。上层的服务都是依赖于层，假定层管理不好，那么与的高效与可控管理其实也是非常难，甚至可以说空谈了。
层的不稳定会直接导致企业对外的服务质量大打折扣。笔者以前在负责手机业务运维的时候，名下有多的机器，如果没有一套高效与可度量的管理平台，光凭人肉去管理多的机器，那基本和噩梦差不多了。
的监控
对于层的监控，本质来说就是监控组成层的各个资源对象，那么资源对象代表什么呢？ 例如物理服务器、交换机、一条专线与一个公网等等都是一个个资源对象。通常来说对于资源对象的监控可以分为以下个维度。

状态的监控：通指设备的的状态，如设备的存活状态、网络设备的端口状态、电源、风扇状态等。
性能监控：通指设备内存大小，端口流量包量、利用率 等等
质量监控：通指设备的丢包率、错包率、网络访问的延时等等
容量监控：通指设备的负载使用率、专线带宽使用率、网络设备的负载使用率、服务器的负载使用率等等。

监控产品分层结构
对于绝大多数主流商用或者开源监控告警产品来说，一般都是采用这种类似的分层方式，当然这里是一种高度抽象后的产品分层架构。
位于最底层的就是数据采集，采集到的原始数据是监控最初的输入。
数据采集
通常来说企业级的监控系统应该是支持多种采集方式与多种采集对象的，例如可以用主动上报、也要能支持、、等多种协议。
而针对于层具体支持的采集对象应该不少于物理服务器、操作系统指标、网络设备、网络内会话信息、物理专线、网络出口等等。
不同的采集对象采用的采集方式也是不同的，例如：服务器系统指标可以用上报、网络设备状态、流量、包量可以用采集等，具体采用哪种采集方式要根据业务场景与所需场景的数据量与类别而定。织云同样也支持多种采集方式与多种采集对象。
在大数据的时代背景下，数据采集这部分建议针对某一个具体的对象尽量采集的大而全，可能有些数据采集上来暂时没有直接用途，但是随着数据量级与数据间关联性的变化，对大量的原始数据，清洗、分析、加工后便能催生更多的数据消费场景。
基础概念
监控告警是对某一个具化的对象做采集、存储、分析、展示、告警、处理的过程。为了便于读者对于后文与后续系列文章的理解，这里笔者先集中描述一下设计织云监控告警平台时应用的一些概念。对于监控告警，织云的理念是先纳管对象再监控对象，这也是海量运维的最佳实践。
告警监控对象
定义：中管理的一个具体资源对象或者是一个自定义逻辑示例：一台物理服务器、一个三级业务、一个实例，这些均是对象备注：对象与对象之间也有是关联、包含、继承等关系
告警监控指标

定义：一个或多个特性或特性间的四则运算产生的结果的集合。
示例：使用率、内存使用率均是特性 而例如：成功率=成功的请求总数总请求数 这个就是多个特性的四则运算。
备注：并不是所有监控指标都可以用来做有效的告警指标，这部分是按需所用。

告警监控类型

定义：确定了一部分的告警对象的告警指标采取一类的算法计算。
示例：单机性能告警就包含了多个针对于服务器这个对象的监控告警指标，如 使用率、内存使用率、应用程序内容使用量等。

告警规则

定义：告警对象告警指标告警产生条件告警通知收敛规则阈值、发生次数、统计时长等等，应用于告警策略。
示例：例如对某台交换机创建了使用率时的告警规则。

告警策略

定义：告警对象告警类型告警规则可多个 对应一个告警策略。
示例：对一个三级业务下的全量服务器创建了一条基础告警策略，下图中的每一条都是一个告警规则。
备注：对于告警策略，织云的理念的是对象精简化。

为什么会这样说？在实际的生产环境中，一个运维同学负责几十个业务是常态，如果这几十个业务对应的不同的告警策略有上百个，在实际的运维过程中其实是不可量化管理的。 所以告警策略要同时包含不同的告警类型与具备可继承性。

告警

定义：告警对象的告警指标满足告警产生条件后产生的对象。
示例：腾讯织云 告警    不可达。

限于篇幅这里先介绍以上最基础的概念，后续随着讨论的逐步深入，会在介绍告警分级、告警收敛、告警恢复、告警事件、告警订阅、告警合并等概念，下面主要讨论下网络设备监控、网络流量分析与服务器监控这几个业务运维同学们强关注的运维对象。
网络流量
对于网络出口与网络专线的有效监控与分析，既能协助业务运维同学有效地定位业务异常、评估业务服务质量等，也能有效地度量业务整体运营成本，毕竟现在带宽的使用成本在整体运营成本中也是占比越来越大。相信运维同学多少都会遇到下面等较高频的使用场景：

这条专线当前利用率多少？
在已经使用的流量中，某个使用了多少流量？
这些所产生的流量是基于什么协议与方向？
专线与网络出口的丢包率与时延是怎么样的？
每条专线中主要是哪些务在用？哪个是“地主客户”？

对于网络流量的监控来说，其实核心是一个分析平台，通过把采集到的各种流量包抓取过来，然后再把相应的流量送入分析集群。织云采用的也是基于的监控。
什么是呢？
是一种数据交换方式，其工作原理是：利用标准的交换模式处理数据流的第一个包数据，生成缓存，随后同样的数据基于缓存信息在同一个数据流中进行传输，不再匹配相关的访问控制等策略，缓存同时包含了随后数据流的统计信息。
一个流定义为在一个源地址和目的地址间传输的单向数据包流，且所有数据包具有共同的传输层源、目的端口号。
相对于会话“”而言，“”具备更细致的标识特征，在传统的五元组的基础上增加了一些新的域值，至少包括以下几个字段：  
| 源地址 | 目的地址 | 源端口 | 目的端口 | 层协议类型 | 服务类型 | 输入物理端口 |  
以上七个字段可以唯一地确定任意一个数据包属于哪个特定的。
换而言之，任何一个字段出现了差异都意味着一个新的发生。对于的分析展示同样也是要基于多维度的：
目的与源、目的与源、业务、网络架构、城市、等。具体所需的维度依赖于自己的业务场景。
是厂商的私有协议，业界也有多种的格式。例如、华为、等等的主流厂商的也是均有一定差异性与优劣的，常用的有与 。所以这部分的后台能力是需要有异构性的，织云基于腾讯复杂的网络运维经验，目前是支持、华为、 的不同。

网络设备
对于网络设备的监控，也一般从设备性能、质量、状态等维度入手。对于每台网络设备来说运维同学一般会关注如下等高频场景：
• 网络设备的运行状态设备运行日志的监控与告警• 设备堆叠状态下的例如交换机堆叠的监控与告警• 网络设备上每个物理端口的、流量、包量、错包与端口状态的监控与告警。• 网络设备上逻辑端口物理端口组合的性能与状态• ……………

对于网络设备的告警来说，同样也会面临诸如：不同的厂商、设备类型与设备型号日志标准不统一等问题。
所以对于网络设备监控告警来说，首先是将众多的网络设备进行逻辑分组，以便于在一个分组内的设备均可以响应同一个告警关键字，并且这个分组粒度建议较细，这样才能保障告警关键字的有效性与独立性。
在这里根据多年的运维经验，建议告警的分组模型由四个维度组成厂商类型型号用途
例如 交换机内网接入层交换机，通过这个公式就描述出一个设备的逻辑分组。

服务器
对于服务器的监控同样也是从状态、性能与容量这几个维度入手。虽然也可以用于服务器监控，但相对于主动上报指标与数据会少很多。服务器的状态监控主要包含服务器是否的通、上报是否超时与电源运行状态等等。
对于性能与容量这两类维度，主要依赖当前的数据捕获，一般来说对于服务器监控来说在通用场景下主要关注、内存、流量与包量这四个指标即可，但是别的指标也建议尽量捕获。 单个监控对象的数据丰富了会有如下好处

避免对象的监控盲点
不同的监控数据点可以部分对应出该服务器所承载的业务特性指标，例如存储类业务也会关注 __、__、__等等系统指标
生产的数据足够丰富能够催生出更加丰富的运维数据消费场景。

服务器监控相对是很标准的监控模型，针对于物理服务器与虚拟机都有共性指标。这部分主要做到采集的数据丰富与上报的准确性算法准确。
后续文章主题预告

数据银行 的建设
形态各异的公有云组件通用监控模型建设之路

总结
层的监控从层的组成这个维度来说，可以分为一个个独立的资源对象来分类监控，针对每一类对象可以分别从状态、性能、容量、质量这几个维度描述，将不同的数据综合为开发与运维的统一视角。监控告警产品的建设是任重而道远的过程，坑也非常多。要考虑多种因素，技术后台能力只是其中的一部分。
例如在的文化下，需要从更高的层面来统一视角开发视角运维视角避免将监控做成开发的监控”与 运维的监控”。也需要更多的考虑监控产品使用的双态用户态系统态与不同的权限行业属性如何分类设计。
欢迎关注【腾讯织云】公众号，获取技术资讯概述
什么是性能？
性能最通俗的衡量指标就是“时间”，的使用率指的是用于计算的时间占比，磁盘使用率指的是磁盘操作的时间占比，当使用率时，意味着有部分请求来不及计算，响应时间增加或者超时；当磁盘使用率时，意味着有部分请求需要等待操作，响应时间也会增加或者超时。换言之，所有的操作都在理想的时间内，就不存在“性能优化“的问题。我们在分析性能的时候，总是会首先要找到是什么引起响应时间变慢了，对应单机性能的分析，一般我们会将目光锁定在和上，因为对于应用程序一般分为 型和 型，即计算密集型或者读写密集型；至于内存，其性能因素往往也会反映到或者上，因为内存的设计初衷就是提高内核指令和应用程序的读写性能，当内存不足，系统可能进行大量的交换操作，这时候磁盘可能成为瓶颈；而缺页、内存分配、释放、复制、内存地址空间映射等等问题又可能引起的瓶颈；更严重的情况是直接影响功能，这个就不仅仅是性能的问题了。
性能优化并不是一个孤立的课题，除了响应时间的考虑，我们往往还需要综合功能完整性、安全性等等方面的问题。
性能分析的基础
性能优化需要厚实的基础知识：
操作系统——操作系统管理着应用程序所需要的所有资源，例如和，当任何一个组件出现问题，我们的分析也是基于操作系统的，例如文件系统类型，磁盘类型，磁盘类型都需要操作系统管理和支持。
系统编程技术——系统编程技术涉及到我们如何使用系统资源，例如对的操作我们可以使用 ，也可以使用 ，可以采用同步的方式，也可以采用异步的方式，可以使用多进程，也可以使用多线程的方式。懂得不同编程技术的原理，有利于问题的分析。
应用程序——例如数据库组件的数据类型、引擎、索引、复制、配置参数、备份、高可用等等都可能是性能问题的元凶。
性能分析的方法论
问题分析方面，各类方法论如金字塔思维、、麦肯锡七步法等等。套用方法，可以提出性能分析的几个问题

现象的表现是什么样的

什么时候发生

为什么会发生

哪个地方发生的问题

 耗费了多少资源，问题解决后能减少多少资源耗用

  怎么解决问题


但是这些只能给出方向，性能分析需要找到原因需要更具体的方法，怎么解决一个问题也需要更加具体的方式。
 在《性能之巅：洞悉系统、企业与云计算》第二章中讲到大量的方法，比较突出的如方法、负载特征归纳、性能监控、静态性能调优、延时分析、工具法等等。其中工具法最具体，但是工具法也有自己的限制，如磁盘的饱和度，在磁盘使用率的时候，磁盘的负载可能还可以继续增加。在实际分析问题中，负载特征归纳更有指导意义，静态跟踪和动态跟踪让我们更容易更直观发现问题。


认识
本身的架构和内核调度器的架构这里不做详细讲述，具体可以参考操作系统类书籍。但是仍然需要清楚一些概念：

处理器
核
硬件线程
内存缓存
时钟频率
每指令周期数和每周期指令数
指令
使用率
用户时间／内核时间
调度器
运行队列
抢占
多进程
多线程
字长

针对应用程序，我们通常关注的是内核调度器功能和性能

线程的状态分析主要是分析线程的时间用在什么地方，而线程状态的分类一般分为：
：执行中，执行中的时间通常又分为用户态时间和系统态时间
：等待下一轮上，或者等待、锁、换页等等，其状态可以细分为可执行、匿名换页、睡眠、锁、空闲等状态
如果大量时间花在上，对的剖析能够迅速解释原因；如果系统时间大量处于状态，定位问题就会费时很多。
分析方法与工具
在观察性能的时候，按照负载特征归纳的方法，可以检查如下清单：

整个系统范围内的负载如何，使用率如何，单个的使用率呢？
负载的并发程度如何？是单线程吗？有多少线程？
哪个应用程序在使用，使用了多少？
哪个内核线程在使用，使用了多少？
中断的用量有多少？
用户空间和内核空间使用的调用路径是什么样的？
遇到了什么类型的停滞周期？

要回答上面的问题，使用系统性能分析工具最经济和直接，这里列举的工具足够回答上面的问题：



工具
描述





平均负载



包括系统范围的平均负载



监控每个进程线程用量



每个进程／线程用量分解



进程状态



剖析和跟踪，性能计数器分析



上述问题中，调用路径和停滞周期的分析可以使用工具，也可以使用等更灵活的工具。其中支持对各类内核时间的跟踪计数统计，可以使用 查看。例如停滞周期分析可能十分复杂，需要对和调度器架构有较系统的认识和了解，停滞的周期可能发生在一级、二级或者三级缓存，如缓存未命中，也可能是内存和资源上的停滞周期，中有诸如，等事件的计数统计。
实际案例
火焰图帮助分析的调用路径
我们在压测在某机型上的非原地更新性能时，分析服务器延时情况时，分析了上主要的函数调用。使用 能够看到调用次数的排名，但是调用关系不能展示出来。火焰图很清晰地提供了调用关系的视图如下两图中的比例不同是因为 加了参数，火焰图分析是针对整个系统。

内存
认识内存
如前所述，内存是为提高效率而生，实际分析问题的时候，内存出现问题可能不只是影响性能，而是影响服务或者引起其他问题。同样对于内存有些概念需要清楚：

主存
虚拟内存
常驻内存
地址空间

页缓存
缺页
换页
交换空间
交换
用户分配器、、和
内核级分配器

分析方法与工具
在书中给出了一些问题，比如内存总线的平衡性，系统中，内存是否被分配到合适的节点中去等等，这些问题在实际分析问题的时候，并不能作为切入点，需要持续的分析。因此笔者简化为如下清单：

系统范围内的物理内存和虚拟内存使用率
换页、交换、的情况
内核和文件系统缓存的使用情况
进程的内存用于何处
进程为何分配内存
内核为何分配内存
哪些进程在持续地交换
进程或者内存是否存在内存泄漏？

内存的分析工具如下：



工具
描述





缓存容量统计信息



虚拟内存统计信息



监视每个进程的内存使用情况



进程状态



分配跟踪



除了，所有的工具只能回答信息统计，进程的内存使用情况等等，至于是否发生内存泄漏等，只能通过分配跟踪。但是需要对内核函数有很深入的了解，通过语言编写脚本完成跟踪。也有一些诸如、的事件用于跟踪，但是并不直观。
实际案例
关于内存泄漏，从监控和顶层观察很难发现问题，一般都是从底层程序代码来分析，案例中使用各种观察工具和跟踪工具都不能很确定原因所在，只能通过分析代码来排查问题。最终发现是脚本语言分配内存速度快，包驱动的周期性服务的用法中，自动回收不能迅速释放内存，而是集中回收，如果频繁回收又可能带来的压力。开发项目组最后采用的解决方式为分步回收，每次回收一部分内存，然后周期性全量回收。

逻辑  物理
通常在讨论问题时，总是会分析的负载，的负载通常指的是磁盘，也就是物理，例如我们使用获取的、和等指标。因为我们的读写最终都是来自或者去往磁盘的，关注磁盘的情况非常正确。但是我们在进行读写操作的时候，面向的对象大多数时候并不会直接面向磁盘，而是面向文件系统的，除非使用 的方式。
如下图为通用的结构图，如果你想了解更详细，可以查看第二张图片。我们知道通过文件系统将所有的硬件设备甚至网络都抽象为文件来管理，例如调用时，实际就是就是调用了_函数，文件系统会确认请求的数据是否在页缓存中，如果不在内存中，于是将请求发送到块设备；此时内核会先获取到数据在物理设备上的实际位置，然后将读请求发送给块设备的请求队列中，调度器会通过一定的调度算法，将请求发送给磁盘设备驱动层，执行真正的读操作。在这一过程中可能发生哪些情况呢？如果应用程序执行的是大量的顺序读会怎样？随机读又会怎样？如果是顺序读，正确的做法就是进行预读，让请求的数据落到内存中，提升读效率。所以在应用程序发起一次读，从文件系统到磁盘的过程中，存在读放大的问题。

在写操作时同样存在类似的情况，应用程序发起对文件系统的操作，物理与应用程序之间，有时候会显得无关、间接、放大或者缩小。
无关：

其他的应用程序：磁盘来自其他的应用程序，如监控，等
其他用户：如同虚拟机母机下的其他用户
其他内核任务：如重建，校验等

间接：

文件系统预读：增加额外的，但是可能预读的数据无用
文件系统缓冲：写缓存推迟或者合并回写磁盘，造成磁盘瞬时压力

放大：

文件系统元数据：增大额外的
文件系统记录尺寸：向上对齐等增加了大小

缩小：

文件系统缓存：直接读取缓存，而不需要操作磁盘
合并：一次性回写磁盘
文件系统抵消：同一地址更新多次，回写磁盘时只保留最后一次修改
压缩：减少数据量

图片链接：_
文件系统分析与工具
与文件系统相关的术语如下：

文件系统

文件系统缓存
页缓存 
缓冲区高速缓存 
目录缓存

缓存

如下图为文件系统缓存的结构图，页缓存缓存了虚拟内存的页面，包括文件系统的页面，提升了文件和目录的性能。将缓冲区高速缓存放入到了页缓存中，即 包含 。文件系统使用的内存脏页由内核线程写回磁盘，如图中的页面扫描器为后台的页面换出进程，当内存不足，超过一定时间或者有过多的脏页时都会触发磁盘回写。

文件系统延时指的是一个文件系统逻辑请求从开始到结束的时间，包括在文件系统、内核磁盘子系统以及等待磁盘设备响应的时间。同步访问时，应用程序会在请求时阻塞，等待文件系统请求结束，异步方式下，文件系统对其并无直接影响，但是异步访问也分、、等方式，也就是所谓的异步阻塞、异步非阻塞。在异步方式下，一般是打印出用户层发起文件系统逻辑的调用栈，得到调用了哪个函数产生了。
未提供查看文件系统延时的工具和接口，但是磁盘的指标信息却比较丰富，但是很多情况下，文件系统和磁盘之间并没有直接关系，例如应用程序写文件系统，但是根本不关心数据什么时候写到磁盘了，而后台刷数据到磁盘时，可能造成磁盘负载增加，从磁盘角度，应用程序的写入可能受到影响了，而实际上应用程序并没有等待。
文件系统的分析可以试着回答下面的问题：

哪个应用程序在使用文件系统？
在对哪些文件进行操作？
在进行什么样的操作，读写比是多少，同步还是异步？
文件系统的缓存有多大，目前的使用情况？
有遇到什么错误吗？是请求不合法，还是文件系统自身的问题？

其实上面的问题，除了能够看到系统的内存情况，页缓存和 大小，能够看到哪些进程在进行读写操作，在读哪些文件，其他的比如应用程序对文件系统的读写比，同步还是异步，这些问题没有工具能给出明确的信息。当然我们可以通过跟踪应用程序的内核调用栈来发现问题，也可以在应用程序中输出日志来帮助分析。
磁盘分析与工具
在理解磁盘之前，同样我们需要理解一些概念，例如：

虚拟磁盘
扇区
请求
磁盘命令
带宽
吞吐
延时
服务时间
等待时间
随机连续
同步异步
磁盘接口


对于磁盘，我们可以列出如下等问题来帮助我们分析性能问题：

每块磁盘的使用率是多少？
每块磁盘上有多长等待队列？
平均服务时间和等待时间时多少？
是哪个应用程序或者用户正在使用磁盘？
应用程序读写的方式是怎样的？
为什么会发起磁盘，内核调用路径是什么样的？
磁盘上的读写比是多少？
随机还是顺序？

对磁盘的性能分析工具主要如下：



工具
描述





各种单个磁盘统计信息


、
按进程列出磁盘的使用情况


、
跟踪工具



磁盘上是随机还是顺序，很多时候我们并没有很好的方式去判断，因为块设备回写磁盘的时候，随机可能已经被整理为顺序了。对于磁盘的分析同样可以使用跟踪事件或者设置探针。
在分析在某机型上做非全非原地更新时，为什么单实例无法将机器性能压满的时候，我们在分析的过程中跟踪了块设备的内核事件。我们对比了多实例非原地更新和单实例非原地更新的时候，磁盘的操作情况。如下为非原地更新时跟踪的结果。对结果分析后看到，单实例非原地更新时，将近是__，有是__，而多实例时正好相反，大量的__和少量的__当然，这不是为什么性能压不满的原因。

参考文献
 《性能之巅：洞悉系统、企业与云计算》 《  》作者：郑小辉
团队：腾讯移动品质中心

一、前言
有了用例，还需持续跑起来，并能有覆盖率。
如何让  和 都支持脚本执行？
翻阅文档和文档，就能知道答案。
二、脚本方式执行  和 

三、衡量方式——覆盖率接入
 默认已经集成了覆盖率工具，一般只需把开关打开就好：
 
打开后，测试下    是否有报告，如果没有，可能因为版本问题，再指定版本应该就：               

但是： 一般在执行脚本时，产生的只有的覆盖率，而  的是没有的。
二者同时产生覆盖率的修改如下：
 中引入：

然后执行就可以有 者的报告了。
   
 报告默认路径：

四、 运行
以上已经把过程转换为脚本了，化，只要建好任务，写个执行就了： 
 
任务：

未完待续
搜索微信公众号：腾讯移动品质中心，获取更多测试干货！导语 蓝牙在日常生活中广泛使用的一项技术，小程序给了我们前端工程师一个控制蓝牙的方法，带上你的设备，来看看怎么控制你的蓝牙设备吧。

 背景介绍
蓝牙是爱立信公司创立的一种无线技术标准，为短距离的硬件设备提供低成本的通信规范。蓝牙规范由蓝牙技术联盟   ，简称管理，在计算机，手机，传真机，耳机，汽车，家用电器等等很多场景广泛使用。蓝牙具有以下一些特点：
 免费使用：使用的工作频段在的工科医频段，无需申请许可证。
 功耗低：包含了一个低功耗标准  ，可以让蓝牙的功耗显著降低
  安全性高：蓝牙规范提供了一套安全加密机制和授权机制，可以有效防范数据被窃取
 传输率高：目前最新版本，理论传输速率可达实际肯定达不到，理论覆盖范围可达米。


小程序蓝牙介绍
小程序提供了一套蓝牙操作接口，所以作为我们前端开发人员可以更加方便的进行蓝牙设备开发，而无需了解安卓和的各种蓝牙底层概念。小程序的蓝牙操作大多都是通过异步调用来处理的，这里面就存在着一些坑，后面会详细介绍。在使用小程序蓝牙之前有几个概念或者说术语需要预先了解：
 蓝牙终端：我们常说的硬件设备，包括手机，电脑等等。
 是由子母和数字组成的个字符串的序号根据硬件设备有关联的唯一。
 设备地址：每个蓝牙设备都有一个设备地址，但是安卓和差别很大，安卓下设备地址就是地址，但是无法获取地址，所以设备地址是针对本机范围有效的，所以这里需要注意，后面会介绍。
 设备服务列表：每个设备都存在一些服务列表，可以跟不同的设备进行通信，服务有一个来维护，每个服务包含了一组特征值。
 服务特征值：包含一个单独的值和 –个用来描述 值的。一个可以被认为是一种类型的，类似于一个类。
 小程序中对蓝牙数据的传递是使用的二进制类型来的，所以在我们的使用过程中需要进行转码。

 总览
 小程序对蓝牙设备的操作有个



名称
说明





初始化蓝牙适配器，在此可用判断蓝牙是否可用



关闭蓝牙连接，释放资源



获取蓝牙适配器状态，如果蓝牙未开或不可用，这里可用检测到



蓝牙适配器状态发生变化事件，这里可用监控蓝牙的关闭和打开动作



开始搜索设备，蓝牙初始化成功后就可以搜索设备



当找到目标设备以后需要停止搜索，因为搜索设备是比较消耗资源的操作



获取已经搜索到的设备列表



当搜索到一个设备时的事件，在此可用过滤目标设备



获取已连接的设备



创建连接



关闭连接



获取设备的服务列表，每个蓝牙设备都有一些服务



获取蓝牙设备某个服务的特征值列表



读取低功耗蓝牙设备的特征值的二进制数据值



向蓝牙设备写入数据



开启蓝牙设备提醒功能，只有开启这个功能才能接受到蓝牙推送的数据



监听蓝牙设备错误事件，包括异常断开等等



监听蓝牙推送的数据，也就是数据



 主要流程
蓝牙通信的一个正常流程是下面的图示
 
 开启蓝牙：调用来开启和初始化蓝牙，这个时候可以根据状态判断用户设备是否支持蓝牙
 检查蓝牙状态：调用来检查蓝牙是否开启，如果没有开启可以在这里提醒用户开启蓝牙，并且能在开启后自动启动下面的步骤
这里有一个坑：里面蓝牙状态变化以后不能马上开始搜索，否则会搜索不到设备，必须要等待秒以上。

 {
  {
       {
    }
    {
    }
    {
       {
        {
          {
            
          }
        }
      }
　　　开始搜索  
    }
  }
}
 搜索设备：开始搜索设备，当发现一个设备会触发事件，首先看下标准

由于无法获取地址所以这里需要区分两个场景
 安卓：安卓下可以根据地址来搜索设备，或者跳过此步直接连接到设备。当搜索到一个设备以后，可以在事件回调中判断当前设备的是否为指定的地址

  = 
{
  
   {
    ={
          = 
          = {
           = {
            
            {
              =
              =
            }
          }
        }
    }

  }
  {
      
  }
}
 ：下获取设备地址的方法已经被屏蔽，所以不存在地址，此时只能通过其他方式来判断，比如在蓝牙设备字段添加一些特别的信息来判断等等，可以转字符串来判断，也可以直接用二进制来判断。
  = 设备标识符
     = 
{
  
   {
    ={
          = 
          = {
            = 
            = 二进制转字符串
                {
              
　　　　　　　　 = 
          }
        }
    }    
  }
  {
      
  }
}
  {
    = 
    =   {
    
  }
    =  

    = 
     =      {
      = 
      =   
     =  ===       
     = 
  }

   
}
这里需要注意的是：如果知道地址在安卓下可以直接略过搜索过程直接连接，如果不知道地址或者是场景下需要开启搜索，由于搜索是比较消耗资源的动作，所以发现目标设备以后一定要及时关闭搜索，以节省系统消耗。
 搜索到设备以后，就是连接设备：
 连接成功以后就开始查询设备的服务列表：，然后根据目标服务或者标识符来找到指定的服务
  = 
{
   _
     {        
     _ = 
      = {
       = {
        _ = 
        
      }
    }

     _
  }
  {
    
  }
}
这里有个坑的地方：如果是安卓下如果你知道设备的服务，你可以省去的过程，但是下即使你知道了服务，也不能省去的过程，这是小程序里面需要注意的一点。
 获取服务特征值：每个服务都包含了一组特征值用来描述服务的一些属性，比如是否可读，是否可写，是否可以开启通知等等，当你跟蓝牙通信时需要这些特征值来传递数据。
方法返回了参数包含了以下属性：

包含了一组特征值列表

通过遍历特征值对象来获取想要的特征值
{
   _
   _
     {
     ___
       =      {
        = 
        {
        _ =            
      }
      {
        _ = 
      }
      {
        _ = 
      }
    }
  }
  {
     
  }
}
这个例子就通过搜索特征值取到了 特征值，写和读取
 获取特征值以后就可以开启通知模式，同时开启监听特征值变化消息


{
   
   _
   _
  _
   {
      {
      
    }
  }
  {
    
  }
}
 一切都准备好以后，就可以开始给蓝牙发送消息，一旦蓝牙有响应，就可以在事件中得到消息并打印出来。 
这里面有个坑：开启以后并不能马上发送消息，蓝牙设备有个准备的过程，需要在中延迟秒以上才能发送，否则会发送失败
  = 
{
   _
   _
  _
   
     {
    
  }
  {
    
  }
}
  {
    {
      
  }
    =  
    =  
    = 
     =   =      =  {
      =   
     
    
  }
   
}
 所有都通信完毕后可以断开连接
{
   _
   {
    
  }
   {
    
  }
}
{
     {
    
  }
}
 完整例子
 这里为了简洁，把等异常处理已经省去，主要流程就是设置设备和服务的过滤值，在开启之后写入测试消息，然后监听蓝牙发送过来的消息，整个过程采用简化处理，没有使用事件通信来驱动，仅做参考。
  = {
  {
    _
    _
    
  }
  _{
    _
    _
    _
  }
  {
     = {}
  }
  {
    {
      当前微信版本过低，无法使用该功能，请升级到最新微信版本后重试。
      
    }
     _ = 
    {
         {
      }
      {
         {
          {
            {
              _
            }
          }
        }
        _        
      }
    }
  }
  发送消息
   =  {
     _ = 
      =     
    {
       ___
       ___
      ___
       
         {
        
      }
    }
  }
  监听消息
  {
     _ = 
      {
        = _
        
      
    }
  }
  {
     _ = 
    {
       ___
       {
      }
    }
  }
  事件通信模块

  连接设备模块
   {
     _ = 
    ___ = {
      _
      
    }

    {
         {
            {蓝牙可用    
          _
        }
      }
    }
  }
  {
     _ = 
    {
      
       {
        {
            = _
          {
            ___ = 
            _
            _
          }
        }
      }
    }
  }
  连接到设备
  {
     _ = 
    {
       ___
       {
        _
      }
    }
  } 
  搜索设备服务
  {
     _ = 
    {
       ___
         {
         _ = _
        _ = {
          ___ = _
          _
        }
      }
    }
  }
  获取连接设备的所有特征值  
   {
     _ = 
    {
       ___
       ___
         {
         ___
           =      {
            = 
            {
            _ =            
          }
          {
            _ = 
          }
          {
            _ = 
          }
        }          
        _ =   _ = {
          ___ = _
          ___ = _
          ___ = _

          _
        }
      }
    }
  }
  {
     _ = 
    {
         
         ___
         ___
         ___
         {
          {
            _  _
          }
          _接受消息
        }
    }
  }
  连接设备模块


  其他辅助模块
  停止搜索周边设备  
   {
     _ = 
    {
         {
      }
    }
  }  
   {
      = 
      =   {
      
    }
      =  

      = 
       =      {
        = 
        =   
       =  ===       
       = 
    }

     
  }
   {
      {
        
    }

      =  
      =  

      = 
       =   =      =  {
        =   
       
      
    }

     
  }
  过滤目标设备
  {
      = 
       _   {
          = {     }
         
    }
    {
       
    }
  }
  过滤主服务
  {
     _ = 
      = {
      _ = {
        _ = 
        
      }
    }

     _
  }
  其他辅助模块
}

{  
    _
    _
    {
      
    }
}

{
  
}
 跳坑总结
 等待响应：很多情况下需要等待设备响应，尤其在环境下，比如
监听到蓝牙开启后，不能马上开始搜索，需要等待秒
 开启以后，不能马上发送消息，需要等待秒
 和：安卓的地址是可以获取到的所以设备的是固定的，但是是获取不到地址的，只能获取设备的，而且是动态的，所以需要使用其他方法来查询。
 下只有搜索可以省略，如果你知道了设备的，服务和各种特征值，在安卓下可以直接连接，然后发送消息，省去搜索设备，搜索服务和搜索特征值的过程，但是在下，只能指定设备连接，后面的过程是不能省略的。
 监听到的消息要进行过滤处理，有些设备会抽风一样的发送同样的消息，需要在处理逻辑里面去重。
 操作完成后要及时关闭连接，同时也要关闭蓝牙设备，否则安卓下再次进入会搜索不到设备除非关闭小程序进程再进才可以，不受影响。
  {
       ___
       {
      }
       {
      }
    }
  {
      {
      }
      {
      }
    }
除了以上的常见问题，你还需要处理很多异常情况，比如蓝牙中途关闭，网络断开，未开启等等场景，总之和硬件设备打交道跟纯交互还是有很大的差别的。什么是
这是自    以来集合几乎所有开发者 李沐和陈天奇等各路英雄豪杰 力量的一个机器学习项目。名字源于”  ”。 的目标就是希望把  这样强调性能静态优化的  库和灵活的  有机结合在一起。做包含 的静态优化，却又可以像    那样进行灵活扩展的深度学习库。
与其他工具相比， 结合了符号语言和过程语言的编程模型，并试图最大化各自优势，利用统一的执行引擎进行自动多  并行调度优化。不同的编程模型有各自的优势，以往的深度学习库往往着重于灵活性，或者性能。 通过融合的方式把各种编程模型整合在一起，并且通过统一的轻量级运行引擎进行执行调度。使得用户可以直接复用稳定高效的神经网络模块，并且可以通过  等高级语言进行快速扩展。
 由   和  的作者发起，融合了 的动态执行， 的静态优化和  的符号计算等思想，直接支持基于 的   接口，使得代码可以很快向分布式进行迁移。每个模块都进行清晰设计，使得每一部分本身都具有被直接利用的价值。 接口和静态动态  使得对于新语言的扩展更加容易，目前支持和  ，接下来相信会有更多语言支持，并方便其他工具增加深度学习功能。
的关键特性
轻量级调度引擎
在数据流调度的基础上引入了读写操作调度，并且使得调度和调度对象无关，用以直接有机支持动态计算和静态计算的统一多  多线程调度，使得上层实现更加简洁灵活。
支持符号计算
 支持基于静态计算流图符号计算。计算流图不仅使设计复杂网络更加简单快捷，而且基于计算流图， 可以更加高效得利用内存。同时进一步优化了静态执行的规划，内存需求比原本已经省的  还要少。
混合执行引擎
相比  的全静态执行， 的全动态执行。采用动态静态混合执行引擎，可以把  静态优化的效率带和  动态运行的灵活性结合起来。把高效的  库更加灵活地和  等高级语言结合在一起。
弹性灵活
在   表达式模板的基础上，符号计算和  使在  等高级语言内编写优化算法，损失函数和其他深度学习组件并高效无缝支持  成为可能。用户无需关心底层实现，在符号和  层面完成逻辑即可进行高效的模型训练和预测。
云计算友好
所有数据模型可以从  上直接加载训练。
代码简洁高效
大量使用  特性，使  利用最少的代码实现尽可能最大的功能。用约  行  代码 加上注释  行 实现了以上核心功能。
开源用户和设计文档
 提供了非常详细的用户文档和设计文档以及样例。所有的代码都有详细的文档注释。并且会持续更新代码和系统设计细节，希望对于广大深度学习系统开发和爱好者有所帮助。
在公司内的实践
社区活跃度
      是国内最大的开源分布式机器学习项目。 的相关代码直接托管在   中，并采用  协议进行维护。
的安装
推荐已编译的方式安装 ，安装的过程分为步：

从  源码编译共享库  ，  ，  
安装语言包；

构建共享库依赖
目标是构建共享库文件。
最小构建需求：

最新的支持 的编译器，比如 = ，
一份库，比如，，，或者  

可选库：

  =  以运行   需要  支持   = 
 加速       
 进行图像的分段 如果编译安装，需要

上构建
安装依赖
  
       
构建
   
   
上的构建
安装依赖
 
  
  
  
 构建
   
        
安装语言包
进入源码目录编译好的子目录安装语言包即可
 
   
更详细的安装文档参见官网手册。
基本概念和操作


多维的数据结构，提供在  或者  上进行矩阵运算和张量计算，能够自动并行计算

 是  中最底层的计算单元，与  非常相似，但是也有  点不同的特性：

支持多设备
所有的操作可以在不同的设备上运行，包括  和 。


    
  =    在上创建一个的矩阵
  =     在上创建一个的矩阵
  =     在上创建一个的矩阵
   维度
 
   设备信息


 其他的初始化方式
  =    创建的全矩阵
  =     创建的全矩阵
  =   所有元素赋值为

 不同的设备之间进行数据拷贝
  =  
  =   
   从拷贝数据到

 转换为
  =  
  = 
 
 
  
     
      

 转换为
    
  =  
  =   
  
   
     

 基本运算
  =    
  =    
  
     
      
  =       对应元素求和
  
     
      
  =       对应元素求积
  
     
      

 不同设备上的需要移动到一起才能计算
  =    
  =     
  =   
  
     
      

 数据的导出与载入
  通过导出与载入数据
    
    

  =    
  = 
  = 
  
     
      

  直接保存为二进制文件 
  = 
  = 
   
  = 
  
     
      
  
     
      

 直接保存到分布式文件系统上或 
  
  

自动并行计算

不同的操作自动进行并行计算。

 = 
 = 
 = 
 = 
 = 
 = 
 = 可与 = 并行计算，因为在不同的设备上，但是 = 和 = 只能相继执行。


使得非常容易定义神经网络，并且能自动求导以下的范例创建了一个  层的感知器网络


    
  = 
  = = = _=
  = = = _=
  = = = _=
  = = =
 
 
每一个  可以绑定一个名字， 通常用来定义输入，其他的  有一个参数以一个 类型作为输入数据，另外还有其他的超参数_隐藏层的神经元数目，_激活函数的类型。
 的作用可以被简单的看成是实现了一个函数，函数的参数名称自动生成，可以通过以下的方式查看

 _
 _ _ _ _ _
我们也可以明确指定这些自动生成的参数的名字

  = 
  = 
  = = = = _=
 _
  _
 可以组合之后，在传入全连接中

  = 
  = 
  = =   = _=
 _
  _ _
 也可以被随后的操作替换

  = 
  = = = _=
  = 
  = = = _=
 _ = = =
 __
 _ _ __ __
一旦定义好了 ，只需要指定输入数据的维度，就可以推算出各级中间参数的维度

  = 
  = = = _=
 _ _ _ = _= 
 _ _
{   _   _ }
 _
 
接下来通过绑定变量，就可以执行实际的运算了

  定义计算图
  = 
  = 
  =   
  =   
  =   
  绑定变量到
 _ = = ={    }
  进行前向计算
 _
 _
     

 实现了在多个运算器之间，或者在多台计算机之间的数据同步通过可以对  进行简单的初始化

  =   创建一个本地的
  = 
  
  = 
   = 
  
     
      
初始化后，可以通过相同的  进行数值更新

  
   =   取出值
  
     
      
的数据可以在任何设备上，此外，可以在同一个  上传递多个值， 会对多个值求和，聚合后的值

  =     
  =      
  
   = 
  
     
      
 对每次进来的值做的默认行为是，这个行为可以被自定义的行为替换

    
           
      =   
 __
  =
  
     
      
  
   
  =
  
     
      
同类似，通过一次调用，我们也可以将值同时到多个设备上

  =      
   = 
  
     
      
除了单个  的存储， 还提供了批量的接口

 针对单个设备
  =   
  
  
   
   
   
  = 
   = 
  
     
      

 针对多个设备 
  =        
  
   
   
   
   = 
  
     
      
体验
以下借助  实现了一个简单的单变量线性回归程序：

   
   
   

 定义输入数据
_ =   
 =   
_ =   _  

  输入数据
 = 
 = _  
_ _

 定义变量
 = 
 = _

 定义网络
_ = = _= =
 = =_ = =

 定义模型
 = 
            =
            =
            _=
            _=
            __=
        

 训练模型
=_ =_

 预测
 = _
 = _   =

总结
 是个深度学习的框架，支持从单机到多、多集群的计算能力。 真正厉害之处在于可以结合命令式编程和符号式编程两种风格。此外， 安装相对简单，社区活跃，文档虽然还不完善，好在易读易懂，代码也相对丰富，还是很容易上手的。
参考资料

技术特性 
对于机器学习和系统开发者意味着什么 
  当前浏览器不能支持视频播放，请采用或以上浏览器

今天，我们来学习一下负载均衡的几种均衡模式。通过了解负载均衡的均衡模式，我们可以更好的利用负载均衡来为我们的应用服务。

首先，我们来看一看腾讯云负载均衡支持哪些均衡模式？

按权重轮训
按 
加权最小连接数


在按权重轮训模式下，我们需要给每台作为后端的云主机设置权重。负载均衡可以根据权重来分配请求。这种模式比较适合比较简单的架构。使用起来比较简单，设置也比较容易。
我们来简单举个例子：
用户向负载均衡发送个请求，负载均衡后端一共有三台云主机：云主机 云主机 云主机 。三个云主机的权重分别是  。负载均衡器在进行请求分发时，优先高权重的云主机分发请求，就会给云主机分发个请求，给云主机分发个请求，给云主机 分发个请求。这样就将用户发送的个请求分发完成。当下次再有新的请求通过负载均衡进行分发时，也会按照这样的模式来进行分配。
这种模式会又一个很明显的问题，就是权重最低的云主机可能每次都分发较少的请求，一致都处在一个比较低的利用率水平
在这里，我们来穿插一个知识点：会话保持。在我们设置按权重轮训时，会有一个会话保持的选项。
会话保持就是让来自同一个或同一个段的请求转发到同一台后端服务器上。因为某些应用无法完整的拆分状态，会有一些缓存信息存放在云主机上，所以这个时候，就需要开启会话保持，以保证不会因为请求分发导致状态丢失，出现用户不停登陆的情况。
不过会话保持对于一些应用不能提供很好的均衡，比如微信公众平台的请求处理。更好的方法是将状态提取出来，使用、来存储状态，而不是由程序本身存储。

  是根据请求的源地址进行处理，来做为  的  ，请求对应的处理。
  可以保证同一个始终请求同一台云主机，以另外一种模式来实现会话保持。对于一些不支持会话保持的场景，可以使用这种形式来将源的请求分发到同一台云主机。
同样，这样准备了一张图，来方便大家理解：
我们假设源站地址的  ，他的   为 ，负载均衡在处理时，就会把请求分发到  同为  的主机上。如果后续这个依然发送请求，同样转发到  ，这样就实现了会话保持。

加权最小链接数在将状态抽离云主机时，会是最好的选择。加权最小链接数处理请求会有两个步骤。

获取当前后端云主机的活动链接数。
读取为每个云主机设置的权值。
使用活动链接数和权值计算出新的合理的权值
根据计算出的权值分发请求

这种均衡的方式除了传统的权重以外，引入了活动链接数这一个重要的量，通过对活动链接数的加权处理，保证每台云主机的请求分配和其本身的负载相关联，不会出现某些主机处在近乎闲置的状态，其他的主机则承载较高压力。
这种均衡模式非常适合较为复杂的架构，可以根据情况进行具体分析。
拓展阅读：
负载均衡模式：会话保持：协议支持及端口配置：

推荐阅读
【腾讯云的种玩法】十分钟轻松搞定云架构 之四：替你分心的负载均衡【腾讯云的种玩法】十分钟轻松搞定云架构 · 负载均衡的最佳实践在了解具体如何做接口测试之前，我们先简单了解下这个测试的背景知识： 平台和协议。
一、是什么？
是基于名字服务使用协议的高性能开发框架，同时配套一体化的服务治理平台，帮助个人或者企业快速的以微服务的方式构建自己稳定可靠的分布式应用。
是将腾讯内部使用的微服务架构  多年的实践成果总结而成的开源项目。这个名字来自星际穿越电影人机器人， 电影中有着非常友好的交互方式，任何初次接触它的人都可以轻松的和它进行交流，同时能在外太空、外星等复杂地形上，超预期的高效率的完成托付的所有任务。 拥有着类似设计理念的也是一个兼顾易用性、高性能、服务治理的框架，目的是让开发更简单，聚焦业务逻辑，让运营更高效，一切尽在掌握。
目前该框架在腾讯内部，有多个业务、多万台服务器上运行使用。
的最大优势在于对运营的帮助，会展现整个系统的实时运行全貌，并对服务进行准实时监控和管理具体到服务的进程级别，大大提高了运营效率，这使得开发更懂得运营，运营变得更加简单。
主要是解决在开发系统时，经常碰到的以下问题：
、容错：任何一台服务掉，都不影响业务的访问；
、 高性能：在机器上框架版本使用用编译，服务端提供最高达的吞吐量；
、伸缩性：可以非常方便的对服务进行平行扩展；
、易管理：能够在系统上，对系统上的服务进行集中管理；
、故障隔离：任何一个服务掉、异常，都最大限度的不影响其它服务；
、开发效率：提高开发效率，业务开发人员只需要关注业务本身的逻辑；
、运维效率：提高运维效率，能够清晰的看到整个系统的运行情况，对服务进行立体化监控。
的设计采用了分层的思想，各个层次之间相互解耦或者松耦合。运营只需要关注最上层的部署、发布、配置、监控、调度管理等。从开发者的角度出发，封装了大量日常开发过程中经常使用的公共库代码和远程过程调用，让开发使用更简单方便；从框架本身的角度出发，做到高稳定性、高可用性、高性能，这样才能让业务服务运营更加放心；从分布式平台的角度出发，解决服务运营过程中，遇到的容错、负载均衡、容量管理、就近接入、灰度发布等问题，让平台更加强大。
二、协议
协议是一种二进制、可扩展、代码自动生成、支持多平台的协议，其底层设计类似于的 ，但是不完全一样，同时其实现完全自主开发，对细节完全可控。
支持的类型分两种，基本类型和复杂类型。
基本类型包括：、、、、、、、、、 、 、 
复杂类型包括：、、、、、、、的嵌套。
协议主要应用在后台服务之间的网络传输协议，以及对象的序列化和反序列化等。对于开发人员来说，框架提供一套适合传输的、语言无关的通信协议，这就是协议。开发人员可以在协议文件中定义通信用的数据结构和服务提供的接口方法，为了提高开发效率并且减少错误，框架还提供了工具来把协议转换成各种语言的数据结构，开发人员可以不必关注数据结构、服务基类和代理类的编写，把更多精力投入到业务逻辑的实现上。
三、为何要做接口测试？
通过接口测试可以保证后台服务对外提供的数据的正确性。接口可能是面向、客户端或者其他一些后台服务。通过接口可以去测试一些通过客户端无法模拟的一些情况，如边界测试、各种异常数据的错误处理， 除此之外，很多测试用例通过接口来构造数据比从客户端模拟容易太多。
从我们这次任务系统重构来说，涉及到个服务改造，以及运营配置系统的重建，逻辑复杂度很高。很多靠测试不易覆盖。那么必须深入接口，对接口进行更有力的测试才能让系统更稳定。
其次，接口测试脚本可以接入到持续集成，以及进行线上质量监控。方便快速的回归以及发现问题。
四、接口测试流程
新需求接口测试功能、性能——接口自动化脚本——接口接入持续集成——接口线上监控。
、提测的新需求需要进行接口测试，根据接口的复杂度，会有—个左右的测试点。接口功能测试脚本调试通后，可以用来做压力测试；
、创建可以多次回归，可以自动校验结果数据的接口自动化脚本的用例集合；
、将脚本接入到持续集成系统中， 这样每天持续集成可以自动发现接口问题；
、将接口测试部署到线上监控，可以及时发现线上质量问题。
五、接口测试分析
接口测试的重点是要检查数据的交换、传递和控制管理过程，以及系统间的相互逻辑依赖关系等。接口测试可以关注于服务器逻辑验证，而测试可以关注于页面展示逻辑及界面前端与服务器集成验证。
怎么写接口测试用例呢？ 据我经验总结，可以有如下方法：
、看设计文档，了解基本业务逻辑，可以确认基本的接口测试点；
、看代码，了解详细的判断逻辑处理，进一步补充接口测试点，适用于代码能力强点的同学；
、跟开发沟通，了解里面细节逻辑处理，适用于代码能力不强的同学；
、探索性测试，多思考边界情况、可能出现的异常点；
、用测试建模的方法帮助分析。
六、接口测试工具选择
工欲善其事必先利其器。可见选择一款好用的接口测试平台对接口测试的效率起着很关键的作用。
在选择工具时我试用了多个接口测试工具，包括自带接口测试、客户端接口测试工具、接口测试平台。综合对比下，选择了接口测试平台。
我觉得一个好的平台需要有以下几点：
、能够导入 自动生成接口模板， 测试人员可以轻松编写用例；
、用例管理，接口脚本可以通过测试集合管理起来，可以做脚本之间执行的前后关系设置；
、充分的结果数据判断，方便做自动化接入；
、可以用已经做好的接口测试脚本来做服务的压测；
、完善的平台支持，有或者需求可以尽快支撑。
七、接口测试执行
这里，给下具体的举例，了解下整个执行的过程。
、文件获取：
我举例的这个接口涉及到个文件，在中定义了接口，接口的请求包体结果，返回的消息结构。



、在平台上获取提供接口服务的名称，并在平台上进行配置。


、将文件导入到平台中，生成接口模板：

、按照测试点来创建用例，构造接口测试数据：



、设置：
在手工测试时是通过人工来校验结果数据。做自动化时，需要选择脚本，以及补充设置。
、脚本执行，和结果数据查看。
如果执行不通需要进行问题定位；
结果返回与预期不同需要进行定位。
八、接口测试问题定位
总结有如下定位方法：
、看接口执行返回的错误码。框架层错误，比如   是表示发送的找不到。   表示解析包体错误。
、如果是接口内部返回= 表示是后台服务判断不应该进行数据返回。这里的原因可能有多种。如传的数据不满足数据下发条件，传送的数据内容不合要求等。一般异常情况开发都会打后台日志。平台查看下后台日志来确认下问题原因。
、看日志也不清楚原因，可能性有个：
可能是测试对业务逻辑或测试点理解的不清楚；
代码逻辑处理没有按业务要求来做；
日志打印不充分，或者不好理解。
九、总结和思考
建议测试人员根据具体的业务需求来确定测试方法， 是覆盖客户端测试，还是需要深入到接口和性能测试。
这涉及到时间和人力投入。
后台测试不像前台直接面向用户有详细的需求文档。后台一般是有概要设计或者没有设计。如果想要保证测试质量，需要测分人员深入了解程序逻辑，来构造测试用例，否则测试的效果就跟单用客户端来验证接口的效果差不多了。
其次，做性能测试也需要考虑好是应该从层来压测，还是直接压测具体服务。这根据具体改动情况来决定。
以上是我这次跟大家分享的内容。对的测试分析、定位方法，小伙伴们是否有一些更好的方法呢？
开源地址：。
想知道更多测试相关干货 请关注我们的微信公众号：腾讯移动品质中心。

相关推荐如何设计一个系统谈谈后台服务的和路由管理问题场景：
_  
 
      
观察：
 查看  
_  
  _        
对比能正常使用  命令的跳板机中文件
_  
         
对比不同点：

分析：

   中  表示，可以让执行这个文件时，是以文件的拥有者的权限进行，而不是执行这个命令的用户本身的权限

本属于组的文件改成其它组导致出错，比较笨的错误，千万不能这样做


解决：

改变文件拥有者：
      
==            

设置文件属性
    
==            


脑补的知识点：
权限状态： ，此时就被称为 ，简称为。那么这个特殊权限的特殊性的作用

权限仅对二进制程序 有效；

执行者对于该程序需要具有的可执行权限；

本权限仅在执行该程序的过程中有效；

执行者将具有该程序拥有者的权限。


类似的权限  可自行搜索  特殊权限的相关资料。

相关推荐
日常代维护服务通过艰难的过程终于使用安装完 虚拟机了但是发现虚拟机不能上网虚拟机想要上网有很多中方法
先说两个定义机器为虚拟机机器为开机运行的真实机器
查看的教程看到网络配置有许多中方式详情可以访问  

 默认上网 虚拟机利用机器的进行上网对外显示一个
 将虚拟机桥接到机器的网卡上和机器都通过上网对外不同的
…

一桥接原理
方式即虚拟网桥的网络连接方式，是客户机和子网里面的机器能够互相通信。可以使虚拟机成为网络中具有独立的主机。
桥接网络也叫物理设备共享被用作把一个物理设备复制到一台虚拟机。网桥多用作高级设置，特别是主机多个网络接口的情况。

桥接原理


如上图，网桥的基本原理就是创建一个桥接接口，在物理网卡和虚拟网络接口之间传递数据。
二 在机器配置桥接网络
首先可以按照 文章的虚拟机配置一下机的网络情况这个的目的就是让生成一个不日多个桥接大家都通过这个桥接上网下面我们来看看具体的步骤
查看网卡是否工作
确保你想使用网桥的网卡能够为虚拟机模块提供网络连接能力并且网卡是否可以工作这个网卡应该要能够给的虚拟机提供相同的网络支持接下来例子说明了网卡的配置并且可以被外部网络访问这个例子中使用网卡
 
          
               
             
                 
               
               
           
                  
           

备份网络脚本文件
备份网络配置到不同的目录下将来可以用来恢复网络配置 根据下面的命令将网络脚本 网卡到 目录
   
注意不要把文件到目录或者其子目录
进入目录
进入 目录
 
为桥接新建配置文件
为的创建一个新的配置文件为这里是网桥的名字同类似使用以下命令
  
具体的内容是基于已有的配置文件来进行的
编辑网桥配置文件
编辑配置文件让数据包通过网桥进行上网你的网络配置很可能是通过静态=上网或者是从服务器获得=上网的
如果你的网络是通过静态地址来配置的那么你的配置很可能是和下面一样的
=
=
=
=
=
=
下面的显示了和的静态配置内容可以根据下面进行编辑
  配置 

    
=
=
=
=
_=
=


=
=
_=
=
=
=
=
下面显示的和的配置情况
 配置 

    
=
=
=
=
_=
=


=
=
_=
=
=
重启网络服务
重启网络以验证网络配置是否工作
如果网络配置不正确网络连接将会断开你的电脑将失去访问能力这样的话检查以下配置文件然后使用以下的命令重启以下网络服务
   
禁用网络过滤器
向文件添加以下代码
 = 
 = 
 = 
重新加载参数
   
_ =  

 =  
 =  
 = 
验证配置是否成功
通过运行来验证以下配置是否成功如果出现两个项即网桥的和现在在工作的
           
               
             
                 
               
               
           
                  
          
             
                 
               
               
           
                  
           
注意你可能发现的网络信息里面没有的地址了或者你的界面的网络显示你是断网的 这不用担心因为的网络能力已经通过进行工作你的网络还是能正常工作的也可以使用以下的命令来查看网桥是否工作
  
                            
                 
                                  
如果是类似的输出那么你的的网桥就配置的差不多了
二为虚拟机配置网络
配置虚拟机的文件
在虚拟机的配置文件进行设置网络的连接方式为桥接并且桥接的设备为其中地址要改变不然相同局域网地址相同的电脑不能上网
 = 虚拟机网络连接方式
 =   当前主机网桥的名称
 =  为虚拟机分配地址，务必唯一，否则获得同样引起冲突

在虚拟机配置网络
我使用的是  的发行版使用以下命令就可以进行上网了 一开始只有显示没有看到后来想到了被禁用了于是开启即可
   
  
现在还有个问题是网络不随开机启动 我打开显示
=
=
=
_=
=
虽然设置了开机启动但是每次开机都需要运行上面的两个命令这样就没办法远程控制主机了
后来发现是弄的在下面搞了一个持久命名规则，对于网卡的持久命令，就采取了地址的匹配方式
原来虚拟机安装后自带网卡地址和我定义的网卡不一样于是我就将虚拟机的网卡提取出来替换文件的网卡信息然后和以下虚拟机
重启虚拟机发现这次网络能够自动开机获得了
参考资料
  系统  虚拟机网络配置 二 —  方式    –   使用虚拟 连网安装增强功能虚拟机下  没有  的解决办法

相关推荐 服务器带外管理
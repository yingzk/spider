 概念

人工智能  ————为机器赋予人的智能
机器学习  ———— 一种实现人工智能的方法
深度学习  ———— 一种实现机器学习的技术

 单层神经网络
机器学习可以通过神经网络来实现。可以将深度学习简单理解为，就是使用深度方法应用在神经网络的机器学习方法。目前深度架构大部分时候就是指深度神经网络。
神经元
 年，心理学家  和数学家  参考了生物神经元的结构，发表了抽象的神经元模型 。  
神经元模型是一个包含输入，输出与计算功能的模型。

其中的  为激活函数  

图中  求和圆圈和符号函数组成一个神经元。连接是神经元中最重要的东西。每一个连接上都有一个权重。  
一个神经网络的训练算法就是让权重的值调整到最佳，以使得整个网络的预测效果最好。 
 模型虽然简单，但是是神经网络大厦的地基。
 单层神经网络感知器
 年，计算科学家  提出了由两层神经元组成的神经网络。他给它起了一个名字—感知器。  
在原来  模型的输入位置添加神经元节点，标志其为输入单元。其余不变，便有了最简单的神经网络。  

假如我们要预测的目标不再是一个值，而是一个向量，例如 。那么可以在输出层再增加一个输出单元。 

感知器中的权值是通过训练得到的。所谓训练，就是根据已有的输入和输出，找出最合适的权重参数。
利用感知器，可以很好的完成线性分类任务。  
下图显示了在二维平面中划出决策分界的效果，也就是感知器的分类效果。  

 年  出版了一本叫《》的书，里面用详细的数学证明了感知器的弱点 感知器只能做简单的线性分类任务。
 两层神经网络
 说过单层神经网络无法解决异或问题；两层神经网络可以解决异或问题，且具有非常好的非线性分类效果，但两层神经网络的计算是一个问题，没有一个较好的解法。 
 两层神经网络多层感知器
 年， 和  等人提出了反向传播，算法，解决了两层神经网络所需要的复杂计算量问题，从而带动了业界使用两层神经网络研究的热潮。  

图中输入与输出的节点数是可以根据需要修改的。同时为了让计算更合理，每一层都会增加一个常量的偏置单元。  

使用矩阵运算来表达整个计算公式的话如下：其中  都为矩阵  
    = ；    = ；
理论证明，两层神经网络可以无限逼近任意连续函数。也就是说，面对复杂的非线性分类任务，两层神经网络可以分类的很好。
下面就是一个  例子，红色的线与蓝色的线代表数据。而红色区域和蓝色区域代表由神经网络划开的区域，两者的分界线就是决策分界。
可以看到，这个两层神经网络的决策分界是非常平滑的曲线，而且分类的很好。 

 反向传播算法
机器学习模型训练的目的，就是使得参数尽可能的与真实的模型逼近。具体做法是这样的。首先给所有参数赋上随机值。我们使用这些随机生成的参数值，来预测训练数据中的样本。样本的预测目标为 ，真实目标为 。那么，定义一个值 ，计算公式如下：
 =     
这个值称之为损失，我们的目标就是使对所有训练数据的损失和尽可能的小。  
此时这个问题就被转化为一个优化问题。一个常用方法就是高等数学中的求导，但是这里的问题由于参数不止一个，求导后计算导数等于  的运算量很大，所以一般来说解决这个优化问题使用的是梯度下降算法。梯度下降算法每次计算参数在当前的梯度，然后让参数向着梯度的反方向前进一段距离，不断重复，直到梯度接近零时截止。一般这个时候，所有的参数恰好达到使损失函数达到一个最低值的状态。 

在神经网络模型中，由于结构复杂，每次计算梯度的代价很大。因此还需要使用反向传播算法。反向传播算法是利用了神经网络的结构进行的计算。不一次计算所有参数的梯度，而是从后往前。首先计算输出层的梯度，然后是第二个参数矩阵的梯度，接着是中间层的梯度，再然后是第一个参数矩阵的梯度，最后是输入层的梯度。计算结束以后，所要的两个参数矩阵的梯度就都有了。 
反向传播算法可以直观的理解为下图。梯度的计算从后往前，一层层反向传播。前缀  代表着相对导数的意思。  

 深度学习

随着  算法的提出，神经网络也重新得到人们的重视，开始发力于语音识别，图像识别，自动驾驶等多个领域。 

但是神经网络仍然存在若干的问题：尽管使用了  算法，一次神经网络的训练仍然耗时太久，而且困扰训练优化的一个问题就是局部最优解问题，这使得神经网络的优化较为困难。同时，隐藏层的节点数需要调参，这使得使用不太方便，工程和研究人员对此多有抱怨。 

 年代中期，由  等人发明的   ，支持向量机算法诞生，很快就在若干个方面体现出了对比神经网络的优势：无需调参；高效；全局最优解。基于以上种种理由， 迅速打败了神经网络算法成为主流。

 年， 在《》和相关期刊上发表了论文，首次提出了深度信念网络的概念。与传统的训练方式不同，深度信念网络有一个预训练的过程，这可以方便的让神经网络中的权值找到一个接近最优解的值，之后再使用微调 技术来对整个网络进行优化训练。这两个技术的运用大幅度减少了训练多层神经网络的时间。他给多层神经网络相关的学习方法赋予了一个新名词—深度学习。 

很快，深度学习在语音识别领域崭露头角。接着， 年，深度学习技术又在图像识别领域大展拳脚。 与他的学生在  竞赛中，用多层的卷积神经网络成功地对包含一千类别的一百万张图片进行了训练，取得了分类错误率 的好成绩，这个成绩比第二名高了近  个百分点，充分证明了多层神经网络识别效果的优越性。


多层神经网络如下：

通过研究发现，在参数数量一样的情况下，更深的网络往往具有比浅层的网络更好的识别效率。这点也在  的多次大赛中得到了证实。从  年起，每年获得  冠军的深度神经网络的层数逐年增加， 年最好的方法  是一个多达  层的神经网络。  
在最近的  大赛上，目前拿到好成绩的  团队的方法使用的更是一个深达  层的网络！  
目前，深度神经网络在人工智能界占据统治地位。但凡有关人工智能的产业报道，必然离不开深度学习。神经网络界当下的四位引领者除了前文所说的 ， 以外，还有  的发明人  ，以及《 》的作者 。 
 回顾
从单层神经网络感知器开始，到包含一个隐藏层的两层神经网络，再到多层的深度神经网络，一共有三次兴起过程。 

下图说明了，随着网络层数的增加，以及激活函数的调整，神经网络所能拟合的决策分界平面的能力。

一个成功的技术与方法，不仅需要内因的作用，还需要时势与环境的配合。神经网络的发展背后的外在原因可以被总结为：

更强的计算性能
更多的数据 
以及更好的训练方法。

 其他
 量子计算
随着深度学习需要的计算量越来越大，目前的计算水平无法满足深度学习的要求，量子计算的发展，可能会一定程度决定机器学习的发展。
 人工智能
虽然现在人工智能非常火热，但是距离真正的人工智能还有很大的距离。就拿计算机视觉方向来说，面对稍微复杂一些的场景，以及易于混淆的图像，计算机就可能难以识别。个人认为，目前人工智能全面替代人还有很长的路要走。前言
持久化包括和两种方式，而采用方式时会定期重写文件以优化文件结构并减少磁盘占用。为了使操作不影响对外提供服务，重写操作由子进程完成。然而，当系统配置中_ = ，且系统内存不足以子进程时，重写就无法启动，而此之前已打开的也永远不会关闭，并在下一次尝试重写时又创建新的，从而造成泄漏。
这次，我们在对访问的一个服务进行升级重启后遇到问题，该服务的日志出现大量访问连接错误和超时的信息。随后，使用也无法连接到服务。在进一步分析了服务端日志和运行数据后，我们大致得出了问题产生的原因，并通过分析源码确认了的存在。以下详细描述此次问题的产生及定位过程。
故障由来
首先描述一下出现故障的实例的部署运行特征。此实例是用于一项离线作业的队列使用的，该作业每天跑一次。运行时，一个由触发的工具作为生产者会把需要处理的号码推入的中，而另一个消费者工具则定时尝试从中取出号码做相应处理。消费者消费速度远慢于生产者，所以期间的内存占用会达到一个极值。
当天对消费者服务以下称进行升级，增加了并行数重启后这点是问题暴漏的直接原因，发现异常，报出很多网络连接错误或接收超时，但在升级前并没有错误。因为数远小于中=的设定，且使用的是长连接方式，初步判断是重启连接断开后无法重新正常连接。
尝试用自带客户端查看服务器运行状态，同样报错   ，看来问题可能在服务端了。
根据日志及数据定位 
首先检查实例的运行情况：占用几乎为，内存占用也很低，进程启动时间表明实例没有重启。因为当时所有作业已经跑完，中数据为空，所以这些指标正常。
然后查看服务的，果然的频繁报错如下图。日志很直接的给出了连接失败的原因是太大。
……
                  =
                  =
                  =
……
使用命令检查数，发现当时进程打开的数已经达到个，而其中大部分基本都是：

而中，主要用于父子进程间通信，如重写、基于的持久化等场景。难道是与某个子进程相关的调用出了问题？继续回溯服务端日志，发现果然在升级重启前，开始服务端日志已经出现异常，并在左右出现了变化：
……
               
         
            
               
……
            
               
            
               
            
                
            
                
……
 分析日志可初步推测故障发生的过程：

在离线作业运行过程中，随着中数据量增加，内存占用逐渐增加；
当系统剩余内存不足以子进程时，重写子进程启动失败，此时错误为“          ”，而用于父子进程通信的不知什么原因没有关闭；
不断尝试启动重写子进程，终于在数小时后将允许的数耗尽，此时错误为“           ”；
与此同时，随着离线作业的完成，内存占用已经下降，但由于不足，重写子进程还是不能启动；
注意到，被长连接占用的 在此过程中是一直没有释放的。直到升级重启，释放出了一部分，重写子进程成功运行，不再刷相关的错误；
升级后，我们增加了并行数，于是需要更多的 来与通信，但是目前空闲仅为之前停止时释放的数量，于是超出限制的就无法正常运行了。所以，我们一开始就只看到“       ”这个错误。

这里面有两个问题待确定：

用于与子进程通信的为何没有被关闭
中能打开的数量限制如何确定

随后我们直接分析源码查找答案。
源码查证
一限制
首先，我们定位到连接报错的主要调用链为  =  = ：
        {
     
      =  ==  {
        _
                     =
            
                 
        
    }
    ……
}
      
           
{
      =  {
         = 
         _
    }
……
}
而则是在中被初始化和设置的，大小为个。而我们采用默认配置个，所以当=时就出错了。
 = __
二重写子进程启动失败为何不关闭
重写过程由定时时间事件处理函数触发，调用启动重写子进程。在方法中我们注意到如果失败，过程就直接退出了。
  {
    ……
      = _  _  创建
    ……
      =  ==  {
          
        ……
    }  {
          
        子进程启动出错处理
          ==  {
            _
                        
                  最初内存不足正是这里打出的错误
             _
        }
    ……
    }
}
而关闭的方法，是在 =  中发现重写子进程退出后被调用：
……
                
     __ =  || __ =  ||
        
    {
        ……
        任意子进程退出时执行
          =  =  {
            ……
              ==  {
                ……
            }    == __ {
                
            }    == __ { 发现是重写子进程完成
                 执行后续工作，包括关闭
            }
            ……
        }
    }
……
由此可见，如果重写子进程没有启动，则将不会被关闭。而下次尝试启动重写时，又会调用创建新的。
解决方案
定位到问题后相关关键字，发现这一问题早在年就被两次在社区上报参考  ，年有开发者提交代码修复此问题，直至年月相关修复才被合入主干参考  。看来下一版本才会修复此问题，真是一只长寿的。
：这只长寿的在  版本已经修复了 ｡￫‿￩｡
其实该问题发生概率不大，如果机器内存相对数据量足够大，则无需理会。如果需要处理，一个方案可以参考官方修正方式修改代码：在中，启动失败时调用关闭打开的。
不改代码的规避方案：

设置系统的_ = 其意义可查阅手册，本文不再展开，尽量减少子进程失败的情况；
设置的限制，当内存使用达到一定比例时不再接受新的数据；
使用主从备份，或持久化方式无此问题，关闭持久化，等下一版本发布。

此外，还可以通过监控手段及早发现问题。目前我们主要通过模调监控服务的被调情况，而对于本身运行状况没有监控措施。而此类问题，其实是可以通过监控本身运行状况及早发现的，这是下一步探索方向。作者 | 张耀琦编辑 | 顾乡

张耀琦，现腾讯即通应用部工程师一枚；数学出身，博客专家的专栏；目前爱好钻研机器学习。

什么是梯度下降法？学习速率的引入；如何调整学习速率；算法介绍；用泰勒展开式对梯度下降法进行数学理论支持

引用课程：_

什么是 梯度下降法？
在第二篇文章中有介绍到梯度下降法的做法，传送门：【机器学习入门系列】 回归：案例研究
 梯度下降法
在回归问题的第三步中，需要解决下面的最优化问题：


这里的是复数，即 \ 指代一堆参数，比如上篇说到的  和 。


我们要找一组参数 \ ，让损失函数越小越好，这个问题可以用梯度下降法解决：
假设 \ 有里面有两个参数 {\{} \{}}
随机选取初始值 

这里可能某个平台不支持矩阵输入，看下图就好。

然后分别计算初始点处，两个参数对  的偏微分，然后 \{} 减掉 \ 乘上偏微分的值，得到一组新的参数。同理反复进行这样的计算。黄色部分为简洁的写法，\ \即为梯度。

\叫做 学习速率


上图举例将梯度下降法的计算过程进行可视化。
：调整  学习速率
小心翼翼地调整  
举例：

上图左边黑色为损失函数的曲线，假设从左边最高点开始，如果   调整的刚刚好，比如红色的线，就能顺利找到最低点。如果    调整的太小，比如蓝色的线，就会走的太慢，虽然这种情况给足够多的时间也可以找到最低点，实际情况可能会等不及出结果。如果    调整的有点大，比如绿色的线，就会在上面震荡，走不下去，永远无法到达最低点。还有可能非常大，比如黄色的线，直接就飞出去了，参数的时候只会发现损失函数越更新越大。
虽然这样的可视化可以很直观观察，但可视化也只是能在参数是一维或者二维的时候进行，更高维的情况已经无法可视化了。
解决方法就是上图右边的方案，将参数改变对损失函数的影响进行可视化。比如   太小蓝色的线，损失函数下降的非常慢；  太大绿色的线，损失函数下降很快，但马上就卡住不下降了； 特别大黄色的线，损失函数就飞出去了；红色的就是差不多刚好，可以得到一个好的结果。
自适应  
举一个简单的思想：随着次数的增加，通过一些因子来减少  

通常刚开始，初始点会距离最低点比较远，所以使用大一点的  
好几次参数之后呢，比较靠近最低点了，此时减少  
比如 \{} = \  \{}， 是次数。随着次数的增加，\{} 减小

但   不能是  ，不同的参数需要不同的  
 算法
 是什么？
每个参数的学习率都把它除上之前微分的均方根。解释：
普通的梯度下降为：
 是一个参数
 可以做的更好：

\{之前参数的所有微分的均方根，对于每个参数都是不一样的。
举例
下图是一个参数的更新过程

将  的式子进行化简：

 存在的矛盾？

在  中，当梯度越大的时候，步伐应该越大，但下面分母又导致当梯度越大的时候，步伐会越小。
下图是一个直观的解释：

下面给一个正式的解释：

比如初始点在 {}，最低点为 \{}{}，最佳的步伐就是 {} 到最低点之间的距离 | {}  \{}{} |，也可以写成 \{| {}  |}{}。而刚好  |{}  | 就是方程绝对值在{}这一点的微分。
这样可以认为如果算出来的微分越大，则距离最低点越远。而且最好的步伐和微分的大小成正比。所以如果踏出去的步伐和微分成正比，它可能是比较好的。
结论：梯度越大，就跟最低点的距离越远。
这个结论在多个参数的时候就不一定成立了。
多参数下结论不一定成立
对比不同的参数

上图左边是两个参数的损失函数，颜色代表损失函数的值。如果只考虑参数 {}，就像图中蓝色的线，得到右边上图结果；如果只考虑参数 {}，就像图中绿色的线，得到右边下图的结果。确实对于和，结论是成立的，同理和也成立。但是如果对比和，就不成立了，比大，但距离最低点是比较近的。
所以结论是在没有考虑跨参数对比的情况下，才能成立的。所以还不完善。
之前说到的最佳距离\{| _{}  |}{}，还有个分母  。对进行二次微分刚好可以得到：

所以最好的步伐应该是：
一次微分二次微分
即不止和一次微分成正比，还和二次微分成反比。最好的应该考虑到二次微分：

 进一步的解释
再回到之前的 

对于\{\{}_{=} {}{} } 就是希望再尽可能不增加过多运算的情况下模拟二次微分。如果计算二次微分，在实际情况中可能会增加很多的时间消耗
：  随机梯度下降法
之前的梯度下降：

而  更快：
损失函数不需要处理训练集所有的数据，选取一个例子 {}

此时不需要像之前那样对所有的数据进行处理，只需要计算某一个例子的损失函数{}，就可以赶紧 梯度。
对比：

常规梯度下降法走一步要处理到所有二十个，但 此时已经走了二十步没处理一个就更新
： 特征缩放
比如有个：

两个输入的分布的范围很不一样，建议把他们的范围缩放，使得不同输入的范围是一样的。

为什么要这样做？

上图左边是{}的比 {}要小很多，所以当{} 和 {}做同样的变化时，{}对的变化影响是比较小的，{}对的变化影响是比较大的。
坐标系中是两个参数的 现在考虑左边蓝色，因为{}对的变化影响比较小，所以{}对损失函数的影响比较小，{}对损失函数有比较小的微分，所以{}方向上是比较平滑的。同理{}对的影响比较大，所以{}对损失函数的影响比较大，所以在_{}方向有比较尖的峡谷。
上图右边是两个参数比较接近，右边的绿色图就比较接近圆形。
对于左边的情况，上面讲过这种狭长的情形不过不用的话是比较难处理的，两个方向上需要不同的学习率，同一组学习率会搞不定它。而右边情形更新参数就会变得比较容易。左边的梯度下降并不是向着最低点方向走的，而是顺着等高线切线法线方向走的。但绿色就可以向着圆心最低点走，这样做参数更新也是比较有效率。
怎么做 ？
方法非常多，这里举例一种常见的做法：

上图每一列都是一个例子，里面都有一组。
对每一个维度绿色框都计算平均数，记做{}；还要计算标准差，记做\{}。
然后用第个例子中的第个输入，减掉平均数{}，然后除以标准差\{}，得到的结果是所有的维数都是，所有的方差都是
梯度下降的理论基础
问题
当用梯度下降解决问题：

每次更新参数 \，都得到一个新的 \，它都使得损失函数更小。即：

上述结论正确吗？
结论是不正确的。。。
数学理论

比如在\{}处，可以在一个小范围的圆圈内找到损失函数细小的\{}，不断的这样去寻找。
接下来就是如果在小圆圈内快速的找到最小值？
 泰勒展开式
先介绍一下泰勒展开式
定义
若在 = _{}点的某个领域内有无限阶导数即无限可微分， ，那么在此领域内有：

当很接近{}时，有 \ {}  {}  {}
式就是函数在 = _{}点附近关于的幂函数展开式，也叫泰勒展开式。
举例：

图中条蓝色线是把前项作图，橙色线是 。
多变量泰勒展开式
下面是两个变量的泰勒展开式

利用泰勒展开式简化
回到之前如何快速在圆圈内找到最小值。基于泰勒展开式，在 点的红色圆圈范围内，可以将损失函数用泰勒展开式进行简化：

将问题进而简化为下图：

不考虑的话，可以看出剩下的部分就是两个向量\ \{} \ \{} 和  的内积，那怎样让它最小，就是和向量   方向相反的向量

然后将和带入。


发现最后的式子就是梯度下降的式子。但这里用这种方法找到这个式子有个前提，泰勒展开式给的损失函数的估算值是要足够精确的，而这需要红色的圈圈足够小也就是学习率足够小来保证。所以理论上每次更新参数都想要损失函数减小的话，即保证式 成立的话，就需要学习率足够足够小才可以。
所以实际中，当更新参数的时候，如果学习率没有设好，是有可能式是不成立的，所以导致做梯度下降的时候，损失函数没有越来越小。

式只考虑了泰勒展开式的一次项，如果考虑到二次项比如牛顿法，在实际中不是特别好，会涉及到二次微分等，多很多的运算，性价比不好。

梯度下降的限制


容易陷入局部极值
还有可能卡在不是极值，但微分值是的地方
还有可能实际中只是当微分值小于某一个数值就停下来了，但这里只是比较平缓，并不是极值点


相关推荐
机器学习从入门到出家深度学习入门实战二用训练线性回归深度学习入门实战三图片分类中的逻辑回归一、概述：通用 == 低效
在开始处理器的讨论之前，先上一张经典的类比图：分别以“可编程能力灵活性”和“开发难度定制性计算效率能耗”为横轴和纵轴，将当前主流处理器、、、专用置于下图中。

图 计算平台选择依据
可见，无所不能的，其最大限度的灵活性是以牺牲计算效率和能耗为代价的。和则更倾向于针对某一特定应用，达到较高的计算效率和能耗比。无疑，专用具有最高的计算效率和最低的功耗，但在架构、设计、仿真、制造、封装、测试等各个环节将消耗大量的人力和物力。而在深度学习模型不断涌现的环境下，对、等各个模型分别进行构架设计甚至定制一款独立是一件非常奢侈的事情，因此在处理器的设计上，大家的做法逐渐一致，设计一款在领域具备一定通用性的构架，即与类似的领域处理器。使其可以覆盖深度学习中的一类如常见模型，或多类如等。
二、嵌入式云端，不同场景下，处理器的两个选择
 处理器的发展和现状
伴随着深度学习模型的深化和算力需求的提升，从学术界兴起的处理器方案已经迅速蔓延到工业界。目前，各大互联网、半导体、初创公司的方案归纳如表所示，若感兴趣可转到唐杉同学维护的列表：。
表 深度学习处理器方案列表


图 处理器的发展和设计目标
处理器的发展过程如图所示。在早期，计算规模较小，算力较低，故研发的处理器主要针对嵌入式端的应用；随着模型的逐渐加深，对算力的需求也相应增加，导致了带宽瓶颈，即问题带宽问题的成因详见节，此时可通过增大片内缓存、优化调度模型来增加数据复用率等方式解决；当云端的处理需求逐渐浮出水面，多用户、高吞吐、低延迟等需求对算力的需求进一步提升，传统的方式已经不能问题极大的阻碍了处理器性能。此时，片上  ，高带宽存储器的出现使深度学习模型完全放到片上成为可能，从而解决了瓶颈，使云端的发展方向从解决带宽问题，转向解决算力伸缩问题。
到目前为止，以的应用为标志，云端高性能深度学习处理器的发展共经历了两个阶段：
 第一阶段，解决带宽问题与嵌入式的方式类似；
 第二阶段，解决算力伸缩问题。
 带宽瓶颈
第一阶段，囊括了初期的处理器，以及至今的大部分嵌入式前段的解决方案，包括第一代、目前的相关构架、寒武纪的构架，以及以上的学术界成果等。欲达到更高的性能，一个有效的方法是大幅度提升计算核心的并行度，但算力的扩张使带宽成为瓶颈。例如，图中的个乘加运算单元若运行在的频率下，每秒需要的数据带宽；一个典型的高性能以 为例共有个，跑满性能需要的带宽；而一条 仅能提供的带宽。因此在第一阶段，设计的核心是，一方面通过共享缓存、数据调用方式的优化等方式提升数据复用率，并利用高带宽的片上缓存减少片外存储器的数据加载。另一方面通过模型优化、低位宽量化、稀疏化等方式简化模型和计算。
数据复用的例子如图像卷积时，对于一张输入的特征图，其卷积核只需加载一次即可在整张上复用；而增加并行任务数量可以进一步使同一组复用于更多。

图 一个乘加单元及其带宽计算
 算力伸缩
尽管片上分布的大量缓存能提供足够的计算带宽，但由于存储结构和工艺制约，片上缓存占用了大部分的芯片面积通常为至，限制了缓存容量的进一步提升，如图所示。

图 芯片中片上缓存的规模，左图为第一代，蓝色部分为缓存区域，占用芯片面积的；右图为寒武纪公司的  设计，缓存占面积的。
而以为代表的存储器堆叠技术，将原本一维的存储器布局扩展到三维，大幅度提高了片上存储器的密度，如图所示，标志着高性能处理器进入第二阶段。但在工艺、封装、等方面的要求大幅度提升了成本，因此仅出现在互联网和半导体巨头的设计中、、、。使片上缓存容量从级别提升到级别，可以将整个模型放到片上而不再需要从片外中加载；同时，堆叠存储器提供的带宽不再受限于芯片引脚的制约而提升倍，使带宽不再是瓶颈。此时，设计的核心在于高效的计算构架、可伸缩的计算规模、和分布式计算能力。

图 与片内垂直堆叠技术
在后续的论述中，这两个阶段的构架方案有较大区别，分别如下；若仅对科技巨头的方案感兴趣，可忽略二。为保证论述的一致性，和的内容合并在三中讨论。
深度学习的异构加速技术二带宽扼喉下的百花齐放
深度学习的异构加速技术三算力释放与异构集群
  未完待续。。。如何用  快速在腾讯云上开发小程序之系列：实现客户侧商品列表、商品详情页程序
一、实验简介
通过实现商品列表、商品详情页程序，熟练掌握云端数据表查询操作。
二、实验目标

掌握小程序调试方法

掌握小程序操作云端数据方法

掌握云端数据表增删改查操作


三、实验步骤
  
 应用设置
第一步 修改  ，初始化全局对象
 {
    {
 
  创建  对象
  = {
 
 
  
  
 
 }

  创建全局对象  =   信道
  =   会话
  =   存储  =   工具
  =   用户 }
 
 
 
 
 
 
 }
第二步 修改  添加页面清单，修改标题栏默认属性
 {
 
 
 
 {
 
  
   
 
 }
 }
第三步 修改  设定全局样式
  {
  
  
  
  
  
   
  
 }
 用户登录
第一步 修改  用户登录代码
   = 
 {
  {
   
  {
 
 载入中
 }
 }
    {
   = 
   {
 {}
 }
 }
 }
第二步 修改  更新页面布局
   =
   = =
   = ={{}}  =
   ={{}}
  
   =
   ={{}}
  
  
第三步 修改  微调页面样式
  {
  
  
  
 }

  {
  
  
  
  
 }

  {
  
 }

  {
  
 }
第五步 修改  设置页面名称
 {
  用户登录
效果预览： 通过微信开发者工具，通过模拟器可以实时预览效果
 商品列表页
 全局样式表
在小程序中有两种方式使用全局样式。在 中定义的样式为全局样式；也可以通过  方法引用样式表文件。为了便于修改前台样式，我们定义一个通用的样式文件  。创建  前台通用样式文件； 下为代码片段，完成代码参见源码。
  {
 
 
 }

 = {
    
  
 }

 = {
 
 
 }

 {
  
  
  
  
  
    
 }
 
 购物车布局
因为有多个页面，用到了购物车底栏； 所以将购物车布局代码抽离成独立文件使用 = 标签引入。
创建购物车  代码文件。
  = 
  =
  = =
 
  =
  = {{}} 件商品 {{
_}} 元 
 
  = =

 
 = 
 = = ={{}}
 ={{}}
 = 清空 
 
 = 
 = = ={{}}
 ={{}}
 ={{}} = 结算 
 
 
 购物车、商品信息过滤功能模块
对于不同会员来说，每件商品有不同价格，商品信息过滤功能和购物车也在多个页面用到，将购物车、商品信息过滤等功能封装成对象，在不同页面中复用。
创建  目录， 创建  文件。
      {

   = 

  = 
  = 
  = __  _
  = __  _  _


  生成订号
  =  {
   =  
    

 }


  根据会信息 处理价格
  =  _  {
  _
 }


  处理商品字段
  =    {

    =     {
   =  _
 _ = 
 _ = 
 }

  
 }

  = {

     {
   =  || {}

     =   {
  =  || _

  =  || 

  =  || 

  
 }  {
  =  || 
  =  || 
  =  || 
  
 }

  
 }


       {

   =  || {}

     ==   {
  =  
  
 }  {
  = {    }
 }
  
 }


      {
   =  || {}

     ==   {
 
 }

  =     

    =   {
  {   }   {}
 }
  
 }

     {
   =  || {}
  {   }   {}
  
 }

  {
  {}
 }

   {
  = = =
   =  || {}

       {
   =  
  =    
  =       
 
 }

   =  
  = 
  { _ _ }
 }

   {
   || {}
 }
 }

 }

  = 
 商品列表页
创建  目录，在目录下创建    和  文件。
第一步 将页面添加到 
 {
 
 
 
 
 
 
 {
 
  
   
 
 }
 }
第二步 修改  页面布局
  = ={{}}
  =
  =   =
 ={{}} =_ 
  = = 
= ={{_}} = ={{
}} 
  = = =
 ={{_}} ={{}}

  = =  
= ={{_}} ={{
_}} 
  =
  = = =
 ={{_}}
 ={{_}}
 =
 =购买
 
 

  =   {{}} =
读取中
  =
 

  = 
 
第三步 修改  页面样式
  

  {
  
    
  
 
  
  
 
  
  
 }

   {
  
  
  
 }
   {
  
  
 
 
 }
 {
  
  
  
 }
第四步 修改  添加读取商品逻辑
   = 
   = 
 {

 {
 {}
 {}
 
 {}
 
  
 }

  链接到详情页
{
   = 
 {  =  
 }
 }

   {
  = 
  {} 
 }

   {
  = 
  {} 
 }


  读取商品信息
      {

   = 
  =  || 

        {

 
  = 
    

  {

 _ = _  
   _  _  {
 _ = _
 }

 {
 {
 _
 _
 _
 
 }
 
 }

 }  {
 
 }

 }
 }

    {

   = 
  = 

  设置页面高度
{}
   

  用户登录
    {
  =     
 {}  初始
化购物车信息
    读取商品列表

}    {
  
 
 }
 }

   商品表
   商店工具对象 
第五步 修改  修改标题
 {
  商品列表
 }
 滑到底部追加数据
第一步 修改  绑定  事件
  将标签 
  = ={{}}

  修改为
  = = ={{
}}
第二步 修改  添加  属性
 
     {
   = 
     
    ==   


 
     
{
   = 
       {
 
 }
  {  } 
 
 }
 }
 
 购物车相关功能
修改  添加  、 和 属性
  购物车算
   {
 {   }
 }

  清空购物车
   {
 
 { }
 }

  添加到购物车
     {
   = 
   

 { }
 }
四、实验结果
通过本实验，熟练掌握小程序调试方法；熟悉数据表查询操作。

相关推荐如何用快速在腾讯云上开发小程序之系列 ：实现腾讯云 调用如何用快速在腾讯云上开发小程序之系列：搭建开发管理平台 新增线下、、公众号多处入口，小程序会再火起来么？内有福利投资者眼中的大佬，创客眼中的“大”——腾讯云，近日豪掷万代金券，助力“中国天津北辰直通硅谷创新创业大赛”！

腾讯云将作为本次直通硅谷创业大赛的钻石赞助商，为优秀项目提供万代金券的云服务支持！

首先，对于进入复赛的项目，腾讯云将提供“孵化计划”扶持服务：价值万元的腾讯云产品代金券！只要进入本次大赛复赛，完成腾讯云账号企业认证，且无任何腾讯云消费，即可获得此项扶持服务！

其次，对于进入决赛的项目，腾讯云将提供“起飞计划”扶持服务，除了包含价值万元的腾讯云代金券外，还可获得折腾讯云产品购买优惠，可再减免万元！
此外，腾讯云还为进入决赛的项目提供了价值万元的上云迁移服务以及技术支持，包括新品体验、技术咨询、解决方案等。只要进入大赛决赛，且完成腾讯云账号企业认证、无任何腾讯云消费，即可获得此项扶持服务！
而本次大赛决赛胜出的项目团队或企业，将获得由腾讯云提供的“腾飞计划”扶持服务资源，其中包含：
价值万元的腾讯云产品代金券、最高减免达万元的折云产品购买优惠、还有价值万元的上云迁移服务、价值万元的护航服务、价值万元的技术培训，还有对架构师支持新产品优先体验、产品使用技术咨询、行业解决方案咨询等！优胜的项目只要完成腾讯云账号企业认证，且无任何腾讯云消费，即可获得此项扶持服务！顺带一提，以上优惠券有效期是个月哦！

此次大赛将有家以上的优质项目参赛，分为企业组和团队组。初赛将筛去其中的九成，将有个项目进入复赛！复赛将再筛去其中的九成，共有个优质项目进行最终角逐，最终选出企业优胜项目和团队优胜项目各名！
个进入复赛项目万元=万元个进入决赛项目万元=万元个优胜项目万元=万元共计万元！外加腾讯云提供的其他各种优惠和扶持，总服务价值超过千万元！怎一个“豪”字了得！

自腾讯云联合投资机构、孵化器和产业园区等推出创业扶持计划“云创业”以来，已经为很多创业者及创业项目提供了服务支持。此次腾讯云作为钻石赞助商助力“中国天津北辰直通硅谷创新创业大赛”，将使参赛创业项目获能以更低的门槛获得云资源、技术支持、营销扶持、护航服务等全套创业资源。

中国天津北辰直通硅谷创新创业大赛是由天津市北辰区人民政府主办的大型国际创新创业大赛。

大赛以重新定义时代为主题，为大赛优胜项目团队和企业提供了万现金奖励和免费的天硅谷游学机会。等这些项目回国后，还将获得巨额的项目投资。此外，天津本地还有百亿配套扶持基金鼎力支持！基于致力于做更简洁的后台管理系统完美整合      项目代码简洁注释丰富上手容易同时包含许多基础模块用户管理角色管理部门管理字典管理等个模块可以直接作为一个后台管理系统的脚手架。
 新增 服务提供对接服务端接口的支持并利用 鉴权机制给予客户端的访问权限传输数据进行签名保证传输过程数据的安全性
项目特点
、基于简化了大量项目配置和依赖让您更专注于业务开发独特的分包方式代码多而不乱。、完善的日志记录体系，可记录登录日志，业务操作日志可记录操作前和操作后的数据，异常日志到数据库，通过注解和方法，业务操作日志可具体记录哪个用户，执行了哪些业务，修改了哪些数据，并且日志记录为异步执行，详情请见注解和类。、利用模板引擎对前台页面进行封装和拆分，使臃肿的代码变得简洁，更加易维护。、对常用插件进行二次封装，使代码变得简洁，更加易维护，具体请见文件夹内代码。、利用框架对经常调用的查询进行缓存，提升运行速度，具体请见类中标记的方法。、层采用  方式的返回结果，返回给前端更为灵活的数据，具体参见包中具体类。、防止攻击通过类对所有的输入的非法字符串进行过滤以及替换。、简单可用的代码生成体系，通过可生成带有主页跳转和增删改查的通用控制器、页面以及相关的，还可以生成和，并且这些生成项都为可选的，通过下的一些列开关可灵活控制生成模板代码，让您把时间放在真正的业务上。、控制器层统一的异常拦截机制利用统一对异常拦截具体见类。、页面统一的 单例模式写法，每个页面生成一个唯一的全局变量，提高的利用效率，并且有效防止多个人员开发引起的函数名类名冲突，并且可以更好地去维护代码。
开源项目地址 开源项目码云地址 后台管理系统地址：
、如果你有开源项目、如果你有想推荐的开源项目、欢迎联系我们，我们将为你免费进行推荐
视频课程推荐《深入理解热门开源项目管理系统》
内容简介： 、教程以开源项目为核心，系统地讲解了如何构建一个日常生产环境实用的基于 并且集成      的后台管理系统。 、教程从项目的搭建，如何进行日常开发讲起，利用通俗易懂的实际业务场景介绍开发中需要注意的事项，教程后半部分重点讲解组成框架的各个模块和功能是如何实现的，并一一介绍这些模块和功能的原理，其中包含、 ，，多数据源，异常拦截，代码生成，日志记录，，数据范围，图片上传，缓存，，事务等等、教程的讲解注重方法论，例如教程讲解缓存、数据范围等内容，不单单是讲如何集成和使用，而是重在讲解他的原理和本质，在学生学会的基础上，引导学生去解决日常开发中遇到的同类问题。 、教程所讲的代码均为实际生产可用的代码，您可以使用进行您的日常开发，也可以把部分代码直接到您的项目中遵守开源协议的前提下。、教程适合入门，了解一定基础的同学，如果您想在工作中独自负责一个项目，那么这套教程是您独当一面的不二之选，当然，如果您想成为一个架构师，这套教程也可以是您踏上架构师之路的第一课！、框架自带的功能：用户管理 角色管理 部门管理 菜单管理 字典管理 业务日志 登录日志、监控管理、通知管理、代码生成月日，腾讯云未来峰会在深圳举办。在峰会现场，腾讯云发布年战略级新品——智能云。

腾讯云将开放腾讯的计算机视觉、智能语音识别、自然语言处理三大核心能力。截至目前，腾讯云围绕这三大能力，已提供种服务，包括应用服务种，平台服务种，框架服务种。

腾讯副总裁、腾讯云总裁邱跃鹏
腾讯云的这场新品发布会上有哪些亮点？
、逆天识别技术识别手写快递单，小时可识别万。
腾讯云总裁邱跃鹏在发布会开始不久先提到这样一件事：顺丰应用腾讯优图技术，可快速识别手写体的快递单。小时可识别万张快递单。
这可得给快递员们省多少事。
腾讯优图技术正是腾讯云开放的计算机视觉相关能力之一。
在计算机视觉方面，腾讯云正联合腾讯优图实验室，开放识别光学字符识别、人脸核身、图片处理、鉴黄等多项智能云服务。目前这些服务日调用量已超过两亿，广泛应用在各类场景。
、能说会道新朋友小微——不做音箱，做背后的机器人。
在这次新品发布会上，腾讯云给大家带来一个新朋友 ——小微。这位新朋友能力很强，几大技能轻松：

语言天赋高：接入微信语音识别、语义分析技术，精通普通话、粤语、英文、韩文；
理解能力强：语音识别字准确率高达％；
从小就听话：通过智能服务系统接入硬件设备，只需你轻轻一句就唤醒；
天生高情商：智能的语义分析能力，随时寻找解决问题的最佳途径。

小微的全名是腾讯云小微智能服务解决方案，所有接入小微的硬件可快速具备视觉和听觉的能力，小到音箱，大到机器人、医疗机构或汽车，连接了小微之后，可快速实现与用户的沟通交互。
小微智能云开放平台融合了计算机视觉和智能语音识别两种能力。在智能语音识别领域，腾讯云提供包括语音转文字、语音合成、声纹识别、音频鉴黄、关键词检索、情绪识别等语音识别能力。
腾讯云副总裁王龙
、论客服一个顶几百个某司客服团队由人减少到个人。
某金融机构以前需要个人工客服每天工作小时，如今却只有个人工客服。
为什么？难道他们已经放弃客服了吗？
并不是，现今该金融机构成为腾讯云的合作伙伴，已接入腾讯云提供的智能客服服务，日消息智能处理率已经达到，面对每天万次的咨询信息，现在只需个智能客服和名人工客服就可以了。
腾讯云基于自然语言处理的智能推荐已经被广泛应用在电商、游戏、金融、泛娱乐等领域。依托腾讯亿用户画像，以数据算法系统为核心，为客户提供毫秒级响应的个性化推荐。
、听说腾讯有三大神秘组织智能语音识别准确率可达
既然三大能力都已揭晓，那下一步，当然就是介绍这些强大能力背后的神秘组织。

自然语言处理能力由腾讯 人工智能实验室提供，识别准确率超过 ；

计算机视觉处理能力由腾讯优图实验室提供，在国际权威人脸识别数据库测试中准确率超过 ；

智能语音识别能力由微信智能语音团队提供，准确率可达。


均属于业界领先水平。

腾讯已形成布局矩阵：腾讯 腾讯人工智能实验室、腾讯优图实验室、微信智能语音团队和腾讯云。前三个团队向腾讯云输出算法研究等前沿技术，腾讯云则扮演腾讯技术的核心开放窗口的角色。
、跨太平洋的神奇网速上海到美国网络专有通道延迟仅毫秒
为了保证腾讯云各项服务在全球范围的稳定，腾讯还在这几个方面进行云服务的基础设施建设：

提升计算性能，结合业界最新技术推出多机多卡、多品类的计算实例。推出国内首款搭载网卡的云服务器，及国内首款高性能异构计算基础设施——云服务器。

海量的数据存储能力，腾讯云提供全存储场景服务，包括从高频、中频、近线到归档存储的产品方案，同时提供存储网关，定制化的存储方案。

网络领域，腾讯云已构建业界领先的级别超大容量全球环网，每一个节点都有冗余链路保障。新建成的上海到美国西部的网络专有通道的延迟仅毫秒。

领域，年腾讯云带宽储备增加到，增幅；同时腾讯云全球节点数已经超过，覆盖三十多个国家和地区。

全球数据中心建设上，腾讯云目前全球服务节点高达个，覆盖全球大洲。


云计算和人工智能，正迅速地给社会注入科技能量。
正如马化腾在演讲中说：

云已经成为产业革新的源动力、新型社会管理的主平台、人工智能的强载体。

我们过去通常用“用电量”来评估一个城市、一个国家当地的经济发展水平。我们相信未来“用云量”将是另外一个非常重要的反映数字经济发展的指标。

我们还处于云时代的初级阶段，就像有了电但还没出现计算机的时代。未来人工智能成熟了，云人工智能就相当于电计算机。



本文来源于腾讯公众号。导语 随着最近几年机器人、无人机、无人驾驶、的火爆，技术也为大家熟知，被认为是这些领域的关键技术之一。本文对技术及其发展进行简要介绍，分析视觉系统的关键问题以及在实际应用中的难点，并对的未来进行展望。

 技术
   ，同步定位与地图构建，最早在机器人领域提出，它指的是：机器人从未知环境的未知地点出发，在运动过程中通过重复观测到的环境特征定位自身位置和姿态，再根据自身位置构建周围环境的增量式地图，从而达到同时定位和地图构建的目的。由于的重要学术价值和应用价值，一直以来都被认为是实现全自主移动机器人的关键技术。
如下图，通俗的来讲，回答两个问题：“我在哪儿？”“我周围是什么？”，就如同人到了一个陌生环境中一样，试图要解决的就是恢复出观察者自身和周围环境的相对空间关系，“我在哪儿”对应的就是定位问题，而“我周围是什么”对应的就是建图问题，给出周围环境的一个描述。回答了这两个问题，其实就完成了对自身和周边环境的空间认知。有了这个基础，就可以进行路径规划去达要去的目的地，在此过程中还需要及时的检测躲避遇到的障碍物，保证运行安全。

 发展简介
自从上世纪年代概念的提出到现在，技术已经走过了多年的历史。系统使用的传感器在不断拓展，从早期的声呐，到后来的激光雷达，再到单目、双目、、等各种相机，以及与惯性测量单元等传感器的融合；的算法也从开始的基于滤波器的方法、等向基于优化的方法转变，技术框架也从开始的单一线程向多线程演进。下面介绍这些过程中一些代表性的技术。
激光雷达发展
基于激光雷达的 采用或激光雷达也叫单线或多线激光雷达，如下图所示。在室内机器人如扫地机器人上，一般使用激光雷达，在无人驾驶领域，一般使用激光雷达。

激光雷达的优点是测量精确，能够比较精准的提供角度和距离信息，可以达到°的角度精度以及级别的测距精度，扫描范围广通常能够覆盖平面内°以上的范围，而且基于扫描振镜式的固态激光雷达如、等可以达到较高的数据刷新率以上，基本满足了实时操作的需要；缺点是价格比较昂贵目前市面上比较便宜的机械旋转式单线激光雷达也得几千元，安装部署对结构有要求要求扫描平面无遮挡。
激光雷达建立的地图常常使用占据栅格地图 表示，每个栅格以概率的形式表示被占据的概率，存储非常紧凑，特别适合于进行路径规划。

 现任创始人、前副总裁、谷歌无人车领导者 大神下图在他年的经典著作《 》一书中详细阐述了利用激光雷达基于概率方法进行地图构建和定位的理论基础，并阐述了基于粒子滤波器的方法，成为后来激光雷达建图的标准方法之一的基础，该算法也被集成到机器人操作系统  ，中。

年，文献对中的几种 的算法，，，和做了比较评估，读者可前往细看。
年，开源其激光雷达算法库，它改进了计算复杂，没有有效处理闭环的缺点，采用和 的思想构建地图，能够有效处理闭环，达到了较好的效果。
视觉发展
相比于激光雷达，作为视觉传感器的相机更加便宜、轻便，而且随处可得如人人都用的手机上都配有摄像头，另外图像能提供更加丰富的信息，特征区分度更高，缺点是图像信息的实时处理需要很高的计算能力。幸运的是随着计算硬件的能力提升，在小型和嵌入式设备，乃至移动设备上运行实时的视觉已经成为了可能。
视觉使用的传感器目前主要有单目相机、双目相机、相机三种，其中相机的深度信息有通过结构光原理计算的如代，也有通过投射红外并利用双目红外相机来计算的如  ，也有通过相机实现的如代，对用户来讲，这些类型的都可以输出图像和图像。

现代流行的视觉系统大概可以分为前端和后端，如下图所示。前端完成数据关联，相当于视觉里程计，研究帧与帧之间变换关系，主要完成实时的位姿跟踪，对输入的图像进行处理，计算姿态变化，同时也检测并处理闭环，当有信息时，也可以参与融合计算视觉惯性里程计的做法；后端主要对前端的输出结果进行优化，利用滤波理论、等或者优化理论进行树或图的优化，得到最优的位姿估计和地图。

采用滤波器的，如下图，估计时刻的相机位姿需要使用地图中所有路标的信息，而且每帧都需要更新这些路标的状态，随着新的路标的不断加入，状态矩阵的规模增长迅速，导致计算和求解耗时越来越严重，因此不适宜长时间大场景的操作；而采用优化算法的，如下图，通常结合关键帧使用，估计时刻的相机位姿可以使用整个地图的一个子集，不需要在每幅图像都更新地图数据，因此现代比较成功的实时系统大都采取优化的方法。

下面介绍视觉发展历程中几个比较有代表性的系统进行介绍：
是年由 等开发的第一个成功基于单目摄像头的纯视觉 系统。使用了扩展卡尔曼滤波，它的状态由相机运动参数和所有三维点位置构成 每一时刻的相机方位均带有一个概率偏差，每个三维点位置也带有一个概率偏差 可以用一个三维椭球表示 椭球中心为估计值 椭球体积表明不确定程度如下图所示，在此概率模型下 场景点投影至图像的形状为一个投影概率椭圆。 为每帧图像中抽取角点 在投影椭圆中主动搜索 特征点匹配。由于将三维点位置加入估计的状态变量中，则每一时刻的计算复杂度为  因此只能处理几百个点的小场景。

同年，在的师父和发表了实时系统   并开源如下图，它是首个基于关键帧的单目视觉 系统 随后在 年移植到手机端上。在架构上做出了创新的设计，它将姿态跟踪和建图两个线程分开并行进行，这在当时是一个创举，第一次让大家觉得对地图的优化可以整合到实时计算中，并且整个系统可以跑起来。这种设计为后来的实时如所效仿，成为了现代系统的标配。具体而言，姿态跟踪线程不修改地图，只是利用已知地图来快速跟踪；而建图线程专注于地图的建立、维护和更新。即使建立地图线程耗时稍长，姿态跟踪线程仍然有地图可以跟踪如果设备还在已建成的地图范围内。此外，还实现丢失重定位的策略，如果成功匹配点数不足如因图像模糊、快速运动等造成跟踪失败时，则开始重定位——将当前帧与已有关键帧的缩略图进行比较，选择最相似的关键帧作为当前帧方位的预测。

年， 等人提出了单目 系统 其最显著的特点是能实时恢复场景三维模型如下图。基于三维模型， 既能允许应用中的虚拟物体与场景发生物理碰撞，又能保证在特征缺失、图像模糊等情况下稳定地直接跟踪。采用逆深度 方式表达深度。如下图，将解空间离散为×× 的三维网格，其中× 为图像分辨率，为逆深度分辨率，采用直接法构造能量函数进行优化求解。 对特征缺失、图像模糊有很好的鲁棒性，但由于 为每个像素都恢复稠密的深度图 并且采用全局优化，因此计算量很大，即使采用 加速 模型的扩展效率仍然较低。

年，机器视觉组的 等人提出了一套同样也是基于直接法的视觉里程计  系统，该系统年扩展为视觉 系统，并开源了代码。与相比， 仅恢复半稠密深度图如下图，且每个像素深度独立计算 因此能达到很高的计算效率。 采用关键帧表达场景，每个关键帧包含图像 、逆深度图和逆深度的方差。系统假设每个像素的逆深度值服从高斯分布  。 的前台线程采用直接法计算当前帧与关键帧之间相对运动，后台线程对关键帧中每个半稠密抽取的像素点梯度显著区域 在中沿极线搜索 的对应点 得到新的逆深度观测值及其方差，然后采用更新和 。采用位姿图优化来闭合回环和处理大尺度场景。年，等人对进行了功能拓展，使其能够支持双目相机和全景相机。

 年，苏黎世大学机器人感知组的等人提出开源的系统，该系统对稀疏的特征块使用直接法配准   ，获取相机位姿，随后根据光度不变假设构造优化方程对预测的特征位置进行优化 ，最后对位姿和结构进行优化 和 ，而在深度估计方面，构造深度滤波器，采用一个特殊的贝叶斯网络对深度进行更新。的一个突出优点就是速度快，由于使用了稀疏的图像块，而且不需要进行特征描述子的计算，因此它可以达到很高的速度作者在无人机的嵌入式   核处理器平台上可以达到的速度，但是缺点也很明显，它没有考虑重定位和闭环，不算是一个完整意义上的系统，丢失后基本就挂了，而且它的 收敛较慢，结果严重地依赖于准确的位姿估计；年，对进行改进，形成版本，新的版本做出了很大的改进，增加了边缘的跟踪，并且考虑了的运动先验信息，支持大视场角相机如鱼眼相机和反射式全景相机和多相机系统，该系统目前也开源了可执行版本；值得一提的是，对的理论也进行了详细的推导，相关的文献成为后续融合系统的理论指导，如后面的  等系统。

年， 等提出了开源的单目，并于年拓展为支持双目和传感器的，它是目前支持传感器最全且性能最好的视觉系统之一，也是所有在数据集上提交结果的开源系统中排名最靠前的一个。 延续了 的算法框架，增加了单独的回环检测线程，并对框架中的大部分组件都做了改进，归纳起来主要有以下几点：追踪、建图、重定位和回环检测各个环节都使用了统一的 特征，使得建立的地图可以保存载入重复利用；得益于共视图 的使用，将跟踪和建图操作集中在一个局部互见区域中，使其能够不依赖于整体地图的大小，能够实现大范围场景的实时操作；采用统一的词袋模型进行重定位和闭环检测，并且建立索引来提高检测速度；改进了只能手工选择从平面场景初始化的不足，提出基于模型选择的新的自动鲁棒的系统初始化策略，允许从平面或非平面场景可靠地自动初始化。后来，又将系统进行了拓展，形成了融合信息的  ，采用了的论文提出的预积分的方法，对的初始化过程和与视觉信息的联合优化做了阐述。

年，的作者，机器视觉组的等人又提出了系统。该系统是一种新的基于直接法和稀疏法的视觉里程计，它将最小化光度误差模型和模型参数联合优化方法相结合。为了满足实时性，不对图像进行光滑处理，而是对整个图像均匀采样。不进行关键点检测和特征描述子计算，而是在整个图像内采样具有强度梯度的像素点，包括白色墙壁上的边缘和强度平滑变化的像素点。而且，提出了完整的光度标定方法，考虑了曝光时间，透镜晕影和非线性响应函数的影响。该系统在 、 和三个数据集上进行了测试，达到了很高的跟踪精度和鲁棒性。

年，香港科技大学的沈绍劼老师课题组提出了融合和视觉信息的系统，同时开源手机和两个版本的代码，这是首个直接开源手机平台代码的视觉融合系统。这个系统可以运行在设备上，为手机端的增强现实应用提供精确的定位功能，同时该系统也在应用在了无人机控制上，并取得了较好的效果。使用滑动窗口优化方法，采用四元数姿态的方式完成视觉和融合，并带有基于的闭环检测模块，累计误差通过全局位姿图得到实时校正。

接《漫谈  技术下》接上篇《入门常用命令大全上》
 篇数据查询篇
 查询记录
命令格式
   列名称   表名称   条件
说明：一个完整的  语句包含可选的几个子句。 语句的定义如下：
               
  子句是必选的，其它子句如  子句、  子句等是可选的。
一个  语句中，子句的顺序是固定的。例如   子句不会位于  子句的前面。
  语句执行顺序 ：
开始 子句 子句  子句 子句  子句 子句 子句最终结果
每个子句执行后都会产生一个中间数据结果，即所谓的临时视图，供接下来的子句使用，如果不存在某个子句，就跳过。 和  执行顺序基本是一样的。
 查看  执行时的警告
  
 篇数据操作篇
 插入记录
命令格式
    

示例
      
注意： 如果插入值刚好与数据表的所有列一一对应，那么可以省略书写插入的指定列，即：
         
 删除记录
命令格式
     

示例，删除学号为  的学生记录
      =
 修改记录
命令格式
   表名称   列名称= 新值   条件

示例，将学号为  的学生性别改为女性
    =  =
这里只列出简单的增删改的  操作，关于全面的基础的  教程可参考   教程。
 备份还原数据
导出数据库的所有数据表
命令格式
  用户名  数据库名  导出的文件名

示例
  _  _  _
还原整个数据库在  客户端环境下，选择一个数据库之后，直接执行  文件即可。   
  
导出一个表到  文件   
命令格式
  用户名  数据库名 表名导出的文件名

示例
  _   _ _  _   
导入  文件方法同还原整个数据库。
将数据表导出到  文件
命令格式
       
或者  
                     

示例
       
说明：如果不指明输出文件的输出目录的话，默认输出至数据库文件的存储目录。可使用命令     来查看具体位置。如果使用指定  文件输出目录的话，报如下错误：        ，那么错误的原因是所在目录没有写权限。给所在的目录增加写权限即可。
导入  文件  
命令格式
         
或者  
                   

示例
           
注意：指定  文件时使用绝对路径，否则  默认从数据库存储的目录寻找；在导入时，如果出现如下错误：            ，检查之后并非文件没有可读权限，请使用    。加不加  的区别是：使用  关键词，表示从  客户端所在的客户主机读文件。不使用 ，从服务器读取文件。
导入  文件同导入  文件的方法一致。注意导入文件时，都需要提前建立好与文件内各个段对应好的数据表。并且文件的路径需要使用引号括起来，双引号和单引号都可以。
 篇事务控制篇
说到事务控制，先说一下数据库的事务是什么以及  中我们必知的知识点。
数据库事务  ，是指对数据库的一系列操作组成的逻辑工作单元。
并非任意的对数据库的操作序列都是数据库事务。数据库事务拥有以下四个特性，习惯上被称之为  特性。  
原子性：事务作为一个整体被执行，包含在其中的对数据库的操作要么全部被执行，要么都不执行。 
一致性：事务应确保数据库的状态从一个一致状态转变为另一个一致状态。一致状态的含义是数据库中的数据应满足完整性约束。  
隔离性：多个事务并发执行时，一个事务的执行不应影响其他事务的执行。
持久性：已被提交的事务对数据库的修改应该永久保存在数据库中。
 中并非所有的数据库存储引擎都支持事务操作，比如  和  就不支持。所以，使用事务处理的时候一定要确定所操作的表示是否支持事务处理，可以通过查看建表语句来查看有没有指定事务类型的存储引擎。当然，事务处理是为了保障表数据原子性、一致性、隔离性、持久性。这些都是要消耗系统资源的，要谨慎选择。
下面以数据库引擎  为例来演示命令行模式下事务的基本操作。
 查看是否自动提交事务
 默认操作模式就是  自动提交模式。自动提交事务由会话变量  来控制，该变量只对当前会话有效。   
  
    
说明： 环境变量  是用来控制一条  语句提交后是否自动执行，默认值是 ，表示在  命令行模式下每条增删改语句在键入回车后，都会立即生效，而不需要手动 。我们可以把它关闭，关闭之后就需要  之后， 语句才会真正的生效。
 关闭和开启自动提交事务
关闭自动提交事务 默认是自动提交事务的，关闭自动提交事务主要有两种方法。一种是临时关闭，只对当前会话有效。第二种是永久关闭，对所有会话有效。
第一种：临时关闭。
关闭当前会话的自动提交事务
   = 
这样之后，所有增删改语句，都必须使用  之后，才能生效；
第二种：永久关闭。通过修改配置文件  文件，通过  编辑  文件，在 服务器选项下添加：    
=
保存，然后重启  服务即可生效。
开启自动提交事务如果需要，可以开启自动提交模式。
  =
或者将上面配置文件中的新增的 = 删除即可。
 事务执行的基本流程
首先创建一个测试数据表，建表语句如下：
       =
开启一个事务
   ；      

或者
 
执行一系列增删改语句
    
手动提交或者回滚事务回滚：
 
会滚后我们查看数据表中的数据时为：
    
   
表中没有数据，回滚成功。
手动提交事务：
 
提交后，再  的话已经不能回滚了，数据已经插入到数据表了。这里需要注意的是，在当前会话中，我们还没有手动  提交事务的时候，表中的数据已经被插入了，但对于其它会话，如果事务隔离级别是  ，那么在  之前，是查询不到新插入的记录的。
 设置事务的保存点
设置折返点
  

回滚至折返点
    
发生在保存点之前的事务被提交，之后的被忽略。
 设置事务的隔离级别
在数据库操作中，为了有效保证并发读取数据的正确性，提出了事务隔离级别。
数据库是要被广大客户所共享访问的，那么在数据库操作过程中很可能出现以下几种不确定情况。更新丢失 两个事务都同时更新一行数据，一个事务对数据的更新把另一个事务对数据的更新覆盖了。这是因为系统没有执行任何的锁操作，因此并发事务并没有被隔离开来。
脏读 一个事务读取到了另一个事务未提交的数据操作结果。这是相当危险的，因为很可能所有的操作都被回滚。
不可重复读 指的是同一事务中的多个  语句在读取数据时，前一个  和后一个  得到的结果不同。原因是第一次读取数据后，另外的事务对其做了修改，当再次读该数据时得到与前一次不同的值。
幻读 ：幻读是不可重复读的特殊情况，事务中第二次读取的结果相对第一次读取的数据产生了新增，这是因为在两次查询过程中有另外一个事务进行插入造成的。
对不可重复读和幻读的个人理解不同于《高性能 》，主要觉得《高性能 》解释的有很多疑点。个人理解，如有误，后续纠正
为了解决上面的问题，于是就提出事务隔离。事务隔离的级别从低到高有四个级别分别是： 、 、 、。
 ：读取未提交内容所有事务都可以读取未提交事务的执行结果，也就是允许脏读。但不允许更新丢失。如果一个事务已经开始写数据，则另外一个事务则不允许同时进行写操作，但允许其他事务读该事务增删改的数据。该隔离级别可以通过排他写锁实现。
 ：读取提交内容允许不可重复读取，但不允许脏读取。这可以通过瞬间共享读锁和排他写锁实现。读取数据的事务允许其他事务继续访问该行数据，但是未提交的写事务将会禁止其他事务访问该行。
 ：可重复读取禁止不可重复读取和脏读取。这可以通过共享读锁和排他写锁实现。读取数据的事务将会禁止写事务但允许读事务，写事务则禁止任何其他事务。按照这种说法，是不会出现幻读的， 的  的可重复读隔离级别和其他数据库的可重复读是有区别的，不会造成幻象读 。
：序列化提供严格的事务隔离。它要求事务序列化执行，事务只能一个接着一个地执行，不能并发执行。仅仅通过行级锁是无法实现事务序列化的，必须通过其他机制保证新插入的数据不会被刚执行查询操作的事务访问到。
隔离级别越高，越能保证数据的完整性和一致性，但是对并发性能的影响也越大。对于多数应用程序，可以优先考虑把数据库系统的隔离级别设为  。它能够避免脏读取，而且具有较好的并发性能。尽管它会导致不可重复读、幻读和第二类丢失更新这些并发问题，在可能出现这类问题的个别场合，可以由应用程序采用悲观锁或乐观锁来控制。
查看全局和当前会话的事务隔离级别。
查看全局
  _ 

查看当前会话
  _ 
  _
    _
更改事务的隔离级别
  |     {  |   |   | }

默认更改当前会话事务隔离级别
  _=
注意：不显示指明  和 ，默认的行为是带 ，即设置当前会话的事务隔离级别。如果使用  关键字，为之后的所有新连接设置事务隔离级别。需要  权限来做这个。 的  默认的事务隔离等级是  。
游标控制语言
游标是系统为用户开设的一个数据缓冲区，存放  语句的执行结果。每个游标区都有一个名字，用户可以用  语句逐一从游标中获取记录，并赋给主变量，交由主语言进一步处理。
游标的操作主要用于存储过程中用来书写过程化的 ，类似于  的 。使用  的一般遵循的步骤如下。 声明游标，把游标与  语句的结果集联系起来。 打开游标。 提取数据。 关闭游标。
 定义游标
 _   _
这个语句声明一个游标。也可以在子程序中定义多个游标，一个块中的每一个游标必须命名唯一。
 打开游标
 _
这个语句打开先前声明的游标。
 根据游标提取数据
 _  __
这个语句用指定的打开游标读取下一行如果有下一行的话，并且推进游标指针至该行。
 关闭游标
     _
这个语句关闭先前打开的游标，注意，用完后必须关闭
上面简单的介绍了游标的基本用法，下面给出一个实例，下面是一个存储过程，里面用到游标，逐条更新数据批量更新数据。
   
  

      __   
       
       
      _           首先这里对游标进行定义
              __ =  这个是个条件处理针对   的条件当没有记录时赋值为 

      _ 接着使用  打开游标
      _    把第一行数据写入变量中游标也随之指向了记录的第一行

     __ =  
               
          _   
     
      _  用完后记得用  把资源释放掉

 
关于  存储过程的简单介绍，见博文  存储过程。
 常用功能
显示当前时间   
  
显示年月日
显示年月日
  _

显示年
  _

显示月
  _

显示日
  _
当计算器使用
   
连接字符串
  _   _      
结果：
   
|           | 
   
|   | 
|      |
注意：这里用到  函数，用来把字符串串接起来。另外，我们还用到以前学到的  给结果列 _   _ 起了个别名。
  地址与无符号整型互相转换；利用  内置函数完成转换。_将  地址转换成数字型；_将数字型转换成  地址。
示例
  _

  _
小结
因工作用到 ，作为一个  的初学者，在短短的几个月中接触了一下，记录了一下工作中用到的  语句以及未来可能会用到的  知识点，作为日后的参考手册。因内容繁杂，参考资料质量参差不齐，个人水平有限，错误在所难免，也请大家勿吝惜金言，给予批评指正。
本文持续更新中…

附录
附录 ： 权限类型
 的权限可以分为三种类型：数据库、数据表和数据列的权限。从  表中可查看用户权限信息，查看命令：
     = 
列出权限有：
_ 查看数据表；
_ 插入数据表；
_ 更新数据表；
_ 删除数据表记录；
_ 创建数据库和数据表；
_ 删除数据库和数据表；
_ 允许使用 ； 
_ 允许使用  ；
_ 允许使用    查看其他用户的进程；
_ 允许使用 …      ；
_ 允许使用  为用户授权；
_ 未来功能的占位符；现在没有作用；
_ 确定用户是否可以创建和删除表索引；
_ 确定用户是否可以重命名和修改表结构；
__ 确定用户是否可以查看服务器上所有数据库的名字，包括用户拥有足够访问权限的数据库。可以考虑对所有用户禁用这个权限，除非有特别不可抗拒的原因；
_ 确定用户是否可以执行某些强大的管理功能，例如通过  命令删除用户进程，                             ；
___ 创建临时表；
__ 可以使用   命令阻止对表的访问修改；
_ 执行存储过程。此权限只在  及更高版本中有意义。
__ 读取用于维护复制数据库环境的二进制日志文件。此用户位于主系统中，有利于主机和客户机之间的通信；
__ 确定用户是否可以确定复制从服务器和主服务器的位置；
__ 创建视图。此权限只在  及更高版本中有意义；
__ 查看视图或了解视图如何执行。此权限只在  及更高版本中有意义。关于视图的更多信息；
__ 更改或放弃存储过程和函数。此权限是在  中引入；
__ 修改或删除存储函数及函数。此权限是在  中引入的；
__ 执行   命令，这个命令用于创建新的  账户；
_ 确定用户能否创建、修改和删除事件。这个权限是   新增；
_ 创建和删除触发器，这个权限是   新增的；

 特别的权限： 
 允许做任何事和  一样； 
 只允许登录，其它什么也不允许做。
参考文献
 四种语言： 语言的四种类型结构化查询语言百度百科 命令行添加用户 的权限有哪些——为现有字段添加自增属性  设置自动增加字段的初始值 命令大全 中的存储引擎讲解 的内存表和临时表数据库事务维基百科 事务处理用法与实例详解 事务隔离级别百度百科 数据库事务隔离级别介绍  高性能北京电子工业出版社 事务隔离级别脏读，不可重复读，幻象读 游标示例  游标简易教程 高级特性：游标与流程控制游标百度百科近日，工信部指导下的数据中心联盟公布第五批大数据产品评测结果。通过本次评测的产品包括家大数据供应商的款大数据产品，覆盖一线云厂商和传统大数据平台供应商。其中平台性能评测针对大数据平台在条语句、三个测试例测试和机器学习和两个测试例三方面进行测试。腾讯云大数据平台在的三个测试例上取得了两项第一名，其他各项成绩也名列前茅。

腾讯云大数据平台架构图
大数据产品能力评测由数据中心联盟组织，并委托中国信息通信研究院实施测试，是国内起步最早、覆盖最广、技术水平最高、影响最大的大数据评测体系，圈定了国内大数据基础平台厂商第一梯队，成为政府和行业用户评价和选购大数据产品的权威参考，也成为厂商产品研发的风向标。
年是国家大数据战略推进的关键年，大数据产品和服务采购持续快速增长。国家工信部一直大力推动大数据标准体系的建设，本次大赛也是该指导精神的具体体现之一，腾讯云作为首批获得大数据基础产品能力认证的唯一大型互联网企业，在工信部的指导下一直助力国家大数据行业标准的建设。
腾讯云的大数据产品能力源自、空间、微信等海量业务的积淀。
截至年底，腾讯、空间、微信等全面产品线及亿万级数据资产背后，有着万亿条数据接入、亿次数据分发、的存储、的离线计算、万亿的实时计算、万次任务调度等亿万级的数据处理经验和能力，这些都是腾讯云大数据产品的坚固基石。
而从年第一个内部大数据集群上线以来，腾讯云大数据产品经过了多次迭代，进行多项腾讯社区组件的优化和自研组件的配置。用户可以按需部署大数据处理服务，实现数据处理需求，例如报表展示、报表分析、数据呈现、数据挖掘、数据分析等全面的大数据应用。
纵横数智，助画方略。腾讯云数智方略包含大数据平台、智能推荐、数字营销、数据可视化等产品，为企业及开发者提供完整的大数据解决方案，开源易用、多环境部署、安全合规、丰富的运维实践经验助力大数据解决方案在各行各业的开发与应用。
更多详情移步官网：导语
各位老司机晚上好啊，这是我实习阶段的最后一篇文章，关于时间序列模型在曲线预测上的应用，会展示出一个较为完整的时间序列建模的过程。主要讲述了如何进行曲线预测以便可以提前做出一些准备，比如说告警策略的改变或者配置上的更改，提高告警的准确率。主要内容包括时间序列模型的简介，数据处理与平稳性验证，最后是模型评估预测和进一步思考。一篇水文，求老司机指导
一．时间序列模型简介
时间序列模型就是对一组变量进行一段时间的观测所得出来的一组时间有序的序列，可分为平稳序列和非平稳序列，其中平稳序列又可分为宽平稳和严平稳序列，下面对这两种序列给出直观的定义
严平稳序列 只有当序列所有的统计性质都不会随着时间的推移而发生变化时该序列才能被认为平稳。比如说白噪声 序列，期望为，方差为常数 协方差为。
宽平稳序列 形式化定义需要借助二阶矩过程，这里直接给出结论。给定随机序列，如果为常数且  ∞ Δ= Δ=Δ，Δ =    这个式子说明只与时间间隔有关。就是满足常数均值，常数方差，常数自协方差。
摆出了平稳序列的定义，然后用了几个曲线数据试了一下，平稳处理过后差分，取自然对数，大部分都满足宽平稳时间序列的定义。
然而，实际中的大部分时间序列都是不平稳的，比如说周期性序列或者定时任务这种序列。为了接下来能够使用模型，需要对数据进行预处理。下面主要说下数据处理的理由和方法，还有怎样验证时间序列的平稳性。
二 数据处理与平稳性验证
 数据处理
为什么要进行数据处理 为了使得数据更加符合模型的假设，因为不论自回归模型，滑动平均模型还是自回归滑动平均模型，假设就是要求输入序列是一个平稳序列。要使模型有更好的表现，进行数据预处理是必要的。
其实在做数据预处理的时候我有一个困惑，就是说预处理的时候会不会丢失原序列的信息这个问题在知乎上有一个解答，答主举了几个简单的例子说明做为什么可以做数据处理和这种操作的必要性，总结一下就是说，数据预处理可以让数据更符合模型，比如说我假设后来的序列残差服从正态分布，这样就可以用已有的理论验证这套模型是否可用。 数据预处理可以更好的发现数据之间的关系，比如说一些数据取一个自然对数之后，呈现出明显的线性关系，下面是从知乎上截的图就说明了这种情况。
下图的左图是各国人均和城市人口数量的关系，可以发现人均是严重左偏的，并且可以预知在回归方程中存在明显的异方差性，但如果对进行对数变换后，可以发现较明显的线性关系右图。

图 原始数据和对数变换后的数据
 数据预处理方法
前面说到，大部分的时间序列都是不平稳的，为了使数据趋于平稳，常用的方法有差分和取对数方法。
差分法，直观理解就是后一个数据与前一个数据的差值称为一阶差分，二阶差分就是在一阶差分的基础上在做一次差值。一般来说做两次差分后的序列基本上就满足平稳性要求了。
对数法，取对数也是一种平稳处理方法，主要是减少数据的震动幅度。而且就像前面那个图，比较容易发现数据之间的规律线性规律。
分解法，我在看数据挖掘这本书时，可以把时间序列分为三个部分，趋势，季节和随机成分，得到不同的分解成分后，可以对不用的成分进行拟合。有这样的函数_，可以对时间序列进行分解。就像下面这张图引用的

图 分解过后的序列数据
 序列平稳性检验
对数据进行预处理过后，如何评估处理后的序列已经平稳了呢。下面是几种比较常见的检验序列平稳性的方法。
用眼睛看比较粗暴
这种方法就是把差分后的数据画出来，观察是否为白噪声数据，就像下面这张图。

图 一阶差分后像白噪声的数据
如果数据预处理后得到类似这样的结果，就可以认为此时的数据已经达到平稳性的要求，
画出自相关和偏相关图
如果自相关图和偏相关图，如下图所示，如果自相关图和偏相关图有明显的截尾或者拖尾的特征，则此时认为数据是平稳的。
所谓的截尾或者拖尾就是说图上的点在一定的阶数后为 或者在一定的阶数后趋近于。如下图所示

图 自相关系数和偏相关系数图
单位根检验最常用的方法
 –  扩展迪基福勒检验，这个检验的原假设 序列是非平稳序列。
关于单位根检验的数学原理比较复杂，想要深入理解原理的老司机可以参考附件中的还有那本应用时间序列分析的教材，这里我简单说下这个的结果怎么分析。
中有一个方法叫，是专门用来做单位根检验的函数。如下图所示，对于某一个曲线返回的单位根检验的结果

主要关注上图中的值，这个值越小，则说明序列是平稳的，因为拒绝了原假设 序列非平稳。也可以从另外一个角度说明 如果 小于 则也可以拒绝原假设，序列是平稳序列。
三．模型选择与预测
在进行数据处理与平稳性检验后，就可以开始建模进行预测了。先描述模型选择过程，之后是模型预测过程。
 模型选择
模型的选择主要是根据之前的自相关图和偏相关图进行判断，然后用信息量法则判断赤池信息量，贝叶斯信息量等。首先来介绍根据图形来判断建立的模型。

图 自相关系数和偏相关系数图
根据上图，可以看到自相关图在一阶过后存在明显的截尾，而偏相关图缓慢下行，存在拖尾特征。所以可以选择滑动平均模型。反之，如果缓慢下行，存在拖尾特征而存在截尾过程，则可以选择自回归模型。如果和都存在拖尾特性，则可以选择模型。
上图中滞后阶后缩小为，滞后阶后缩小为。所以可以选择或者模型。
 模型预测
选定模型之后，接下来就是模型的评估。模型的评估主要从预测效果来看吧，其实还信息量评估赤池，贝叶斯，德宾沃森检验，残差序列检验，这些检验都需要做，但是展示起来不直观。感兴趣的老司机可以参考附件中的那本书或者博客。咱们直接来看预测结果。
这里用的模型是模型，预测效果如下图所示
预测准确度衡量采用均方根误差衡量，可以看到图中均方根误差为。对于三天的数据基本可以接受，预测效果比较理想。

图 预测数据天

图 实际数据天
感觉效果还不错，但是后来仔细的分析上图和结果输出之后。发现实际上这个结果有点过拟合了，我看了输出感觉就是在真实数据上下浮动了一些值。同时我也看到了一些论文指出了这个问题，就是时间序列模型预测出的结果可能就是真实值的上下波动或者是单纯的时间轴平移，这个问题我也比较困惑。为啥会产生这样的结果，其实仔细想一下，如果这次测试数据周期性变化明显，而且不会突变，那么这个结果是可以接受的。但是监控其他类型的曲线是否也能使用时间序列分析呢，尤其是定时任务和毛刺数据这种很不平稳的时间序列。
四．结尾
关于时间序列模型我就做了这么点工作，上有老司机的结果相当好，但同样，当数据出现突变或者波动较大的时候，准确率也有所下降。跟师父讨论之后，觉得预测这个东西确实比较难，我用到工具是的和库，看老司机们都用语言来做预测，后面我也尝试一下，看能不能获得更好的结果。研究时间序列我一开始的想法是想做预告警，比如说预测出来下一天的数据，看看能不能提前预知一些可能会发生问题的位置。时间序列就先学习到这里，先把这个想法记录一下，后续的工作还是会接着研究曲线分类的问题。
参考文章
 一篇博客，主要讲述怎样用进行时间序列分析
 知乎上的文章，主要讲解时间序列建模的步骤
 这个主要解释了为什么要进行数据的预处理
 简书上的文章，提供了很多关于时间序列丰富的材料 调试基本原理
 提供了强大的模块，使用方式如下
使用模式时， 会启动模块，然后通过监听默认  端口将命令行的输入传送到内建调试模块以达到调试的目的。
同时支持 和 参数。这两个参数只会启动监听模式，不会进入命令行调试模式，而且前者会运行完所有代码，通常可用于事件调试，后者会在进入时中断，方便从头开始调试。进入监听模式后，可以通过这两种方式连接调试：
    通过  连接调试，如   
     通过  链接调试

命令行调试几乎支持所有调试的功能：断点、单步、步入、步出、变量查看等等。详细说明可参见官方文档
所以无论是 调试工具还是都是基于的模块进行调试的。
 与 结合
命令行调试因为缺少调试界面，因此使用的人相对比较少。于是就诞生了。 它所做的就是让用户可以使用 去使用原生的，使用起来也比较方便

安装   


开启服务
      


 模式启动程序  
           

然后就可以直接用浏览器打开=进行调试了。

原生模块使用的是 ，而且使用  。所以在其中起到了翻译和转达的作用。

_ 诞生
今年月份，谷歌工程师  提交了一个 _ 的。同时在月份的     有提到此功能。
就是说 _ 可以让  直接连接 的进行调试。
现如今，新版本的浏览器和新版本的支持通过一个新的调试协议能互相直接通讯了，就不再需要了。

安装新版本

 可以从官网安装，目前给官网给到的最新版本是
 最新版本的  叫 ，安装这个版本时不用担心会覆盖老版本的，会生成另外一个图标。

启用调试模式

下载好 后，打开
启用开发者工具实验性功能
重启
打开开发者工具  设置  ，按键次，显示隐藏选项后勾选 使用调试使用参数就可以使用最新的调试功能

在中打开链接即可调试。
使用中的问题
在用测试时发现一直在报错 __ ==  
发现很多人有出现过这个问题，参见这里这是一个已经修复的，但是中没有包含，解决方案就是安装版本，两种安装方式：

下载源码安装

  
    

   
  
 
  

 
        
 


下载  安装包安装

使用新版本彻底解决了这个问题。​前言：
鉴于传统行业对互联网的兴趣持续增强，而外行看来的某些所谓经验、宝典，在笔者看来，有很大的偏差与误区。因此，本期开始，本公众号会围绕国内互联网企业的发展历程，发布一些行业及个人的总结，以便为读者描述较为全面、真实的互联网行业。
、源源不断
当用户量达到一亿的时候，马化腾想把卖掉，因为实在是没有钱购置更多的服务器以支撑上亿用户的网络流量。
然而，没有人愿意买，因为，在许多技术人员尤其是当时互联网一线厂商的技术人员看来，几个人花几个月时间就能做出一个比还要好得多的聊天软件。
最最重要的是：就算做出来，有什么用呢？又不赚钱！
门户网站的人群各个年龄段都有，所以还是有别的厂商在门户网站打广告的，然而，的用户太过年轻了，完全没有购买力，没有厂商愿意在上打广告，更何况，的广告位相比门户网站，少的可怜！
直到后来，腾讯依靠强大的流量优势，将巨大的用户流量导入到各种不同的产品上，比如腾讯自己的门户网站、腾讯自己的游戏、等等。
此时，当初那些看不上腾讯一亿用户的公司才终于发现：原来生意还可以这么做！
他们当初忽视了两点：
、类似的软件，技术难度并不高，难度高的是：如何能够将一个聊天软件扩大到上亿规模的用户量！
、当时的用户非常年轻，年轻到没有任何收入没有任何购买力，然而，这帮年轻人终会长大，而且事后证明这帮人成长的速度还非常快，从毫无购买力一跃成为购买力最强的一群人。
当初造成悲惨遭遇的是大家没有意识到“流量”的价值，同样的，这个因素也是促成疯狂扩张甚至毫无敌手的原因。因为大家觉得没有价值的东西，就没有人会站出来跟你抢毫无价值的东西。
在互联网刚刚出现的时候，几乎所有的产品都面临类似的遭遇：没有价值，没有对手。即便有那么几个对手，由于大家都是从零开始，巨大的中国网民数量支撑的流量蛋糕足够每一个厂商吃得饱饱的。
在当时，网民们到处寻找各种软件、服务，以满足自己的各种办公、学习、娱乐需要。因此，当时，不需要厂商主动做推广，只要把软件或服务放到网站上，自然有各种论坛、网站免费为大家宣传、推广。
、三国鼎立
很快，当这种流量被各种方式转化为看得见的真金白银，所有厂商猛然醒悟，开始疯狂占领各种流量阵地。
今天，开发一个软件的成本更加低廉，而将一个软件安装到用户设备的成本越来越高。
因为，网民们已经拥有了日常生活、工作、娱乐所需的几乎所有类型的软件和服务，不再有动力去寻找新的软件。
此时，占据最大流量优势的三家，自然成为行业内的翘楚。互联网老三家新浪、搜狐、网易，由于同业竞争分散了流量，自然比不上独吃一份的。
此间，虽然有新的产品或服务推出，靠着新业务而迅速获取到了巨大的用户流量，但只要有所察觉并奋起直追，基本上对手将毫无抵抗的可能。
比如：做应用分发的安智和豌豆荚。
当没有人想起来做的时候，他们还能活的好好的，一旦开始做同样的业务，提供类似的服务，这两家立马完蛋。因为没有办法跟拼流量。
更何况，就算不做，手机厂商自己也要做！
、独辟蹊径
手机厂商刚刚开始的时候，并没有瞧上软件，尤其没有瞧上应用市场，因为那些东西不赚钱。
直到应用分发市场开始赚钱之后，这些手机厂商开始心有所动，既然自己能够赚这个钱，为什么要让给别人呢？
更甚至，伴随着竞争形势的急剧恶化，手机硬件利润越来越低，厂商不得不考虑别的盈利方式。更甚至，许多新入局的手机厂商，从一开始就没有瞧上硬件的利润，而直接是冲着巨大的流量来的。
事情有些搞笑。
最开始，新出厂的手机上软件很少，于是，买手机的时候，卖手机的就会帮用户安装许多软件。
某一天，有些软件开发商找到卖手机的说：“你卖手机的时候，把我们的软件安装到用户手机上，我们给你钱。”
慢慢的，这个事情大家全都知道了，可以想象手机厂商是何等懊悔，于是，所有的手机厂商都开始做应用分发！
于是，有些软件开发商就想：为什么我不直接卖手机呢？尽管手机不赚钱，只要能把我的软件带给更多用户，至少我也不赔钱啊？
结果就是：手机行业涌现出各式各样的厂商，有些靠硬件优势赚钱，有些硬件基本不赚钱甚至赔钱，只是作为软件推广的“流量”。
、互联网流量的高手：小米
在流量的来源上，小米做得非常成功！
虽然小米一再宣称自己不打广告，这是因为广告已经沦为比较低劣的流量入口。
随着广告的铺天盖地，普通观众越来越讨厌直接的广告，于是，益达口香糖的广告就成了文艺片的形式。
小米，则直接投资各种互联网媒体，包括行业论坛、评测网站，这些相关性的网站成为崭新的流量来源，比传统的媒体广告要强上百倍！
、回归原点：
，一个看似跟互联网跟“流量”毫无关系的厂商，在三四线城市的街头找到了那些“曾经被人看不起后来变得高大上的互联网厂商们”一直都看不上的“传统流量”！
没错，所谓的流量，就是用户量，就是人流量！
拥有巨大的人流量，乡镇和县城的街头同样拥有巨大的人流量，虽然形式不同，但对商家的意义都是相同的！
正如淘宝上排在第一个搜索页面会有巨大的人流量一样，超市里排在最靠近通道最接近人眼高度的货架同样拥有巨大的人流量。
广告的本质在于提高用户的接触频度，报纸、电视的广告是如此，网站的广告是如此，农村墙面的广告是如此，
但凡能够将产品、服务触达到用户的途径，都能够成为“流量”的渠道。无论这种渠道是街头、电话、邮件、网站、
从这个角度来看，互联网并没有改变商业的本质，只是增加了某些形式。
下一篇，讨论一下“为什么盛大非要做电视盒子？”其实盛大的野心是为了获取最大的流量入口，但因为错误的估计了某件事情的发展趋势，因此注定了悲哀的命运。前言
在前面，我的 前端工程师应该选择什么操作系统 一文中已经说过了， 系统 是目前主流的前端工程师的选择。那么，这里就涉及到一个问题，那就是你必须有一台电脑。
而动辄上万的价格，而貌似不能满足你对性能的追求，又或者，手头确实紧张，无论出于什么需求，可能你都动过黑一台的念头。
我本人有一台笔记本，另外还有两台黑主机用于办公。对于黑苹果这件事情并没有太多的经验，但也确实上手操作过几台。因此，准备些一个系列的文章，希望对于有黑苹果需求的朋友一点帮助。
黑苹果有一个网站，对大家黑苹果有重要的帮助，就是，这个网站上有完整的安装教程以及硬件选择教程。不过这个网站是国外的，提供的硬件购买地址是亚马逊和新蛋的。你可以换成京东或者淘宝上去找对应的硬件。
安装方法是英文的，我想你英文应该不会太差。反正我英文不算好，磕磕碰碰的算能看懂。
当然，前提是你有一定的装机基础，如果你没有组装过电脑，建议找一个组装过电脑的朋友帮忙，否则，你可能购买的和主板就根本不能搭配在一起，这就尴尬了！
硬件选择的关键点

 用　 的。
主板用技嘉或者华硕的。注意芯片的选择。
内存、硬盘、这些基本没有限制，但是切记别买二手的以及小品牌的，假内存非常多。硬盘推荐或固态硬盘加一块仓储硬盘。
电源建议买额定功率或更大的。
显卡不能买系的显卡，比如\注意的芯片。英伟达已经表示，不会开发的驱动了。作为前端工程师，对视频编辑等也没有什么重大的显卡需求。如果集成的显卡已经支持，就没有必要购买独立显卡了。
显示器建议购买寸的。的可旋转的寸显示器就是很不错的选择。当然，如果手头紧张，可以在淘宝上购买一款二手的显示器。价格大概在左右。
键盘鼠标随便选，不推荐无线。推荐机械键盘。因为可以调换键帽，另外对自己的手好一点！如果你不知道手感是什么样子的，没用过机械键盘，建议你这样选择：
如果你喜欢重的键盘，选择青轴的键盘。
如果你喜欢轻一点的键盘，选择红轴或者黑轴的键盘。
如果你不喜欢太重，也不喜欢太轻，那选择茶轴的键盘。
如果资金不是太紧张的话，建议选择樱桃原厂轴的键盘。当然，国产轴的也不错。


如果有录音需求的话，可能需要购买一块的声卡。主板自带的声卡我没驱动起来过麦克风。当然，我只是装一个黑苹果系统而已，我没时间去研究这东西到底是怎么样的，能用就行。
机箱挑一个好看的，但是不推荐购买小机箱。装起来比较麻烦。
如果你那边电压不稳又或者经常停电或者跳闸，建议购买一个电源。因为台机没有电池，如果停电或者跳闸可能会损伤电脑。
如果是购买散装的，风扇需要另外配，不要买太便宜或者太贵的，左右的价格就可以了。

硬件实例一全新硬件




型号
价格





 



主板
 



内存
金士顿 神条   



显卡非必选
索泰 



系统盘
金士顿 



仓储盘
西数  蓝盘



电源
先马实力先锋 额定



机箱
普通



显示器
 



键盘
  樱桃轴



鼠标
普通，看喜欢




如上，这是一套全新的装机单，其中显卡不是必须选购的，费用在 左右，不要显卡的话在左右。可以根据需要降级到，主板也可以降级，你可以在这个基础上进行适合自己的调配。不过近期内存和固态硬盘的价格飙涨，如果手头紧张，也可以选择稍低的。当然，内存建议起，因为我们前端在开发过程中需要打开各种各样的浏览器，是比较吃内存的。
这里只是给一个参考。更多的相关配件的查询，建议查看的网站
硬件实例二部分二手件




型号
价格





 二手



主板
技嘉或华硕小板二手



内存
金士顿   



显卡必选
精影



系统盘
金士顿 



仓储盘
西数  蓝盘



电源
先马破坏神 



机箱
普通
 


显示器
二手寸



键盘
雷柏



鼠标
普通，看喜欢




如上，在淘宝上选购部分二手配件，即可大幅降低费用，上面的这套费用在左右，只有和主板以及显示器是二手的。几乎是用不坏的，只要能点亮，就没有问题。主板损坏的可能性比较大，不过二手主板实在是便宜，左右就可以选购到不错的了。如果你那边不是很潮湿，并且电压比较稳的话，一般是不会坏的。
由于代的 的集成显卡不支持黑苹果，所以必须选购一块独立显卡。非常不推荐购买二手独立显卡，现在公版的全新的价格不到，非常的实惠，选择全新的买个舒心。
装机过程中的坑
如果你组装机安装过系统，你可能会认为内存插在哪根插槽上都没有问题。而实际情况是黑必须插在靠近一侧的插槽上，否则会不断死机重启。这是我遇到的一个郁闷不已的坑。
升级现有电脑的建议
如果你手上有一台几千年购置的台式机，那么我建议可以在这个台式机的基础上参照上面的配置进行升级。比如，核显不支持就增加一块独显之类的。另外，在已有的电脑上安装黑苹果，建议增加一块固态硬盘用于专门安装黑苹果系统，而不是在原有的硬盘上进行各种特殊操作。实在是麻烦。
我们黑一个苹果电脑来是用于我们的开发的，而不是折腾系统的。
最后，在不差钱的基础上，建议直接入手 ，开箱即可进入工作状态，一点都不折腾。
小结

实测，显卡用线黑屏，用线连接正常。另外圆口键盘无法使用，键盘可用。

黑苹果这件事情简单说，主要硬件对，基本上没什么坑。如果硬件不对，那就满满的全是伤害。
你可能要说，花这么多钱，那我不如购买一台  不就可以了。这个选择也是可以的。不过说实话呢，性价比不高，看你喜欢咯。
黑苹果可以随时换到系统或者系统，而一台原装电脑，装或者也是一个大坑，呵呵。
本文由原创，允许转载，但转载必须附注首发链接。谢谢。
首发地址：一、什么是？
 是一个开源的，基于分布式的，面向文档存储的非关系型数据库，使用风格来存储数据。其也是非关系型数据库当中功能最丰富、最像关系数据库的。由编写，其名字来源于这个单词，其宗旨在于处理大量数据。
作为如今新兴的框架架构     的重要组成部分，其如今的发展势头大有与传统框架、抢占市场主流框架的趋势。
 具有如下优势：

支持的数据结构非常松散，可存储复杂的数据类型；
支持多种操作系统上，提供多种编程语言的驱动程序；
支持的多种数据类型；
支持的查询语言非常强大；
弱一致性，更能保证用户的访问速度；
内置，支持大容量的存储；
内置；
文档结构的存储方式，能够更便捷的获取数据；
  引擎的使用，使得局部锁成为可能新；
 引擎的使用，对数据进行压缩，减少了大量空间占用新。

看到如此特性和优势，不免勾起了我们的好奇心。这一期的评测报告就着重针对的读写性能的进行测试和分析，一起来揭秘一下如今在市场上如此被推崇的原因。
二、的性能如何？
、性能


的性能随着线程数小于的增加而增加，当大于时，性能开始逐渐出现明显波动和下降；
当线程数量达到时，的性能达到峰值，约为万；
平均延迟随线程数量的增加而增加，且增加速度越来越快；

、  性能  线程数
①   百万级数据量万


对百万级数据的操作，读性能优于写性能，随着写的比重增加，吞吐率明显减少，且系统延迟明显增加；
只读、读多写少、读写混合、读少写多，这四个场景均在线程数达到时达到峰值，分别约为万、万、万、万；
随着线程数的增加，写比重越大，其吞吐率波动性越大，越不稳定，且当线程数高于时，吞吐率下降越明显，系统延迟增加越明显即读操作在数据量较少时稳定性更强；
对百万级数据的操作，当写比重超过时，吞吐率出现明显下降，且随线程数增加而越发明显。

②  千万级数据量万


对千万级数据的操作，读性能优于写性能，随着写的比重增加，吞吐率明显减少，且系统延迟明显增加；
只读、读多写少、读写混合、读少写多，这四个场景均在线程数达到时达到峰值，分别约为万、万、万、万；
读写吞吐率均在线程数由增加到时，增长率最高。

③  亿级数据量亿


对亿级数据的操作，读性能优于写性能，随着写的比重增加，吞吐率明显减少，且系统延迟明显增加；
只读、读多写少、读写混合、读少写多，这四个场景均在线程数达到时达到峰值，分别约为万、万、万、万；
对亿级数据的操作，当写比重稍微增加，吞吐率直线下滑，并随线程数增加而越发明显；
当线程数高于时，四个场景的吞吐率均出现明显下降。

、  性能  数据规模
①吞吐率


随着数据量的增加百万级、千万级、亿级，的读写吞吐率均下降；
在数据量达到亿级时，读操作的吞吐率还能维持在较高的水平。

②系统延迟


随着数据量的增加百万级、千万级、亿级，的读写延迟明显增加；
写操作是造成系统延迟的主要因素，并且随着数据量和写比重的增加，造成的延迟增加的影响会逐渐放大。 

三、的使用建议？
通过以上测试数据和分析说明，给出如下结论：

读性能优于写性能吞吐率、稳定性；
在上的针对中小数据量的读写，以线程为最优，对于大数据量的读写，以线程为最优；
写操作对整体吞吐率的影响，随着数据量的增加而越发明显；
写操作比读操作更容易造成系统延迟，并且随着数据量的增大，造成的影响越发明显；
单个集合达到亿级数据量时，的读写性能均有明显下降，设计集合时，应尽量将集合的文档数量控制在亿级以下。

【数据库评测报告】第二期：的主要内容就是以上这些了本测试只是针对小规模大数据进行了压力测试，对于大文件的测试以及在集群环境中的性能测试还在酝酿当中，测试在进行过程中由于网络条件、数据库配置等因素的影响，可能无法发挥出机器的最大性能，但在一定程度上对于数据库选型具有参考价值。还想了解测试的参数和细节的朋友可以继续往下读。
四、环境配置包括哪些？
、硬件环境



设备型号
配置描述
型号





个核，内存， ，万兆网卡




、软件环境
数据库版本



测设设备
数据库版本









、测试细节
测试工具
所谓工欲善其事，必先利其器，对于测试工具的选择会直接对测试的结果产生较大影响，一个好的测试首要要解决的必然是选择哪款测试工具。本次测试采用的测试工具是，肯定很多人会问，为什么测试工具那么多，为什么会选择呢？这款性能测试工具的轻量级设计、多兼容性、支持多场景和多线程等特性都足够碾压其他测试工具的，最重要的是官方测试所采用的工具就是。下面详细给大家介绍一下这款工具的原理和优势。

 是开发的一个专门用来对新一代数据库进行基准测试的工具。全名是   。上图是的结构，可以看成是一个数据库客户端。暗色的模块是可以替换的， 是产生应用负载的，  是将特定数据库的转为的，用户可以自定义负载和数据库。
的包括以下几大特性：

支持常见的数据库读写操作，如插入，修改，删除及读取；
多线程支持，用实现，有很好的多线程支持；
灵活定义场景文件，可以通过参数灵活的指定测试场景；
数据请求分布方式多样，支持随机、以及其他请求分布方式；
可扩展性强，可通过扩展的方式来修改或者扩展的功能。

测试流程
①建立测试数据库；
②在数据库中建立结构相同的个测试集合_、_、_；
③利用的场景向测试集合中分别插入一定数量的文档万、万、亿；
 ④利用的场景分别在个测试集合上进行多线程测试；
⑤结果数据的分析。
测试场景



场景名
场景介绍
场景配置





插入 
=



多读少写  
= =



读写均衡  
= =



多写少读  
= =



只读  
=



测试表结构导语： 除了手搓，我们还有更好的数据可视化方案

今天，即使你不熟悉云计算，大数据是什么。但是这些词汇已经充斥在我们的身边。我们被超负荷的信息和过多的数据折磨。谁没被定义成数字？——当我们存在于各种庞大而复杂的社交关系中，我们被各种各样的标签或者数字去定义。的确，数据是评估市场趋势和广告效果的有效途径，数据是帮助我们了解消费者行为的直接选择。我们被一推和所标记，毫无尊严的变成一个数字时，人们看到是一堆堆数字，而我们看到是一个个鲜活的你。云图，让数据可见。
起因
所在的一直在做数据库和大数据相关的业务，都是和数据相关。那作为设计团队，我们一直在思考怎么“用视觉的方式去思考数据”。于是我们做一系列关于数据可视化的案例，地铁人流量、扶贫指数、安全指数等等。也总结了一些关于大数据可视化的文章《遇见大数据可视化  基础研究》，《遇见大数据可视化  来做一个数据可视化报表》，《遇见大数据可视化 – 图表的视觉系统感知》，《遇见大数据可视化 – 人人都能做数据可视化》等等。

但是随着案例的增多，我们设想的制作周期会大幅下降的情况并没有出现。每个案例从脑暴、设计、数据、开发都需要个月的时间，而且都需要产品、设计、开发都许多同学的参与的，非常耗时耗力的。
但另一方面，团队之前写的【遇见大数据可视化】的系列文章发出去后，被很多同学纷纷找上来询问如何做数据可视化，其实大家对数据展示的需求是越来越多的。
于是我们开始思考是不是可以做一个工具，可以方便的让用户快速的去做一些数据可视化的展示。无需编程，拖拽即可生成数据可视化展示。
前期思考
在项目开始之前，我们首先梳理出有那些人群会对数据可视化的工具有需求的。通过整理询问同学的岗位分组，和联合产品经理对外部人员的需求询问。我们发现了一个很重要的信息，很多用户而然听说过数据可视化，也能理解理解数据可视化的好处，但是对于复杂数据如何去做展示就无从下手了。
虽然我知道这东西好，但是做不来的。
所以对于云图的第一期版本，我们更需要告诉用户最终的数据可视化的呈现是什么。让他们先看的成果，然后再促使他们去尝试。
 我们改变了传统数据图表的制作流程，在等图表工具中流程都是先框选出要展示的数据，然后根据数据在图表库中选择对应的图表，最后图表呈现出来。

为了能让用户尽可能多的去尝试做可视化设计，我们去掉了前两个步骤，然后用户直接可以把他想要的图表拖出来，无需去更多的关注纠结于数据和其他选择上面去。

 于是乎，我们将云图一期的期望需求进行精简提炼，找到当前产品的核心目标：简单、拖拽、高参数、模板化的数据可视化工具。明确的产品目标能指引我们不偏离大方向，在什么阶段要解决什么问题。
框架
关于框架设计，最初我们的想法是尽可能的给用户更大的画布操作区域，缩小元素选择区域和标题区域的大小，同时让画布组件的属性信息通过轻浮层的方式展示，对常用操作引导用户使用快捷键操作。

但是在推动的时候，我们遇到几个问题。
对于用浮层展示属性等信息，开发表示开发量很大，一期建议展缓的。工具需要接入腾讯云平台，在顶部必须保留腾讯云统一的头部条，这样整个头部就用条通栏了，显得头部十分的笨重。
于是整合了标题栏和工具栏，固定组件属性栏在右侧位置，收起了多余的操作项，砍掉多余的分类和隐藏多余的操作，希望用户在使用时，能聚焦于画布内容，获得沉浸的使用体验。
 
内容为王
为了能让用户可以更好更方便的去做尝试，我们把大量内容进行聚合模板化、样式化。这样用户直接就可以拿来就用，而不用过多去想，我柱状图要怎么去做，要不要描边，要不要透明，要用什么颜色。
 更多的图表样式
将图表按照类型进行分组柱状、条形、折线、饼图、环图、散点等，然后每个图表类型下面提供丰富的样式选择。

 更多的配色方案
图表配色上面除了色的默认样式色值，还通过丰富的颜色备选方案，已满足不同用户案列场景的需求，方便用户直接快速的进行图表颜色切换。

 更多行业案列
同时我们按照行业类型提供了不同的模板样式，用户可以直接在提供的模板上进行修改尝试即可。

小结
当然了现在云图还处于版的阶段，会有大量的问题和需要的优化的地方。后续我们会将云图逐步完善，并不断优化用户体验和流畅度。目前， 集群的所有机器都需要通过  域名解析方式连接 ，也就是在所有  机器上配置  的域名，而非直接的  地址；用户需要使用  客户端来上传数据， 和  互联也是采用  域名解析方式。此外，使用  域名解析的方式，可以使我们的平台具有更大的可扩展性。如果  主机宕机，我们可以直接修改  服务器  的域名指向，  机器就会连接到新的  上。  客户端的连接也是同样的道理。
可见，  对  域名解析有一定的依赖。为了减少  故障带来的损失，我们进行了  故障对  影响评估。
一  各模块利用到  的情况分析
 存储引擎  

文件系统名称  ：它用一个  定义文件系统的协议、主机、端口等信息，  的主机采用域名加端口的形式。

文件系统的  地址  ：  地址也是采用域名加端口的形式。

 客户端：它的组成为主机域名加端口号

客户端  对文件系统的访问也是通过域名加端口进行访问，如果  出现故障，也会使其对  进行访问造成影响。


 计算引擎  

：它的组成为主机域名加端口号

：它的组成为主机域名加端口号

 客户端：它的组成为主机域名加端口号

在  提交上， 需要将  和配置文件上传到 ，  与  通讯是通过域名进行。

在  运行时，有一个步骤需要从  中下载文件到本地，它访问  是通过域名进行访问。


 查询引擎  
对于 ，它的数据存储在  ，当  受到  故障影响，  也会间接受到影响。另外，  的元数据保存各个数据表的路径，这些路径是由域名和域名的相对路径组成。
目前，  的容灾方式是采用  方式，提供多点服务，它消除单点和负载不均衡问题。  具备负载均衡功能，接收到客户端的请求后，  负责轮询域名对应的多个  机器  ，并返回给客户端，达到负载均衡。 负载均衡的实现直接依赖于  。
 客户端 和 
对于客户端，它访问  直接通过域名进行。
二  解析顺序
 解析顺序有两种，从上往下进行依次查询，如果查询到马上返回，如果最后一个也没有查询到则返回无法解析域名错误。
第一种
本地  缓存本地  文件 服务器
第二种
本地  缓存 服务器本地 文 件
 服务器和本地的  文件的顺序可以由中的     表示第一种。决定，例如上面是先检查  文件，如果存在则返回该，如果不存在，则再连接服务器。
三  故障模拟方法及评估步骤
 模拟方法
我们利用  命令按需在某节点上添加目的地址为  服务器  的  链，屏蔽所有发送到  服务器的包，这种情况下  客户端因不能与  服务器进行通讯而造成域名解析失败。
 的架构图

绿线表示需要利用解析，在下面的评估步骤依次断开对应节点的绿线，也就是对应节点不能访问服务器来模拟故障。
 评估步骤
先对  各个模块单独进行  故障模拟并评估，然后对整个  进行  故障模拟并评估。具体  故障模拟情况如下：详细内容略去

 出现单点  故障。       

 节点出现  故障。

  出现  故障。

整个  集群出现  故障。

 出现单点  故障。

 出现单点  故障。

整个计算引擎出现  故障。

 服务器出现  故障。

 出现  故障。

 出现  故障。

整个  出现  故障、也就是存储引擎、查询引擎、计算引擎都出现  故障。


四评估结论
过评估发现 、、、  和客户端五类节点对  的依赖比较大。对于  和  在启动时对  依赖较大，但是再启动后即使出现  故障，也不会影响它的正常工作和任务调度。 故障对各节点的影响程度如下：



节点
依赖操作
故障的影响程度





启动
没重启前能正常工作


 
启动、创建检查点
出现  故障后完全不能工作



启动
没重启前能正常工作



启动、目录和文件的读写删
没重启前能正常工作重启时会启动失败；如果  出现  故障个数大于块的副本个数时可能会出现文件读取是吧。



启动、 的执行
出现  故障后完全不能工作



通过  进行的查询、数据插入
没重启前因为存在  缓存，数据库和数据表的增加、删除能正常工作，但是插入数据和查询通过走  查询不能正常工作；  重启后所有操作都不能正常工作；



所有
客户端是通过域名连接 ，出现故障后完全不能工作。



五  方案的改进探索
随着  功能不断迭代及接入系统的增多， 已经成为了  核心的一环。如何提高  的可用行已经很重要。
目前，我们通过添加  备用服务器的方法来提高  的可用性。我们目前拥有个  服务器，它们的配置相同，其中一个作为主  服务器，其个作为从  服务器。这样可以大大提高  的可用性。
另外，根据  故障影响的情况，我们提出了以下的  改进方案
常规情况是使用  服务器进行解析；
当  服务器出现故障，使用  文件进行解析。可以预先将所有的  和域名对应地写进一个  文件，同时在某一个节点上开启一个线程监控  服务器是否正常，如果出现  故障，马上将  文件修改，同时将  文件同步到其它节点。这样能临时解决突发的  故障。当  服务恢复后，可以手工批量恢复各节点的  文件。

相关推荐云解析劫持检测导语 ：   并没有像深度学习那样试图带来自动特征工程的故事和逻辑。最终，   的格局没有超越特征工程。

 逻辑回归 算法因其简单有效，成为工业界最常用的算法之一。但  算法是线性模型，不能捕捉到非线性信息，需要大量特征工程找到特征组合。为了发现有效的特征组合， 在 年介绍了通过       的方案  是  的后续发展。随后  竞赛实践证明此思路的有效性。
    的原理
   融合方式原理很简单。先用数据训练一个  模型，然后将训练数据中的实例给  模型得到实例的叶子节点，然后将叶子节点当做特征训练一个  模型。   的结构如下所示。

我第一接触到    的时候，认为    是尝试自动替代特征工程的方法。深度学习在  领域便是在讲述这样的故事和逻辑只需人工对原始特征进行简单的变换，深度学习能取的比大量人工特征的  好的效果。
  叶子节点不能取代特征工程
为了验证    是尝试自动替代特征工程的方法，还只是一种特征工程的方法，我们在自己业务的数据上做了一些实验。下图便是实验结果，其中 “ 是  的叶子节点特征、原始属性特征和二阶交叉特征一起给  进行训练； 则只有叶子节点特征给 ； 是原始属性特征和二阶交叉特征  只有原始属性特征。

从上面的实验来看：  明显弱于  方法，说明只用叶子节点特征的    弱于有特征工程的  算法。即  叶子节点不能取代特征工程，   无法取代传统的特征工程。  取得了所有方法中的最好效果，说明了保留原来的特征工程    方法拥有比较好的效果。即  叶子节点特征是一种有效的特征，   是一种有效的特征工程手段。
上面的实验结果和我同事二哥之前的实验结果一致。在他实验中没有进行二阶交叉的特征工程技巧，结果       ，其中   类似我们的  和  类似于我们的 。
 强大的 
只用  叶子节点特征，    接近或者弱于  。在下图中，我们发现  的每个叶子节点都有权重  一个实例的预测值和这个实例落入的叶子节点的权重之和有关。

如果二分类  使用了  做激活函数 即参数为  则  的最终预测值等于 叶子节点的权重之和。而  的最终预测值等于  特征对应的权重之后。因此  只要学到叶子节点的权重，即可以将  模型复现出来。因此理论上，如果  能学到更好的权重，即使只有叶子节点特征的    效果应该好于 。总结起来，   相当于对  的权重进行 。
但是从上面的结果来看，   要接近或者弱于 。 赋予叶子节点的权重是很不错的， 学到的权重无法明显地超过它。
 总结
 　 在工业和竞赛实践中，都取得了不错的效果。但  的叶子节点不能完全替代人工特征，    并没有像深度学习那样试图带来自动特征工程的故事和逻辑。最终，   的格局没有超越特征工程。

  公众号  和 个人博客  每周日更新机器学习和系统研发的轶事，希望讲得有趣，也希望和大家共同探讨学习。导读：月日，第十届“腾讯智慧峰会”在上海举办。腾讯公司首席运营官任宇昕，中国广告协会会长张国华，概念创始人 及腾讯 主任张潼博士等多位领导及专家出席峰会，与现场多位来自品牌主、代理公司和第三方机构的营销专家和行业人士，共同探讨在全链路时代数字营销的创新与突破。

本届峰会上，腾讯提出 理念，整合全腾讯营销平台优势赋能品牌营销，打通营销全链路，打造融合、共生的营销生态。任宇昕表示：面对下一个十年，在“专注内容和连接”的布局下，腾讯将会持续加强内容与科技的联动，发挥整合优势，以更开放的心态携手合作伙伴，构建“互联网”生态下智慧营销新通路。
在峰会现场，腾讯 主任及杰出科学家张潼博士受邀，与腾讯公司副总裁郑智霖、“营销科技”概念创始人 针对人工智能对未来营销的影响，围绕技术、生态、平台三个关键词展开了精彩的对谈。

以下为张潼博士的精华观点有部分删节：


和营销如何做加法？建议营销人抓住智能化、精准化和个性化三个关键，让发挥技术驱动力，推进创意内容生成、跨场景用户理解到精准决策等核心能力。
能创造艺术吗？让技术直接转化成艺术，一个例子是用机器作画。如果你让机器画一只红身子、黄尾巴的鸟，你可以让机器先看很多鸟的照片，学习其中规律，当机器画出这只鸟时，不仅遵循了这些规律，可能还会“创造”出一只新的鸟  一只以前是不存在的、或者你从未见过的鸟。另一个例子就是风格转换，给机器一张风景照，它能“再创造”，把图转成梵高风格的画作。当你定义好能进行反馈的技术变量，机器就能学习和“创造”。
如何看待技术和艺术的关系？当我们把不确定性、表现不出来的内容，定义为可以反馈的技术变量时，就能学习和创造，从而让技术和艺术更好的结合，甚至是互相转化。
研究如何应用互联网思维？在的研究迭代里，我们也借鉴了小步快跑的互联网思维，以一天一个周期、一星期一个周期，不断优化和升级。我认为这种方法，也可以在包括传统营销在内的、更广泛的场景和模式下被借鉴。
的未来是怎样的？可能会在下一个十年、二十年改变全行业，在一个个垂直领域里挖得很深，让人的经验和技术结合，利用大数据和机器学习做得更好。
不会威胁人类生存？我们这些在一线从事研究的人，达成的基本共识就是人类还不用有这方面担心。不仅不会取代人，还从广义上来为人带来更多机会。是下一个大的挑战，对营销人提出了更高的要求，包括对等核心技术要有更广泛的了解，还要学会利用技术去创造更多、更好的场景。
人类该如何应对技术变革？大家要保持接受和学习新事物的能力，不断提高自己理解和利用新技术的水平。未来，懂行业又懂技术的人，最能产生影响。如果不懂技术，或不懂行业，都应该找到“另一半”来合作，共同创造新的场景、新的可能。

以下为三人对谈全文：

腾讯公司副总裁郑智霖、“营销科技”概念创始人 、腾讯 主任及杰出科学家张潼在峰会现场进行对话
郑智霖：希望请张潼博士简单地讲讲 的方向是什么。
张潼：很多人说去年是人工智能元年，其中一个标志性的事件就是战胜了李世石。腾讯很早就开始运用人工智能的技术，去年正式成立了 ，也是表明了我们对于长远投资的决心。
我们的工作是基础研究和应用探索的结合，希望为腾讯打造全面能力，并为产品及业务部门提供技术支持。我个人偏向基础研究，这里分为四大领域：机器学习，是让机器向人一样去思考；计算机视觉，让机器学会去看；语音识别，让机器会听；自然语言处理则是让机器学会理解语言和展开对话。每个领域代表一个基础研究方向，又能进行深层次的研究拓展。
结合腾讯独有场景和业务优势，我们还提出四大应用领域：内容，比如天天快报的新闻推荐；游戏，比如围棋‘绝艺’；社交，比如对话机器人；以及平台工具型，主要是开放我们能力。
我们的技术应用到了上百个腾讯的产品里，包括微信、、音乐、天天快报和应用宝等。
郑智霖：非常感谢，接下来第一个环节想请两位大师围绕“技术”、“生态”、“平台”三个关键词，从、角度分享一下你们的看法。
 ：我认为所有的技术非常让人激动，这些技术并不是分开的，现在所有的技术都是连接在一起的，对我们来说是全新的体验，并不仅仅是对于营销专家来说，对用户来说也是全新的体验。
比如说广告技术方面，过去只是用来管理广告，现在我们发现广告技术不同的触点只是刚刚开始，我们可以分享不同的数据，有更好的管理客户数据的关系
张潼：我觉得这个还是很有意思的。作为一个核心的技术能力，其实能在金融、医疗和广告等非常广泛的领域应用。如果单从广告营销出发，我认为很大的价值在于个性化。通过把多场景中的多数据进行系统整合、分析和预测，覆盖了整个用户体验流程。这里的能力主要体现在三块：
能做完整的用户画像，从用户在什么场景，做过什么，喜欢什么、到预测他们将来可能对什么感兴趣。
能做复杂的数据整合，将用户不同时间、场合做过的事情，跨越时间和平台维度再联系起来。
还能给出精准的预测，上面做完用户画像和数据整合后，就回到精准的预测和推荐，这里涉及到我从事的研究——机器学习和大数据。互联网广告所做的精准营销，要在用户的当时的应用场景里，匹配最相关的广告。这要考虑成百上千万的变量，成败上千亿的定量，如此庞大的数据规模，只有匹配优秀的机器学习模型才能进行处理。模型在这个过程中还会不断迭代升级，再给出更精准的分析和推荐，形成一个良性闭环。
有趣的是，这个研发迭代的过程，我们也借鉴了小步快跑的互联网思维，以一天一个周期、一星期一个周期，不断优化和升级。我认为这种方法，也可以在更广泛的场景和模式下被借鉴。
郑智霖：第二个分享环节，不管是还是技术，你们觉得最终是科学存在越来越少还是会有很大的贡献在里面？
 ：我认为是两者都有，最终来说应该是科技和技术都有。做市场营销谈到科技可能会有些怯场，最重要是找到真相。在过去做市场营销的时候都是靠猜，很多钱都是浪费的。做科技、科学是使用科学验证方法去衡量结果，再根据这样的结果去做决策。这是非常有价值的，对于市场营销来说是非常好的工具，但这是不够的。我们还需要很多的创造，我们还需要去讲述新的技术，还需要去连接用户。
现在来说技术算法是没有办法让我们做到的，对于市场营销者来说两边都要做不管是从意识方面，科技方面也要做。一方面我们要有愿景，需要实现愿景的话用科技的验证方法看一下要达到我们所设想的目标如何通过技术手段达到。
张潼：我认为、程序化、计算机的共同之处，是会有目标，且目标可被优化。当我们的把不确定性的、表现不出来的内容，定义为可以反馈的技术变量时，就能学习和创造，从而让技术和艺术更好的结合，甚至是互相转化。
让技术直接转化成艺术，一个例子是用机器作画。如果你让机器看很多的鸟的照片，它学会了其中的一些规律，比如鸟的身体是红色，尾巴是黄色等，机器就能“创造”出鸟的照片，或许还是一只你从未见过的鸟。另一个例子就是风格转换，给机器一张风景照，它能“再创造”，把图转成梵高风格的画作。当你定义好能进行反馈的技术变量，机器就能学习和“创造”。
技术还能辅助创意工作，把一些数据量大、重复性强、能量化的工作交给机器，比如数据的分析与衡量；而人专注于创意性强、复杂性高的工作，比如想出一个好的 。
郑智霖：这个也蛮有意思，技术有可能会越来越多地赋能。大家提到或者时，我们听到了很多声音，所以接下来一个很重要的环节是想请问张潼博士，如果有一天机器人取代了人怎么做？这里有两个部分，第一个部分是营销主广告主很担心会不会有一天机器取代了我们。第二个是技术需要很多的数据，人的重要性不管是受众、用户，会不会有一天机器全部取代了人呢？
张潼：我个人觉得还不会取代人。报纸上常写、也有人经常问我，会不会威胁人类生存，我们这些在一线从事研究的人，达成的基本共识就是，人类还不用有这方面担心。不仅不会取代人，还从广义上来为人带来更多机会。对营销人而言，可以看作是下一个机会，当底层、机械、重复的工作交给后，营销人可以聚焦在更大、更有趣的创意上。也是下一个大的挑战，因为对营销人的要求更高，包括对等核心技术要有更广泛的了解，还要学会利用技术去创造更多、更好的场景。
不过确实可能会在下一个十年、二十年改变全行业，在一个个垂直领域里挖得很深，让人的经验和技术结合，利用大数据和机器学习做得更好。在数字营销领域，能“创造”广告、也能深入理解场景，还能在不同场景里匹配个性化内容。比如看到一个广告牌，能用技术识别人脸或语音，了解谁在看广告，再根据用户的历史和即时数据分析，给他推荐最合适的广告内容。我相信，在满足个性化需求这一点上，确实能做到比人更好。做不到的，是很多大范围的创意，比如说创造出新场景后，如何够吸引客户？这需要人去控制、去想、去实验，和技术人员一起做系统，让系统上线应用。当你你有更好的想象能力和创造能力，你会有更多发挥空间，因为你可以用的工具更多，另外涉及的面也更广。
还提到技术、营销还要和管理结合，这包括了用户相关的一系列管理，其中有很多机会，在国内迅速发展的情况下，大家要保持接受新事物、学习新事物的能力，不断提高自己利用新技术的水平。
未来，懂行业又懂技术的人，最能产生影响。如果不懂技术，或不懂行业，都可以找到技术人员或行业从业者合作，一起创造新的场景、新的可能。
郑智霖：比如张潼老师说大家多点跟我们进行合作，大家多挖掘合作点。
 ：个人来讲，我并不觉得会把我们的公司给取代了，而是说会改变我们能够在营销当中可以做的事情。如果说你能够去学习去接受吸收新的可能性，我觉得你不会丢失自己的工作。但如果你不愿意这么做，很有可能你会失去自己的工作，如果你愿意跟上发展的速度的话，我觉得刚刚你所描述的场景显然是会出现的，现在的技术非常好，其实是给到你很多的赋能，很多工作我们都可以省略了，取而代之的就是我们可以有更好级别数据的整合，通过我们的想象力、创意进行更好的整合和利用。
我比较期待的事情就是营销主更好地利用去触达消费者，但是我们也会发现有越来越多更多的消费者他们也可能会更好地利用去触达他们想要合作的对象，所以我觉得对于这些消费者来讲，他们可能会使用一种算法，作为营销者可能会用不同的算法，你觉得怎么样去管理呢？
郑智霖：腾讯智慧峰会希望两位可以尽量用一句话把你对或者的看法给到营销者或者是广告主。
张潼：我觉得从给市场营销带来最核心的能力是个性化，能够帮你更精准地找到用户，在多场景去理解用户，从而更好的进行推荐。希望大家能多让和营销做加法。
 ：我觉得我们今天已经迈出了一大步，因为我觉得营销主要做的第一件事就是不断地学习，我们今天也讲到了的可能性是什么。可能明年我们都难以想象有哪些新的可能性，所以我们需要不断地要有开放的心态去参加不同的活动，从同行身上学到更多的经验，这样我们就会知道有哪些新的趋势和发展。个人来讲现在是营销业最好的时代，我觉得未来是在营销主的手中。
郑智霖：希望大家可以在这个话题上聚集，或者我们可以举办更多的这样的峰会给到大家，在和方面也有大家新的机会点和合作，谢谢两位谢谢大家！麻文华，博士毕业于中国科学院自动化研究所模式识别与人工智能专业。主要从事图像识别、目标检测跟踪等理论和应用研究，在领域内重要学术会议、期刊上发表论文篇，申请相关专利项。工作期间曾从事、自然场景应用研究，提出基于文字背景区域检测和自适应分级聚类的文字检测方法，研究成果申请美国专利项，日本专利项，中国专利项。目前主要从事证件识别、自然场景文本识别等研究工作。

研究背景
随着便携式拍摄设备的普及以及自媒体、网络直播平台的兴起，数字视频迎来了爆炸式的增长。视频的有效编目和检索成为迫在眉睫的需求。然而，视频来源多种多样，很多并不具备规范化的描述信息比如字幕文件。基于纯粹的图像识别技术理解视频内容需要跨越  图像到语义理解的鸿沟，目前的技术尚不完善。另一方面，视频中的字幕往往携带了非常精准关键的描述信息，从识别字幕的角度去理解视频内容成为了相对可行的途径。
识别字幕文本通常需要两个步骤：字幕定位、文本识别。
字幕定位，即找出字幕在视频帧中所处的位置，通常字幕呈水平或竖直排列，定位的结果可以采用最小外接框来表示，如图所示。字幕文本识别，即通过提取字幕区域的图像特征，识别其中的文字，最终输出文本串。

图：视频字幕识别的一般流程
技术路线
字幕定位
字幕定位需要区分字幕区域和背景区域，有效的区分特征包括以下几点：

字幕的颜色、字体较为规整，且与背景有较为明显的颜色差异；

字幕区域的笔画丰富，角点和边缘特征比较明显；

字幕中字符间距固定，排版多沿水平或竖直方向；

同一视频中字幕出现的位置较为固定，且同一段字幕一般会停留若干秒的时间。


这其中，前三点是字幕外观特征，第四点是时间冗余性的特征。利用这些特征，一种可行的字幕定位方案如下：

图：基于边缘密度的字幕定位
首先，对于视频帧灰度图像进行边缘检测，得到边缘图。
然后，在边缘图上分别进行水平和竖直方向的投影分析，通过投影直方图的分布，大致确定字幕的候选区域。如果存在多个候选区域，则根据字幕区域的尺寸和宽高比范围滤除不合理的检测结果。最后，通过多帧检测结果对比融合，进一步去除不稳定的检测区域。这样，基本可以得到可信的检测结果。
在某些复杂场景下，上述方法检测的区域可能会存在字幕边界检测不准的情况，尤其是垂直与字幕方向的两端边界。这时，可以进一步借助连通域分析的方法，求出字幕所在行区域的连通域，通过连通域的颜色、排列规整性来微调检测结果。
字幕文本识别
字幕文本识别通常采用的方法是首先根据行区域内的灰度直方图投影，切分单字区域，然后针对每个单字区域进行灰度图像归一化、提取梯度特征、多模版匹配和最小分类误差分类。然而这种传统的基于特征工程的分类识别方法难以应对背景纹理复杂，以及视频本身的噪声和低分辨率等问题。
一种改进的思路是采用基于深度学习的端到端的串识别方案：    。其方法流程如图所示：

图：实现  
首先，输入高度固定、宽度不限的单词图像无需单字区域信息，在训练过程中，将图像统一归一化到；
然后，通过层提取图像特征，利用形成特征向量，输出为的 。这里，和与输入图像的尺寸成比例相关。论文中， 的尺寸为：。这相当于对图像进行了过切分，将其划分为个条状区域，每个区域用维的特征来表示。其中，被认为是英文单词的长度上限。值得一提的是，由于卷积性质，这里的条状区域是“软边界”且存在交叠的，其宽度对应最后一层卷积的感受野。
接着，通过层提取条状区域的上下文特征，得到类别概率分布。这里采用的是双层双向的，的单元个数与一致。的输出为的概率矩阵，其中，对应于类别个数，考虑个英文字母个数字个负类对应于字母之间的模糊地带，类别个数取即可。
最后，通过层将概率矩阵转化为对应某个字符串的概率输出。层本身没有参数，它利用一种前向后向算法求解最优的序列，使得理论上庞大的穷举计算成为可能。
从上面的分析可以看出，的亮点主要在于：将切分和识别合并为一个模块，避免了误差累积；可以端到端训练。在我们前期的实践中，发现其性能比传统方法的确有明显提升，主要表现为对于艺术字体、手写字体等切分困难情况优异的识别性能。但是，针对实际应用场景的分析让我们最终放弃了这个方案，原因有二：
时效：基于我们在英文单词上面的实验对比，的耗时约为传统方法的倍，不能满足视频处理的实时性要求；
性能：擅长处理难以切分的字符串而字幕文本间距和字体均较为规整，很少出现字间粘连的情况，所以并不能体现的优势。
综上考虑，我们最终采用笔画响应加投影统计方法进行切分，而在单字识别环节采用，提升复杂场景下的识别性能。下面简单介绍该流程：
切分环节包括三个步骤：

求取字幕区域图像的笔画响应图；

统计笔画响应图水平方向的灰度投影直方图；

根据字幕区域的高度预估单个字符的宽度，并以此为依据，在投影直方图上寻找一系列最优切点。



图：字幕区域的切分
切分环节给出了单个字符区域，针对该区域，采用模型提取特征来进行单字识别。这里需要考虑两点：
模型选择：经过实验，包含层卷积池化单元的简单模型即可将传统识别方法的性能提高个百分点左右。当然，层次更深的网络，如，会进一步提升性能。实用场景下，模型选择需要根据需求在速度和性能之间进行权衡。
数据来源：基于深度学习的方法，性能关键在于海量可靠的训练样本集。在训练过程中，我们采用的样本集在百万量级，而这些样本仅靠人工搜集和标注显然是不现实的。所以，在深度学习的多次应用中，我们均采用了合成样本训练，实际样本验证的模式，并证明了其可行性。
以合成字幕文本为例：我们通过分析字幕文件的格式，将待生成的文本写入字幕文件，通过播放视频时自动载入字幕，将文字叠加到视频上面。这样，可以同时完成数据的生成和标注。我们还根据需要定制了不同字体，添加了阴影、模糊等附加效果。这样，理论上我们就可以得到无限多的合成样本了。

图：字幕文字样本的合成
虽然识别模块的性能强悍，但是对于形似字难免仍然存在识别错误的情况。这时就要发挥语言模型的威力了。语言模型又称为模型，通过统计词库中字的同现概率，可以确定哪个字序列出现的可能性更大。中的代表统计的词字序列的长度，越大，模型越复杂。在字幕识别系统中，我们用了最简单的模型，将最终的识别正确率又提升了个百分点。

图：基于语言模型的结果校正
小结
我们采用上述系统在实际视频样本上进行测试，单字识别准确率达到，上单字识别耗时，基本达到实用需求。作为对于深度学习方法应用在实际业务中的一次粗浅尝试，我们有两点心得：
关于方法选择，要从问题出发，具体分析难点在哪里，选择最简单有效的方法，避免贪大求新，本末倒置；
关于数据合成，合成数据用于训练，实际数据用于微调和测试，可谓是训练深度学习网络性价比最高的方式。当然，不需要考虑时间人力消耗的土豪随意。在操作过程中，一定要注意保持合成样本和实际样本尽量相似，可以采用多次验证调整，选择最佳的合成方法。

相关推荐
效果广告点击率预估近期实践：深度学习人人都可以做深度学习应用：入门篇上人人都可以做深度学习应用：入门篇下本文为年月《程序员》原创文章，未经允许不得转载，更多精彩文章请订阅《程序员》。
责编：仲培艺，关注数据库领域，寻求报道或者投稿请发邮件。

接《  深度探索一》
 的存储架构
存储层的设计和实现，体现了“    ”，其含义是日志中包含了数据的信息，可以从日志中恢复出用户的数据，所以数据不一定必须再独立存储一份。而数据库的核心不仅是数据，保障数据的拥有特性的事务和提供便捷查询的语句、对以数据为基础提供商业的交易服务更是必不可缺失，所以更精确的说，“    ”，日志就是数据也许更为合适。在笔者看来，数据库的价值不仅在数据，还在数据库的相关技术，尤其在现代巨量数据下、完备的数据库理论下，对以分布为要求的数据库架构提出新的工程实践挑战。就是走在这样的实践道路上的楷模。
 存储层的工作
如图所示，主机  写出的日志生成的日志带有，  ，单调递增的日志顺序号信息发送到六个 中的每一个 上的时候，只存在一个同步瓶颈点，就是图中标识为❶之处，这是的一个核心设计点，尽量最小化主节点写请求的延时。在存储节点，传输来的日志进入一个队列等待被处理。
之后日志被快速持久化到物理存储设备，并立刻给主机一个回应。这是标识为❷的处理过程，这个过程极其简单，没有额外的操作，因而速度会很快，这样能够满足如上所说的“尽量最小化主节点写请求的延时”的设计理念。❶和❷之后的其他操作，都是异步操作，不影响系统的整体性能。这样当主机  收到六个 中的四个节点的后，就认为日志成功写出，可以继续其他工作了。
❸所做的工作，是对持久化了日志做处理，如排序分组等操作作用在日志上，以便找出日志数据中的间隙，存在间隙的原因是多数派写日志的机制下，少数派可能丢失日志从而导致日志不连贯。
 ❹所做的工作，就是从其他存储节点个存储节点构成一个 ，即 ，每个节点是一个，存储单位是，位于一个数据中心中。个存储节点每个位于一个，共分布于个中，通过协议，来拉取本节点丢失的日志数据，以填充满所❸发现的日志间隙。在❸和❹的过程中，能发现所有的副本中：相同的、连续的日志段是哪一部分，其中最大的被称为  。
❺所做的工作，就是从持久化的日志数据中，产生数据，就如同系统故障时使用日志做恢复的过程：解析日志，获取其中保存的数据页的修改后像，恢复到类似于传统数据库的数据缓冲区中这也是存储层需要存在“”的一个明证。
之后，第六步，周期性地把修复后的日志数据和由日志生成的以页为单位的数据刷出到做为备份。第七步，周期性地收集垃圾版本，即     ，参考表，可以看到，垃圾收集，是以为判断依据的，当日志的小于，则可以被作为垃圾回收；第八步，周期性地用做数据校验。
 
图 日志数据在存储节点的处理过程图
 储存层的设计讨论
现在再来反观的整体设计：

数据不再从数据缓冲区刷出，消除了随机写操作，减少了。

计算和存储分离，日志跨写到多份存储节点，存在网络。

主备节点间传输日志和元数据，存在网络。


如上是三条核心点，似乎网络占了三分之二条，属于多数。但是网络都是批量数据顺序写，可极大地抵消很多次的随机写的网络消耗，而且通过数据冗余，极大地保障了可用性和云数据的弹性，从测试数据看，整体性能得到了可观的提升。因此这样的设计是一个优秀的架构设计。
数据冗余且有效，是使用数据库系统的基本要求。逻辑备份与还原、物理备份与恢复、主从复制、两地三中心等灾备技术方案等都是数据冗余的相关技术。数据库走向对等分布式架构，除了应对巨量数据的存储和计算的需要，也要靠数据冗余来保证数据的可用性。所以数据冗余是数据系统架构设计的一个必须考虑点。
 自然也要实现数据冗余。如图所示，数据至少在个中存份。如果不采用“    ”的理念，而使用传统数据库的技术，在跨节点写出多份数据时，势必需要采用等多阶段的方式来保证提交数据的正确性，这样网络交互的次数就会很多，而且大量的随机写操作会在网络蔓延。所以“    ”的理念客观上避免了传统的、耗时昂贵的分布式事务的处理机制，而又达到了数据分布的目的，这又是一个亮点。
数据至少在个中存份，其目的是要保证数据库服务的持续可用。那么，什么算是可用呢？无论是数据中心内部的局部故障还是跨数据中心甚至跨出现故障，也要在某些情况下提供数据服务的可用。这就要分两种情况确定，这两种情况基于个副本的前提个副本能满足多数派的读写规则，但是一旦其中一个副本不可用，则其余个就不能保证读写一致，基于个副本的分布式设计是脆弱的，不能切实可用地起到依靠数据冗余来换取数据可用的保障：
 第种： 读写均可用。
如图，当一个出现问题，即个副本不可用，仍然能够保证读写可用，保障数据一致。设置=，读多数派为 = ，写多数派为 = ，所以一个出现故障，或者个中的两个数据中心出现故障，依然能够向外提供服务。
 
图 保障读写可用图
第种： 至少读可用。
当写服务不可用，至少还可以提供读服务。设置=，读多数派为 = ，写多数派为 = 时，一个出现故障依旧能够提供读服务，如图甚至跨不同的个数据中心出现故障概率非常小，读服务依旧能够提供。
 
图 保障读可用图
在节，曾经说过“主从节点可以位于不同的最多位于个，需要个但需要位于同一个内”。如表所示，在全球提供的个数尚有限，按其自身的说法部署一个需要三个，那么诸如只有个的如北京，尚不能得到较可靠的数据可用保障。
表 至年月的和部署表

 设计的优点
首先，存储层与事务管理分离，即的特性独立，使得存储有机会成为独立的服务而存在，便于跨数据中心时实现数据的容错、自愈 和快速迁移。一旦存储层具备了容错、自愈和可快速迁移特性，则对外提供服务就不用再担心数据的短暂或长久的不可用性。在数据为王的时代，此举能保护好最核心的财产，确保云数据库服务能持续不断地对外提供服务，这使得具备了云服务的弹性。此点在看来，十分重要。有了这种需求，推动技术架构发生变化便水到渠成。
服务的过程中，局部数据修复的能力，速度很快。数据库宕机后的恢复，速度也很快。

                                         

服务中断后，最后的招数就是数据迁移加数据库引擎重新部署，而的整个云系统具备了快速迁移数据的能力，这使得以存储为核心的云数据库有了超强的持久服务能力。    

                                                              ’             

 其次，存储层从高度耦合的数据库引擎中分离，降低了数据库引擎的复杂度，数据库组件的分离使得数据库部署适应巨量数据的分布式处理需求。这将进一步带动数据库引擎上层的语法分析、查询优化、执行、事务处理等组件进一步的解耦。
笔者认为，这是用实践为数据库架构技术的发展指出的可行方向。一个具有实践意义的分布式发展架构，总是最亮眼的，也总是具有指导意义的。存储与计算解耦，各种组件互相解耦，不断解耦在此种思路下，已经走在发展万能数据库引擎的道路上参见节。引言

“十步杀一人，千里不留行；事了拂衣去，深藏功与名。”诗人李白笔下的侠客，武术超强，淡泊名利。想必，面对这些侠客的人，会不由自主的两股战战，心生寒气，但这些侠客，却也不是只顾私利，冷血残忍的杀手。
如果硬要为这些侠客找个现代参照，让·雷诺饰演的杀手莱昂，或许有几分神似，他“友善”、“沉默”，心地善良，这样的“”，自然不会让人觉得太冷。恰好，在腾讯，也有一位像莱昂的“”：除病毒于千里之外，隐名声于市井之中。
不过，如果突然提起“”，想必大部分人会认为是在说杀手，不会想到这是一位反病毒专家的“花名”，但如果你知道“熊猫烧香”，你或许会对他有所耳闻。
年月日，岁的湖北人李俊和混江龙李俊同名同姓编写了“熊猫烧香”病毒，年月，“熊猫烧香”肆虐中国互联网，和他的团队，迅速推出超级巡警杀毒软件，完美查杀“熊猫烧香”，也因此一战成名。
，本名董志强，汉语言文学专业出身，从长相上看，一点“杀手”风范也没有，但面对计算机病毒时，他是不折不扣的“”，“熊猫烧香”的覆灭便是明证。但是，在他看来，“熊猫烧香”一点技术含量也没有，而且，当下的大部分计算机病毒，包括肆虐全球的，也一样没有技术含量。
年，加入腾讯，担任云鼎实验室总监。他为自己取了一个“毫无特色”的英文名：，大概相当于“王小二”吧。
对了，他还是网红妹进入互联网的领路人。

曾靠给计算机杂志投稿挣网费

读家：你大学专业是汉语言文学，在这方面有过什么发展或研究吗？
：只能说在学校学得比较认真，一度认为将来会靠文字吃饭，做过一些规划，尝试写过小说、散文和诗歌，也在杂志上发表过豆腐块文章，喜欢上计算机后，就不大写了。
中途也曾捡起来过，因为当时拨号上网非常贵，每小时要元，即便严格控制，一个月也要块钱。这什么概念呢？当时哈尔滨市中心的商品房一平方米大概就这个价。开销这么大，我不得不重拾写作，我以多个笔名给计算机杂志投稿，每个月大概写篇左右，保持了两年时间，这样我的稿费就能覆盖网费了。
读家：稿费很高吧？
：计算机类杂志稿费当时确实比较高，一篇几百块的样子，而且图片也算钱，比如截图、流程图，这比写文学作品挣钱多了。
文科生转做安全也要系统性学习
读家：你从文学转到安全领域，据说和焦点论坛有关，是这样吗？
：焦点论坛全名网络安全焦点论坛，是国内比较早的计算机安全社区。我最初接触计算机时做的是逆向工程相关内容，学了很多逆向工程相关知识后，才把兴趣转到网络安全上，开始学习使用黑客工具，了解其中的原理。
为此，我去谷歌搜索相关知识，发现很多知识的链接都定位到焦点论坛，于是也注册了一个，后来才知道安全焦点是当时国内最好的中文安全资源站，有许多优质的原创和翻译文章，论坛汇集国内安全领域最早一批从业者。
这个论坛对我帮助很大，让我得以了解圈子内同行的想法，并且知悉外部研究动态。注册账号后，很荣幸得到论坛早期创始成员的认可，成为其中一员。也是其中一员。
读家：从文学转到安全，感觉比跨度还大，你怎么做转换的？
：我也梳理过，文科生能否从事计算机行业，我发现，计算机行业不单需要理性思维，还需要跳跃性思维，很多问题循规蹈矩去解决可能遇到困难，而运用跳跃性思维就迎刃而解。恰好我有写诗歌散文的经历，跳跃思维很发达，经常压抑不住，所以针对一个问题，我会想到好几种不同的思路，最终反倒把问题解决了。
读家：不会遇到数学上的困难吗？
：最初有困扰，因为没有系统性学习，但网络安全本身实践性很强，需要通过实践积累经验。当然，也不能放弃系统性学习，我最初接触计算机时，通过自学完成了系统化学习，自我衡量的话，如果考计算机类考试，比如算法、密码学、汇编语言、计算机程序设计，考分问题不大。
计算机病毒大多没有技术含量

读家：您因为杀灭熊猫烧香病毒一战成名，但很多安全从业者说，熊猫烧香并不算很高级的病毒，你怎么评价？
：这个要说清楚有点复杂，我多谈几句。
在过去，病毒往往是黑客一种炫技的形式，病毒作者主要研究高级感染技巧，在二进制层面做非常精确的控制，追求代码凝练精悍。国外一些地下病毒论坛中，基于这样的判断条件，许多人会分析病毒的优劣，写出很酷的病毒会受到大家的尊重，他们也会关注反病毒厂商在引擎层面如何处理，从而得出引擎优劣的评价。
这个时候许多病毒作者不以传播病毒为目的，他们往往将自己写好的病毒直接发给杀毒厂商，然后看他们如何处理，多久能处理。曾有病毒作者跟我吐槽，说他写了那么酷的病毒，却被卡巴斯基起了很挫的名字。这个时期，一方面病毒数量少，以破坏为目的的不多，杀毒厂商可以针对性的精细化处理。
但是，当流量变现兴起后，存在于灰色地带的流氓软件突然有了很高的获利空间，也刺激了新生代的病毒的功利性。熊猫烧香就是典型案例，以前病毒将自身隐藏在宿主文件的空隙中，甚至不改变宿主文件大小。熊猫烧香直接采用将自身与宿主文件捆绑的方式，不需要很高的汇编技巧却简单有效，同时删除电脑中备份，破坏用户通过还原方式修复系统，并对磁盘中的文件都插入感染链接，确保在删除病毒文件后，用户访问网页时还能死灰复燃，等等。
对有研发经验的人来说，这些套路不需要专门的技术研究，就可以很快实现。这种病毒不是技术上的创新，而是思路的转变。但这些技巧，在当时国内的互联网非常有效，很接地气。这就像两个人打架，观众都期望看到行云流水的对打拆招，没想到他一块板砖结束战斗。
熊猫烧香的一些感染手法，一方面为传统厂商所不齿，一方面无声的嘲讽了传统厂商的应对和处理能力。熊猫烧香捕获很容易，被感染后的图标辨识度极高，对付它的难点在于：一是传播渠道很难被遏制，病毒通过挂马，利用和各种第三方漏洞传播，进入用户电脑，当时的杀毒产品对网页挂马的检测能力几近于无。二是很难被全面检测和清理，病毒作者通过代码贩卖使得产生大量免杀的新变种。一个典型的事实是在对抗的过程中，我了解到有几家反病毒厂商在逆向我们的产品，试图分析我们是如何解决这一问题的。仅凭这一点能看出，这是一个反病毒领域的新课题，反病毒厂商总是试图用归一化引擎架构来处理所有问题，熊猫烧香是对这种传统引擎修复方法的穿透。原来的修复逻辑无法适应新生代病毒套路：仅仅针对感染文件提取特征去检测还不够，还要同时修复磁盘中的，甚至浏览器的首页，盘等等。
当一个病毒大范围爆发，而安全厂商又无力应对时，我们一定不能只关注技术细节，还要思考其背后的深层次原因，这样才能有效应对变化，解决用户面临的问题。
网上有人纠结病毒的技术含量，大概是因为个别媒体把病毒作者比喻为天才，通过技术含量的评判实现对其的否定。这种主观评判很容易让人忽视问题本身，事实上，从专业技术角度分析，最近被热炒的，甚至手机版，一样没有技术含量，连危害面都没有那么大。
产品不能为了透支用户信任

读家：你在一次采访里提到，做产品就是做人心，这句话怎么理解？
：我过去十余年，更倾向于产品负责人角色，做过很多产品，所谓人心，就是用户心里对我们提供的服务的认知、定位、和评价。产品的一切，都要围绕着用户的认知和评价来进行。比如有人说要研发一个管理系统，这个管理系统应该具备功能等等，在研发的过程中大家往往忽略了目标，我们并不是要做管理系统，而是为了运营，我们应该围绕如何快速改善不足进行，管理系统只是运营的辅助工具之一。
读家：腾讯和百度经常被人吐槽，我们做错什么了吗？
：互联网行业的几家大公司，基本上都被吐槽过，我觉得吐槽分两个层面：一是公司内部员工吐槽，包括觉得流程太慢，跨部门合作太难，我经历过的几家公司都未能避免这类问题。
另一个层面，我觉得是被网友吐槽，这比较严重。我看到最多的例子是产品可用性被透支。任何一款产品，商业化空间都有限，市场就那么大，展示位就那么多，在导向下，大多数所谓的变现上的创新都是试探用户底线的擦边球，这点每个产品负责人都要慎重。
读家：这可能很难解决。
：最简单是对事情的态度，我认为在市场没有很大增长规模的条件下，要保持每年一定增长比例不现实，应该在公司上下级间达成一致，不能要求产品在市场饱和的情况下，还每年保持百分之二三十的利润增长。我过去也遇到过这样的例子，我的建议是做不一样的产品，去寻找新的增长点。
云鼎实验室的名字源于建议
读家：目前你在腾讯负责云鼎实验室，这个实验室与其他实验室有什么不同？
：最大的区别还是业务上不一样，云鼎实验室倾向于云安全，另外我们的侧重点在防御，像玄武、湛卢有很强的进攻能力，这样我们能有比较好的互动。在过去一年里，玄武实验室帮我们发现了许多漏洞，我们第一时间跟进修补，现在和其他实验室也在开展类似合作。
读家：据说云鼎实验室的名字来自于建议？
：是的，也在朋友圈解释过。其实我最开始想了十多个名字，最后定了两个，去找讨论，他觉得“顶”锋芒太盛，而且容易让人联想到马来西亚那个赌场，不如用“鼎”，一方面可以引起安全、稳当的联想，同时鼎作为古代炊具，又有调和众味的意象，和云计算广纳各行各业的特点相吻合。
读家：你如何评价？
：他在安全圈子里是非常博学的人，而且非常聪明。
读家：阅读极为广泛，是不是做安全，也需要博览群书？
：做安全，最开始只是掌握方法，比如如何分析样本、挖掘漏洞，但后面必须总结出方法论，将经验和技巧沉淀下来，博览群书可以带给我们跨界思路，帮助比较大。
云鼎实验室会让腾讯云更安全
读家：企业客户在选择云计算平台时，安全往往是首要因素，那么云计算领域的安全与传统互联网领域的安全有什么不同？腾讯云目前在云安全层面上属于什么档次？
：从解决方案上说，云计算领域的安全可以闭环。从产品上讲，互联网安全产品容易柔性地解决问题，可以快速迭代，云计算产品直接面对业务系统，用户服务的稳定性排第一，我们内部会反复测试，跑得比较成熟后才会给用户升级。我们对技术方案持谨慎态度，一些流行的、高精尖的技术路线要有成熟的实践才能采用。
腾讯云起步稍晚，目前发展比较快，云安全也在快速跟进竞争对手，对手比我们早做三年、人数也是我们两倍多，腾讯云安全在基础建设、产品功能、运营闭环等方面最近一年在加快追赶。
读家：你们通过什么方式验证新技术新方案？
：一般我们这么做：第一，观察公司产品或竞品有没有采用这种技术，使用情况如何；第二，开发，在我们自己的平台上测试，腾讯云上有几百台测试机器，我们会从性能、质量等多方面进行评估，评估达标后才会推荐给用户，然后看用户愿不愿意接受。
如果用户愿意接受，我们就让他们用。我们会在产品中配套这种技术方案，但默认是关闭的，只有用户愿意使用才会打开。外界看起来会觉得流程比较长，产品更新周期慢，但企业市场就要这么做。
读家：企业客户是不是比较难沟通？
：和企业客户沟通，其实是立场问题，我觉得企业客户不难沟通，我最近接触几个证券类客户，他们表示希望有某种技术方案，但从我的角度看，可能会不稳定，我直白建议不推荐这样做，但我们具备这样的能力。实际上他们非常主动，表示哪怕导致部分机器蓝屏也能接受，有问题会反馈给我们。
其实不同客户诉求不一样，金融客户更重视安全，那么能解决安全问题的技术手段，出现一些错误可以容忍。所以，与客户沟通时，要找到各自的诉求。
读家：卢山接受「读家」采访时说，可以将人工智能应用到安全领域，你接受采访时也曾有过类似表态，那么这种结合会是什么样的形式？
：人工智能这两年比较火，但落地并不多，去年云会议上我的议题是《发现决定一切》，就是指解决安全问题我们需要很强的“内视”能力，基于这一能力建立起来的联动体系才能有效闭环。这里面人工经验虽然有效，但是一个相当粗的指标，当信息粒度降低到一定程度时，就会影响人工判断。
机器学习可以帮助我们解决这个问题，机器学习背后是威胁建模、数据分析，以及我们的攻防经验，目前国内外人工智能的案例，大多处在初级阶段，在安全应用上最成熟的案例体现在异常发现和风险识别上，这能帮助我们在海量数据中发现更多的异常线索。
过去这些年，我们也做了一些实践，我们发布了主机安全产品云镜，通过机器学习判断异常节省了分析人力，是人工智能在云端的典型应用。
目前，国际上人工智能在安全领域的应用，也大多集中在检测和发现异常上。整体来说，人工智能最大的亮点是节省人力，其实是发现更多线索，但还没发做到科幻小说中那样，机器完全自动化。
我选人才更关心他能否沉下心

读家：你曾说云安全领域可以建立红蓝军，形成闭环，实现攻防一体，这怎么理解？
：攻防一体其实说得比较久了，所谓闭环，往小了说就是要形成从应用侧到流量侧，从端点到网关一体的监测与响应体系，在这个盘子里我们可以快速的检测与响应。这样一个体系需要实战磨练它，就要有作为攻击的红军出现，目前我们已经有一些基本的实践，一方面考验产品的响应能力，一方面锻炼团队的应急能力。
在这个闭环中，红军扮演的是攻击者角色，我们希望他能主动发现体系的问题，检验我们的防御体系，这样我们才知道如何去应对。所以，红军不一定要我们防御团队来做，我们欢迎大量红军来一起推动攻防落地。
读家：您怎么评价云鼎实验室这个团队？您挑选人才的时候会关注他们哪些特质？
：云鼎实验室团队成员目前比较少，我挑选人才时，会关注两点：第一，对安全是否有强烈兴趣？如果有兴趣，就算经验欠缺，也可以带进来培养。第二，是否能沉下心来，现在大家普遍比较浮躁，所以我很在意一个人能否沉淀下来做事。
过去一段时间看，团队成员都比较有责任感，应急事件响应很快。团队内部，我们倡导直接沟通，坚持事实，鼓励每个人都勇于实践。
腾讯应该把产品做得更安全

读家：现在智能化已经成为一种不可逆的趋势，但我们大部分人缺乏相应的安全意识，我们应该如何保护自身的信息安全呢？
：今天的我们已经是数字化生存的状态，离开手机电脑一天就有度日如年的感觉。建议每个人都掌握一些基本的安全常识，在网络上提升自我保护意识。不要事无巨细的泄露自己和家人的行踪，容易被骗，遇事慌乱的家人他们与信息时代有点远，遇事多方核实一下信息比较好。自己和家人的电脑上要安装防护软件，尽可能用最新的系统升级到最新的版本。重要的数据和信息定期备份，即使有损失也在可控的范围内。
公司的产品覆盖了海量用户，可以说是社会基础设施一部分。提升自身产品安全性，加强业务安全运营，对公司和社会都有很大的价值，也是负责任的表现。
公司内多个安全团队可以加强合作，优化投入，像最近的暗云事件，我们在跟进过程中与电脑管家有很好的联动、安管的同事也参与其中，大家信息共享，在云管端多个层面联合打击，一起为净化互联网贡献力量，这样就能更好的保护我们的家人。
读家：公司层面要把产品做得更安全一些？
：对，这也是腾讯社会责任感的体现。
读家：最后一个问题，你怎么评价妹和她的系列视频？
：其实质蕙妹拍的视频我都看过，也会打赏。当初在百度招聘她时，是希望她做一些海外的工作，她在这方面基础不错，英文好，学习能力也不错，开始写稿我还给了不少建议，很快就发现不需要了，对她的工作定位一直是方向。没想到她到腾讯后，走了不一样的道路，我还自责了一下，感觉原来没有把她的天赋挖掘出来，是不是耽误人家了，很惭愧。后来我还特意跑到原来团队的群里问大家，谁还有天赋没发挥出来，不要埋没了。作者：

我们来了
今天， 通过了公司的最终审核，作为腾讯微信的一个开源组件分享给大家。
从初建，到不断摸索、优化，再到整理代码、文档，最终看着她在  上静静等待着“ ”被按下，心情犹如看着女儿出嫁的父亲。趁此机会，正好回顾一下  这个“微信的数据库”的成长，分享我们的心路历程，也希望以此让大家更了解。
各自探索
最早期的微信，各个平台除了“使用 ”这个共识，基本各自为政。 平台由于  提供的支持尚可，而且使用  开发不便，自然选择系统  接口进行开发。 
 情况则有不同。系统提供的 学习成本很高、性能一般，并不那么好用。因此，在再三考量之下，我们决定自行封装一套接口，命名为 。
 上的进化之路
最初的封装与类似，都是直接暴露字符串接口，让业务开发自己拼接字符串，取出数据后赋值给对应的。在线程管理上，则是通过线程锁，使所有线程的访问串行执行，以保证线程安全。然而，这种方式过于简单粗暴，以至于我们自己使用起来都觉得甚是烦心。
胶水代码
翻开业务和的粘合层，一个几十行的函数，绝大部分都是拼接、处理返回的空数据和错误码之类的“裹脚布”代码。而且这种代码四处分布，字里行间都写着  。
效率极低
基于字符串，命令行爱好者甚喜之。但对于基于现代的移动开发者，却是一大痛。字符串得不到任何编译器的检查，业务开发往往心中一团热火，奋笔疾书下几百行代码，满心欢喜点下后才发现：出错了！静心下来逐步看、断点后才发现，噢，敲成了。改正，再等待编译完成，此时已过去十几分钟，心中的热火早被浇灭，还谈何效率？
注入
随着微信业务的发展，安全问题也逐渐突显。客户端数据库虽然不像服务端数据库那么容易被坏人盯上，但在微信这么大的体量下，防贼之心绝不可无。注入通常是利用字符串拼接的特点，用一些特殊符号提前截断，达到执行其他的目的。试想这么一段代码：

这段封装很简单，就是将消息内容插入到数据库中。假设对方发来这么一条消息：  ，那么这条就会被截断成三部分：

它会在插入一条消息后，将表内的所有消息删除。倘若微信内存在这样的漏洞，后果将不堪设想。其实反注入并不难，通过绑定参数或替换单引号为双单引号即可解决。但要在业务开发的过程时时刻刻警惕这样的风险，并不现实，毕竟人总会犯错的。
卡顿频发
随着微信内收发消息量的不断增长，串行的视线使得当多个线程同时并发时，就造成了相互阻塞。与此同时，微信内也产生了一些新的需求：聊天记录备份。聊天记录备份是会不断地读取手机上的聊天记录，并传输到微信上。换句话说，就是在单线程下会不断地阻塞数据库。这就会直接影响到用户收发和查看聊天记录。难道用户备份数据的时候，就不能使用微信了吗？显然不现实。于是，我们就让完成了一次进化。
线程并发
内置了一个句柄池，会根据不同线程的访问，动态地分发管理句柄，从而达到读与读、读与写并发的效果。根据的实现，其写与写操作依然是串行的，但在一个操作进行时，另一个操作是通过 休眠重试 的方式进行的，因此在性能上不够极致。

而通过优化源码，使得写操作结束时，能第一时间唤醒另一个线程进行操作，进一步压榨了性能。

关于这个优化的细节，可以参考后期我们将会的一篇：微信  源码优化实践。
封装
通过封装宏，让业务代码在类内定义字段和类型。通过宏保存这些信息，在之后的增删改查中使用。这成为的雏形。


然后我们收紧了接口，只提供最基础的增删改查接口，不支持自定义。同时，我们利用模版特性，将的拼装隐藏在函数调用内，并内建反注入。这成为了语言集成查询的雏形。

通过这两个手段，我们暂且解决了上述问题，但这个封装简单粗暴，缺乏打磨，使得使用上并不方便。

宏定义太复杂。开发者需要重复写字段的类型、需要定义写明各种属性，而且不同类型都需要不同的宏，很难记住。翻开宏定义的代码，字里行间，好像又写着“  ”。

接口太少。因为过于千变万化，组合方式数不胜数，因此只能封装很有限的接口。这就导致业务开发缩手缩脚，怨声载道。他们嘴上虽然没明说，但含蓄的程序员们用另一种方式表达了他们的不满：
“哥们，朋友圈需要查最近十条消息，加个接口呗？”“哥们，联系人需要分组查询，加个接口呗？”“哥们，加个接口呗？”“哥们”
算了，不用哥们了，这个需求是我自己的，我自己加吧。



痛定思痛，乘着开源这股风，我决定将的易用性优化到极致。这，便是，  语言集成查询。
基于的语法规则实现，即便是很复杂的语句都逃不出这个规则。

同时，简化后的宏也更清晰易懂。


关于的用法，可以参考之前的文章  微信移动端数据库组件系列一：基础篇，其实现原理我也会在之后进行分享。
 上的加密和进化
当  在架构上发力的时候， 却遇到了别的问题。
在   时代，由于系统不完善，很多手机用户选择通过  和刷机来定制自己的手机。 了之后，用户和恶意程序可以随意读取任意  的数据，为了数据安全方面的考虑， 决定引入加密数据库 。
 加密
 使用  进行全数据库加密，包括文件头以及 ，这能满足微信的需要。

当时业务逻辑已经成型，幸好  提供了与系统一样的接口，我们很快完成了迁移。
 最新框架
往  的迁移使得我们离开了  不断升级的大环境，  框架至今一直使用   的实现，很多  才引入的新特性微信无法受益，包括微信非常需要的连接池多线程并发。有没办法加密与新特性兼而有之呢？
为了这个目标， 也开始自立门户，第一个目标是将  和最新  框架结合起来。
我们将  与  源码结合在一起稍作改动，同时加上设置加密的接口，同时获得了   最新特性以及  带来的固定  版本与加密的优势。
  框架内建了连接池，实现上与   类似，只是实现在  层，线程唤醒机制也使用  的同步手段实现，可以媲美   连接池了。
在   中， 是会不断升级的，实际上使用哪个版本的  取决于  运行在哪个版本的系统上，这是对开发者来说相当不友好，因为同样的  语句会有不同的性能表现。如果业务需要使用  的新特性，比如我们的我们的全文搜索，就更加需要确定版本的  来保证新特性在所有手机上都可用。
 由于内建了自己的  实现准确来说是 ，所以  版本是确定的，这规避了很多开发上的问题。
 实现优化
 框架查询数据库使用的是  接口，调用  会返回一个 对象，之后就可以使用  遍历结果集了。    的实现是分配一个固定  大小的缓冲区，称作  ，用于存放查询结果集。
查询时，先分配 ，然后执行  获取结果集填充之，直到   放满或者遍历完结果集，之后将  返回给调用者。
假如  遍历到缓冲区以外的行， 会丢弃之前缓冲区的所有内容，重新查询，跳过前面的行，重新选定一个开始位置填充   直到缓冲区再次填满或遍历完结果集。
这样的实现能保证大部分情况正常工作，在很多情况下却不是最优实现。微信对  操作最多的场景是获取  直接遍历获取数据后关闭，获取到的数据，一般是生成对应的实体对象通过  或者自行从  转换后放到  或  等容器里返回，或用于显示，或用于其他逻辑。
在这种场景下，先将数据保存到   后再取出，中间要经历两次内存拷贝和转换 →  → ，这是完全没有必要的。另外，由于   是定长的，对于较小的结果集，需要无故分配  内存，对于大结果集，如果  不足以放下，遍历到途中还会引发  重查询，这个消耗就相当大了。
 ，其实也是在  层通过  库的  填充的， 这里可以理解为一个轻量但只能往前遍历，没有缓存的 。这个不就跟我们的场景一致吗？何不直接使用底层的  呢？我们对  做了简单的封装，暴露了  接口，  就诞生了，它直接操作底层  获取数据，只能执行往前迭代的操作，但这完全满足需要。

这样，在大部分不需要将  传递出去的场景，能很好的解决  的额外消耗，特别是结果集大于  的场合。
通力合作
随着时间推移，微信的聊天记录越来越多，数据库查询就成为了一个性能瓶颈，这个问题在  平台上尤为严重。由于前期各自为政， 和  在数据表设计上并不一致， 将所有聊天记录保存在一个  表上，导致表非常的大，行数达到百万数量级，对表的索引效率非常低，进入会话非常的慢。
而  则将每个会话的消息分别存放在不同的表，因此存在非常大量的表，但每个表的行数都不多，进入会话时速度较快。 虽然没有进入会话速度上的问题，但每次打开数据库初始化都很慢，造成微信启动时卡顿，如何优化无从入手。
为了解决会话索引效率低的问题， 想到  的方案，大家一起探讨后， 也开始试验分表。分表试验得出了意想不到的结果：
分表确实能解决索引慢问题，但 表个数增加会严重拖慢初始化速度。至此我们发现，无论是分表还是不分表，都不是完美的方案，为了保证其他业务的开发进度，两个平台都不做表结构的改动，而是互相配合排查各自的问题：  的索引效率低和  的初始化卡顿。
 方面通过增加  监控的方法，找到了消息索引的瓶颈：使用字符串作索引，占用空间太大，需要遍历的节点过多，从而造成大量 。解决方法为使用整型代替字符串作为索引，具体解决方案可参考之前的一篇分享 微信客户端会话速度提升的背后。
 也不简单，一度认为无法优化的初始化流程也找到了突破口。在打点和  相继无果后，我们决定直接接入  的源代码，进行更细致的优化。
原来， 在初始化的时候，会将 _ 表中的元信息加载进一个  表中，而这个表的默认容量是 ，对于大小为  字节的节点，只需超过  个表，就会将其填满。超载的  表会退化成线性表，并通过比较字符串的方式将元素插入到正确的位置。于是，每新增一个表，都会产生大量的字符串比较的操作，拖慢效率。因此，在调整  表的容量之后，卡顿问题迎刃而解。
通过这次优化的经历，我们发现  和  一些问题是共通的，研究和优化成果可以互通有无。自此之后， 和  在数据库方面的合作开始变得紧密。
紧密结合
好景不长，正值年春节抢红包高峰期， 与  同时收到告警： 反馈聊天记录丢失的用户数异常上涨。
这是数据库损坏引起的，在此之前，我们已经有过应对方案： 恢复。虽然其修复率不高，但确实解决了部分问题，一直没有太过关注。但此次，猜测是大家抢红包热情高涨，导致消息收发数谢谢老板暴涨，手机经常掉电关机，存储空间也被大量占用，这些恰好就是推高数据库损坏率的诱因。
由于有过成功的合作案例，这次在问题初始就订立目标：  与  各自研发对自己平台更有效的方案，但从立项之初就考虑使用跨平台方案，使最终成果可以共享。于是， 方面负责研发高效的备份恢复方案， 方面则研究成功率更高的直接恢复手段。经过不懈努力，备份恢复与   相继面世，并且符合跨平台标准，可以共享成果。想了解更多关于恢复方面的技术细节，可以看这两篇文章 微信移动端数据库组件系列二：数据库修复三板斧 和 微信  数据库修复实践。
至此， 和  的数据库有了跨平台组件的想法和实践经验，思考问题更多从方案通用性的方向考量。为了更好地共享成果， 与  数据库组件  经过重构后脱离各自的业务逻辑，变成一个独立的，专注的，可推广的组件，在公司内部供其他产品接入。
最终， 成为一个开源组件跟大家见面。
展望未来
开源只是故事的开始，我们仍会持续对  做改进，包括更易用的接口、更好的性能、更高的可靠性。这些改进最终也会原封不动地在内微信使用。

本文来源于： 微信公众号前言
文本分类应该是自然语言处理中最普遍的一个应用，例如文章自动分类、邮件自动分类、垃圾邮件识别、用户情感分类等等，在生活中有很多例子，这篇文章主要从传统和深度学习两块来解释下我们如何做一个文本分类器。
文本分类方法
传统的文本方法的主要流程是人工设计一些特征，从原始文档中提取特征，然后指定分类器如、，训练模型对文章进行分类，比较经典的特征提取方法如频次法、、互信息方法、。深度学习火了之后，也有很多人开始使用一些经典的模型如、这类方法来做特征的提取， 这篇文章会比较粗地描述下，在文本分类的一些实验
传统文本分类方法
这里主要描述两种特征提取方法：频次法、、互信息、。
频次法
频次法，顾名思义，十分简单，记录每篇文章的次数分布，然后将分布输入机器学习模型，训练一个合适的分类模型，对这类数据进行分类，需要指出的时，在统计次数分布时，可合理提出假设，频次比较小的词对文章分类的影响比较小，因此我们可合理地假设阈值，滤除频次小于阈值的词，减少特征空间维度。

相对于频次法，有更进一步的考量，词出现的次数能从一定程度反应文章的特点，即，而，增加了所谓的反文档频率，如果一个词在某个类别上出现的次数多，而在全部文本上出现的次数相对比较少，我们认为这个词有更强大的文档区分能力，就是综合考虑了频次和反文档频率两个因素。
互信息方法
互信息方法也是一种基于统计的方法，计算文档中出现词和文档类别的相关程度，即互信息

基于的方法是把文章序列，通过大小为的窗口，形成一个个，然后对这些做统计，滤除出现频次较低的，把这些组成特征空间，传入分类器，进行分类。
深度学习方法
基于的文本分类方法

最普通的基于的方法就是上的做情感分析，接，指定大小的 来遍历文章，加上一个，如此多接入几个，得到特征表示，然后加上，进行最终的分类输出。

基于的文本分类方法，最出名的应该是 的      ﬁ，使用不同的网络，然后加入， 然后到一起。




这类的方法，通过设计不同的 来建模不同尺度的关系，但是很明显，丢失了大部分的上下文关系，      将每一个词形成向量化表示时，加上上文和下文的信息，每一个词的表示如下：


整个结构框架如下：

如针对这句话”             ”，的表示包括___ _编码 的语义，而_编码          的信息，每一个词都如此处理，因此会避免普通方法的上下文缺失的信息。
基于的方法

和基于的方法中第一种类似，直接暴力地在之后加入，然后输出到一个进行分类，基于的方法，我觉得这也是一种特征提取方式，可能比较偏向建模时序的特征；

在暴力的方法之上，      ，将输出不直接接入，而是接入到，通过得到一些序列，然后吧这些序列再接入到，文章说这么做会提高最后分类的准去率。


代码实践
语料及任务介绍
训练的语料来自于大概个新闻类别的新闻语料，但是其中有一些新闻数目比较少，所以取了数量比较多的前个新闻类比的新闻语料，每篇新闻稿字数从几百到几千不等，任务就是训练合适的分类器然后将新闻分为不同类别


对语料处理，得到 ：

 ____
          
    
     = __ 
     _   
         = 
          
           
            
                _ = \
                 = _
                
                 = _
                _ = __
                 _
                __
                \\\_\
                =
               
                 = _
                 
                 ===== ======
                
    _ = ____
         _
    _ = 
    
然后，  以频率阈值进行滤除，然后对每篇文章做处理来进行向量化：
 ___ _=
    __ =          _ 
    ___
    

 
           
    
    ____
          {}____
    ___
          {}____
     = 
     _  
        _ = _
        _
           
    __ = __ 
    __
    __
    __ = __ 
    __
    __
最终就得到每篇文章的的向量，由于这块的代码是在我的笔记本上运行的，直接跑占用内存太大，因为每一篇文章在 中的表示是极其稀疏的，因此我们可以选择将其转为表示，然后进行模型训练，转为并保存中间结果代码如下：
 _
     = __ 
     = __ 
     = 
     = 
     = 
    _ = 
       
           
            _
            
            
        _ = 
       {}{}_ ____
    __ = _ =_ ____
     _   
     __
     ==_
    _ _ _ _ = ____  _=
        
     _
    __ = ___ 
    ___
    __ = ___ 
    ___
    __ = ___ 
    ___
    __ = ___ 
    ___
最后训练模型代码如下：
 
         
    _ = 
    __ _
             
        {}__ _
    _ = __
     __ _
     __ _
          _
    _ ___

和的操作十分类似，只是在向量化使使用的方法：
 
           
    
    ____
          {}____
     = _=
     = 
      
     = __
     = __
       {}
      
       {}{} 

           
    __ = __ 
    __
    __
    __ = __ 
    __
    __
这两类方法效果都不错，都能达到的准确率。

语料处理的方法和传统的差不多，分词之后，使用 的，这里我遇到一个坑，我开始对我的分词太自信了，最后模型一直不能收敛，后来向我们组博士请教，极有可能是由于分词的词序列中很多在 里面是不存在的，而我这部分直接丢弃了，所有可能存在问题，分词添加了词典，然后，对于 不存在的词做了一个随机初始化，然后就能收敛了，学习了！！！
载入模型和构建网络代码如下增加了一些和的手段：
 __ =
     __    
    
     
        _____
    
        ____
          {}
        ____
    ___
          {}
        ____
     = 
     _  
        _ =      _
         _
        _

    _ = 
    _ = _ _
       {}
        
        _ = 
         _   
            _ = _
        
            _ = _  
     _  {}_

 ___
    _ = 
        _
        _
        =_
        _=__
        =
           
    _ = =__  =
    _ = __
     =  _
     = 
     = 
     = 
     =  
     = 
     = 
     = 
       _
     =  
     = 
     = 
     = 
     = 

     = 
     = 
     = 
     = 
     _
     = _ =
     _
     = =
     = _ 
    
        =_ = =
另外一种网络结构，韩国人那篇文章，网络构造如下：
 ___
    _ = 
        _
        _
        =_
        _=__
        =
           
    _ = =__  =
    _ = __
    _ = 
       _
         = 
            _
            
            =
            =
            =_
         = 
         = 
        _
     = 
        _
        =  _    _
     = 
     = _ =
     = _ =
     = =
     = _ 
    
        =_
        =
        =

由于我这边的是对文章进行分类，序列太长，直接接后直接爆内存，所以我在文章序列直接，接了两层来提取维度较低的向量表示然后接入，网络结构代码如下：
 ___
    _ = 
        _
        _
        =_
        _=__
        =
           
    _ = =__  =
    _ = __
     = 
        _  =_
     = 
     = _  =
     = 
     =  _= _=
     = _ =
     _
     = =
     = _ 
    
        =_
        =
        =
 结果：

 结果：

整个实验的结果由于深度学习这部分都是在公司资源上跑的，没有真正意义上地去做一些来调参来提高性能，这里所有的代码的网络配置包括参数都仅做参考，更深地工作需要耗费更多的时间来做参数的优化。
 这里发现了一个 的， 在写回调函数，当_=时，显卡占用明显增多，的不够用，个人感觉应该是一个，但是考虑到而非，可能后面都优化了。
所有的代码都在上_
总结和展望
在本文的实验效果中，虽然基于深度学习的方法和传统方法相比没有什么优势，可能原因有几个方面：

  并没有覆盖新闻中切分出来的词，而且比例还挺高，如果能用网络新闻语料训练出一个比较精准的 ，效果应该会有很大的提升；
可以增加模型训练收敛的以及优化器，看看是否有准确率的提升；
网络模型参数到现在为止，没有做过深的优化。导语 循环神经网络  是目前非常流行的神经网络模型，在自然语言处理的很多任务中已经展示出卓越的效果。但是在介绍  的诸多文章中，通常都是介绍  的使用方法和实战效果，很少有文章会介绍关于该神经网络的训练过程。本文将会使用传统的后向传播算法 来训练  模型。循环神经网络  是目前非常流行的神经网络模型，在自然语言处理的很多任务中已经展示出卓越的效果。但是在介绍  的诸多文章中，通常都是介绍  的使用方法和实战效果，很少有文章会介绍关于该神经网络的训练过程。
循环神经网络是一个在时间上传递的神经网络，网络的深度就是时间的长度。该神经网络是专门用来处理时间序列问题的，能够提取时间序列的信息。如果是前向神经网络，每一层的神经元信号只能够向下一层传播，样本的处理在时刻上是独立的。对于循环神经网络而言，神经元在这个时刻的输出可以直接影响下一个时间点的输入，因此该神经网络能够处理时间序列方面的问题。
本文将会从数学的角度展开关于循环神经网络的使用方法和训练过程，在本文中，会假定读者已经掌握数学分析中的导数，偏导数，链式法则，梯度下降法等基础内容。本文将会使用传统的后向传播算法 来训练  模型。在服务器日常管理中，我们会经常管理查看文件或者文件夹的权限内容以保证服务的正常运行。今天就和大家聊聊文件权限的那些事。
查看文件的权限情况可以用  命令例：
                  查看此文件夹的详细信息
                      查看此文件夹中文件夹的详细信息

可以看到如–– 一共个参数 表示文件所属组和用户的对应权限。第一个参数属于特殊权限，与无关我们下次再说。其中第个参数属于 所有者第个参数属于 所属组第个参数属于 其他
接下来就简单了==可读； ==可写； ==可执行= = =
所以代表 所有者具有读写执行权限，所属组具有读和执行权限，其他人只有执行权限。
所以用命令改变文件权限时
  文件名                     代表  所有用户都可读可写可执行。当然还有其他用法，如：
   文件名                   给加上执行权限
    文件夹              给此文件夹下所属文件夹和文件都赋予权限 代表递归
这时候你可能要问了，如何判断一个文件的和呢？
其实很简单，以下面代码为例
        标粗部分，第一个代表 所有者，第二个代表 所属组
如果你想更改一个文件的 所属组也很简单使用命令即可
  文件名              将此文件的所有者改为，所属组改为组
上面我们讲了中文件权限的基础内容。下面我们深入的了解一下文件权限的内容：
第一个问题：是什么？
用通俗的话来说就是：本来对于一个文件目录来说，只有三种人，、、，现在来了第四个人，但是我要给他的权限与前三个不一样，所以，这时候我就要用到，额外给他一个不一样的权限。
第二个问题：如何使用？
在使用之前，我们需要查看文件所在的分区是否支持权限。因为权限的使用需要分区的支持。
如何查看分区是否支持权限？
     仅显示超级块中的信息，而不显示磁盘块组的详细信息。
看到红框内的内容，就代表此分区支持权限，一般来说也是默认支持的。这里再告诉大家一个查看系统分区的命令
                               查看系统分区那么如果万一分区不支持怎么办？
有两种方法
第一种临时开启
        重新挂载根分区，并加入权限第二种永久开启
            在文件系统后一列加上即可永久开启                              重新挂载或重启使其生效终于到设定权限的环节了！如何设定权限？
操作基本命令：
      选项    文件名      设定权限        删除指定权限       删除所有权限       设定默认权限        删除默认权限       递归设定权限具体操作示例：
        用户名       文件名         给某个用户设定权限
        组名          文件名          给某个组设定权限

使用命令查看权限
红框内可以看到用户已经获取到了读和执行权限
在上图，我们可以下有一个设定，那么在中是什么？
最大有效权限：是用来指定最大有效权限的。如果我给用户赋予了权限，是需要和权限“相与”才能得到用户的真正权限。
以上图为例，权限为，那么，即使权限为，与相与后，仍然只有权限。
如何设定最大有效值？
                     文件名           设定为其他命令示例：
           用户名            文件名 
           文件名 
          用户名权限     只能加这  文件名      递归创建，作用于父目录与所有子目录设置，即已经存在的文件设置，若是新建目录文件，则没有 
          用户名权限   文件名                        设定默认，若以后在此目录里创建新文件目录都默认有权限
提醒：若是在递归创建之后，在设定默认创建之前创建的新文件，则不受这两个的影响，需要单独设定
以上就是关于 文件权限和权限的所有内容，要想熟练使用，还需要自己多加练习！下次有时间和大家聊一聊文件特殊权限的内容，希望大家喜欢

相关推荐
系统安装环境
免费体验云服务器，提供最佳上云实践机会
【腾讯云的种玩法】 为  设置特定启动提示信息李萌，年毕业，前端开发从业者，目前就职于腾讯，喜欢、等技术，热爱新技术，热爱编程。

的文档对于动画的使用做了很多的介绍，不熟悉的小伙伴可以先了解一下。
下面就进入正题啦！
第一个动画示例：
 
这其实是一个很常见的弹出层效果，鼠标点击按钮切换弹出层的显示，点击其他区域弹出层消失，用绑定事件可能几行代码就搞定了，但是的状态驱动模式和的事件驱动模式是不同的，下面是使用的实现方式：


鼠标点击会切换一个布尔值，用来控制弹出层的显示，而包裹着标签的弹出层在的状态改变时就会触发动画，下面就可以用写一个弹出层的动画：

关于不同的过渡状态对应的声明，官网上是这样解释的：
 定义进入过渡的开始状态。在元素被插入时生效，在下一个帧移除。
 定义进入过渡的结束状态。在元素被插入时生效，在  完成之后移除。
 定义离开过渡的开始状态。在离开过渡被触发时生效，在下一个帧移除。
 定义离开过渡的结束状态。在离开过渡被触发时生效，在  完成之后移除。
相对于来说，的动画效果完全带来了一种全新的体验。
那么如何点击其他区域让弹出层消失呢？
首先想到的是直接阻止按钮和弹出层的事件冒泡，然后给绑定事件让弹出层消失。但是显然这种方法太简单粗暴了，使用的场景也很苛刻，要求页面中只有一个弹出层效果才行，虽然不建议使用，但是也提供了一种思路。
然后想到可以检验事件的，如果不是按钮和弹出层就可以让弹出层消失，这也是用 的常用写法，那么关键点就是用定位到按钮和弹出层，可以解决这个问题，使用  为子组件指定一个索引 ，在  中就可以直接访问子组件了。下面是实现过程：

这里定义了一个生命周期钩子，也就是说在该实例绑定节点之后触发，在绑定的事件里判断是不是按钮和弹出层，如果是则返回，否则将的状态设置为。
在写完这个之后我也去网上找了找有没有更好的思路可以实现，后来阅读了一下大名鼎鼎的框架这部分的源码，发现它也是这个思路实现了。大家有好的实现思路欢迎交流哈！
第二个动画示例：
第二个实例是关于标签页切换的，先看一下效果：

这也是一个很常见的交互效果，以往正常的写法是给各个按钮绑定事件来切换不同的层，当然也可以用纯写，给上面的三个切换的层分别添加一个单选按钮的兄弟节点，再用绝对定位把单选按钮定位在三个上面，这样就可以用伪类来单选按钮的兄弟元素，即对应的不同的层，我简单的写了一下结构，大概就是这样：

那么用实现上述的效果，其实也有两种途径，一种使用，是的一个路由组件，在单页面应用中非常非常流行，如果切换的层数据量非常大的话，比如每个层都要有服务器进行大量的数据交互，那么强烈建议使用，因为在每次切换路由的过程中，都会自动销毁前面的组件，这样在频繁的操作中页面也不会卡，而且也定义了页面切换过程中的过渡动画。
如果数据量并不复杂的话，可以直接通过定义切换状态来切换不同的层。
首先先把和写好：
 
其中、、分别代表三个需要跟随切换的组件，接下来就可以给的节点绑定事件来操控点击状态：


点击不同的，会让的状态改变，同时这个状态会作用到上面，比如让被点击的有个高亮的效果等等。
那么如何让的状态作用到弹出层呢？其实定义一个函数就可以了：


大功告成！
好了，就说到这里啦，第一次发这么长的文章，贴出来的代码可能不能面面俱到，如有不足之处，欢迎各位大神们指教，给点个赞吧啦啦啦啦！

相关推荐
 源码解析之前端渲染篇 初探——转场动画实现这是【 开源项目贡献指南】系列的第八章，原文【  ——   】

我为什么需要行为守则？
行为守则是一份确立项目参与者行为规范的文件。采用和执行行为守则可以帮助你们的社区营造积极的氛围。
行为守则不仅帮助保护你们的参与者，同时还有你们自己。如果你们维护一个项目，随着时间的推移，可能会发现其他参与者懒散的态度会让你们疲惫或对工作不满意。
一份行为守则可以帮助你们促进健康，有建设性的社区行为。积极主动减少你们或其他人在你们的项目中变得疲劳的可能性，并帮助你们在有人做出你们不同意的事情时采取行动。
建立行为守则
尽可能早地建立行为守则，当你们第一次创建项目的时候。
此外，说出你们的要求。行为守则的描述遵循如下几点：

行为守则在哪里有效 只在以及 ，或者社区活动？

行为守则适用于谁 社区成员以及维护者，那赞助商呢？

如果有人违反了行为守则会怎样？

大家如何举报违规


无论你们在哪里，请使用已有的行为守则。贡献者盟约是一个被超过，个开源项目包括 和所使用的行为守则。
行为守则和行为守则都是非常好的行为守则。
请将__文件放在你们项目的根目录，并在中附上其链接，这样对你们的社区是可见的。
决定你们如何执行行为守则

一份行为守则没有或者不能执行会比没有行为守则更糟糕。它释放这样一个信息：行为守则或者尊重在你们的社区并不重要。
—  

你们应该解释如何执行行为守则在违规发生之前。有几点理由说明为什么这么做：

必要的时候，它表示你们处事认真谨慎。

你们的社区会因为投诉确实可以得到回复而更加放心。

如果他们发现自己因为违规而被调查时，你们能确保社区的审查流程是公平透明的。


你们可以给大家一个私有的渠道如地址以便大家报告违规行为以及解释谁收到了这一的报告。它可以是维护者，一组维护者或行为守则工作组。
请不要忘记了有人可能想要报告某些人违规接受了这些报告。在这样的情况下，也给他们举报那些人的机会。例如，和 在他们的项目上解释， ：

对于滥用现象，扰乱或者其他不可接受的行为都可以向仅由  和  处理发送邮件。要报告涉及其中任何一个的问题，请电邮  ， 行动进化研究中心的多元化主任，科学技术中心。

为了获得灵感，可以查阅的执行手册你们是否需要如此详细的手册，这取决于你们的项目。
执行你们的行为守则
有时，尽管你们尽了最大的努力，仍然会有人违反守则。当这样的情况发生时，有几种方法来解决消极或有害的行为。
搜集有关违规的信息
认真对待社区中每个成员的想法。如果你们收到有人违规的报告，请认真对待并调查此事，即使它不符合你们自己的经验。这样做可以向你们的社区表面，你们珍视他们的观点和信任他们的判断。
有的社区成员可能是让大家一直不舒服的惯犯，或者他们只是说了或做了一次。这都需要依据实际情况进行处理。
在你们做出回应之前，请认真思考发生了什么事。通过阅读他们过去的评论和对话可以更好地理解他们为什么要那样做。尽量收集其他人对他们行为的看法。

不要陷入争论。在你们处理完手头上的事情之前，不要侧重于处理别人的行为。专注于你们需要什么。
—   “ ’      ”

采取适当的行动
当搜集和处理足够的信息后，你们需要决定做什么。当你们在考虑下一步的时候，请牢记你们的目的是营造一个安全，尊重和协作的社区氛围。不仅要考虑如何处理有问题的情况，还要考虑们的反应将如何影响你们社区的其他行为和期望。
当有人报告违规时，处理它是你们的工作，而不是他们的。有时，报告者透露他们的信息会给他们的职业生涯，声誉和人生安全带来很大的风险。迫使报告者面对骚扰者会将他们置于妥协的位置。除非报告者有特别的要求，你们应该直接和有问题的人沟通。
这里有些方法帮助你们回应违规行为：

向相关人员发出公开警告以及解释他们的行为产生了怎样的负面影响，最好在发生问题的地方。在可能的情况下，公开沟通会向社区的其他人传达你们认真对待行为守则。要友善，但坚定的沟通。

私下接触相关人员向他们解释他们的行为对其他人产生了怎样的负面影响。如果相关情况涉及到个人敏感信息，你们可能会使用私有通信方式。如果你们和一些人私下沟通，对于首先报告这个情况的来说是个好主意，因为他们知道你们采取了行动。在征求他们的意见之前，请向报告人征求同意。


有时，一个解决方案不能达到目的。有关的人可能在面对或者不改变他们的行为时变得气势汹汹或敌对。在这种情况下，你会想到考虑采用强制措施。例如：

暂停有关人员在项目中的工作，通过暂时禁止参与项目的任何方面执行

永久禁止有关人员加入项目


对于禁止成员的做法，你们应该非常谨慎，只有在没有其他解决方案的情况下才能使用。
维护者的责任和义务
行为守则不是可以任意执行的法律。你们是行为守则的执行者，同时你们的责任是遵守行为守则确立的规矩。
作为维护者，你们可以为社区指定准则，同时你们可以根据行为守则执行这些准则。这意味着你们需要认真处理违规行为。报告者对他们的投诉进行了彻底和认真地审查。如果你们确定他们报告的行为没有违规，你们需要他们进行沟通并解释你们为什么不进行处理。他们会怎样做，取决于他们：容忍他们认为有问题的行为，或者停止参与社区。
如果报告的行为没有技术上的违规，这可能表面你们的社区依然存在问题，同时你们应该调查潜在的问题以及采取相应的行动。这可能包括修改你们的行为守则，以澄清可接受的行为和或与行为被举报的人交谈，并告诉他们，虽然他们没有违反行为守则，但是他们在期望和确定的边缘另其他参与者感到不舒服。
最后，作为维护者，你们给可接受的行为建立和执行标准。你们有能力塑造项目社区的价值观，以及参与者希望你们能 公平公正地执行这些价值观。
鼓励你们希望看见的行为 _
当你们的社区变得似乎敌对或者不受欢迎时，即使是一个大家能容忍的个人行为，也会让你们失去很多贡献者，你们可能再也遇不到其中的一些人。虽然执行或者采用行为守则很难，但是营造一个受欢迎的环境将帮助你们社区成长。接上文《畅游数据库性能优化过程简析上》
查找问题原因
  的偶尔飙升引起了我的注意，说明内部必然有冲突，随着压力和并发量的不断增大，应用可能会受到类似之前的影响，因此很有必要查看其中的原因并尽最大的努力解决之。通过仔细的观察      信息，当   较高   信息较低的时候，执行了   {  }，抓到了以下信息：
      
     ________________________________________________________________
     __________________________________________________________________________
       _______________________________________________________________________________________
       __________________________________________________________________
      
      
从上面的现场信息不难看出有很大一部分线程是在执行 _ 的相关操作中被阻塞着了，那么什么是  ，它的作用是什么，为什么会有大量的线程执行这个操作的时候被阻塞呢？
什么是  
  又称读视图，用于存储事务创建时的活跃事务集合。当事务创建时，线程会对 _ 上全局锁，然后遍历当前活跃事务列表，将当前活跃事务的存储在数组中的同时，记录最大事务 __ 　最小事务 __  最小序列化事务 __。
  的作用是什么
  格式包含 {记录头，主建，_，_ _} 等信息。
当事务执行时，凡是大于__ 的数据对于事务是不可见的，凡是事务小于 __ 的数据都是可见的，事务  是 _ 数组中的某一个时也是不可见的，  在执行  操作时，凡是小于 __ 的数据，都是可以被  的，因此，   是   实现的基础；
为什么会有大量的线程阻塞
事务创建时的步骤如下：

对 _ 全局上锁；
顺序扫描 ___，对 _ 中的元素分配内存并进行赋值，主要包括活跃事务的集合的创建，__  __ __ 等；
将该 _ 添加到有序列表 __中；
释放 _ 锁；

由于_ 的创建和销毁都需要获取 _ 当并发量很大的时候，事务链表会比较长，又由于遍历本身也是一个费时的工作，所以此处便成为了瓶颈，既然我们遇到了这个问题，那么社区应该也有类似的问题。
  问题解决过程
首先，我们看一下，___       即当并发量很大时 ___ 效率低下的问题，问题的原因主要有以下几个：

整个创建过程一直持有 _ 锁；
_ 的内存在每次创建中被分配，事务提交后被释放；
需要遍历 __  或 __ ；
并发较大，活跃事务链表过长时，会在 _ 上有较大的消耗；

该  从   的时候被  大神提出以来，一直到   才被官方完整的解决，其中的解决过程也挺曲折的，另外  在  的时候就也推出了解决问题的办法，实现也相对简单好多，但没有   方法的彻底，咱们分别看一下这两种解决方法以及  内核在这方面的改动。
   问题改进
 为了解决上述描述的问题，对_做了以下修改：

在 _下维护一个全局的事务的有序集合，事务的 创建  销毁 的同时将事务的  从这个集合中移除；
在 _下维护一个有序的已分配序列号的事务列表，已记录拥有最小序列号的事务，供  时使用；
减少不必要的内存分配，为每一个 _ 缓存一个 _，_ 数组的大小根据创建时的活跃全局事务  集合做必要的调整；

做了上面的调整后，事务在创建过程中则不需要遍历 __ ，直接使用  即可获得活跃事务的，并且缓存的使用也大大减少了内存的不必要分配；
更详细的信息及源码可以参考   ，  另一大神提交的代码，  详情如下：
 
   
        

       _   ___

               
            _ 
    _       _  
    ___  _____  
            

              
   问题改进
为了解决   问题， 做了以下几件事情

将  的 _ 拆分为 __  __ 由于只读事务不会对数据进行修改，所以在创建视图的同时就只需要扫描 __ 即可；
  的特殊优化；
添加语法     用于声名事务是只读事务；

经过上面的修改，似乎解决了   的问题，但实际却不然，因为他只是解决了事务链表的长度，创建时遍历内存消耗的开销是没有解决的，并且使用上述特性需要修改应用程序，这一点是比较困难的，因此，为了彻底的解决   的性能问题，做了以下事情：
    
        
        
     
     _  _ 
      __   
           
              
     
      ____        __   
经过了上面的代码重构， 中很少看到 _ 的性能瓶颈，有想更详细了解的同学可以看一下这些内容：
： = 
 

 ： = 部分类似于  
 
 
 
 
 
 
   问题改进
为了解决   的性能问题，简单的说  内核团队对于  主要做了以下事情：

  的   相关修改到  中；
参照  的实现，在  中将 __ 移除；

经过上面的修改彻底的解决了 _ 的性能问题，在经历了大量 稳定性测试  性能测试 后，目前灰度发布中。
线上效果
鉴于当前存在的问题，为了解决客户的燃眉之急，决定上一个新版本，和客户联系后，可以重启实例，然后进行了替换操作，替换后的性能效果如下，可以看到  使用率、、  降低的同时    性能上升，至此问题真正觉得问题应该解决了，余下的就是等客户的反馈了。

|                | _ |  | __ | __ | __ | __ | __ | _ | _ |

|   |    |    |              |              |                 |            |          |               |                 |
|   |    |    |              |              |                 |            |          |               |                 |
|   |    |    |              |              |                 |            |           |               |                 |
|   |    |    |              |              |                 |            |          |               |                 |
|   |    |    |              |              |                 |            |           |               |                 |
|   |    |    |              |              |                 |            |           |               |                 |
|   |    |    |              |              |                 |            |           |               |                 |
|   |    |    |              |              |                 |            |           |               |                 |
|   |    |    |              |              |                 |            |           |               |                 |
|   |    |    |              |              |                 |            |           |               |                 |
|   |    |    |              |              |                 |            |           |               |                 |
|   |    |    |              |              |                 |            |           |               |                 |
|   |    |    |              |              |                 |            |           |               |                 |
|   |    |    |              |              |                 |            |           |               |                 |
|   |    |    |              |              |                 |            |           |               |                 |
|   |    |    |              |              |                 |            |           |               |                 |
|   |    |    |              |              |                 |            |           |               |                 |
|   |    |    |              |              |                 |            |           |               |                 |
|   |    |    |              |              |                 |            |           |               |                 |
|   |    |    |              |              |                 |            |           |               |                 |
|   |    |    |              |              |                 |            |           |               |                 |
|   |    |    |              |              |                 |            |           |               |                 |
将监控数据入库，查看峰值  当时的负载情况，详情如下：
    __  __  _ __ __ __ _  ____   _ 

|                | _ | __ | __ | __ |  | _ |

|   |          |            |          |               |    |               |
|   |          |            |          |               |    |               |
|   |          |            |          |               |    |               |
|   |          |            |          |               |    |               |
|   |          |            |          |               |    |               |
|   |          |            |          |               |    |               |
|   |          |            |          |               |    |               |
|   |          |            |          |               |    |               |
|   |          |            |          |               |    |               |
|   |          |            |          |               |    |               |
|   |          |            |          |               |    |               |
|   |          |            |          |               |    |               |
|   |          |            |          |               |    |               |
|   |          |            |          |               |    |               |
|   |          |            |          |               |    |               |
|   |          |            |          |               |    |               |
|   |          |            |           |                |    |               |
|   |          |            |          |               |    |               |
|   |          |            |          |               |    |               |
|   |          |            |          |               |    |               |
|   |          |            |          |                |    |               |
|   |          |            |          |               |    |               |
遗留问题  展望
真的完美了吗，其实不是这样的，我们还有很多的事情要做，因为在解决问题的过程中，我们通过    抓到了很多有用的信息，有一些是暂时没有解决的，如：

 内部表锁冲突严重；
  即使扩大也存在着不小的影响；
内存分配也有一些需要优化的地方；
执行计划的计算代价比较高；
  彪高时没有可以控制的方法；
…

由于时间问题我们暂时将遇到的问题一一记下，一个一个解决，我们相信  的内核会越来越强大，在提升性能的同时也不断的提升稳定性，我们一步一步踏在当下，努力让  变得更好！孙勋，腾讯王者荣耀项目技术总监。
 年加入腾讯，最开始不是做游戏， 年前一直做拍拍网， 年加入成都卧龙工作室，也就是现在的天美  工作室。之前参与过《三国》、《封神记》、《霸三国》，到后来的《王者荣耀》，现在是这款游戏的技术总监。

这个曾经在端游时代主导搭建  游戏《霸三国》框架的技术团队，在转型做  手游《王者荣耀》后为游戏提供了巨大的支持，但这个过程也并非一帆风顺。

在今年刚结束的腾讯  上，《王者荣耀》技术总监孙勋在技术专场中，对这款游戏进行了一次技术复盘，从技术层面上为听众嘉宾讲解了游戏在引擎、整体网络架构与网络同步方案上的尝试与转变。
孙勋称，目前游戏的服务器架构主要由“游戏大厅”和“” 个部分组成，而在不断探索中，后来又在架构中加入了  中转服务器，也正是这个服务器的加入为《王者荣耀》解决了后来“安卓、”同服等一系列出现的问题。
此外，他还介绍了《王者荣耀》在网络协议以及同步方案上的一些尝试，并一一复盘了这些尝试的优劣势。
为大家解答了为什么，最终游戏会放弃  协议传输控制协议与曾经在《霸三国》中所使用的  结构结构，并且转而使用了  协议用户数据报协议与帧同步方案。
本文是腾讯王者荣耀项目技术总监孙勋带来的《王者荣耀技术架构》主题演讲内容整理。将分几部分为大家介绍王者后台开发过程中的一些内容和思考：包括《王者荣耀》整个背景介绍、后端架构、上线后的调整，以及网络同步方案和反作弊方案等。
现在《王者荣耀》后端机器大概有  多台，我们的容量也有一定的扩展，进程数目是  万多个。
《王者荣耀》游戏背景

 年，我们当时做的端游《霸三国》，就是王者的前身。这款产品最开始是偏向  的游戏，后来我们把它改成了端游 ，再后来做成了手游 ，即现在的《王者荣耀》。
从  年开始做  游戏到  年，从多控制单位的  游戏，变成  游戏，到  年启动手游  的预研，再到  年  月份我们把大量人力大概多号人投入做《英雄战迹》《王者荣耀》前身开发，时间并不长。
《霸三国》的玩法是玩家可以在战前通过排兵布阵构成自己局内的策略，通过控制多个单位，技能释放、兵种特性的释放形成对抗。
我们最开始做《霸三国》的时候客户端引擎是 ，但在做《王者荣耀》的时候改用了 引擎， 到  个月的研发时间内，产品本身从代码层面没有任何东西是从《霸三国》那里搬过来用的，全部代码都需要重写。
《霸三国》的一些启示
做端游《霸三国》的这段经历，给我们做王者带来很多相应的启示，比如策划、程序及整个团队对  的理解。
另外当时在做端游《霸三国》的时候，我们采用了  的模式，但其实在过程中有借鉴类似帧同步的概念：例如在断线重回对视野的处理这块。
传统的做法是，重回时会发当前的镜像和后续的其他下行通知信息。
这种做法会有一个问题，如果新增其他的场景内模块的时候，根据场景内包含的当前的各种物件、所在状态的各种各样信息，都需要把这些东西打包发下去，在后续开发、维护的时候会显得很麻烦。
我们的做法是，把服务器下发的所有序列包做缓存，并按顺序重发，让客户端做出快进的表现，它的概念和帧同步比较类似。
还有一点，就是预留设计弹性，在最开始的  中，每个玩家最多可以操作  个单位进行对抗，到后来改成  游戏，只能操作一个英雄，并且加入各种各样的场景，我们本身的技术框架并不需要做出颠覆性的改动。

《王者荣耀》整体架构
目前《王者荣耀》后台的整体架构设计是源自产品的需求。如果大家玩过《王者荣耀》就会知道， 对抗是不分区服的。
微信  区的玩家可以和微信  区玩家一起对抗，甚至  平台也可以和  平台的人一起玩，但同时一些共有地方也保留了分区概念，比如战队、排行榜是基于“区”概念的。“区”在游戏里面就是编号，可以理解为打在玩家新建角色上的 。
我们最开始做架构实现的时候，服务器当时做得比较简单，从原型开始只是保留了大厅和  服务器这两块，两者是分开的。
 服务器使用类似  调用，可以分配资源的使用，用完之后再回收，不负责其他的东西。需要的东西从大厅拿，用了之后回给大厅，让大厅回写 。
我们在大厅和  之间做直联，后来把直联改成了中间转发，在《王者荣耀》里面我们叫 ，相当于代理服务器，以屏蔽本身后端很多进程分布的细节。因为游戏本身的机器、进程很多，还有不同的路由规则。
某些排行榜或者战队是根据逻辑区的编号来确定哪台机器，或者多台机器进行处理的。有些消息采用随机转发或者多发广播的方式，这些都是由  负责路由。之后又加入了房间服务器，它负责的是《王者荣耀》内匹配、排位等相关功能。
怎么样把实力比较接近的人糅合到一块儿玩，是由房间匹配服务器来做相应的负责的，因此会有战队和其他服务器战队匹配到一起。
最后我们在上面加入了一个 ，作用是用本身已经部署的大区资源实现跨服匹配的功能。
游戏的后端架构，除了战队这样的服务器之外，所有其他的模块都可以在线扩容，或者在发现有引起在线下降的故障时，从整个架构里自动屏蔽掉。
因为路由方式会限定比如一区、二区、三区到这台机器处理，如果故障，影响的只是某几个逻辑区玩家请求的处理，降低故障影响范围。

《王者荣耀》目前的机器数量，可能每周都会发现有机器坏掉，至少有一台机器宕掉，在架构里面保证模块自动屏蔽，和在线扩容，是非常重要的事情。
整体结构比较像  的三层结构， 在腾讯有比较典型的三层级别结构。大厅服务器会根据玩家所在区，登录具体区的大厅服务器。
单个大厅进程可以承载  万人，单个  可以承载  万，小区登录微信一区还是二区就是角色 ，打在玩家身上。
《王者荣耀》现在外网有四个大区，比如  手 、 微信、 手 、 微信，此外还有抢先服。
我们会用程序开关的方式，在大版本发布之前，优先更新抢先服，这时候它不能和正式服玩家匹配在一起，因为他们的版本不一致。当全服发布之后，它的版本更新一致之后，我们会打开开关，抢先服的玩家可以和正式服的玩家一起进行  的匹配。
除此之外，我们还有专门的体验服，是给策划验证相关设计的，体验服保留可能删档的操作，但在正式环境这是绝对不允许的。
另外，以前的传统手游偏单机，就会做很多协议兼容，客户端版本没有更新可以玩。但是《王者荣耀》里的主要玩法是 ，同时结合实现方式，不同版本的玩家不能匹配一起，所以我们没有做多版本协议兼容。

上线后的调整
上线后，《王者荣耀》本身的后台架构，整体上没有做太大的改动，因为我们做端游的时候，对这套结构比较清楚，我们知道哪个地方可能有什么样的问题，所以整个结构一直比较稳定。
但是我们做了相应的微调，做得最多的是网络本身的优化。《王者荣耀》上线的时候，市面上要求网络及时性强的即时  游戏是比较少的。
我们做了各种各样的尝试，比如在网络做  方面的性能优化、延迟、丢包等等，网络本身花的时间是最多的。
架构上的微调，像刚才提到的中转模块，我们架构中大厅机器很多， 机器很多，架构中不需要每个进程知道详细信息，比如大厅服务器不需要知道后面有多少房间服务器，只需要知道后面有房间服务器，可以访问就 。
怎么划分、平衡负载、怎么屏蔽后端故障节点，都是由  路由功能在负责。因为大厅、 机器太多，我们通过  将整个架构划分成彼此之间没有交集的“树枝”概念，每组  只负责一部分的大厅和服务器。
这两种服务器在《王者荣耀》服务器里面最多，但是后端通联之外， 之间再建立连接，减少单个  通道数的同时，保持整个结构的通联。
  是上线后加入的，最开始上线只有四个大区，手 、微信、、 四个环境，最早  的玩家也不能和  开黑。
开始  和  分开也有一定原因，我们之前设想  会先更新， 后更新，以保持版本更新的稳定性。但后来我们希望  和  的玩家可以因为关系链一起开黑。
所以当 、 版本更新频率一致时，我们希望不需要部署太多额外的机器资源和开发，直接利用  和  已有的  服务器和大区资源，打通  和  的 。
当  玩家登录  大区会连接到  大厅， 登录之后连接  大区的大厅，当他们需要开黑的时候，我们通过  把中转模块所有的大区桥接起来，通过一定的算法投递到某个大区。投递的选择和大区资源占比有直接关系。
网络同步方案

之前做《霸三国》的时候采用  的模式，服务器判定客户端表现，那为什么我们在做《王者荣耀》的时候选用帧同步的方式呢？
 模式的好处在于：
首先，安全。因为都是服务器计算，客户端只是负责表现层面的功能，不会影响各种判定的结果。
另外， 模式因为是基于结果的表现，所以中间可以出现丢包，丢包是可以被接受和处理的，只要最终结果补发一致即可。
帧同步在端游用得比较多，大家比较熟悉的 ，还有《星际争霸》，都是用的帧同步技术。
帧同步本身对网络要求更加严苛，下发的执行序列是不允许丢包的，需要严格保证顺序性，包是 ，就必须是 ，如果丢包，必须要等到丢的包到达之后才能顺序后续执行。
 本身的单位比较多，同屏时客户端最多有将近  个单位，假如一个  技能打到  个单位，然后种了一个 ， 状态模式需要发这些信息下去，可能潜在的同步状态信息是比较多的。
另外一个  模式本身开发的方式，客户端表现与服务器的判定，要完美的匹配是比较困难的。
我们之前做端游  的时候，一个英雄技能我们开发要两三周的时间。《王者荣耀》当时开发周期是三、四个月，这样的时间压力下，我们用  的方式搞不定，时间不够。
当时团队心里会比较紧张，因为那时候市面上并没有看到用这种方式做强 、高及时性手游的。
帧同步网络抗抖动能力比较弱，因为不能丢包。帧同步的基本原理，大家有兴趣可以下来自己了解一下。
一般会有区分，是网络还是主机模式。该技术的要点在于局内的运算都是基于客户端运算， 个人中，每个人都会各自算一份，有相同的起始、相同的输入、完全相同的中间运算逻辑，不存在随机过程，这时候运算的结果，理论上应该是一致的。
甚至包括浮点数运算都不应该存在，它有精度的问题。包括很多碰撞，动画，还有基本的数学运算库都是后台自己实现的，要去浮点整形化，避免客户端的本地逻辑，这是最容易犯的错误，这是出现不同步最常见的原因。
如果某个经验不是很足的客户端程序，写程序时候用本地的代码做相应的逻辑，可能跑得越来越远， 个人都是平行的世界。
整体的网络结构，大体看来分三层：服务器、客户端逻辑层，客户端表现层。
服务器主要负责的功能有两部分：

收集所有玩家上行的输入，把它按定时的间隔打包成输入的序列，投放给所有客户端。
当客户端出现丢包的时候，服务器进行补发；还有把客户端上行冗余的信息替换掉，比如有新的输入到了，就把老的输入  或者替换掉。在《王者荣耀》里，我们的逻辑是  毫秒一次， 秒同步  个包，这是不能少的，因为帧同步不能丢包，数据包必须有严格的执行序列。

客户端逻辑层理解为客户端本地的服务，就是所有客户端运行的结果必须强一致，不能有真的随机、不能有本地逻辑、不能有浮点数运算。拿到相同的输入，产生结果必须一致。
客户端表现层会根据逻辑层的数据去做  或者镜像，然后在表现层进行平滑，帧数不一样，但是不会影响最终的运算结果，只影响动画和动作的表现。
 最开始上线时，我们用的是  技术。 在局域网的情况下表现还是不错的，没有什么问题，但是当外网出现丢包或者抖动的时候，受限于实现方式。
比如窗口、慢启动各方面的原因，会发现当出现重连的时候游戏非常卡，所以后来我们没有用 ，改为了采用 。如果出现丢包，服务器会在应用层做补发。
 受限于 最大传输单元的大小，大于 ，会出现分包，可能也会出现整包的丢失。
所以我们也会有些比较大的包会在  层由服务器做分包，中间出现丢包再由服务器补发，把零碎的包拼成整包再做解包。
比较有价值的是  包，如果手机因为信号抖动等出现丢包，下发的时候通过冗余方式，是比较有效的解决方法。
帧同步的消息比较小，按照理论  秒  个驱动帧来算， 分钟的录像是  左右。但是我们外网统计，正常的  对局  分钟，录像的大小大概是  左右。
服务器会把玩家的操作做纯内存的存储，当出现丢包的时候，服务器会通过编号快速找到缓存信息进行下发。同时根据丢包的情况，我们会计算给这个人发送冗余量的变化量。
最开始发送每个包会冗余前面帧的信息，如果丢包严重，我们会尝试冗余更多信息再下发。客户端拿到之后会尽量压缩逻辑执行的过程。
帧同步有比较麻烦的模式在于，它不像  的模式随进随出，崩溃之后重回必须从一开始运行，中间运算过程不能少掉。
当然，我们也尝试过其他的一些方法。比如客户端上行之后，不需要服务器定时的间隔去做收集然后下发，而是通过染色帧编号直接下发，这样响应更及时，操作反馈更强、更快。
当时我们做出来的结果是，这对手感的提升微乎其微，但是带来的负面问题却很大，因为不再是一秒  个包固定的下发，下发包的数量非常多，完全和这个人的操作习惯有关系。
有可能一个人一秒之内产生了十几二十个输入，就需要把这些输入打包之后对客户端下发。客户端因为收包很多，设备也会明显发烫。
我们也有和其他部门合作，做类似于  的技术，大家直观想到如果丢包就在  层做重发。
但是实际的结果会发现，做的这个技术偏底层，所以对丢包的控制性不那么灵活，而且可能出来的结果还没有  本身好。
传统的帧同步的方式会做延迟投递，这个我们也有尝试过。如果间隔时间内出现丢包，或者出现包下行时的网络波动，可以通过延迟投递这种方式抹平抖动和丢包的情况。
我们尝试过这个方案但最终没有这样做的原因在于：《王者荣耀》里面一些英雄体验起来感觉偏动作，对反应要求比较快，延迟投递虽然抗抖动和抗丢包的能力确实不错，但是手感上达不到我们的要求。
另外，做  方式的实现，一般都会有一个套路，客户端提前表现，根据服务器的表现做平滑或者拉扯。
这个方案我们也尝试过，但最终还是放弃了，因为这个技术会让角色本身的表现有点发飘。
客户端本地动，马上客户端表现就跟着动，但根据服务器的下行，其实会做一些偏移或者修正。当网络抖动出现的时候，角色会有一点发飘，所以这个方案我们放弃掉了。
帧同步方案，所有客户端进行运算，期望产生一致的结果，但如果因为  或者某个人使用修改器，跑出来的结果会和其他人不一样，当不一样出现，我们的说法是不同步了。
我们会定时把一些关键信息提取出来做 ，不同步的人的  和其他人会不一样。
《王者荣耀》不同步率上线时大概是 ，也就是  局可能有  局出现一个人或者多个人结果和其他人不一样。我们现在把不同步率做到了万分之三，一万局里面只有三局出现这个情况。
这是怎么提升的呢？如果你用帧同步一定会遇到不同步的问题，客户端写错了，用了本地逻辑，可能浮点数的运算误差达到那样的临界点，它就会产生运算结果不一致。
我们的方法有很多：自动化测试，用机器人不断跑，比如上新英雄之前，有脚本测试不断跑，看会不会产生不同步的结果；有专门的体验服、抢先服大区，发布到正式网络之前先测试，先暴露问题，再解决问题。
另外，当不同步的时候，我们会把这局整个录像和客户端间的  上传和保存下来，这样可以根据录像和中间执行的日志序列快速的定位是哪个地方出现问题。
我们对延迟和单局质量也有相应的监控，这一局有没有卡或者卡多少次，有没有出现丢包，丢包多少，最大的延迟、最大的抖动是多少，我们都是有相应的记录和统计。
运营部的同学给我们提供了很多帮助，我们会有相关的网络测速、问题分析的  的合入。
按照我们自己的统计，游戏卡顿主要的原因有几个：

小区的带宽比较繁忙，很多小区其实都是公用带宽出口，比如有人在下电影、看直播，占用了很高带宽，你玩游戏就可能会卡。
 路由器延迟比较高，家里的  路由器长期没有重启，就会存在终端过多、信道干扰、其他大流量的应用下载情况，这也会影响你玩《王者荣耀》。
手机信号差、信号抖动，、 空口丢包等。

我们在网络优化上做了很多的尝试，例如根据丢包情况加大冗余，然后优化我们各方面执行的效率，去减少  的占用。
《王者荣耀》后台方面，有两个点是我们一直努力在做的，网络优化和匹配机制，我们尝试用各种各样的方法，甚至后面也会尝试用  深度学习的方法，来更加精准的定位玩家本身的真实水平，让他能够匹配到更加真实的同等水平的对手和队友。

作者：编辑：陶家龙、孙淑娟来源： 技术栈、 游戏葡萄微信：公众号腾讯云商业智能分析产品由北京永洪商智科技有限公司提供，永洪一站式大数据分析平台

图表组件常见设置
图表组件是中最常用到的组件，能直观地反应出数据特征。在分析中为了让图表显示更好的效果，少不了对图表进行设置。接下来，简单介绍一下图表组件的常见设置。
、修改图表类型
在图表上绑定字段后，产品会根据字段的类型为图表自动默认一个图表类型，但是有时默认的图表类型并不是我们想要展示的效果，所以需要修改图表类型。修改图表类型的方法有两种：
点击绑定字段前的图表类型按钮如图所示，弹出图表类型选择框，可以根据图片显示的效果选择需要的图表类型如图所示。

图

图
点击绑定字段下右边的下拉按钮，选择图表类型，将会以树状形式展示图表类型如图所示，根据需要选择图表类型。

图
、修改图表标题
产品默认的图表标题是“字段名字段名”，以图表绑定的字段为主，但这种形式不能很好的体现图表的作用，也不美观，所以需要丢该图表标题。修改图表标题的方法是：在图表标题处右击，选择标题，弹出标题编辑框如图所示，在这里可以修改标题名称及标题显示的位置。

图
、图表排序设置
根据分析需求，很多时候需要对图表中显示的值进行排序，产品为提供了三种排序：简单排序、手动排序、高级排序。
简单排序的实现方法：点击字段下拉按钮，选择排序方式无序，升序，降序，如图所示，这里的排序实现机制是根据字段的数据类型而定，如字段是数值型，就根据数值大小排序，如字段是字符串型，就根据首字母排序。

图
手动排序的实现方法：如图中，点击更多排序，选中手动排序，弹出如图所示的手动排序框，可以根据展示需要手动拖动内容来排序。

高级排序是很常见的需求，如图表需要根据不同产品的销售额进行排序，或者只显示产品销售额最高的个产品信息，这些都需要通过高级排序来实现。
这里以常见的排序实现方法为例做简要操作说明，主要操作步骤：
选择高级排序，弹出如图所示的排序弹出框，这里可以选择排序类型，排序的方式等，排序方式中的值指的是根据本字段的值进行排序，聚合列指的是根据指定其他字段进行排序。

图
选择聚合列，如图所示，在列对应的下拉列表中选择需要进行排序的字段常为图表绑定的某一字段
在聚合对应的下拉列表中选择该字段聚合的方式一般与图表绑定该字段的聚合类型一致。

图
最后在对应的文本框中输入需要展示的值，如果需要以外的数据显示为“其他”展示在图表中，则勾选以外的数据展示为“其他”。
设置后显示效果如图所示。

图
注：高级排序和简单排序的区别在于简单排序是根据本字段内容排序，高级排序可以根据其他字段的类型排序。
、过滤器设置
在分析数据常见的一个需求是某个图表只需要显示部分数据，而不是数据集中全部的数据，如图表只需要显示产品类别为的数据，或者要显示产品利润大于某一值的数据等，这些需求都需要通过设置过滤器来实现。过滤器的实质跟语句中差不多，其设置方法如下：
在图表组件右击选中过滤器，选择过滤器如图所示。这里过滤器是常见选择，可以对图表绑定数据集中的任意字段做过滤效果，汇总过滤器是针对图表绑定的汇总字段进行过滤，复制过滤器是对当前图表的过滤器进行复制。

在弹出的对话框中设置过滤条件，在第一个下拉列表中选择字段；第二个下拉列表中选择是或者不是，即设定可肯定条件或否定条件；第三个下拉列表中选中过滤条件的限制操作如图所示，这里的操作跟常见的筛选条件是一样的。

图
点击应用后就生成了对应的过滤条件，设定好的过滤器是可以修改的，修改方法跟创建时的操作基本是一样的。
、布局设置
产品整体布局有两种方式，其一是智能布局，产品根据图表的个数自动排序，在编辑时不能修改图表大小；其二是自由布局，自由布局下我们可以根据自己需要修改图表大小及图表位置，设置方法：在页面空白处右击，选择属性，在弹出框中布局对应的设置选中所需布局方式如图所示

图
、查看报告时工具栏的设置
产品使用中常见需求中有：在查看报告时，上方的工具栏能否固定，或者工具栏能否取消。这两个需求都是可以实现的，具体操作如下：
固定工具栏
产品为了在查看报告时更好的效果，默认隐藏工具栏，当鼠标点到页面上方时展示，让工具栏固定的设置方法：在编辑报告处，页面空白处右击，选择属性，在选项中将“悬浮工具栏”勾选去掉如图所示。

图
取消工具栏
在查看报告时不显示工具栏，设置方法：在编辑报告处，页面空白处右击，选择属性，在操作处将查看时操作清空如图所示。

图作者：盛旷

 是指结合  和  来实现网络浏览器和服务器之间的安全通信。 被融合到当今网络操作系统和网络浏览器中，它依赖于网络服务器是否支持  协议。本文重点是阐述  和  证书的原理，不涉及具体实现。在开始叙述原理之前，先明确几个网络安全方面的基础概念。
一基础概念
    对称加密算法
一个对称加密算法由五个部分组成：

明文：原始消息或数据

加密算法

密钥

密文：使用密钥通过加密算法对明文计算后的结果

解密算法：使用密文和相同密钥通过解密算法产生原文



    非对称加密算法
与对称加密算法不同的是，非对称加密算法使用的加密密钥和解密密钥是不同的。

    公钥密码与
公钥密码属于对称加密算法中的一种，公钥密码体系中有一个公钥和一个密钥，公钥是公开给所有人使用的，密钥只有自己知道，通常公钥根据一个密钥进行加密，根据另一个密钥进行解密。
公钥密码算法是公钥密码算法中的一种，中的加密和解密都可以使用公钥或者私钥，但是用公钥加密的密文只能使用私钥解密，用私钥加密的密文智能使用公钥解密。

二证书的原理
这里只叙述证书的原理，至于如何申请证书，如何生成证书，如何部署证书可以得到。在介绍证书前，需要先知道证书的指纹和指纹算法。
指纹是在证书信息证书机构，公司名，证书有效期等后面加上一段内容，保证信息没有被修改过。具体操作是将将原来的信息通过指纹算法算法一个算法计算得到指纹与原信息一起发出去。用户收到这份数据后，首先将原信息用同样的指纹算法计算结果，将得到的结果与指纹对比，如果一致，则说明信息没有被修改过。当然这个过程是有危险的，黑客完全可以修改内容并重新通过指纹算法生成指纹。这里需要使用加密算法来解决这个隐患。
假设一个公司 向证书机构 申请证书，他会得到一张类似下面这张图的证书

 得到这张证书后，会在与用户通信的过程中将证书发送给用户，用户首先会检测办法证书的机构，如果是大家都公认的证书机构，操作系统在出厂时会内置这个机构的机构信息和公钥，例如 ，如果是一个不受信任的证书机构，应用程序比如浏览器会发出警告，如果是受信任的证书机构，应用程序会使用预置的 的公钥去解密最后的指纹内容和指纹算法，然后再把前面的证书内容用指纹算法计算后与指纹内容比对，由于指纹内容是由证书机构唯一的私钥加密的，因此只要比对成功说明证书是没有人被人修改过的。接下来用户就可以放心使用该公司的公钥了。
三的原理
的出现是为了解决网络通信中数据传输不安全的问题，下面我们以登陆为例，先看一个网络通信最简单的过程，再一步步分析这个过程中不安全的因素以及解决办法。
最简单的通信过程

这个通信过程槽点太多，这样一个网络通信过程属于小学生水准，首先最明显一个错误是作为客户端如何知道给予回应一定是目标服务器，黑客可以有一百种办法来伪装这个服务器，轻轻松松就拿到用户的用户名和密码，所以图中也只能无奈的使用“某个地址”来标识服务器。为了解决这个问题，首先需要让浏览器确认对方的身份，于是有了下面的通信过程。
确认服务器身份
确认服务器身份就需要用到前面说过的算法了，由于算法有下面这几个特性，所以是可以用来唯一确认服务器身份的：

私钥的唯一性

私钥的保密性只有服务器知道这个私钥

只能用公钥解密用私钥加密过的密文对称加密算法的特点



其中“”里的内容是服务器用私钥加密后的内容，一般服务器会将明文加密，浏览器在收到消息后首先会用公钥解密密文，由前面特性可以知道，公钥和解密算法是可以解出明文的，如果解不出来说明对方不是目标服务器，浏览器解密后会与明文做比对，如果比对成功，由私钥的唯一性和保密性就可以确认对方是目标服务器。然而确认服务器身份后，在向服务器发送数据的过程中，如果数据被黑客截获，我们的用户名和密码也会落入黑客之手，于是下一步我们需要对发送的数据进行加密。
通信内容加密

浏览器对用户名和密码用公钥进行加密，由于

只能用私钥解密用公钥加密过的密文

于是密文只能由服务器用私钥解密，黑客即使拿到密文，也是无法解密的。但是在服务器向客户返回信息的过程中就出现问题了，由于公钥是公有的，任何人都可以拿到这份数据并使用公钥解密，所以这里还是存在不安全因素。于是客户和浏览器的通信过程多了一个步骤。
使用用户定义的对称加密算法对信息加密

为了使浏览器和服务器发出的信息都无法被别人解密，这里使用了一个对称加密算法，而算法和密钥的加密是在浏览器用公钥来加密的，这样可以保证只有服务器才能用私钥来解密这个内容，也就是保证对称加密算法和密钥只能被服务器拿到。当服务器拿到对称加密算法和密钥后，后面的通信都能使用这个对称加密算法来完成，由于对称加密算法和密钥只有客户和服务器知道，后面的通信加密过程都是无法被破解的。
到这里，基本就是通信的整个过程了，似乎整个过程都很难被黑客破解，但是注意到前面的所有过程都默认了一个前提，那就是客户手里已经拥有公钥。公钥的获取如果只是在客户和服务器之间进行的话，是存在很大的安全隐患的，最直接的问题就是用户怎么确定拿到的公钥就是目标服务器的公钥，类似“证明‘能证明你身份’的凭证是你的”这样的命题，最好的解决办法是引入一个大家都信任的第三方来“证明这个凭证”是服务器的，于是这里就使用了证书。前面提到，通过发送证书服务器可以将公钥安全的交给用户，而这里的第三方就是证书机构。于是我们得到了一个完整的通信过程。

到这里已经基本讲完了证书与的原理，当然实际通信过程中还有很多细节没有说到，但是不妨碍理解原理。实际开发和生产过程中很多信息敏感的操作都可以参照这种思想来实现，文中有不合理的和错误的地方欢迎指正。
参考文章

传输层安全协议
数字证书原理
协议运行机制的概述

最后，欢迎申请使用腾讯云的证书 具体证书使用方法参考

相关推荐认证安全认证常见问题腾讯云实现全站  方案引言
近年来中国经济的发展，整体上呈现出两面性特征：
一面是代表数字经济的互联网在中国快速而蓬勃的发展，让中国在全球市场凸显活力，并塑造出了能与美国比肩的互联网公司。
而另一面则是代表实体经济的制造业呈现出一定程度的疲态，成本攀升、效益下滑等问题萦绕其间，如何提振制造业成为举国上下越来越关注的问题。
事实上制造业的问题，这几年已经成为全球性话题引起越来越多国家的重视。其中以美国和德国为代表，较早意识到这场由互联网点燃的数字化革命的意义，不仅在于消费市场，更应该为国家的经济命脉—制造业注入能量。
因此美国发布了工业互联网、德国发布了工业等的概念体系和国家战略，即是从国家角度鼓励推动整个市场，借助数字化占据下一代制造业生态体系的制高点。
我国作为当今的“世界工厂”，制造业的转型对于国家未来的重要性不言而喻。《智能制造发展规划》和《智能制造》等国家级战略的及时推出，为整个国家和产业提供了方向和框架的指引；同时各制造行业企业也在积极行动，越来越多的企业开始探索物联网、大数据、智能机器人等新技术在制造业领域的应用，探索制造业智能化升级的道路。
在这个过程中，制造业如何能有效利用互联网已积累的资源和新技术经验、加速智能化转型的进程，成为我们需要关心的重点问题。本文试图从互联网企业的角度，为大家解读一二。
一、中国制造业面临的现实问题
 “夹心”的压力：
虽然从体量上看，年以来中国制造业的产值和产量已处于世界首位，取代了美国延续多年的位置；但从结构上看，中国制造业处于全球制造业价值链的中低端，作为“世界加工厂”赚的是低利润率的“辛苦钱”。而随着年金融危机后国际形势的变化，各国都在想办法重拾制造业的竞争力，处于大体量中低部区域的中国制造业自然受到了它国从各方的夹击：低端方向，南太、印度、墨西哥等高人口低成本市场对制造企业的抢夺日益激烈；高端方向，欧美等发达国家制造业回流形成了遏制。越来越多企业正将工厂搬离中国、或者至少是减少在中国生产。
 “升级”的困难：
主动“降级”去和其他发展中国家拼资源和人力成本，对当今中国而言已不可能。未来中国制造业的出路，主要在向高端制造，即向高精密、高质量、高价值的价值链方向升级。然而，高端制造的三条主要道路都已被先行者占据：以精密机器能力为核心的德国、以高效人员和组织能力为核心的日本、以及以科学和数据能力为核心的美国。目前中国在三方面均存在不足，能力的培养即需要时间又面临压力。
 “引入”的代价：
随着新一轮制造业格局的争霸开启，主要竞争国都在不遗余力的构建和推广新的框架体系标准，以求主导制造业转型。其中我国产业企业接触最多的，应该是德国的工业和美国的工业互联网。这两个框架体系本身没有太大问题，甚至已经建立了相互映射对接的关系，对全球通用发挥了积极作用。关键问题在于这两个框架指导下的企业实践，目前尚未出现正真意义的通用型开放平台，还存在各厂商之间的竞争壁垒，造成厂商之间的设备互联互通困难等问题。而制造业企业在面对厂商时，选择一个厂商可能意味着被锁定在这个厂商的一体化解决方案中，增值服务和替换成本较高，且难以掌握真正的核心技术。
正因为如此，中国制造业需要建立自主的智能制造框架标准体系，并鼓励产业和企业自主研发，探索自身的智能化经验，并最终汇聚成自身主导的智能制造平台和生态，完成整个制造业的转型和升级。
二、智能制造相关的概念解读
随着各国制造业转型升级战略的推出，业界涌现了很多相关概念，也存在不同立场和角度的解读。在此选择常被提及的几个主要概念，分析厘清其中含义和特点，以期推动共识的成型。
 从无人化，到协同化：
“无人”的概念近期异常火爆，从无人商店到无人餐馆，相关标题频繁出现在各类媒体的推文之中，资本也在积极进入相关领域。
事实上，无人化最早兴起的领域是制造业，因为工业化大规模生产使得制造业的标准化程度最高。早在年，福特公司就建立了第一个生产发动机的全自动工厂。然而受限于当时的技术条件和认识，机器不够“聪明”，“无人化”是以机器重复生产为中心的流水线。由于是以机器为中心，一般机器生产环境与人的工作环境相隔离，如果人要对机器生产进行介入比如故障处理等，往往需要停止整个生产线，并且进行复杂的操作，成本高、安全风险大。
如今再谈制造业的升级，“无人化”其实已不是主要障碍，流水线式的“机器替人”上世纪就能实现了。今天制造业的升级，需要重点解决的是上世纪“无人化”所解决不好的问题，即人机协同问题。因为今天人工智能等技术的突破性发展，使得机器性能升级，可以更好地适应人。制造业有望重新回归“人”为中心的生产制造组织方式，让机器协助人而非人去适应机器，实现人机高效协同生产。
比如日本的机器人，已经实现能在高速工作和协作工作两种模式下自由切换，当有人接近机器工作区域时自动进入低速运转状态，不仅能保障安全还能保障持续生产。这类人机“协同化”生产的研究开发和应用尝试，可能才是今天的重点。
 从顾客直连工厂，到数据驱动生产：
电商领域正热议下一步向模式的转型。所谓，指消费与生产的直接连接，消除中间包括渠道分销在内等各种环节，实现消费者需求的个性化满足。
目前的模式，大多强调的是实现个性化定制。如红岭的量身定制成为旗帜型的企业案例被广泛传播，随后海尔、长安汽车等众多企业也纷纷推出了自己的平台。而从这些现实的企业案例中，能够发现模式发展的面临的两个主要问题：

一是并非真正按消费者需求完全的定制，而是让消费者在标准化组件中进行选择和组合，反映出企业实际上需要在无限的需求和有限的资源之间做平衡；
二是如果各家制造企业都推出自己的平台，将会碎片化市场，大部分企业可能仍然难以与消费者实现规模性互动，中间很可能仍需一个第三方聚合平台，而非理想的顾客与工厂间无任何中间环节。

因此不仅是消费者的需求和还是企业生产制造的能力，都需要一个中间平台进行聚合和匹配，最终的重点并不是实现消费者要什么就给消费者制造什么，而是知道消费者的偏好而给消费者制造更合适的产品。
实际上对制造业而言，消费者需求只是一端，优秀的产品不仅仅要考虑消费者需求，更要注入设计生产等专业人员的知识，才能成功实现。而这一切的信息，如果都能以数据的方式汇聚分析最终匹配生产，就能正真提升制造的效率和效果。以的概念，强调在与之间需要有一个数据平台，实现以广义的数据驱动生产与需求的最佳匹配。
 从  互联网制造，到  融合制造：
最近  概念推出，引起业界热议。以互联网代表的消费者需求，推动制造业供给侧的改革，是其积极意义。
但同时也应该避免过于放大互联网的作用。对制造业的转型升级而言，互联网是其中重要的要素，但不是全部。智能制造的实现，除了需要借助互联网实现供需关系的匹配，更需要对制造业核心的生产制造过程进行升级。这个过程不仅需要人的连接、也需要物的连接，不仅需要数字信息技术、也需要物理操作技术。而其中最重要的是“融合”。因此未来的智能制造，可以认为是  ：
  万物互联融合：解决了人的连接，但制造业更需要解决的是物的连接、最终实现人物的连接。将来的生产制造，很可能需求部分从互联网来、生产部分则通过物联网执行，中间还需要建立安全互通的机制，最终实现互联网与物联网的融合。
信息制造融合：传统制造企业，信息系统和制造系统分离，信息传递和制造执行之间需要很多人为转换和对接的工作，对生产管理造成诸多不便。与的有效融合，能够促使数字与物理建立直接映射关系，数字的操作能够直接控制物理生产、物理的操作能够直接反馈给数字作为下一次生产执行的经验输入，从而提升整个生产的效率、降低生产试错成本。
三、互联网企业如何加持中国智能制造升级
对于中国制造业而言，在自动化流程和工艺水平尚有欠缺，同时物联网、云、大数据和人工智能等新技术爆发的历史节点，拥抱代表新技术的互联网、走两化融合之路是弯道赶追先进制造大国的最佳路径。说互联网不懂制造业、或者说制造业大势已去，都是不负责任的说法。真正应该关心的，是如何用好互联网企业在消费市场的经验，来帮助制造业转型升级。
 做好两端服务：提供前端的需求洞察和后端的营销服务
对于大部分互联网企业而言，贴近消费者是其最擅长的事、也是对制造企业最直接的价值。在消费者需求方面，借助自身业务的消费者行为，加上广义的互联网信息采集工具如社交媒体聆听，能够比较完整地勾勒出用户画像，帮助制造企业对产品趋势热点进行分析判断；在营销服务方面，线上的各种营销渠道和即时营销手段，也能够帮助制造企业快速推广产品和提供服务。
目前这部分的内容已经非常丰富，大型电商平台、第三方大数据分析工具等都在提供相关服务。未来应该考虑的核心问题是，假设将来是必然趋势，那么这些归属各制造商更有效率、还是中间平台更有效率？从大数据的价值角度看，大数据维度越多、体量越大，理论上价值含量越高。
因此可以认为，未来无论是互联网还是制造企业，构建这样跨企业、跨产品的消费者洞察平台至关重要。现在的平台只能勾勒出比较综合的、或者单维的需求；未来的平台，应可以根据不同行业产品的特点，定位并勾勒出不同的画像，指导不同的产品生产。
 提供基础设施：协助制造企业向云计算迁移
云计算是互联网发展的基础设施，也成为了部分互联网企业的核心能力，目前已经基本坐实了新基础设施的位置。中国制造业要追赶国外发达国家，将整个企业流程尽快向云迁移是必然之路。通过云部署，即能有效降低成本、又有利于促成和的融合。
目前这部分有两条路：互联网企业主导的，通用型云计算基础设施；工业装备和软件企业主导的，专业性云计算基础设施工业云等。对互联网企业而言，缺乏工业、制造业的经验是短期较难弥补的短板。
因此，做好通用、发挥自己计算经验和特长为其他专业云提供服务，可能是近期较为合理的方式。而向远期看，之上的工业云，才是最终需要努力打造的核心。而其中涉及各种软硬件接口和数据的标准化，任何一方都难独挑大梁。互联网企业应与优质的工业装备和软件企业等联盟，尽快和国家政府部门共同制定相关的规范和标准，推动大的工业云平台基础设施的成功建立与应用。
 贡献技术使能：发挥人工智能相关技术能力优势
人工智能技术的再兴起，为中国制造业的弯道超车提供了可能。当前欧美等先进制造国家的制造业技术，主要基于上一代信息处理技术发展，即信息传递的方式以文本为核心。这在机器对机器的交互中问题不大，但在人机交互中其实比较受限，大量的人经验只能通过文本传递比如参数输入，实际上并不符合人在操作中视听等感官经验。
随着人工智能的发展成熟，语音、图像、视频等的机器识别和交互越来越成为现实，这为整个制造业生产流程、至少是信息传递流程的颠覆创造了机会。试想一下，如果机器能直接通过视频识别发现残次品的问题和位置、并用图像直接叠加显示，能省去多少人用卡尺等反复测量的成本。
目前已有越来越多的巨头，在其云中提供人工智能或，以方便其他企业调用和二次开发。对互联网企业而言，提供类似的能力服务也是必然选择。不过从通用能力到专用应用，中间还有巨大的断层，需要通过与制造业企业联合研发等方式，才能更有效的发挥人工智能的能力。
 孵化新型制造：以资本和技术孵化新型制造企业
新的工业革命需要投资，而且可能是远比信息革命大的投资物理资产、人力成本等相对比重大，而投资正是制造业最缺乏的东西。这种投资有两方面内容：

一是钱，多年来中国制造业利润率的持续走低，使得追求利益最大化的资本对制造业板块不太感冒；
二是人，互联网的蓬勃发展吸附了大量的优秀人才，人才决定了技术创新能力，制造业的转型缺乏大量的高质量跨界人才注入。从这个层面看，互联网对制造业的投入是必须也是必然。

互联网对制造业的投资其实空间很大，可以从新型的智能产品切入如音箱，组建项目组或投资创业公司，投入资金、人员和人工智能等技术能力，完全从智能化生产的新角度，自己深入和构建新的制造业流程，并在过程中尝试开发软件工具，最终形成新型制造企业的模型和经验。自制硬件、的 硬件实验室等，都初步显示出这种端倪。
尾声
互联网大潮方兴未艾，人工智能新潮涌起，各行各业都在努力赶潮，避免被时代步伐落下。
面对这个极速变化的市场，不仅是制造企业，互联网企业也一样面临颠覆性挑战和机遇。智能时代大幕已经开启，作为工业时代代表的制造业、和信息时代代表的互联网更应主动拥抱与融合，有效利用新技术发展的窗口期，共同孕育新时代制造业的基础和生态，真正助推“中国制造”从生产升级、到产品升级、再到品牌升级，最终实现“中国制造”在全球市场的再次腾飞。截止  年  月，在国内的搜索热度基本稳定，但各种硬件的热度抖动却异常剧烈。一方面，  在暑促活动结束后反而出现了一波冲高回落；而另一方面，相对于  的稳定表现， 则在  东京电玩展召开之际出现了一定的热度下滑。由此可见国内搜索热度的滞后效应仍客观存在。
总体趋势上，相对于 、无人机、打印和智能家居等新技术的波澜不惊，人工智能在八月中旬迎来了一波高峰，随后很快跌至低位：其两个月的周期波动现象已初见雏形。游戏主机方面，任天堂  的热度在第三季度节节攀升，与 在国内都全面超过了  的热度。
在第三季度中， 平台的新游戏应用发布量依然维持着线性增长态势。  与  的表现则恰好相反： 方面的应用发布速率在暑促后回归到了正常水准，而 则是在东京电玩展期间获得了较多新上市的大作。















本文来源于 新观察 微信公众号作为  应届生入职的传统，都会参加  的  项目，每组大概人，在短短天的时间里开发一个相对完善的  。这对整个团队来说是一件十分有挑战的事情，小组内只有两个人负责后台架构开发，通过云平台部提供给我的支持，我们在腾讯云上搭建了一套相对简单但是功能基本符合需求的后台系统。本文将对后台架构进行简单的介绍。
【产品】丢丢
 一款利用  的失物招领  ，支持发布带有地理位置的失物招领信息、关键字匹配失物资讯推送失主。
【后台架构分析】
因为是在后台层面分析，我们主要在技术层面进行介绍。产品的主要功能相对简单，主要实现

丢失物品的发布

拾到物品的发布

将捡到物品跟失主丢失的物品匹配，将匹配物品推送给失主的功能。


其中，主服务的逻辑处理需要至少有两台服务器，防止一台挂掉。其次，数据库也需要有准备，对于本产品来说，更偏重查询的使用。最后，影响性能的是匹配发布丢失物品的人是否与捡到物品信息匹配，再推送的相应丢失人的手机上，这就要考虑怎样处理回更加节省时间，提高效率。
【云服务需求清单】

因为初始资金只有元人民币，考虑到  项目的后台压力不大，所以均购买了相对低配的产品：

主服务器：标准型 ，核 ，，云硬盘，基础网络。广州二区

备服务器：标准型 ，核 ，，云硬盘，基础网络。广州三区

消息处理、推送服务器：标准型 ，核 ，，云硬盘，基础网络。广州三区

负载均衡：腾讯云，基础网络。

数据库：云储存  ，最低配，主备异步复制。

消息缓存：云存储  ，主从，最低配。


【架构图】

【说明】

负载均衡：负载均衡的配置十分简单  


只需要绑定后端的实例就可以了，默认监听后端的端口，而且可以修改对应的权重，因此只要把后端实例的  端口改成即可。







由于开发周期短，便于开发和调试，我们选择了作为后台语言，选择了  框架进行开发，有兴趣的同学可以移步进行详细了解。服务器选择了    位，版本语言，  做接入。

有了框架，数据库的链接就显得十分方便，直接用数据库的内网和相应端口，数据库名称即可链接。如图为  的数据库配置，具体值配置到了环境变量里：




最为耗时的工作是匹配丢失物品和捡到物品， 框架有一个叫做  的神奇功能。“  队列为不同的后台队列服务提供统一的  ，例如  ，  ， ，甚至其他基于关系型数据库的队列。队列的目的是将耗时的任务延时处理，比如发送邮件，从而大幅度缩短  请求和相应的时间。” 所以，果断把最浪费时间的东西丢到  里面，这里不仅可以使用  ，   等，也可以使用  ，  ，只不过，经过尝试，  是最快的。

  
    {

         最新上传的捡到物品。
         = _ 
         = _

         丢失物品列表
         = 
            {
             = _
             =  
            
        }
    }
一旦有新的捡到物品，就将它跟丢失的物品作对比，把这些处理用  的形式，丢到  里面，有专门的服务器去处理  里面的任务。

说到 ，腾讯云的  有个小坑，“它的密码不是它的密码”，仔细看使用示例之后你会发现，它的密码是“实例名称密码”，还以为代码写的有问题，导致  连接失败。




后台有一个专门的服务器，用于计算匹配，推送消息。

    
         
     
       
     
      
    {
         = _ 
         = _ 

         =    

         = 附近有人找到了你丢失的类似物品，快来看看吧！

        ==
        {
                {

                 查找_
                _ = _ 
                 =  
                __ 
            }
        }
    }

队列的消费需要一个守护进程监听，这里使用的事  的  如下图所示，我们的消息推送服务器上开启了个进程同事监听这一个队列，当有消息需要处理的时候，可以最多达到个并行处理。到此为止，就是后台的简单概况。

_
_=___
=   = = =
=
=
=
=
_=
_=_
【总结】
 项目，个人十天的时间，确实有很多考虑不到的地方，跟我厂动辄上亿上千万响应级别的项目，简直是五战的渣渣，但也是一个项目从到的实践，踩过了很多坑，也积累了很多经验。也希望给后面  项目的同学留个参考，做的简陋，供大家吐槽。
虽然我们的项目很小，但是对于正常中小型企业的项目，在腾讯云上构建确实是省时省力，减小了不少运维成本，性能也不错，虽然都是低配服务器，但是压测结果还是很理想。
平时在云上搭个小博客啊，建个小网站玩还是挺爽的。个人介绍：韩伟，年大学实习期加入初创期的网易，成为第号员工，年间从程序员开始，历任项目经理、产品总监。年后创业年，开发过视频直播社区，及多款页游产品。年后就职于腾讯游戏研发部公共技术中心架构规划组，专注于通用游戏技术底层的研发。

通用型软件框架的难题
假设我们希望开发一套通用型的软件框架，这个框架允许用户自定义大量不同的情况下的回调函数方法，用来实现丰富多彩的业务逻辑功能，例如一个游戏脚本引擎，那么，其中一个实现方式，就是使用观察者模式，以事件的方式来驱动整个框架。用户通过定义各个事件的响应函数，来组织和实现业务逻辑。而框架也提供了自定义事件及其响应函数的入口。
在一些实现代码中，我们可能会发现有大量的“注册事件”的代码，或者是使用一个巨大的……对事件函数进行分发调用。譬如我们想做一个服务器端的基本进程框架，这个框架让用户只需要填写一些回调函数，就能成为一个稳定持续运行的后台服务进程。其中一个部分，就是需要定义程序启动事件，以便用户自定义程序启动要做的事情。那么我们可以定义一个””的字符串来代表这个事件，在一个事件响应函数的回调哈希表里面，记录上””。又或者是用一个常量宏=来表示此事件，在程序的主循环处，利用……来检查代表每个事件的类型编码，如果发现是和宏相等的，就调用 下面的代码往往是一个单独的函数，如。
维护长长的“注册事件”代码和长长的……都一样的让人昏昏欲睡，同时容易让人错漏百出。这些代码往往还带有大量的“常量”，因为用来作为回调函数的的数据，往往都是一些自定义的常量。这些常量的同步维护，也往往让人筋疲力尽。这些长长的代码清单，经常还都需要由多个开发者一起来使用，自然就很容易发生你错改了我的，我覆盖了你的这一类问题。这些问题非常的“低级”，但是要找起来却一点都不容易。
游戏的按键控制代码： 
难道我们的框架代码中，就一定会充斥着长长的字符串常量，或者整数常量吗？答案是否定的，因为很多编程语言，都提供能反射的功能。在编译型语言如里面，也可以利用代码生成技术，模拟出类似反射的能力。
什么是反射
要想知道什么是反射，我们可以先来看一个观察者模式的例子。假设我们在编写一个的程序：在一个窗体上安放了一个按钮，此按钮的名字叫“”，当这个按钮按下的时候，我们希望有一个我们自己写的函数被调用。根据观察者模式的设计，这个按钮被用户按下后，程序底层应该能监测到这个事情，然后在进程内部产生一个“事件”，这个“事件”对象往往会带有这个信息：被按下的按钮名字。如果我们用以前的注册事件的方法来编码，我们必须要在按钮被按下之前，比如程序初始化的时候，就向观察者对象注册这样一个回调函数： 
“”   —— 被按下的事件—。
这里的函数就是我们想处理被按下的事件的响应函数。
但是，我们可以用另外一个更省事的方法来解决：我们把函数的名字改成_，然后观察者在发生“”被按下的事件后，自动去找有没有叫“_”这个名字的函数，如果找到的话，就调用这个函数。——显然这种做法无需预先手工去注册回调函数，而是仅仅根据函数名字的约定，简单的来决定要调用什么函数。一般来说，我们认为程序运行的过程中，这些函数名字、类名字、属性名字都不起什么重要的作用，以至于我们还会用一些“混淆器”软件来处理源代码，把这些自定义的名字都弄的乱七八糟，也不影响程序的运行。然而，如果我们使用反射的技术，程序就可以在运行时，实时的用一些常量，来检索并且获得源代码中，函数、类、属性名字所对应的实体，并且还能调用这些东西。
在里通过字符串类名反射构建一个对象： 
反射这种功能，在编译型的语言程序中，几乎是不可使用的，因为语言源代码中的名字“常量”，都被分离成“符号表”，然后在链接的过程中从二进制可执行程序中去掉了。虽然动态链接库会保留部分类似反射的能力，但是也仅仅限于动态链接库的接口函数。在  中，由于编译器支持  运行时类型检测，我们可以通过 操 作符获得任何一个对象的类型信息，但我们还是不能实施用一个常量在运行时直接调用一个函数或对象的操作。不过，如果我们使用  接口定义语言来用程序生成  的源代码，倒是可以把对象构造器函数、成员函数等等的名字常量，作为一个  的  存放起来，对应把这些函数作为  放入  ，这样实现类似反射的功能前提是要反射的对象都需要用  来描述，否则就要自己手工写一堆注册名字—函数的代码。
如果我们使用基于虚拟机的语言，比如  或者  ，又或者脚本语言，如        这些，都非常适合使用反射功能。由于虚拟机在运行时是能完全掌控所有代码的“符号表”，所以使用语言系统提供的一些  ，就能很方便的通过任何一个字符串常量，查找这个常量对应在源代码中的类、方法、成员属性等等。
反射的配置功能
在我们懂得反射的用法后，我们就可以发现，源代码不再是“数据结构算法”这么简单的东西。我们可以利用源代码作为数据本身的载体。一个最简单的例子，就是的解析：我们可以定义一个和  文件对应的类，这个类的成员属性的名字，和需要解析的  文件结构中的字段名一致。当我们在解析对应的  文档的时候，就可以通过内容中的字段名，找到对应类成员属性对象，然后把  字段值赋值进去。而这个过程中，只要我们按照文档的结构来定义类，就能很方便的把  文档内的数据，赋值到一个类对象里面，这对于编写冗长的解析、赋值代码来说，能介绍不少的代码篇幅。这种做法也许不是非常高效，因为反射查找本身需要额外的  消耗，但是，如果解析  这个步骤不是“关键路径”，这点性能损失对比大段的类似代码，还是很值得的。
反射用于配置的另外一个功能，是把类名、方法名放在配置文件里面，作为程序功能的配置项。以前我们如果想要利用配置文件，来定制一个程序的行为，必须要在源代码中编写一段 …，来把行为函数和配置文件中的配置值对应起来。这对于频繁修改、增加这些可配置行为的框架来说，是一个非常难以维护的工作。但是，如果我们利用反射，就可以直接在配置文件中写入对应行为的类名或方法名，这样框架就可以通过这些常量名字，在运行时找到进程空间中对应的类、对象、方法，从而直接调用他们以生效。这方面最常见的场景，有  这一类  容器，它们往往把一个个对应不同  处理的  对象的类名，写入到配置文件中。或者如  框架，把互相依赖的各个对象的类名，都用配置文件管理起来，在运行时根据这样的配置文件，实时的反射出对应的类和对象，建立按配置要求的对象关系来。
通过来配置对象的关系： 
从代码维护的角度来看，类、成员、方法的名字，被程序以外的一些“配置文件”所管理和知道，是有一定风险的。因为我们常常不把配置文件看成是源代码那么重要的东西，错漏也没有编译器或者  协助，所以一些难以调试的  往往是从这些位置产生的。不过作为一种大大节省框架代码的技术，还是受到广泛欢迎。而上文所说的问题，现在渐渐由另外一种技术“元数据”或者叫注解、特性，把配置文件和源代码合并起来，这样就能大大改善上述的问题。
反射的通信功能
我们在编写通信功能的程序时，传统的思路是要定义协议，也就是定义协议头部，协议包长度，协议包字段等等。在一个比较复杂的网络服务程序中，这样的协议很容易就有几十上百个。维护代码的程序员想要搞明白别人定义的如此众多的协议，实际上是不太容易的。我们很容易想到，能不能使用对象模型来代替通信协议的定义呢？答案是可以的。但是，使用对象模型又有一个新的问题：对象是一个在运行时的内存结构，如何把对象中的数据，通过网络接收和发送呢？最简单的做法，就是使用，提供了这个功能强大的，可以让任何内存中的数据变成一段字节数组，然后我们就能直接通过网络发送了。
但是，如果我们的对象不是一个简单的结构体事实上简单的结构体也有问题，而是一个对象，这个对象里面可能存在指针类型的成员，这样的拷贝就不可能顾及到这些指针指向的数据了。而且，如果收发两端的程序，并不是同一种语言操作系统、平台，这样的内存结构数据可能毫无意义，比如把一个的对象内存直接拷贝给程序，肯定无法直接使用。所以，我们想要用对象结构来定义通信协议，我们需要一个把对象转换成通用的字节数组的方法，这就是“序列化反序列化”的能力。在这里我不打算说太多关于序列化的内容，我只想说，当这些对象具备序列化能力后，就能成为通信数据的载体。
问题是，如果我们收到了一段对象序列化的数据，如何构建出对应数据的对象呢？答案就是使用反射，反射机能能从数据中获得对象类的名字，然后通过这个名字构造出对象来，然后从数据中继续获得余下成员的数据，一一复制到这个对象身上。由此看，只要我们有反射功能，我们可以让使用者，简单的构造一个对象，然后整个把这个对象发送给网络的另外一端，对方也能直接收到一个对象，这样在编写通信程序的时候，只要按照业务需求定义对象即可。对于阅读代码的程序员来说，不用在脑子装一根叫“编码、解码”的弦，只要“无脑”的定义、处理对象即可。
在通信程序中，有种叫命令模式的设计模式非常常见，它脱胎于传统的基于命令字的网络处理方式：解析出命令字通过 … 调用对应的处理函数。命令模式下的通信程序往往很简单，就是定义一个类型，这个类型的成员属性通信协议是可以随便定义的，只要再定一个  方法即可——这个方法的内容，就是收到此类型对象，应该如何处理的容器。由于我们利用反射可以在网络另外一段重建这个对象，所以我们也可以调用这个预定义的  方法，这个方法由于和协议对象类定义在一起，所以它是知道所有的成员定义的，这样这个处理方法，就无需好像以前的程序那样，费劲的通过强制类型转换，来得到具体的数据内容。在命令模式的通信程序实现过程里，反射是至关重要的一环，因为当我们收到一个数据包时，必须要从数据包中得到其对应的对象的类名，然后建立这个类所对应的对象。一旦这个对象建立后，我们可以调用其反序列化函数，让对象的内容和数据包中一致，最后调用其  方法，就大功告成了。这种设计，可以用不同的语言，定义同结构的类对象，用来在不同的语言平台程序之间通讯，而无需定义很复杂的协议定义规范。一些强大的对象数据工具，比如    和   ，直接可以用一个通用的  语言，生成各种语言的类定义源代码，就更方便了。
、的自动序列化反序列化的类型字段： 
反射的编辑器功能
在我刚刚接触  这款  的时候，我惊叹于它那便利的功能：可以对任何一个控件对象进行图形化的编辑。虽然我们可以用初始化的代码，来对任何一个对象进行修改，但是直接在  界面修改这些属性，还是非常方便的。甚至我会通过这些属性界面，来猜测和学习一款控件的用法。像这类功能，往往背后就需要反射的力量当然可能不是使用反射，而是利用组件模版等技术实现。当我们自己开发一个这样的程序，我们必须要把一些对象、类的内部结构读取出来，然后才能以另外的途径展示出来。
上用界面设置数据库控件的属性： 
在  中， 就是一个著名的利用反射来使用的“对象约定”：只要你编写的  类型，其成员是类似或者的，很多框架都会自动识别和处理这些成员函数，从而实现诸如自动更新成员数据，自动关联界面内容等功能。另外一个类似的例子是  ，这个  的通用监控标准接口，可以把你定义的类对象解析出来，成员属性的值可以变成统计图线、可修改的表格项，方法变成按钮。在游戏开发领域，反射还广泛的用于，把图形美术资源和程序代码结合的目的：比如   就可以通过反射，把一个  动画对象，绑定到一个  类型上，从而获得一个既具备美术效果，又能让用户自定义行为的对象。 在绑定了  的游戏对象和脚本组件后，对于脚本中的  函数调用，也是通过反射进行的，这样开发者就不必要把脚本的类型，死死的和某个基类绑定到一块，而且这些反射调用的函数，还是可以有不同的返回值不同的函数原型，从而实现协程或者非协程的调用。
在编辑器里，对一个动画指定关联的自定义类：  
反射由于可以把源代码中的信息提取出来，和其他的数据结合，让源代码的能力大大的提升，所以在开发工具方面，具有非常重要的地位。我们不再需要通过写代码，一遍遍的把源代码的数据和外部结构做对接，而是简单的开发一个反射能力框架，就能让我们实现某种源代码的“约定”，从而实现各种丰富的快捷开发能力。
反射的最佳搭档：元数据
在反射的使用过程中，我们往往会发现，源代码直接作为数据，还是会有一些问题。譬如我们的源代码可能会根据一些非业务因数做修改，改名、改参数类型是在重构的时候非常常见的。所以我们往往还是离不开配置文件，把源代码里的名字写到配置里面，然后框架再根据配置来运行。一个比较典型的例子就是，这一款著名的框架，能让你的源代码类型和数据库、表结构关联起来。按理说利用反射，我们可以直接建立一些和数据库表、字段名字同名的对象，就能直接关联了，但是我们的源代码如果需要修改这些名字，再去改数据库的内容，就显得太麻烦了。所以我们要编写很多配置文件，来关联什么表对应什么类，什么字段对应哪个属性……这些配置文件往往和使用数据库的表数量一样多，任何的修改都还要记得对应这些配置的修改，我们被迫同时维护：数据库结构、配置文件、源代码这三个东西。然而，如果我们的平台是支持“元数据”的话，问题就很好解决了。因为我们可以在源代码里面直接写配置文件项目。我们在源代码的类名前面，用类似注释的方式，标注这个类对应数据库的哪个表；在属性名前面，用注释标注对应的字段、默认值等等。这样我们只需要维护两个东西：数据库结构、源代码。这大大的减轻的项目的复杂程度。
我接触的最早最著名的元数据，是用来同步修改文档的技术，这个技术让更新文档不再成为一个苦力活。由于可以在源代码的注释里面编写文档，所以在修改代码的同时也可以同时更新文档。更重要的是，标记自然的把源代码中的“名字表”和相关注释自动对应起来了，要知道，这种对应如果人工来做，可是要费相当大的功夫。在的教育下，我对于的注解、的特性都觉得非常亲切。以前那些需要登记大量类名、方法名的配置，统统都可以直接记录在源代码里面了。而一些和美术资源关联的客户端代码，也可以通过源代码的特殊标记，连接上正确的图形资源。
  
能让这些源代码里面的“元数据”生效的重要技术，其实就是反射。由于我们的元数据处理程序，一般都需要和源代码里面的类、方法名字对应起来，所以都要使用反射的方法。而这种反射，又为我们任意增加“元数据”提供了强大的机制。
反射给软件开发带来的改变
我们曾经相信：数据结构算法=程序。但是从今天的软件产业来看，固然还是有很多专事计算的软件在被开发着，然而我们接触到更多的软件，都是所谓“信息管理系统”类的软件。这类软件要处理的并非是复杂的计算任务，而是对各种各样现实世界中的信息，增删查改是这些信息处理最通俗的描述。我们在处理这些信息的时候，如果还是把程序的载体源代码，仅仅看成是编译过程中不可缺少的一环而已，那么我们就必须额外处理大量的数据形式：数据库、配置文件、配置……然而，在面向对象的风潮之下，源代码完全可以作为一种“树状”的数据承载方式。面向对象定义的类、成员、方法，就是一个个现实世界中的实体映像，他们所包含的结构和常量，往往直接可以成为系统中的数据源头。在文字游戏中，几乎整个游戏世界，都是以源代码常量的形式编写的，这不但没有成为维护的难题，反而让真个游戏的开发变得更轻松，因为程序员还是最习惯于面对源代码去工作。

反射这种特性，能把源代码中的所有数据，包括“名字符号表”，都提供给开发者去使用，让软件开发过程，从单纯的算法实现过程，变成一个综合的信息管理的过程。这个做法看起来似乎不够专业，但是在编程已经不算“高科技”的年代，这种技术能帮助大量的开发者，以某种“约定”的方式去编写源代码，从而自动获得框架的强大支持。——制造这种允许“约定”方式运行源代码的框架，正式新的框架应该拥有的特点，因为人类的创造时间，不应该被浪费在大量的重复而类似的工作之上啊！

相关推荐高可用架构入门 —— 腾讯云架构演变及经验关于消息队列的思考：如何满足多种消费语义本文展望了人工智能未来一年的发展趋势，希望能给相关从业者一点参考。以下是译文。
从计算上来讲，大数据分析这股潮流并不会像是流星那样转瞬即逝。随着数据量的不断增加，对大数据分析的改进也不会停止。 对于预测分析方面的应用，我们只看到了冰山一角。 一些机构正在使用数据挖掘、机器学习和人工智能技术来分析当前的数据以求更好地开展业务例如预测销售情况、优化营销活动等。 所有这些不同类型的人工智能技术已紧密地结合了在一起，改变了我们的日常生活，而且这种改变仍将持续。
以下是人工智能、大数据、预测分析和机器学习方面主要的统计数据：

到年，％的开发人员将在一个或多个业务应用或服务中采用人工智能技术  =
到年，人工智能技术可应用在％的物联网上  =
到年，％的公司将引入人工智能以至少增加一个主要的销售过程  
到年，算法将积极地改变全球数十亿工人的行为  
到年，人工智能市场将超过亿美元。  星座研究
到年，人工智能将驱动％的客户交互  

年八个人工智能趋势观察

趋势  大公司将赢得未来
亚马逊、谷歌、和将引领人工智能技术的发展。作为大型公司，他们拥有更多的资源来收集数据，从而拥有更多的数据可供使用。
这是行业中的顶尖企业在人工智能方面所做的工作：
亚马逊：

在人工智能方面的投资已经持续了多年抓取的网页数据来自于超过亿个网页在一个正在运营的亚马逊配送中心里，有超过万张图片和相应的元数据文件用于描述产品信息每天监测世界各地的广播、出版物和网络新闻超过四十亿条记录近万个图像和视频，包括音频和视觉上的特征和注释亚马逊的引领着语音助理市场，市场份额超过％

谷歌：

拥有最大的数据集仓库之一，拥有译者注：=的数据   
专注于应用和产品开发，而不是长期的人工智能研究
拥有超过名研究人员的团队   
语音助理市场％的用户份额  
利用开源平台让任何人都有机会使用机器学习平台
 数据库的大小约为 或     
街景视图大约有 的街景照片   

：

每天处理亿段内容超过的数据   
人工智能研究人员包含了大约名研究人员和工程师  
每天产生亿个“喜欢”和亿张照片   
每分钟扫描大约的数据   
建有一个万平方英尺的数据中心，可容纳个具有的存储机架
每天翻译超过种语言的亿用户的帖子，每天有亿用户可看到翻译后的内容  

：

计划在年内，投资亿美元用于创建麻省理工学院  沃森人工智能实验室  
全球有多名员工，在纽约总部有多名员工  
沃森客户合作跨越六大洲和超过个国家  
正在向沃森集团投资亿美元，其中包括亿美元用来支持初创企业的风险投资，以及与沃森一同搭建认知应用程序业务  
通过沃森生态系统已经创建了多个应用程序  财富

在为应用程序和产品开发服务部署机器学习方面，谷歌可能是处于最前沿的。他不仅是第一家开展人工智能研究的公司，而且还拥有万多名员工。谷歌是一家很大的公司。此外，谷歌大脑是一个深度学习人工智能研究项目，谷歌拥有其整个团队。谷歌大脑的研究涵盖了机器学习、自然语言理解、机器学习算法和技术以及机器人技术等领域。
全球家最有前途的人工智能公司名单

趋势  算法和技术将会进行整合
所有已经对人工智能进行投资的第二梯队公司比如英特尔、和都紧跟在拥有大数据的公司的后面，并开始使用他们的数据算法和人工智能技术。数据交易将存在于行业用户之间，而算法和技术很有可能会进行整合。数据交易以及算法和技术的整合将使人工智能发挥更强大的作用。
随着像谷歌和这样的大公司不断地收购小公司，小公司手中的算法将被集成到大公司的核心平台或解决方案之中。谷歌收购了这家构建了通用学习算法位于伦敦的人工智能公司，目的就是为了获得比其他科技公司更大的商业优势。另一方面，收购是为自己的语音识别和语音接口提供帮助。它还收购了人工智能创业公司，以改进其虚拟助理的技术。
趋势  数据众包市场将非常巨大
所有的人工智能公司都渴望获得庞大的数据集，以便实现他们对人工智能的野心。这些公司将采用众包的方式来获取大量的数据。目前已经有多种不同的方式来评估众包数据的质量和可靠性，不仅企业可以从这些数据中获得收益，而且也能给消费者一个保证。
的创始人兼编辑 表示：“我们生活在众包文化中，越来越多的人愿意并且乐于通过社交媒体分享他们的知识。”
谷歌正通过众包的方式获取大量的图像来构建成像算法。它还使用众包来协助改进服务质量，如翻译、转录、手写识别和地图。亚马逊还使用众包人工智能来改进超过个的现有功能。
趋势  企业并购，以及更多的并购
根据的统计数据显示，收购人工智能公司的竞争已经开始。在年，我们将看到更多为了智力资本和人才而并购企业的行为。机器学习和人工智能领域中的所有小公司都将可能被大型企业收购，这主要有两个原因：

人工智能不能在没有数据集的情况下独立工作。由于大公司拥有大量的数据集，所以对于小公司而言，自己并没有太大的竞争优势。
没有数据的算法没有任何用处。没有算法，数据几乎没有用。数据是算法的核心，获取大量的数据非常重要。

哥伦比亚大学创意机器实验室的机器人工程师和总监， 指出，“如果说数据是燃料，那么算法则是引擎。”

趋势  用工具的民主化换取更大的市场份额
大公司将会把自己的算法和工具集开源出来以获得更大的市场份额。基于市场的数据和算法获取壁垒将大大降低，而人工智能的新应用将会增加。通过对工具的民主化，原本有限制或无法获得人工智能工具的小公司将可以获得大量的数据来训练和启动复杂的人工智能算法。
谷歌的首席执行官 谈到了人工智能的民主化问题：“我们大家可以做的最令人兴奋的一件事就是揭开机器学习和人工智能的神秘面纱，让所有人都可以一亲芳泽。”
此外，框架、和将成为所有主要企业引导消费者使用习惯的标准。基于和的模型将成为所有这些公司遵循的商业模式。
趋势  人机交互技术将得到改进
和可能是两个最受欢迎的人机交互工具了。更多与它们类似的基于机器人的解决方案将成为人工智能公司的入门级产品。例如，计算机目前可用于语音分析和面部识别，而以后，计算机将能够根据用户的语调来识别他的心情，这称为情感分析。
制造自动化和非消费者关注领域的解决方案将第一个得到改进。制造自动化的改进主要归因于采用自动化、机器人和先进制造在内的复杂技术而节省下来的劳动成本。在年，非消费者解决方案的改进将普遍存在，比如农业和医药领域的人机交互技术。
趋势  人工智能肯定会逐步影响所有的垂直行业
制造业、客户服务、金融、医疗保健和交通运输已经受到了人工智能的影响。自动驾驶车辆预计年就会上市。明年，人工智能将会影响更多的垂直行业，例如：

保险  人工智能将通过自动化技术改进索赔流程
法律  自然语言处理可以在几分钟内总结数千页的法律文件，从而减少时间和提高效率
公关与媒体  人工智能能提高数据处理的速度
教育  虚拟导师的开发；人工智能辅助论文分级；适应性学习计划、游戏和软件；由人工智能驱动的个性化教育课程将改变学生和教师的互动方式
健康  机器学习可用于创建更复杂、更准确的方法来预测患者出现症状之前的患病时间

工业革命在年前几乎改变了一切，而人工智能将在未来几年里改变整个世界。
趋势  安全、隐私、伦理与道德问题
人工智能大旗下的所有东西，包括机器学习和大数据，都容易受到新型安全问题和隐私问题的威胁。有时候，起重要作用的是关键性的基础设施。与隐私问题有关的安全方面的需求，如将银行帐户和健康信息进行保密，将更多地依赖于安全性方面的研究。 年将是安全和隐私问题得到解决的一年，也是会有新发展的一年。人工智能的伦理问题也将成为年的主要关注点。需要解决的伦理和道德问题包括了人工智能是否会对人类产生伤害，还是对人类有益。有人担心机器人可能会取代人类，特别是在需要同理心的领域，比如护士、理疗师和警察。要处理的另一个问题则是自主武器。考虑一下一定程度的自主功能，人工智能应掌控武器的某些功能，而不是由人类来完全控制武器。
我们的建议
虽然人工智能已经存在了许多年，但我们今天所知道的人工智能仍然处于起步阶段。目前到处都充斥着有关人工智能及其应用的炒作，从自主车辆到虚拟个人助理，以及其他很多需要人类智能才能完成任务的技术。虽然有大量的人工智能使用案例，其中的大部分都是对具体流程的改进，但要成功部署却需要一定的时间。此外，人工智能行业内的企业并不多，所以碎片暂时还不会出现，非结构化的数据和处理这些数据算法将会出现。人工智能之路任重而道远。

本文来源于  科技大本营 微信公众号导语            上一篇文章我们聊了下  业务是什么，它的产品路径是怎样的。 本文我们来聊聊  和  的异同点。

          
——二  业务    业务
序言：
你点进来？那很大程度上说明你如今正面着以下问题：什么是  业务？请看 业务数据分析序列一：

那  和   的最明显区别是什么？

  业务有必要做数据分析吗？

  业务数据指标体系怎么搭建，重点关注哪几个指标？


 ，如果你真遇到上述问题，那你点进来就对了。
本文主要分享上述第二个问题：  与  的差别体现在哪里？
容我细细道来：
一、从到
首先，产品设计时一般需要充分考虑原则：
此非彼原则：我是谁？我从哪里来？我要到哪里去？
而是此原则：谁用？用来干什么？为什么用？
也就是说，产品针对的客户是谁？你的目标人群，目标市场是谁？
客户的需求和痛点是什么？
产品设计和营销手段是什么？品牌效应如何提升？
上述原则想清楚了，自然你就走出了第一步。
二、产品究竟什么？产品究竟什么？
我们聊聊产品的定位：


图示都是我们比较常见或者常用的产品。
显然，产品就是面向个人用户，直接服务于终端用户的，这里强调直接，因此就是所谓的大众产品，个人产品；而产品，多是面向企业用户，直接或者间接服务于终端用户，这里强调的是间接属性，因此产品多为系统产品，后端产品。
所以这里体现出端与端产品最大的区别之一：目标人群不同，使用场景不同。
三、产品的核心诉求不懂？那必须往下看
接下来，聊聊端和端的产品特点那就有的聊了：
、端产品有什么核心诉求呢？
总结为如下四点：
刚需：用户量大，而且分散，缺乏组织性，需要深度挖掘用户需求；
高频：巩固用户使用频率，在线时长等，确保增值服务收费的前提；
痛点：用户什么情况？一言不合，说下载就下载，说卸载就卸载？喜新厌旧，爱怎么怎么来，一种你管我爱用不用的潇洒感；
体验：交互、视觉设计、流畅性要求不是一般高，而是巨高，用的顺手就多用，用的不顺手？不好意思再见…
对，没错，端产品大都遇到上述核心问题，那么怎么解决？这不是本文要讨论的问题…
、那么，端产品又有什么核心诉求呢？那就更多了…
    关注组织与业务：什么意思？意思是一开始就很明确需要做什么，而不需要很深入的去探索挖掘用户需求，端产品存在的前提就是为了满足“组织完成业务信息化”的需要；
    出路：只有灵活设计流程，业务体验，并降低学习门槛，才能让越来越多的用户去尝试，去体验，进而留存下来；
    效率：因为端产品往往涉及到海量数据比端过犹不及，就比如腾讯云，提供了大量的云服务器，带宽等给其他公司，比如同城，滴滴打车等，这些企业无一不是大企，集中的数据量可想而知嗯，涉及到数据敏感性，在此不做赘述，在如此海量数据的情况下，如果你上传一份数据文件，都需要各种延时，那你是不是要崩溃？而且这影响工作效率；
    决策：上一篇文中，分享过端产品往往是上层建筑决定的，在上层决定前，他们有较多的接触时间与试用时间，有足够的时间去展示产品以及说服机会，一旦使用了端产品，大部分用户不会轻易去更换产品，即使感觉不是那么好用，但是迫于迁移成本高或者上层建筑的压力，不得不继续硬着头皮继续使用；
    流程：必须要贴合组织用户的业务流程，然而不同公司的组织其实不尽相同，因此这里对端产品的流程设计又提出一个很大的挑战；
    提供一套完整的产品：端产品功能往往大而全，背后是巨大的研发成本和周期，支持复杂的业务流程，产品可靠度高，提供完整的帮助说明以及技术支持，加上直接的销售团队，往往端产品前期的投入巨大，在市场推广中也包含了授权费，维护费，技术支持费，文档费，系统整改费，培训费等等…
总结下上面说的这一大堆话，就是下图所示：

四、不是什么鬼都能引起我的注意
好，我们来聊聊别的，比如端产品和端产品的侧重点，知道大家不喜欢看一大串的文字，那就简单点，看下图： 

五、也不是什么指标我都在意
最后一个比较本质的区别在于量化指标：
端产品很容易量化，比如产品的 是用户数？那么大都关注注册用户数，新增，活跃，留存，回流用户数等；如果产品的 是收入？那么大都关注值，付费转化率，应收，实收等；
然而，对于端产品来说，其背后的业务是可以量化的，但支撑系统难以量化，这体现在我们公司，我们也不会用业务的好坏去量化底层系统的服务好坏。
我们上面都说了端和端产品的区别，那既然是两款不尽相同的业务产品，有不同的区别是显然的，但是既然都是给人用的，当然会有相同的点：
    都是为了满足用户需求，这里的用户有个人用户，也有企业用户；
    都面临着复杂的、不标准的用户决策过程；
    都需要一个过程：产生认知à进行关注à考虑需求à评估需求à决定行动à采购使用产品à享受青睐推荐…，只是说这个体验的过程有多长
             无论是端还是端产品，最终都是回归于用户，服务于用户的。
六、看累了吗？那看完最后一丢丢就…
最后，一表总结：



特征






需求
具体、复杂、专业性强
抽象


使用者
群体、协作
个人


产品体验
专业
感性、易用、精致


核心技能
技术
创意


市场规模
有趣，但客单价高
海量用户


获客方式
拿下标杆客户
砸钱圈人


商业模式
付费，有行业、技术壁垒
免费为主，易被复制


竞合
营造生态
做头牌


忠诚度
高、转换成本高
低，转换成本低


开发
周期长
快速迭代


销售策略
销售和渠道
广告


营销策略
口碑传播
借热点，上头条



 …谢谢观看，欢迎指导如何快速直接地在腾讯云上部署项目。
第一步，登录
我选了系统，账户是——，于是在终端里：  之后输入密码，登陆成功。
腾讯云是默认不提供账户的，但是没有账户，我们寸步难行，所以第一件事，用腾讯云提供的命令，切换到账户
   
如果没有账户，接下来的步骤你都很难进行。
之后我们进入我惯用的一个文件夹： 
第二步，下载安装。
 =_
这个链接需要你用浏览器，右击页面任意部分，选择检查网络，然后对 位 格式的，点击下载，然后看面板中，请求的链接。
直接右击复制链接是不行的。
这里下了很久很久，大概一个半小时，才把这兆的下完。可能是因为我只选了兆的带宽。 
之后利用命令把这个文件命名为，然后解压
  
把安装后多出来的新文件夹命名为。
然后设置环境变量 
末尾加上：
 _=
 =_
以上的版本，不用设置环境变量。
然后执行 
这样就安装完成了，可以输入  查看。
第三步，
依然是在文件夹里，链接是：
 
之后的步骤如同，解压即可，不需要设置环境变量，之后编辑远程服务器下的在末尾增加其实只要拉到文件末尾，去掉注释改一下就可以了
 =
 =
 = = =
 = = =
将上面的改为自己的密码，注意对于来说，不能同时赋予用户和角色。第一个角色可以让你通过的插件部署项目，第二个角色可以让你进入的管理页面。
保存。
在服务器的目录下创建一个文件，写入如下值
 = = = =
         ={}
              = = 
之后可以到下面，用来启动了。此时的运行在端口，以前我都是用防火墙将端口转发至解决的，但腾讯云不允许改动防火墙设置。
你可以用 ：这样的指令来查看端口占用情况。
延伸——为什么无法绑定端口，解决方案，以及更优解：默认是绑定端口，参考：
 = =
               =
               = 
你可以把这里的改成，但这样就不能简单的启动了，要用 因为是默认一下的端口不开放的，必须要用权限，但这样时会提示你找不到的环境变量：
  _   _                
因为，在中，写到
=
   _  
   _
   _  
   _

也就是说，你需要在文件夹下， ，在这里添加你的环境变量： _=执行。
但其实这样，并不太好，只是的东西，如果你还有的，的，的别的程序也想要端口怎么办？
其实你可以就让在端口，用解决，我会放在第五步说。
第四步：安装：
傻瓜操作，只管输入    
服务器自己就会跑起来安装，中间会让你输入密码，比如我输入。
安装成功后，会自动运行，我们检查一下：
  | 
                          
                           = 
接下来我们改一下的默认字符集
用打开服务器的配置文件
    
此时这个文件里其实没有什么内容，直接拉到底部复制粘贴就可以了。
在标签下，增加客户端的字符编码

=
在标签下，增加服务器端的字符编码

=
=__
此时的只会侦听：的连接，由于我只有一台云服务器，这样显然是安全且合适的。
第五步，
可以绑定端口。的安装好像众说纷纭，我是看了一下２篇文章安装成功的。


这两篇，都是好文章，第一篇后半段有一些必须的库，第二篇中间有安装方法，注意那里的前面没有。
有很多配置文件，真正有用的在下面，这里是主配置文件，默认会把这个文件夹进去，你只需要在下面写一个配置文件就行。
进入 ，然后 在里面写一个
{
         
        _ 
          {
                _ 
        }
}
之后，你可以测试一下你的配置文件，   
重启，这个重启也分为种，看你的是通过安装的还是解压的，我是解压的，就得先杀死进程，
   |   
                          
                   
                = 
这样可以看到进程的，把它：  
之后再去你的文件夹里，进入文件夹，执行文件。
这样，基本上就行了。
第六部，配置 
建立信任，在自己的电脑上使用   命令生成公私钥，一般会存放在文件夹下，把你的公钥，即 _上传至服务器：
 _ 
之后利用命令把它放进文件夹下，并改名为 _
基本上就这些了，我试了在用户的文件夹下面也放我的公钥进去，但是依然不能默认用户登录。
最后复习一下用户切换指令：
    
   

接下来等待备案完成即可。

相关推荐
【腾讯云的种玩法】伪分布式搭建【腾讯云的种玩法】利用腾讯云搭建实用小工具最近做的一个调查  ，看结果大家都在等待   目前使用 的人数只有，所以特意收集了一下网络上的新闻和各大公有云的文档，看下各大公有云对 的支持程度怎么样，汇总如下：
、    亚马逊云  __  亚马逊 从年月开始支持  文档也很详尽，对于 用户使用没有阻碍。
、    微软微软作为技术的提供商，微软上技术一直是头等公民，大量的云服务是基于构建的。
、          也是年月开始支持，而且是第一支持的，还加入了基金会。
、           对 的支持更积极，而且   是在 开发者峰会上发布的，同时 也是基金会成员。
、      _   对于 的支持也挺积极的， 年月就提供了支持，而且文档也比较完善。
 上面几家都是美国的云计算公司，都是云计算的领导者，他们对 的态度都不错，当时反观国内的云计算厂商，差距实在太大了，不忍直视。下面列出各个国内云计算厂商的支持情况。
、    阿里云   支持 ，提供源码，没有提供包，不支持 
、    腾讯云    提供源码，没有提供包，不支持 
、    华为云   不支持  
、    网易云 平台服务对象存储 手册  手册  手册  安装   提供了包 不支持  
、       官方的项目中未包含的
 国内的公有云厂商都不支持  而且对应的 也非常简陋，然而开发者是个庞大的群体，这对于腾讯云是一个很好的机会去争取国内的开发者，特别是微软在国内 的世纪互联也不给力的情况下。导语
性能调优是一个亘古不变的话题，无论是在传统上还是小程序中。因为实现机制不同，可能导致传统中的某些优化方式在小程序上并不适用。因此必须另开辟蹊径找出适合小程序的调估方式。
预先加载
这一节的内容主要是基于  的文章进行的研究：《小程序性能优化——提高页面加载速度》
原理
传统中也可以通过预加载来提升用户体验，但在小程序中做到这一点实际上是可以更简单方便却又更容易被忽视的。
传统在启动时， 只会加载  的页面与逻辑代码，当 跳转至  时， 所有的  数据将会从内存中消失。 与  之间的数据通信只能通过  参数传递或者浏览器的 ， 存储处理。
小程序在启动时，会直接加载所有页面逻辑代码进内存，即便  可能都不会被使用。在  跳转至  时， 的逻辑代码  数据也不会从内存中消失。 甚至可以直接访问  中的数据。
最简单的验证方式就是在  中加入一个  {} 。传统中跳转后定时器会自动消失，小程序中跳转后定时器仍然工作。
小程序的这种机制差异正好可以更好的实现预加载。通常情况下，我们习惯将数据拉取写在  事件中。但是小程序的  跳转到 ，到  的  是存在一个    的延时的。如下图：

因为小程序的特性，完全可以在  中预先拿取数据，然后在  中直接使用数据，这样就可以避开  的   了。如下图：

试验
在官方中加入两个页面：，
  点击事件中记录开始时间
   {
   =  
  {
     
  }
}


  中假设从服务器拉取数据需要
   {
    {
    {}
  } 
}
   {
   =  
    {
     =  
                             
  }
}
重试次，得到的结果如下：

优化
对于上述问题， 中封装了两种概念去解决：

预加载数据

用于  主动传递数据给 ，比如  需要加载一份耗时很长的数据。我可以在  闲时先加载好，进入  时直接就可以使用。

预查询数据

用于避免于  延时，在跳转时调用  预查询。
扩展了生命周期，添加了事件，会在  之时被主动调用。同时给事件添加了一个参数，用于接收预加载或者是预查询的数据：
 
  来源页面，
  预查询数据
  预加载数据
   {}
预加载数据示例：
  预先加载  需要的数据。

 {
    {
    
  }
}
  {
   = {
     
  } 
}

  直接从参数中拿到  中预先加载的数据
   {
   = 
}
预查询数据示例：
  使用封装的  方法跳转时，会调用  的  方法
 {
    {
    
  }
}

  直接从参数中拿到  中返回的数据
  {
   
}
   {
   = 
}

数据绑定
原理
在针对数据绑定做优化时，需要先了解小程序的运行机制。因为视图层与逻辑层的完全分离，所以二者之间的通信全都依赖于  实现。如：

开发者工具中是基于

中基于 

中基于


因此数据绑定方法也如此，频繁的数据绑定就增加了通信的成本。再来看看究竟做了哪些事情。基于开发者工具的代码，单步调试大致还原出完整的流程，以下是还原后的代码：

 主流程精简还原，并非完整主流程，内有注释

   {
      ==  {
        类型错误  并没有预期中的
    }
      = 

      ____ 代码还原
      =  {
                 { } 
                 {  }
            }
              ____
    }

       代码还原
      =    第一次 
        {   === 
        已经超过最大长度
        
    }

      ===  ||  ===  ||  === __ {

         { __  __} 代码还原
        __ = {
             
        }
         = {  __  __ }

          =   第二次  第一次 
        {
            
        } 
    }


     { __  __} 代码还原
     = {
         
         
         
         
    }

      =    第三次  第二次 
    {
        
    } 
}
 运行的流程如下：

从上面代码以及流程图中可以看出，在一次{ }作时，会进行三次 ，二次以及两次操作。并且在第一次时，并不是单单只处理传递的{}，而是处理当前页面的所有  数据。因此可想而知每次操作的开销是非常大的，只能通过减少数据量，以及减少操作来规避。
与  相近的是  的  方法，同样是使用  去更新视图的，可以通过源码  看到  的关键代码如下：
  {
  
    {
     
    
  }
  
}
的工作流程如下：

可以看出， 加入了一个缓冲列队，在同一执行流程中进行多次  之后也不会重复渲染视图，这就是一种很好的优化方式。
实验
为了证实的性能问题，可以写简单的测试例子去测试：
动态绑定条数据的列表进行性能测试，这里测试了三种情况：

最优绑定 在内存中添加完毕后最后执行操作。

最差绑定 在添加一条记录执行一次操作。

最智能绑定：不管中间进行了什么操作，在运行结束时执行一次脏检查，对需要设置的数据进行操作。


参考代码如下：
 
 =
   =数据绑定测试

 =
   =数据绑定测试

 =
   =数据绑定测试


 =
   ={{}} ==
      {{}}{{}}
  



 
   {
     =  
      =      {
     {   }
     { }
   }
     =  
     
}
   {
    =  
     =      {
    {   }
  }
  { }
    =  
    
}
   {
    =  
     =      {
    {   }
  }
    = 
    = 
    = {}
       {
       {
       = 
       =  
    }
  }
    {
    
  }
    =  
    
}
   {
   =  
}
在经过十次刷新运行测试后得出以下结果：

实现同样的逻辑，性能数据却相差倍左右。由此可以看出，在开发过程中，一定要避免同一流程内多次  操作。
优化
在开发时，避免在同一流程内多次使用当然是最佳实践。采取人工维护肯定是能够实现的，就好比能用原生  能写出比众多框架更高效的性能一样。但当页面逻辑负责起来之后，花很大的精力去维护都不一定能保证每个流程只存在一次，而且可维护性也不高。因此，选择使用脏检查去做数据绑定优化。用户不用再担心在我的流程里，数据被修改了多少次，只会在流程最后做一次脏检查，并且按需执行。
脏检测机制借鉴自，多数人一听到脏检查都会觉得是低效率的一种作法，认为使用  中的 ，更高效。其实不然，两种机制都是对同一件事的不同实现方式。各有优劣，取决于使用的人在使用过程中是否正好放大了机制中的劣势面。
 中的  就好比是一个 ，在每次调用时都会去渲染视图。因此如果再封装一层 、 就完全没有意义，没有任何优化可言。这也就是为什么一个类  的小程序框架却选择了与之相反的另外一种数据绑定方式。
再回来看脏检查的问题在哪里，从上面实验的代码可以看出，脏检查的性能问题在于每次进行脏检查时，需要遍历所以数据并且作值的深比较，性能取决于遍历以及比较数据的大小。 中深比较是使用的  的  方法。为了验证效率问题，使用不同的比较方法对一个   的复杂  数据进行深比较，测试用例请看这里：
得到的结果如下：

从结果来看，对于一个   的数据深比较是完全不足以产生性能问题的。那   脏检查的性能问题是怎么出现的呢？
  中没有组件的概念，页面数据就位于  的 \ 当中。每一次脏检查都是从 \ 开始，随后遍历至所有子 \。参考这里 。对于一个大型的单页应用来说，所有 \ 中的数据可能达到了上百甚至上千个都有可能。那时，脏检查的每次遍历就可能真的会成为了性能的瓶颈了。
反观 ，使用类似于  的组件化开发，在抛开父子组件双向绑定通信的情况下，组件的脏检查仅针对组件本身的数据进行，一个组件的数据通常不会太多，数据太多时可以细化组件划分的粒度。因此在这种情况下，脏检查并不会导致性能问题。
其实，在很多情况下，框架封装的解决方案都不是性能优化的最优解决方案，使用原生肯定能优化出更快的代码。但它们之所以存在并且有价值，那都是因为它们是在性能、开发效率、可维护性上寻找到一个平衡点，这也是为什么  选择使用脏检查作为数据绑定的优化。
其它优化
除了以上两点是基于性能上做出的优化以外， 也作出了一系列开发效率上的优化。因为在我之前的文章里都有详细说明，所以在这里就简单列举一下，不做深入探讨。详情可以参看  文档。
组件化开发
支持组件循环、嵌套，支持组件  传值，组件事件通信等等。

 = 

 ={{}} = =
    = 

支持丰富的编译器
 可以选择用  或者  编译。
 可以选择使用 原。
 可以选择使用 、、。
支持丰富的插件处理
可以通过配置插件对生成的进行压缩混淆，压缩图片，压缩  和  已节省空间等等。
支持  语法检查
添加一行配置就可以支持  语法检查，可以避免低级语法错误以及统一项目代码的风格。
生命周期优化
添加了  的生命周期。用于页面跳转后触发。因为并不存在一个页面跳转事件 事件可以用作页面跳转事件，但同时也存在负作用，比如按  键后切回来，或者拉起支付后取消，拉起分享后取消都会触发  事件。
支持  混合
可以灵活的进行不同组件之间的相同功能的复用。参考  官方文档： 混合
优化事件，支持自定义事件
=简写为 =，=简写为=。
对于组件还提供组件自定义事件
 = 
优化事件传参
官方版本如下：
 = = =   
{
  {
     ===    会转为驼峰写法
     ===   大写会转为小写
  }
}
优化后：
 =    

 {
     {
     === 
     === 
  }
}
结束语
小程序还存在很多值得开发者去探索优化的地方，欢迎大家与我探讨交流开发心得。若本文存在不准确的地方，欢迎批评指正。作者：何方舟

 作为  框架的核心库，利用   新特性来解决   已经非常流行 。本文将剖析  是为何用同步的写法，就可以解决异步回调的问题。

首先简要介绍一下  特性，  是基于该特性实现的，所以弄清  的远离非常重要。

 {
    
     
     
    
}
  =  生成构造器
 这里会执行到以第一个之前的位置，所以执行 和  这两行
 这里会执行到第二个的位置，也就是执行  
 这里会执行到生成器结束的位置，

简单来说  可以变成一种分步函数， 成为这  函数的指针，通过调用  来执行下一步，这也是异步执行的关键。详细介绍请看这里
是不是有种感觉可以利用这个来达到异步的，但是好像又不知道怎么该怎么去做，那先看看下面这个例子。
  = 
    {
     
  
      {
       
        
  }
}

这是一个常见的异步回调的例子，现在我们用来改写它，下面是第一版。

  = 

 {

      =  {
         
        
    }

    

      =  {
         
        

    } 

    
}

  = 

大功告成！可是好像哪里不对，这个本质上还是之前的回调方法。我们期望的方法应该是类似这样的，通过一个关键字，来表明这里是异步执行的。这样的写法简洁明了，但直接这样写肯定是不能执行的。

  = 

 {
      =  
    
      =  
    
}

为了达到这个目的，我们必须借助其他工具函数，这个就是。 

  = 

{
      =  
    
      =  
    
}

   {
     {
          
    }
}

    {

      = 
     {   
          = 
        {           
             
        }
    }
    

}

上面的代码有两个关键点，一个是  函数的  化，还有就是  函数了，这里是最简单的实现。  
网上很多教程都忽略了这一点，就是  中需要流程控制的函数，都必须要  化或者  化。因为  相对于  要复杂一点，这里只介绍  化。  
所谓  化就是将多参数函数，将其替换成单参数只接受回调函数作为唯一参数的版本 ，上面代码中的  就是个例子。  
原生的是不支持  化的，所以就有了这个库帮我们把一些原生   化。 
为什么要  化呢？由之前的分析我们可以知道，利用  来实现异步回调的实质就是把  放入回调函数中， 化之后，可以得到一个只接受  的函数，换句话说，函数中除了  其他都参数都已经传入了， 里的内容就可以交给  去决定！  
现在让我们来看下  里面的代码。第一次执行  返回的  就是   化后的函数，就是这样的一个函数

{   
      
}

通过中，我们就可以在中执行 ，翻译过来是这样。 

{
       
}

这样就达到了我们想要异步执行的效果
上面代码中的  和  都是最简单的实现方式，代码中缺少诸如异常处理，非标准参数，多参数回调等判断，可以参考一下  和  ，来实现。在  的版本之后，内部的机制全部改为用  的实现，虽然看上去  是大势所趋，但是个人来说还是更喜欢的方式。等更深入学习  之后，会介绍  的实现方式。

原文链接：


推荐阅读

相关推荐移动端异常捕获腾讯工程师的前端书单接上一篇《 实战    》
初步模型
这次题目给的自变量有很多，我们需要从中挑选对房价影响最大的变量。我们的思路是先人工挑选一些对房价影响比较重要的因素，然后再慢慢的添加新的变量来看是否会改变模型的精度。
以国内的房价为例，影响房价的因素主要是房子面积、房子所在的区域、小区等，房龄、房型小高层、多层、别墅等、特殊场景地铁房、学区房等、装修等也会影响价格。这个数据是美国的房屋信息，不过基本的影响因素应该差不多。
我们先来简单的撸出一个模型来，选择如下变量：

 房子的面积

 城市街区 用来初步代替 区域、小区

  附近的交通情况

 房屋类型 独栋别墅、联排别墅

 房子的层数

 房子建造的年份

： 房子的改造年份

： 房子整体质量，考量材料和完成度

：房子整体条件


变量观察
我们先看一下这些变量和房价之间的关系。
为了方便画图，我们写了两个函数用来画图
 加载库


 将对于因子变量画图
_  _{
    
      
       _ = _  = _   
        _ 
         =  
               _ 
             = _ =   =

       _ = _  =   = _  
        _ 
         =  
         _    
         = _ =   =

     =   =    
}

 对于连续数字变量画图
_  _{
    
      
       _ = _   
        _ 
           _

       _ = _  =   
        _ 
         _   

     =   =    
}


 街区和房价的关系
_
_
_

上图是  和  之间的对比图。
通过图可以看到不同街区的房价分布还是有很大不同的，这个变量应该很有潜力。

上图是  和  之间的对比图。
通过图可以看到建造时间越近的房子价格越高。

上图是  和  之间的对比图。
通过图可以看到装修越好的房子价格越高。
查看各变量之间的相关性
 相关系数画图

  

 = = = =

模型训练
先用我们挑选的变量来建立一个  模型，作为我们的  模型
 通过人工选择的变量来构造一个公式
                  

 训练模型
   

 查看模型概要

结果如下：

 =   = 


                        
            


                           ||    
               
                       
          
           
          
          
        
            
         
       
          
            
         
           
         
            
         
          
         
          
         
          
         
           
           
            
                 
               
               
             
            
             
            
             
               
             
               
                   
                
                  
                    

    ‘’  ‘’  ‘’  ‘’  ‘ ’ 

        
           
          
结果解读
针对模型  之后的结果，我们简单解读一下输出结果含义
残差统计量

                        
           

线性回归的计算基于一些假设，其中一个假设就是 误差符合相互独立、均值为  的正态分布。

从本例可以看出这个残差的中位数为负数，数据整体左偏。其中的  和  是第一四分位 和第三四分位 。残差的最大值和最小值附近对应的记录则可能是异常值。
由于残差代表预测值和真实值之间的差别，也就是说最大值  表示我们预测的最大误差有  万美元之多。
仅仅从残差的五数概括上看不出什么关键信息，后续可以通过残差图来检查残差是否符合正态分布的趋势。
回归系数

                           ||    
               
                       
          
           
        

 
    ‘’  ‘’  ‘’  ‘’  ‘ ’ 
线性回归拟合完成后得出的回归系数并不是准确的值，而是对于真实回归系数的估计值。
既然是估计值则必然存在误差，上述结果中的
  表示回归系数的估计
   表示回归系数的标准误差
   表示假设此回归系数为  时的  检验值
 || 则是上述假设成立的置信度 

 越小则说明假设假设回归系数为 越不容易出现，反过来就是此变量的回归系数不为  的几率越大，故此变量在整个回归拟合中作用越显著。一般用置信度  作为判断依据。


最后的三颗星表示此变量显著，星号越多越显著，最多三个。

最后一行   标识着显著标识编码当  小于  时三颗星，小于  时两颗星，大于  则认为不太显著。


 和调整 
          

判定系数，  也称为模型拟合的确定系数，取值  之间，越接近 ，表明模型的因变量对响应变量  的解释能力越强。
 当自变量个数增加时，尽管有的自变量与  的线性关系不显著，  也会增大。   增加了对变量增多的惩罚，故我们以    为判断模型好坏的基本标准。

本例中    表示响应变量有 的方差被此模型解释了。
模型整体的  检验
           统计量用来检验模型是否显著假设模型所有的回归系数均为 ，即该模型是不显著的。对此假设做  检验，在  的置信度下拒绝了此假设，则模型为显著的。
在本例中   ，远远低于 ，所以模型是显著的。
变量选择  人工筛选
模型  的  是 。从第一个模型的结果看到变量  并不显著，所以我们去掉变量 ，重新进行拟合。拟合结果    和之前相差不大， 并且所有的变量都显著。故我们将第一个模型定为：
 初步决定的  模型的变量
                

 训练模型
   
模型出来了，我们先计算答案提交一次，看看结果如何。
 用  模型预测
   

 写出结果文件
   =   = 
  = _  = 

   

评分标准是测试集上的      ，其值越小表示误差越小。结果惨不忍睹，排名已经  开外了。
初步优化
建立模型之后，我们接下来要诊断一下模型是否符合线性回归的一些假设。直接通过  给出模型的线性回归诊断图：
 快速打印残差图、 图等




残差拟合图  

线性回归的计算基于一些假设，其中假设误差是相互独立、均值为  正态分布。如果因变量与自变量线性相关的，那么残差的分布应该是正态分布。 通过上图可以看出，残差整体是随机分布在均线  值附近的。残差比较大的点很大几率是异常点，需要去除掉。

尺度位置图 

因变量的方差不随自变量的水平不同而变化，称为同方差性残差方差不变。 如果残差满足不变方差假设，那么在尺度位置图中，水平线周围的点应该随机分布，那么红线应该是比较直的一条线。

正态  图 

正态  图是在正态分布对应的值下标准化残差的概率图。如果残差满足相互独立、均值为  正态分布的假设，那么图上的点应该落在呈  度角的直线上。通过图上可以看到异常值的残差偏离  度线比较多。

残差与杠杆图  

这个图形主要用来鉴别出离群点、高杠杆值点和强影响点。拟合比较好的模型中所有的点都不应该超过  倍  距离，也即是不超过图中  的那根红色点线。
我们通过诊断图看到整体的模型里面有很多的离群点或者异常值，这些异常值会影响模型的整体拟合质量。所以我们下一步则通过  距离来去除掉所有的异常点。
一般对于  倍以上的  平均距离的点作为异常点的监测标准。
 通过  距离来查看异常点
  

 画图
 = = =         
 =  = =     
= = = = =    

从训练集中去掉异常点
 ４倍以上的为异常点
     =
    
我们再查看一下数字变量的分布，其中  做了对数处理后，分布更加趋于正态分布。
 查看  的分布




因此我们将数字变量都做对数处理后，生成如下的公式
 新的函数
                  
 训练模型
   
重新训练后，得到新的的   ，相比之前的有所提高。
我们重新提交一下结果，最后的预测结果是 ，误差也相对变小。
至此我们将这个模型作为我们的基础模型。
不同的变量选择方法对比
回归分析中最重要的莫过于变量选择。我们在前面根据我们自己对题目的理解来人工选择了自变量。
下面我们通过一些算法来帮助我们来选择自变量。
这些方法都已经有比较成熟的  包来实现。
逐步回归
逐步回归中，模型会一次添加或者删除一个变量，直到达到某个判停准则为止。
向前逐步回归 每次添加一个预测变量到模型中，直到添加变量不会使模型有所改进为止。
向后逐步回归 从模型包含所有预测变量开始，一次删除一个变量直到会降低模型质量为止。
我们这里选择向前逐步回归。


 取空函数和全函数
= =
=   = 

 向前计算

   == = =

最后选择的变量如下：
 最后选择的变量
          
          
          
          
          
          
        
          

一般的线性回归使用最小二乘  进行回归计算很容易造成过拟合，噪声得到了过分的关注，训练数据的微小差异可能带来巨大的模型差异。而  方法使用  正则，解出的参数常常具有稀疏的特征，即很多特征对应的参数会为零，也就淘汰了一些自变量对于因变量的影响。
我们用  包  来实现  算法。
 安装



 准备数据
     

  会自动将分类变量变成哑变量
   
  

执行  

    =

 画图


 得到各变量的系数
  = 

由于  为  无法数组化
  
_   

 预测、输出结果
    = _  = 
   =   = 
  = _  = 
随机森林
随机森林能够处理很高维度的数据，并且不用做特征选择，会自动的选取变量，所以直接将所有变量都放进去。
加载随机森林包



设定种子


 设定控制参数
  =    折交叉验证 
    折交叉验证中的 ， = 则是  折交叉验证
   交叉验证的次数
   打印训练日志
   =   =   =   = 

 训练模型
     =    =    =    = 

 输出结果 
_  

 输出结果
   
   =   = 
  = _  = 
梯度下降 
 全称为    它是一种基于决策树  实现的分类回归算法。它和随机森林一样都是模型组合的一种，都是将简单的模型组合起来，效果比单个更复杂的模型好。组合的方式不同导致算法不同，随机森林用了随机化方法，而  则使用了   的方法。
我们用  包  来实现  算法。
 安装包

 训练模型
     =    =    = 

 输出结果 
   
   =   = 
  = _  = 
汇总结果
我们上面使用了不同的算法来对特征选择，我们提交答案的最后结果如下：

结论
这篇文章主要根据实例演示了  语言中对于特征变量的处理，缺失值的补充等。随后对比了几种特征选择的方法。从最后的结果来看，可以看到通过领域知识人工选择的变量已经比较逼近算法选择的最后结果。而后续的几种算法在最后的结果上也没有太大的差别。
参考文章

         

        

         

 ： _这节课，我们来学习单点架构和多点架构的知识
首先，我们来了解一下，什么是单点？

单点顾名思义，就是只使用一个设备对外提供服务。从架构图上来看，单点就是用户直接请求我们的云主机。只有一台云主机对外提供服务。单点架构就是我们在前面课程提到的 “云端最简架构”

而多点就是指对用户提供服务时，不止有一个设备提供服务，多个设备同时对外提供服务。从架构图上来看，用户请求时，会有多个云主机对其提供服务。
接下来我们来看看单点和多点的优势和劣势

单点由于只操作一台云主机，那么他的成本相对较低，操作也简单明了，但是这种简洁明了，带来的是故障率的提升，更加的不安全和不稳定，有更大的几率出现故障。容易被外部以单点突破攻击的形式来攻破。
而多点由于增加了云主机，成本相应会上升，需要操作的机器也变得更多，即使用软件来批量管理，依然带来了复杂度。但是由于云主机的增加，整个架构趋于稳定，能够更安全的提供服务。即使外部有单点突破，以只能攻破一台主机，另外一台主机仍然可以对外提供服务。
单看上面的文字，可能大家理解的还不够深，这里我来举两个例子，来帮助大家认清单点架构和多点架构。
单点架构除了在开始时，我们看到的云端最简架构，还有一些比较常见的，认为是多点，但其实是单点的。

比如上面这个图中，在云主机前加了一个负载均衡器，但是由于后端依然是一台云主机，所以并没有发挥请求分发的效果，对于抵挡攻击方面，也没有什么用。这种架构下负载均衡只能对请求进行转发，无法保证后端的稳定运行。这种架构的效果只有一个，就是隐藏源站。

这张图中的架构就是比较经典的多点架构，大部分使用多点架构的最基础的架构也都是这个样子的。在负载均衡后使用多个云主机，来负载请求，多个云主机再通过云数据库或自建数据库来实现数据同步。在这种情况下，负载均衡会将请求分发到三个云主机上，即使外部对负载均衡实行单点突破，也只会让一个云主机出现故障，而另外两个云主机依然保持运行。

相关推荐
【腾讯云的种玩法】利用云服务器资源进行网络服务【腾讯云的种玩法】   负载均衡配置详解很荣幸能够在腾云阁分享技术经验。
本人很幸运在刚刚结束的京东算法大赛中取得第四的成绩，腾讯广告点击大赛目前排名前五十，在比赛过程中学到了许多知识，同时也有一些经验分享给大家。后面也有队友李强在腾讯社交广告高校算法大赛中的分享。
首先，推荐类的赛题，成绩的关键在于特征的挖掘，因此，在比赛的前期，耐心分析数据，寻找特征是非常必要的。有些选手感觉特征挖掘难以下手，这里我一般从三个方面挖掘特征：数据分析、业务理解、特征交叉。数据分析的重要性不必多提，业务理解也能帮助更好地挖掘特征，比如京东比赛预测用户买不买商品的问题，我就从用户的活跃度、购买差异、购买能力、购买习惯等方面考虑，挖掘出的特征是非常有用的。

谈到提取特征，就不得不提特征选择的问题，有些选手单纯的根据基于树模型的特征重要性删选特征，我觉得这样是不太可取的，一方面，有的强特征相关性较强，这样如果其中一个特征重要性认为很强，其他的特征重要性就会变得很低。另外一方面有些不太重要的特征结合起来也会变成比较强的特征，因此不要很随意地抛弃不太重要的特征。不过，特征重要性可以作为特征挖掘方向的参考，比如可以通过重点研究重要性比较强的特征，找一些相类似的特征，同时也可以对某些强特征进行有意义的交叉，这样对结果都是有提升的。
另外，特征的设计一定要注意细节问题，有些细节可能直接决定着特征的好坏。
当然啦，做比赛，建立稳定的线下是非常重要的，保证线下与线上同增同减，能够帮助我们突破线上提交次数的限制，通过线下成绩的反馈，能够更好地确定特征地好坏，从而可以指引我们挖掘特征地方向。很多选手表示线下并不准，有两种原因：一种是选择的验证集不合适，一种是没有进行交叉验证，解决了这两个原因，一般来说线下还是相对稳定的。
最后，在这里对新手提一些小小的建议：首先，笨鸟先飞，既然是新手，就要早早开始参加比赛，前期竞争相对小，容易出成绩，这时如果有了好的排名，与自己排名相近的参赛队员组队，是非常不错的选择， 通过交流，能够让自己更快地学习进步。因此，我鼓励新手能够组队参加比赛，一起学习交流。新手千万不要因为自己没参加过就觉得自己不行，盲目地否认自己，我觉得，大部分赛题，对新手来说还是比较友好的，赛题比较贴近现实，更容易挖掘特征，赛程持续时间较长，给了新手充分学习的时间。我相信，只要努力去做，静下心认真学，新手也能取得不错的成绩。
一次比赛，确实能够让我们学习到非常多的知识，这对我们以后，都是非常有帮助的，而一起奋斗过的队友，也会建立深厚的友谊，这也是一笔宝贵的财富。
目前，我的队友李强在腾讯社交广告高校算法大赛取得不错的成绩，他也有一些针对此次比赛的经验要分享：

线下训练集测试集划分
因为数据带有时序，那么可以用时序分割。另一种方法是挑选数据集中的小部分作为线下测试。这里可以通过提交来验证线上线下的结果是否一致，只要同增减就可以。

特征工程
比赛的关键在于特征工程，我们验证一个特征好坏的时候可以直接在线下预测集中评估，如果加入这个特征线下验证集合有所提高，那么这个这个特征是比较可信的建立在线上线下同增减的情况下，还可以直接算特征和的相关性来确定特征的好坏。

特征的穿越
很多小伙伴往往会遇到一个情况，线下加入一个特征导致无限接近于或者线下提高很大线上爆炸的情况，这时候往往是你用了未来的信息，或者用到了和直接相关的特征，如转化时间。

模型的调参
比赛前期，不建议频繁的调各种参数，一方面，调参带来的提升仅仅是小量的提升，取胜的关键不在这，另一方面，频繁根据线上成绩更改各种参数，会让自己的结果过拟合线上，这样的结果在换榜时是非常不利的。这里我选用的是固定变量法，就是固定其他参数，然后通过寻找最优的参数取值。如在中我们可以固定其他变量，然后可以通过求得最佳的迭代次数。作者： 

问题
最近遇到一个已经使用了 的依旧强引用了的情况，好在没被持有只是延迟释放，但这里的关键是用了_的理应不会强持有才对，莫非之前的代码都有问题？下面是”有问题的”代码为方便理解已删掉部分无关代码

 
{
    _
      _           {
        _
        _ = 
        _ = 
    }
}
的确有加和宏的具体展开可参照下面的代码，但仔细看的话会发现访问成员变量的时候都没有加，其实这里有默认一个条件，即_等同于_，一般来讲这样理解是没错的，但是_在内重新定义了一个的话也适用嘛？两者如果等同的话应该只捕获外部的_才对，但实际运行结果又与假设的不符，看来只能分析具体的实现了
重写成代码
下面是仿照_写法的代码
  {
    __  _ = 
      = {
        _  
        _   \\
        __   = _
        _  
        _ = 
        _ = 
         = 
    }
}
接着通过重写成，重点看_ = 和_ = 这两句，重写后的结果如下
 __    ____ =  _____________
         __    ____ =  _____________
可以看到里面使用的同一个，   ____，不过其实这也证明不了什么，因为就算重定义了两个也都是指向一个地址，重点还是看是否有强引用，下面是生成的结构体
 _______ {
   ___ 
   _______ 
   __ _
  _______   _______   __ __  =  ___ {
     = _
     = 
     = 
     = 
  }
}
可以看到里面只捕获了一个_，一开始我以为这就是最终结论，肯定是工具误报没错了´▽｀ ，不过上有个类似问题，里面有一句话

   _            _         

大概意思就是不写的时候访问的是当前可见的的变量，放在这里来说就是即使自己重新定义了一个，不加使用的仍然是实例方法传进来的，重定义的只对显式的访问有效，所以那就是说方法有问题喽？刚好周会上也有说到重写，其实真正编译的时候代码不会转成，实际的实现不一定是这样，所以这里的代码对不对是要打问号的，那么把上面的代码转成汇编肯定不会有错了吧
汇编代码
利用自带的汇编器分析下实现，由于转成的汇编代码基于太长这里只讲关键部分
首先对于实例方法会带上两个隐藏的参数，一个是，一个是，下面是调用方法之前的初始化部分
    {    }
      
     
      
      
      
汇编有规定第一个参数会放入中，所以对应这里就是，可以看到有将的值存入栈内，栈上的偏移为
下面是创建的部分简单一句赋值汇编就有这么长ಥ_ಥ

           _     
          
           _         
                       
         
                       
        __

          
          
         ______
         ______
_
         
         ___ ___
         ___ ___
_
         
         
         
         
         _____
         _____
_
         
         
           _          
          
          
           _         
          
          
          
          
          
         
                        
         
                        
                           
        __
          
              
        __
          
                            
          
               
         
        __
在创建的时候一开始是放在栈上的，调用了最后的__后才会拷贝到堆上，本质就是一个结构体，布局如下图，当需要捕获外部变量的时候会把捕获的变量放到结构体内，总之这里关键就是要看是否有将强引用并捕获到内，我们首先要先找到存放指针的地方

         _____
         _____
_
         
         
           _          
          
          
           _         
          
这里就是用来初始化第一个成员指针的部分，将指针存到然后通过指令写入栈内，可以看到它在栈上的偏移是，按照的布局继续往下看
      
      
      
      
     
                    
     
                    
                       
    __
      
          
    __
      
                        
      
在连续存储了栈偏移为、等几个变量后，可以看到有句   ，前面说到这里存储的是的地址，把地址存到后马上调用了__方法，这个方法会将指向的对象引用计数，然后随即将这个对象的地址存放到栈偏移的地方，这里应该就是强引用的部分了，证据找到了！不过为了让结果更明显顺便贴下当显式指明情况时的汇编代码

           _          
          
           _         
          
          
          
          
          
         
                        
         
                           
        __
          
               
        __
可以看到这时没有_只执行了_，所以不加会导致额外的即强持有
最后的最后看一下调用的反编译结果
 ___ __  {
    _ = _  
     = _  _____
    _ 
    _    _____ 
    _ 
     = __ 
     
}
可以看到不同于重写的方法，这里加不加会导致不同的赋值方式，不加的情况会使用中持有的来访问。
至此可以确定在中重定义了的情况下_和_不等同，前者会导致强持有外部的。
总结
对于外部的没有什么分歧，主要是有两种不同实现，这里单独分析下

__  _ = _

第一种是重新定义一个和命名不同的变量比如_，然后后面都用这个_来操作，这种写法优点是含义很明确、不会造成误解，因为只用了_所以很明确不会捕获外部的，但缺点是得时刻注意不要错写成

__   = _

第二种就是空间里面使用的，重新定义的变量就叫其实这里编译器也不让重新定义的，只是在宏里面强行掩盖掉了，优点是发消息的时候不用担心写错了直接用就行，但缺点是直接访问成员变量时必须指明否则会强引用住外部的，由于很容易想当然以为写不写是一样的，对于不熟悉的人很容易忽视掉这最重要的一点
总而言之要把握 正确的使用姿势还是需要多多注意，不明白实现的话很容易写出有问题的代码，終わり´ω`刘永峰，腾讯云高级产品经理、布道师

云计算的“基建时代”
很多人讨论，云计算是否格局已定，我觉得云计算只是刚刚走过了其高速发展的草莽时代。这个时代，相当于拓荒之地刚刚完成了庞大的基础设施建设。离全面的繁荣，还有很长的一段路要走。先用一段篇幅，回顾一下这个时代的一些历史和时代印记。我在两年前写过一篇文章，可以回顾一下当时的市场。
新的商业模式的诞生
年，当亚马逊第一次将其对象存储作为服务区售卖时，标志着云计算这种新的商业模式的诞生。有的人把云计算当做一种新的技术，其实并没有反映出云计算的本质。云计算并没有用到什么新的技术，它用的虚拟化技术，网络技术，存储技术，十多年前就已经很成熟了。甚至很多学术界的同僚对此嗤之以鼻，认为云计算是产业界搞出的一个概念，把他们之前搞的并行计算，集群计算换了个高大上的名字，并不是什么创新。我个人认为，云计算的确是创新，但是不是技术上的创新。云计算的本质是一种商业模式的创新，是将资源作为一种服务去售卖的新的商业模式。当年，云计算出现时的意义，就像我们现在看到的”共享单车“的意义是一样的。突然之间，大家恍然大悟，喔，原来自行车是不用买的，随时随地即时获取，按需付费。可惜当年大家悟的不是这么快。 
中国的拓荒者
谈起云计算，我觉得这个行业的所有人都应该对国内最早的先驱者盛大云表示敬意，当然，按照历史规律，必定也是先烈。我第一次接触云计算，是从使用盛大云开始的，第一次觉得还可以这样玩，所以当时就觉得，如果要继续搞，就一定要进入到云计算这个行业。后来，阿里进入了这个行业，一场大革命也就开始了。腾讯其实也是最早的开拓者之一，我年进入这个腾讯的时候，就已经成立了云计算的业务部门。只是当时主要以向开放平台的生态伙伴售卖服务为主，面向的是相对小众的一个市场。内部的能力一直在积累中，年开始全面对外开放。与此同时，除了阿里，腾讯这两个巨头开始进入这个市场，引领革命的同时，也出现了一些创新者，譬如，，他们凭借当时相对更新的技术，以及非常好的服务，也取得了不俗的战绩。 
“基建时代”的用户
最早使用云计算的是一些什么用户？我觉得最早使用云计算的用户，一类是游戏客户，一类是网站客户。网站客户很好理解，因为网站时代，主机托管，主机租用，，租用空间的模式流行了很长时间。本质上，他们和云计算的模式类似，但是云计算的模式比他们更先进一些，体验也更好，特别是网络这样的东西，直接秒杀了当时很多三网的。阿里也是通过收购万网，快速取得了领先地位。最早使用云计算的游戏行业用户，是从页游开始的。记得当时到腾讯云时，大部分客户都是页游客户。当时的游戏巨头在腾讯云就有着庞大的机器集群。云计算的快速发展，得益于年开始，手游市场的爆发式增长。为什么手游行业会第一个吃螃蟹，这主要与手游的特点是有关系的： 

生命周期短租用模式最划算
快速开发，快速迭代资源随时获取
用户爆发快需要很强的资源弹性
分区分服，架构简单虚拟机就可以搞定

手游用户大规模采用云计算的同时，也让这种模式在互联网行业逐渐被认可，后面有经历了的一轮爆发，基本上都认同使用云计算，再也没有人去买机器，搞托管方式了。所以云计算早期的市场主要还是集中在互联网领域，包括游戏，移动应用，网站。年，视频直播爆发，其实也是属于互联网领域。某种程度上讲，只是在自己的圈子开始流行开了，改变所有行业，推动社会发展，还远没有开始。 
竞争壁垒构建
云计算的草创时代，也是”基建”大跃进时代。参与方开始纷纷自建数据中心，在云计算之前，做机房建设的，似乎都是运营商或者传统厂商。并且大众好像都不知道。云计算的爆发期，各个云的厂商开始大规模建设自己的数据中心，不仅有国内的节点，还有国外的节点，俨然数据中心建设的军备竞赛。除了这些硬件设施以外，还有大量的软性的基础设施在这一阶段开始成熟，譬如防攻击的基础能力，各类云端的数据库，域名解析，，对象存储，负载均衡能力，音视频直播能力等等。云计算领域的竞争，除了比拼基础设施以外，还比拼的是强大的运营能力，这些基础设施和运营能力的成熟，标志着云计算由单纯的售卖虚拟机到提供完善的层产品和服务的转变。构筑了互联网公司在云计算领域的壁垒。传统的厂商，传统的厂商，很难对他们造成威胁。因为传统厂商进入云计算领域，有点像拿陆军去对抗互联网巨头的海陆空协同军力。虽然后面不断的有新的玩家涌入，但是传统厂商，很难在这个领域占到优势。他们是老的商业模式的受益者，自然很难成为传统商业模式的颠覆者。 
搅局者
正当云计算发展的如火如荼时，年，一个新的技术迈入了历史舞台，立刻就燃遍了整个领域。经过了三年的发展，已经成了领域新技术的代名词。很多人应该猜到了是，以及以它为代表的容器技术的广泛使用。在出来初期，云计算领域的巨头们其实是怀着复杂的心态来看待这个愣头青的。云计算市场的老大冷眼旁观，很长时间没有动静。一群小弟以为代表心潮澎湃，意图弯道超车，颠覆老大已经很稳固的领域的江湖地位。当然，从后面的发展来看，的确有潜力充当这个角色，从最近三年的迅猛发展也说明了问题。但是云计算的竞争的制高点变了，不再是领域的竞争。一个新的时代到来了。 
云计算的“应用时代”
我们大部分人看到的云计算的市场，到此为止。云计算的第一个发展期，主要还是在自己的生态形成闭环，大部分应用领域还是“泛互联网领域”，一个新的商业模式，如果要成为社会的主流，还需要渗透到所有的行业。从年后期开始，云计算已经非常明显的加速往其他行业去渗透。云计算由此进入到了“应用时代”。传统企业上云，难道会把我们年前的信息化的道路重新走一遍吗？显然不是，这个时代，会有一些不同的特征。 
催生新的模式
很多童鞋天真的认为，现在传统企业开始使用云计算了，这里有巨大的市场机会，传统的万亿级的市场，将全部转成云计算。怀有这样的想法的公司，愿望可能要落空了。传统上云的必要性并不大，因为已经运行的系统，上云不会产生新的价值。企业也不会存在任何的动力。并且实际情况来看，也不现实。使用云计算不单纯是技术问题，如果使用云计算，很多企业的组织架构可能都要随之调整。譬如四大国有银行的存量系统，肯定是无法上云的。光数据结构的变化，都是一项不可能完成的任务。好多岗位因此也会消失。不是一个单纯的降低成本的理由所能驱动的。 
传统行业使用云计算，真正的模式是：增量市场，传统业务流程和云计算深度融合，发挥化学反应，催生出新的商业模式。譬如在接触到三一重工的案例之前，我一直认为工程机械是直接卖给客户，后来，听说这个行业的主要的商业模式是租用，如果要实现租用，就必需对租用的设备有非常完善的监控。这就必须要结合云计算，大数据和的能力。在云计算成熟之前，不可能有这样的商业模式。三一重工，就是依靠其旗下的树根科技，结合了云计算，大数据，和的能力，实现了由单纯的设备制造商向设备运营商的转变。他们使用云计算，并不是把内部全部搬到云上，而是在新兴领域和云计算结合，创新出新的商业模式。后来和很多客户交流发现，三一重工的案例不是个例，很多医疗设备，能源领域，都在实践这样的模式。也就是现在非常流行的“跟踪经济”。 
罗辑思维有一期节目叫“发现你的太平洋”，讲的是发现太平洋的故事。其核心是让我们放弃存量，寻找增量，发现自己的太平洋。拓展传统企业使用云计算，也需要从增量出发，而不是盯着存量。 
向资源化演进
在云计算的”基建时代“，其主要服务模式是基础设施即服务，在新的时代，可能我们要抛弃，，的提法，因为它是早期产物。云计算的发展，已经无法清晰的区分，和，三者之间的界限越来越模式。因为云计算已经慢慢从一种服务，变成一种像”电“一样的公共的资源。要成为资源，必须要满足一些资源化的特征，譬如它应该是细粒度，可度量的，有统一的方式去获取。我仔细统计了一下腾讯云目前提供的个产品和服务，至少是由方式提供的。所以这就是云计算发展的一个重要的趋势，所有的服务，都由统一的来获取，就像电能通过一个插座就能获取一样。我们用了十年的时间，让大部分人从理解物理的机器到理解一个虚拟的机器。很快的，这种观念又需要从虚拟机器，转变成资源。 
云计算，大数据，的融合
在“基建时代”，云计算本质上还是一种 ，而在”应用时代“，它会变成 ，在早期，云计算，大数据是割裂的。而在应用时代，云计算，大数据和必然是深度融合的。这就像一个人，是大脑，云计算是骨骼，大数据是血液。腾讯的创始人小马哥曾说过：”未来的互联网，是传统企业在云端通过人工智能来处理大数据“，这其实就是描绘了未来云计算的主要形态。不能割裂的来谈云计算，大数据和人工智能，而是当做一个整体来看待。 
生态的竞争
云计算的“基建时代”结束后，必然会向所有的行业去渗透和专业。云的服务商，只会也只能专注于基础能力的建设。此时市场的大小，不是由云服务商自己的直接客户决定，而是由以自己为平台的整个生态的规模决定，因此，竞争的制高点由原来的基础设施的能力和运营水平，转移到云计算，大数据，的融合能力以及生态规模。单纯的厂商之争变成的生态之争。所谓得生态者得天下。传统的云计算厂商，会逐渐由全方位的云计算的解决方案服务商演变成“云计算资源”的提供商。因为产业的分工细化是必然的趋势。在此基础上，会有一批新的云应用的服务商，会和产业去融合，譬如物联云的服务商，制造云的服务商，或者某个垂直领域的的服务商。云计算真正广阔的市场，在于和传统产业发生化学反应所催生出的新的市场。现在仅仅是空白。 
总结
有的人问云计算的市场格局是否已定？也有人问云计算的下半场是否开始了。我还是赞同吴军老师的观点，商业和技术的发展是有连续性的。不存在上半场和下半场的区别。前面的选手一定会把优势带到后面。但是随着时代的变化，赛场的态势也在变化。不停的会有新的挑战者采用降维攻击的手段对传统领先者发起挑战。或许未来云计算的巨头出现在云的应用领域，我们拭目以待。前言
我们可能做出比现在快倍的太空飞行器？“换血”有可能是“返老还童”的有效方式？图灵测试里有一个和川菜有关的重要问题？
大会如今已经是第五届了，科学家们的脑洞也是一年比一年大。今天，位嘉宾从各自研究和熟悉的领域出发，描绘出他们心中人类的“未来”。

比如：地球真的住不下人了，所以先从飞出太阳系开始吧

霍金的开场白

今天，在腾讯大会上，霍金发表了关于探索太空、塑造人类未来的演讲。
霍金认为，到年，世界将拥挤得 “摩肩擦踵”，电力消耗将让地球变成“炽热”的火球。他相信我们可以避免世界末日，而最好的方法就是移民到太空。
霍金把探索太空移民比作哥伦布的伟大探险。“今天的情况就如同年前的欧洲。当时的人们很可能坚信，哥伦布的探险注定是徒劳无功。 然而，新世界的发现，对旧世界带来了深远的影响。”相比之下，“人类向太空的拓展，甚至将会产生更深远的影响，这将彻底改变人类的未来，甚至会决定我们是否还有未来。”

他认为，其他条件适宜的星球上，生命的存在也必定是可能的。在太阳系中，月球和火星是太空移民地最显而易见的选择。不过，星际航行必然是一个长期未来二百到五百年的目标。
在这个过程中，霍金给出了一个过渡性的选择：他与企业家尤里•米尔纳推出的“突破摄星”计划。这个计划的目标是让星际旅行变成现实。
“如果成功，在座各位有些人的有生之年内，我们将向太阳系最近的星系——半人马座阿尔法星系发送一个探测器。”
虽然面临一些严峻的挑战，但是霍金指出，目前来看，这有可能成为现实。
最后，霍金再次强调了探索太空的伟大意义：“人类作为独立的物种，已经存在了大约二百万年。我们的文明始于约一万年前，其发展一直在稳步加速。如果人类想要延续下一个一百万年，我们就必须大胆前行，涉足无前人所及之处。”
以下为霍金先生的演讲原文：
你好，北京！我是史蒂芬•霍金。欢迎来到腾讯大会。
我今天的演讲，是关于在宇宙这一背景下，地球和人类所扮演的角色。为了最好地阐述，我需要从两个维度出发，一是思考人类的未来，二是研究我们探索太空、寻求其他潜在宜居星球的选择。我今天的目的，是问大家两个问题。首先，我们需要做什么才能够确保，在力所能及的范围内，人类的未来达到尽可能完美？其次，我们为什么要考虑探索其他宜居星球？
一个原因是，对我们来说，地球变得太小了。在过去二百年中，人口增长率是指数级的，即每年人口以相同比例增长。目前这一数值约为。 这听起来可能不是很多，但它意味着，每四十年世界人口就会翻一番。 年，我将庆祝自己岁的生日，而在我人生的这段历程中，世界人口比我出生时膨胀了四倍。
这样的指数增长不能持续到下个千年。 到年，世界将拥挤得 “摩肩擦踵”，电力消耗将让地球变成“炽热”的火球。这是岌岌可危的。然而我是个乐观主义者，我相信我们可以避免这样的世界末日，而最好的方法就是移民到太空，探索人类在其他星球上生活的可能。
但是理由充分吗？难道留在地球上不是更好？ 在某种程度上，今天的情况就如同年前的欧洲。当时的人们很可能坚信，哥伦布的探险注定是徒劳无功。 然而，新世界的发现，对旧世界带来了深远的影响。对于那些被剥夺权利地位、走投无路的人来说，新世界成为了他们的乌托邦。人类向太空的拓展，甚至将会产生更深远的影响，这将彻底改变人类的未来，甚至会决定我们是否还有未来。它不会解决地球上任何迫在眉睫的问题，但它将提供解决这些问题的全新视角，让我们着眼于更广的空间，而不是拘泥眼下。希望这能够让我们团结起来，面对共同的挑战。
当我们进入太空时，会有怎样的发现呢？会找到外星生命，还是发现我们终将在宇宙中踽踽独行？我们相信，生命在地球上是自然而生的，是在漫长的进化后，实现了与地球资源的高度契合。因此，在其他条件适宜的星球上，生命的存在也必定是可能的。即使这种可能性极小，但宇宙是无限的，我们还是可以假设，生命会在某处出现。不过，如果概率很低，那么出现生命的两个星球间的距离，可能将异常遥远。
在太阳系中，月球和火星是太空移民地最显而易见的选择。水星和金星太热，而木星和土星是巨大的气体星球，没有坚实的表面。火星的卫星非常小，并不比火星本身更优。木星和土星的一些卫星也存在可能。比如木星的卫星之一欧罗巴，它的表面是冰层，但其下可能会有液态水，也就可能会孕育生命。那么我们如何确定这种可能？是否必须登陆欧罗巴，然后钻一个洞？
星际航行必然是一个长期的目标。我所说的长期，是指未来二百到五百年。

但是，还有另一种选择。去年，我与企业家尤里•米尔纳 一起，推出了长期研发计划——“突破摄星”，目标是让星际旅行变成现实。如果成功，在座各位有些人的有生之年内，我们将向太阳系最近的星系——半人马座阿尔法星系发送一个探测器。
突破摄星”是人类初步迈向外太空的真正机会，为了探索和考量移居太空的可能性。 这是一项概念验证的使命，其中涉及三个概念：迷你太空飞行器、 光动力推进和锁相激光器。“星芯片”是尺寸被缩小到仅几厘米、但功能完备的太空探测器，它将附着于“光帆”上。“光帆”由超材料制成，重量仅有几克。我们设想，一千个由 “星芯片”和 “光帆”组成的纳米飞行器将被送入轨道。 在地面上，激光器阵列将共同形成一道超强光束，光束穿过大气，以数十吉瓦的功率射向太空中的“光帆”。
这项创新背后的想法，是以光束来驱动纳米飞行器的前进。这样产生的速度虽然不及光速，但也能达到其五分之一，约合每小时亿英里。这样的系统可以在一小时内抵达火星，几天内到达冥王星，一周内就可以追上并超过旅行者号探测器，并在仅二十年后到达半人马座阿尔法星系。重要的是，“星芯片”的轨迹可能包括“比邻星”，这颗位于半人马座阿尔法星宜居带的行星，与地球的大小类似。正是在今年，“突破摄星”与欧洲南方天文台携手合作，进一步探寻半人马座阿尔法星系的宜居行星。
目前看来，这些都可能成为现实。但我们也看到重大的挑战。吉瓦功率的激光器仅能提供几牛顿的推力，不过因为纳米飞行器因为只有几克重量，恰恰可以克服这个问题。但是工程方面的挑战是巨大的。纳米飞行器必须经受极限加速、极寒、真空和质子，以及与太空粉尘等垃圾的碰撞。另外，由于大气湍流，将一套总量吉瓦功率的激光组瞄准太阳帆，也是很困难的事情。
还有一些严峻的问题。如何让数百道激光穿过大气波动时聚合，如何推动纳米飞行器又不烧毁它们，如何让它们瞄准正确的方向？此外，我们还需要让纳米飞行器在冰冷的真空环境中工作二十年，这样它们才能将信号传回到四光年外的地球。然而这些都是工程设计要解决的问题，而工程挑战往往最终都会被解决。随着技术进步日趋成熟，我们可以展望更多令人兴奋的使命。如果“突破摄星”计划能传回毗邻星系中宜居星球的图像，这对人类的未来必将产生深远影响。
希望我已经解答了我演讲一开始所提出的问题。人类作为独立的物种，已经存在了大约二百万年。我们的文明始于约一万年前，其发展一直在稳步加速。如果人类想要延续下一个一百万年，我们就必须大胆前行，涉足无前人所及之处！
人类的大脑如何“返老还童”？试试新鲜血液


 斯坦福大学神经学教授、老年病研究专家

年轻的时候，你肯定没觉得自己有什么记忆上的问题，因为我们的大脑有很了不起的能力来存储信息。但年纪大了，记忆力就“不行了”。
从细胞的角度来分析，神经细胞一般来说没有办法再生。随着我们年老，你会流失一些死亡的、不再生的神经细胞，此外，我们脑子本身也在缩水，这些都会导致我们所碰到的老年性神经退化性等一些疾病。
但我们在对动物的研究当中，显示了一些“重返青春”的效果。
在我们实验当中，我们通过一种共生的实验，把年轻老鼠的血液注入到一只老的老鼠的身体里面，研究这到底会给老的老鼠带来一些什么样的不同。当然，大家最在乎的是对于功能性的表现和对于记忆力有没有影响。
而事实证明，老的老鼠被注入了年轻的血浆以后，它记忆力和学习能力都有了明显的提高。
于是我们提出一种假设：只要把我们的大脑放在或者是沉浸在更年轻的环境当中的时候，有了年轻的养分的时候就可以返老还童，其中一个关键的年轻的外在环境就是血液。
我们的目的是希望能够搞清楚，如何让人的大脑返老还童。我们要弄明白细胞之间沟通对话的密码，了解这背后的基因效果。这可能要花几年的时间，但是至少目前我们必须要保证我们在以上的这几个领域有所进展以后，才能够把它正式用到人体上面。
所以我们会继续一些实验，看通过这样的方式是不是能让受试的动物延长寿命，或者改善它的大脑能力。等确定安全，接下来才能够用到人体上面，然后用它来解决我们人类所碰到的神经性老化、退化的问题，比如说阿尔兹海默症等。
怎么分别人工智能？看它吃不吃川菜


中国科幻作家、第届雨果奖获得者郝景芳

怎么看一个人工智能是否能通过图灵测试？我们可以问它这三个问题。
问题一：如果哥伦布没有发现新大陆对中国哪个菜系影响最大？
这对于我们吃货界来讲不难回答。哥伦布如果没有在新大陆发现辣椒，中国没有引进，我们怎么吃川菜？所以肯定是对川菜影响最大。
这样一个跨界问题，它涉及到历史，也涉及到日常生活的常识，也涉及到饮食习惯，人工智能是答不出来的。
第二个测试题，她说没想到今天这么冷，她希望你如何回复？
如果是一个有一点暧昧的萌妹子，也许说这个话，是想让你把衣服给她，然后顺便抱抱。但如果面对刚正不阿的女上司，你再说我抱抱您吧，她肯定一个耳刮子就扇上来了。
这种问题，需要我们能够察言观色，能够体察对方、理解他人的心思才能够给出正确答案。人工智能也是不会做的。
第三个测试题，明年可以学英语，也可以学编程，你会选择学什么？为什么？
这也是没有正确答案的问题，因为实际上该学什么，要从你自身找答案，你要知道你是一个什么性格的人，你的梦想是什么，你未来的目标是什么，你想要达到目标要怎么做，根据你自己的自身情况来决定学什么。
人工智能它们不理解自己，它们没有这种元认知能力，他们并不能够为自己做决定，当你跟说下围棋，它不会说我不要下围棋，我今天想去看场电影，因为它并没有对于自我的了解、自我的认知。
所以我说这种能够从自己出发做决定的能力，也能够看得出来人工智能和人的区别。
人工智能未来怎么达到一个更高水平的智慧呢？就是更多地了解我们人自身，去理解我们人类自身的心智系统是怎么样的。
我觉得在未来，人工智能的下一步发展，要处理的就是综合的、多功能的、多能力的、多目标的任务的相互协调，多种价值观的相互协调。所以我们需要更多地去理解人类的大脑、理解我们人类的心智系统。
我觉得，人工智能对我们最大的威胁就在于，当我们过于依赖很多的数据系统以后，我们可能变得懒于思考、懒于自我反思，而让我们自己的智慧退化。这是对人类最大的威胁。
人工智能和人会走两条非常不一样的路，人工智能会做到许许多多我们人类做不到的事儿，会是我们的辅助、是我们的工具，而我们人类如果让自己的智能一直不断地向前进，就能和人工智能一起能携手同行。
当然，这次大会的亮点，还远远不止上面这些——


 突破摄星执行董事、前美国宇航局艾姆斯研究中心主任

 “在我们南半球可以看到的半人马，在这个星座当中有一个红矮星的卫星，差不多跟地球的大小一样，这可能是临近地球最可能有生命的一个星球，其他的信息我们目前掌握的还不足够，现在我们也还没有充分的理由可以证明我们能够移居到那里，但是这至少是离地球最近的、可能居住、可能移居的地方。我相信我们可以继续尝试回答这个重要问题：到底在外太空有没有生命存在。


姚期智中国科学院院士、量子计算专家、图灵奖获得者

我们已经进入一个能看到量子计算机将要做出来的时间段，我们可以把它叫做最后的一里路，但这会是一个非常艰难的，也是需要经过一段时间的最后一里路。量子计算和人工智能可以结合在一起。我们如果能够把量子计算用到人工智能里面，我们可能会比大自然更聪明。


网大为腾讯首席探索官

如果一种动物，既不是我们的食物又不是我们的宠物，基本上在这个世界上就快消失了。也许再过年，你再跟年轻人讲老虎的时候，孩子们其实就不知道什么是老虎了。每一个来到大会的人，都应该看到新科技对解决我们周遭的一些问题所能够带来的影响。我们不能总觉得这些问题虽然存在，但是不发生在我身上，或者别人可以解决这个问题。你的参与可以从先问正确的问题开始，到底世界上哪些问题让你非常困惑，因为当你问了问题以后，答案就在不远处。


 未来学家、解决世界性问题的黑科技发明家

我们解决了一些非常艰难的，原来是阻碍人类繁荣发展的技术性的问题，我们怎么样给这些人提供食物，怎么样来消除疾病，怎么样给他们住房、工作等等，这些问题我们都解决了，解决的方法就是发明新的技术，这也是我们今天存在的理由。我们要去发明一些新的、真正能够改变世界的技术。可能你发现可能解决十几亿人面临的问题，解决这样的问题比较困难，但是非常重要。


张康癌症研究科学家、加州大学圣地亚哥分校人类基因组医学研究所所长

这是非常紧迫的事情。在中国，当一个癌症病人进入医院，至少的病人都已经是晚期，也就是三期或者是四期。这些病人的生存率非常低，而且治疗的选择很少、治疗的成本非常高，如果能够早期诊断、早期治疗，好处就是非常明显的。我希望，在我们这一生当中能看到，人类可以活年。当然这个可能会导致其他社会的问题，比如是否要考虑把一些人送到火星或者月球当中。


 全球顶尖的科学、教育及专业出版机构施普林格·自然中国区科学总监

我需要研究点什么才能够在《自然》上发文章？答案是，你应该做那些自己特别愿意研究的事情，能够挖空心思去想的问题，能够解决问题的那些研究。我们应该去支持青年科学家，因为这些人是科学发现领域中最活跃的人，他们是最有好奇心的人群，我们应该去培养鼓励大家与生俱来的好奇心。
一顿信息量大餐吃完，也许你的大脑已经飞到宇宙尽头了。但大会想传递的，不仅仅是这些科学创想本身，还有一种我们作为人类，对科学、对地球、对自己这个物种的未来应该有的态度：去好奇，去问，去寻找答案，去改变世界。

本文来源于 腾讯大讲堂 微信公众号一、程序入口
要说清楚后面的一些实现需要完整地考虑整个框架体系，因此本节先对服务端的整个启动过程进行解析，同时探讨一些相关问题。
不得不说框架的代码质量还是挺高的，业界良心！
光看程序逻辑就比较清晰，如下代码，上来直接找到包下，程序，就是这么的简单直白，与优雅，这就是服务启动的入口：
 

   {

    
           
      
       
       
     
         {
         
    }
}
好，点击跳转进入方法，打开新世界的大门。
二、启动过程
服务的整个启动流程可概括如下，下面分点叙述。

三、加载配置文件
这个过程主要通过类来完成，通过读取配置文件，通过工具类读取{}{}{}{}，该文件包括了服务端配置、各个服务配置以及客户端连接器的配置。
配置管理类的封装也比较直观，代码如下：
   {

           
            
      
    
    若干配置项

             
               

        {
    
    }
    省略
}
类图如下

四、初始化
使用的日志框架是内部的 ， 原理上和 日志框架很相像，定义了个日志级别，种日志类型，分别如下：

  日志级别
 
    {
        
      

       {
         = 
    }

       {
         
    }
}


  日志类型
 
    {
      

      

       {
         = 
    }

       {
         
    }
}
 从名字也可以看出来是什么意思，默认配置也是通过读取配置文件来定义的，配置文件名为 ，这是写死在代码里面的，不可修改。

有个地方需要注意的是，还有一个重置日志级别，提供给管理平台使用。该日志级别：，作用是关闭日志不打印，它没有将其作为一个单独的日志级别，而是使用状态标记。

之前的文章中也提到了，有一个远程的日志服务中心，因此这里的即支持将日志输出到本地，也支持调用将日志打到远程，且两者可以同时使用。同时出于可靠策略，在远程写入多次失败的时候会自动转为输出本地。在实现上，当然是在本地内存中保存在一个缓冲队列，定期的批量再写到磁盘或远程啦。
另外，由于是服务端程序，会将标准输出重定向为文件，错误输出重定向到文件，另外默认初始化出几个常用的日志类，如： ， _， 代码是这样写的：
    {
          __ 
          __ 
}
五、 拉起运营服务
前面已经提到，另一个大重要的模块就是提供了一整套完备的运营服务，服务端除了拉取路由服务没有使用到之外，其他服务都有应用，代码实现上可以看到封装了很多的，其下则是使用了各个服务的远程代理对象，各个服务如下，

： 这个前面已经提到了，可以远程收集各个业务打印的远程日志，用于分析
：远程拉取业务服务的配置文件
：收集服务状态变更、异常信息以及业务自定义的异常信息等重要信息，然后对这些信息进行监控告警，比如上报连接数据库失败的信息
：用于上报业务一些特定的属性数据，比如内存大小、队列大小，然后进行监控
： 收集业务的心跳上报，服务版本号
：对业务之间调用的流量、平均耗时、异常率、超时率进行统计监控

另外还有一个发布服务：存放和获取业务的发布包，给进行业务的发布，这是由主控发起的服务，这里不涉及。
还是直接看图比较清晰：

可能这里你就会产生一个疑问， 为什么要分成这么多的服务而不是集中起来呢？
我的理解是： 首先，功能上各个运营服务是不一样的； 其次，怎么让这些服务不和处理客户端请求和业务处理的代码解构呢？当然是单独开启一个周期执行的线程统一管理啦！此时，可想而知每个服务需要执行的周期不尽相同，另一方面，各个服务需要的机器资源也是有差异的，当然是分开部署好些。
以上大概就是开发运营一体化理念的吧。
当然，详细探究以上几个涉及监控上报的服务设计实现还是有必要的，后面再具体提及。
六、 容器初始化
经过前面的一系列初始化工作，当前环境已经具备了配置信息、日志记录、运营服务了，此时就应该将业务侧的代码和资源加载进来了，这个实现采用了容器的概念，容器初始化所需的配置信息在 文件读取。

如图，即为装载类资源的容器，的具体执行执行过程总结如下：
构建一个类加载器，加载目录下的资源文件读取文件，从中加载，加载管理命令

加载业务，并设置最大负载，线程池大小，队列大小，触发监听器的
取得支持的协议之后可以考虑扩展到其他协议的所有信息放入 存储接口方法名对应方法参数和返回值
触发监听器执行方法

七、初始化网络线程模型
这个就是上一节提到的多线程 模型啦，下节将对如何处理客户端请求做详细的说明，其中，提供了一个对连接上下文的封装和抽象，提供读写，后面启动的即是对的回收管理。
具体可看下图：

另外值得注意的是，怎么实现多协议的支持呢？
在代码实现上，可以看到它分别启动了四个服务器：

    
  
   
 
     {
             
     
            
     

             
    

             
    
}
 这就厉害了我的哥，其中第一个就是监听处理走协议的客户端请求，下面的传输层其实是可靠的传输，第二个绑定在上的用于处理和节点交互的管理命令；
另外两个则用于支持协议的请求，包括和两种协议，在实现上只需要绑定对应的编解码器就可以了，后文重点关注协议。
还有一个值得注意的地方，目前去理解当前这样的实现，发现多个都会对同一个监听端口复用，也就是说在服务接收到请求的时候是没有办法直接区分开是那个的请求的，只有在后面的业务线程处理时才会分发到各个服务上处理。这里也就是为什么之后看到对于服务连接数的管理，目前是按整个服务的总量来做的， 具体实现下节再详细展开
八、启动管理器
管理器实现类为，它可提供的注册和回收，同时还可以绑定监听器来实现一些功能逻辑，目前主要了解其完成的两个工作：

管理，定期回收过期连接
注册监听器记录连接数，当连接总数大于整个服务的总量限制关闭该创建的连接

九、 
终于讲完啦，最后当然不能忘记服务退出时候的资源释放，这部分功能可以通过注册 的  加以实现，主要是关闭管理器和容器，代码可以这样写：
   {
          {

                 {
                       
                      =  {
                        
                    }
                      =  {
                        
                    }

                       

                       
                      =  {
                        
                    }
                }    {
                         
                }

        }
    }
感谢阅读，有错误之处还请不吝赐教。
 这一节的理解要特别感谢一下浩哥，少走了不少弯路大家好，本篇文章为大家讲解腾讯云主机上  爬虫框架的安装。

首先，在此附上项目的地址，以及官方文档
 
官方文档
安装流程

首先确保你已经安装了 ，若没有安装，请参照此文

 是一个基于  的服务器端  。它全面支持而不需浏览器支持，其快速、原生支持各种标准： 处理、 选择器、、 和 。  可以用于页面自动化、网络监测、网页截屏以及无界面测试等。
安装方式
以上附有官方安装方式，如果你是 ，还可以使用如下命令
   

直接运行安装即可
  
测试
安装完成之后，如果没有任何的报错，那就
命令行输入
 
然后浏览器访问 
观察一下效果，如果可以正常出现  的页面，那证明一切
在此附图一张，这是我写了几个爬虫之后的界面。


相关推荐腾讯云主机环境安装爬虫框架过程及常见错误腾讯存储与免费体验导语
随着 大版本的 ，许多新的特性也横空出世，其中不乏一些让众多用户期待已久的特性，如同步复制多同步备机， 支持  、，并行查询更是千呼万唤始出来。除了新的特性之外，还对性能以及锁做了很多优化，这些优化在大并发  的场景表现尤为突出。
、并行查询
 的并行查询是通过在执行过程中，根据并行执行计划，启动多个 多进程 同时计算，并将结果汇总的方式提升查询性能。
目前支持的并行算子有：     以及简单的 。
虽然支持了并行，但是也并不是所有查询都会并行。并行需要满足一个最基本的条件，就是表大小一定要大于 ___全局参数，可设置，这样才有可能进行并行查询。
满足了最基本的条件之后，就需要根据表大小以及 ___ 计算出并行查询过程中需要的  个数：

然后生成并行的可执行路径，并计算相关的代价。可执行路径的代价通常由三部分组成：启动代价， 代价， 代价。非并行的执行路径代价：

并行执行由于会启动多个  进行计算，所以在  上的消耗会由多个  进行均摊；但是由于需要启动额外进程，所以也会需要额外的代价，并行执行路径的代价：

优化器会对各个可执行路径的代价进行比较，选择代价最小的路径；也就是说，虽然生成了并行的可执行路径，但是如果代价大于非并行的路径，也不会走并行。
以  为例，看一下并行查询的流程：根据并行查询  的个数对表进行划分按页划分，每一个  负责自己的那部分数据页，读取数据并进行条件判断，将符合结果的数据放到一个共享队列中，由一个   进行数据的收集与返回。
 
 的并行到底会对性能带来多大的提升呢？
这里使用了业界  标准  进行了相关测试，测试的机型为 ， 代码为 ， 数据量为 ：

从测试结果可以看出，对某些 ，如  等，并行性能提升的比较明显；但是对于另外一些，如  等，并行和非并行的性能相差无几。并行并不是适用于所有场景，只是对那些适用的场景会提升查询性能。
、大并发 
 对锁进行了优化，使其在大并发的场景下拥有更好的扩展性。这里主要介绍和，并以和为例进行对比说明。



全局锁
获取锁的函数
类型






_



 
_ _



在  中，每一个对数据库的修改操作，都需要写一个 。在的版本中，写  需要以排他形式获取  这个全局锁，然后写入  ，释放锁，再由其他进程获取锁进行操作。由于每个进程都是获取排它锁，导致写  的过程是串行进行的。在大并发写的场景下，对单一锁的竞争比较激烈，影响整体性能。

为了有效降低对  这个全局锁的竞争，版本中对  进行了  ，将其划分成多个分区锁。每个进程根据自己的  选取一个分区锁，然后在  中为自己预留一个空位，再进行写入，实现了多个进程并行写  。其实并行写  的优化在  版本中就已经有了

在  中，每一个 、 操作都需要获取一个全局快照  来进行数据的可见性判断  ，每个获取快照的动作都需要以共享形式获取  。在每个事务结束的时候，都需要清除自己的事务信息，目的是为了保证其他事务可以正确的获取到快照信息。由于这个操作需要进行修改操作，所以以排他形式获得  。
以  为例，看一下锁竞争关系：
获取快照的过程是获取共享锁，所以所有需要获取快照进行查询的进程可以进行并发操作，只会影响到需要进行事务提交或者回滚的进程。

事务提交或者回滚的时候需要获取排它锁，所有其他需要获取快照或者结束事务的进程都需要进行阻塞，等待当前锁释放，这里对锁的竞争比较激烈，影响到并发。

 对这部分进行了优化，当一个进程获取排它锁进行事务提交或者回滚时，其他需要在同一时刻进行事务处理的进程，组成一个等待队列，由队列头去获取锁。当队列头获取锁之后，为队列中所有成员完成事务处理，并唤醒成员。这种方式有效地将多进程对锁的竞争降低了，减少了锁冲突，提升了扩展性。

 做了这么多优化，到底性能如何？
这里使用了业界  标准  进行了相关测试，测试的机型分别为 ， ，   ， 。 数据量为  仓库，，并发 。测试结果如图：


从图中可以看出， 的性能要明显好于 ，尤其是在  的  的机器上， 高达  万，一台机器就可以满足大多数的  业务需求。从  使用率也可以看出， 的优化提升了并发能力，使得资源得到更充分的利用。
除了  以外，还在  和   上面测试了  的  ，结果如图：

  已经可以很好地支持大并发  查询，甚至单机就可以满足大部分  业务。并且现在已经有了最基本的并行查询，后续版本也会对并行查询进行增强和优化。相信在不久的未来， 会成为一个能同时承载   的强大数据库。介绍
  内核网卡接口，是中用于与内核通信的模块，在主要的业务流程中可能并不需要，但在部分场景下，如服务器所有网卡都被接管用于业务或服务器本身只有单网卡，其他如登录管理等数据等就必须开启来与内核进行数据交互。
配置
因为开启将对收到所有的数据包按转发策略进行检查，会对性能造成一定的影响，所以在中默认配置关闭了选项，如有需要可以在控制文件中修改配置开启并设置转发规则。

=
=
_=
_=
参数说明：

 
参数配置是否开启，设置为表示开启，设置为表示关闭，默认值为


参数和__参数配合使用，参数可选或
当参数设置为时，默认所有数据包都交由处理，只将__参数指定的端口的数据包通过转发至系统内核。
当参数设置为时，默认素有的数据包都通过转发至系统内核，只将__参数指定的端口号的数据包交由处理。

__


指定处理的端口号，如有多个端口号用逗号分隔，多个相连端口号也可以同时设置，如
系统配置
当开启了配置的应用程序启动后，需在系统中设置虚拟网络接口并设置地址、掩码、地址、路由表等信息才能正常完成和内核间的数据交互。
【注意】 如果系统中没有额外的管理网卡，配置虚拟网卡地址的操作需通过执行脚本等方式与应用程序一同启动，示例如下。
  _  
 
            
       
               
注意事项：
创建的虚拟网卡和中的用户态协议栈公用同一个网卡收发数据，所以虚拟网卡的网络配置要跟协议的配置相同。
由于不支持设置地址，是直接获取物理网卡的地址，并无法设置创建的虚拟网卡的地址，所以在使用  设置虚拟网卡的地址时需要显示指定   为物理网卡的实际地址，防止在部分内核中默认是随机值导致无法正常使用。
题图
题图为官方文档中的示意图        导语
本文主要是对 下中内容下移或下移的问题适配的一个总结。内容包括五个部分：问题的原因分析、属性的计算方式、什么情况下的会发生内容下移、有哪些解决方法、解决这个问题时遇到的另外一个小问题。
一、 下中内容下移或下移的原因分析
问题如下图所示：

 原因分析
原因是 中的属性被废弃了，所以当超出安全区域时系统自动调整了值，进而影响值，在 中决定的内容与边缘距离的是属性，而不是。的计算方式见本文第二部分内容。因为系统对值进行了调整，所以导致的内容到边缘的距离发生了变化，导致下移了高度或高度。
如果你的中使用的是自定义的，隐藏掉系统的，并且的为 开始，那么系统会自动调整值为，如果使用了系统的，那么值为，如果也使用了系统的，那么值为。关于什么情况下会发生内容下移的问题，本文第三部分有介绍。
 安全区域的概念
系统自动调整内容偏移量，是根据安全区域来调整的。安全区域是 新提出的，如下图所示：

安全区域帮助我们将放置在整个屏幕的可视的部分。即使把设置为透明的，系统也认为安全区域是从的开始，保证不被系统的状态栏、或导航栏覆盖。可以使用去扩展安全区域使它包括自定义的在界面上。每个都可以改变安全区域嵌入的大小，也可以。
属性反映了一个距离该的安全区域的边距。对于一个的根视图而言，值包括了被和其他可视的覆盖的区域和其他通过自定义的值。层次中的其它，值反映了该被覆盖的部分。如果一个全部在它父视图的安全区域内，则值为。
二、 属性的计算方式
首先看在新增的两个属性： 和 。
     
  

  
表示偏移了多少；是系统计算得来的，计算方式由决定。有以下几种计算方式：

：如果在一个 = 的上，并且这个包含在一个 中，这种情况下会设置在  上  =   不管是否滚动。其他情况下与相同

 在可滚动方向上 =   ，在不可滚动方向上 = ；依赖于和   = ，默认为，所以大多数情况下，计算方式还是 =   

  = 

  =   


当设置为的时候，值不受值的影响。
三、什么情况下的会发生上述问题
如果设置了 = ，那么不会发生问题，一直都是由系统来调整内容的偏移量。
接下来排查下自己的项目中哪些页面会发生以上问题。
当的超出安全区域范围时，系统会自动调整内容的位置，值会不为，于是影响的值，于是影响的内容展示，导致的下移了的距离。值为时，是正常的情况。
需要了解每个页面的结构，看是否被系统的或覆盖，如果被覆盖的话，则会发生下移。也可以通过的值来确认是因为安全区域的问题导致的内容下移。
如下代码片段，可以看出系统对向下调整了的距离，因为超出了安全区域范围，被覆盖。
 {   }
 {   }
 {   }
四、这个问题的解决方法有哪些？
 重新设置的值，来抵消掉值，因为内容偏移量 =   ；
如果之前自己设置了值为现在系统又设置了值为，那么内容下移了，这种情况下，可以设置值为，也就是遵从系统的设置了。
 设置的属性
如果不需要系统为你设置边缘距离，可以做以下设置：
 如果的系统是，会有这样一个宏定义“ ____  ”；如果系统版本低于则没有这个宏定义
 ____   
   {
     = 
}

属性也是用来取代属性的，推荐使用这种方式。
 通过设置 新增的属性；

 之前，大家是通过将的属性设置为，来禁止系统对调整的。如果还是想从级别解决问题，那么可以通过设置的属性，如果值为，那么设置属性值为，则不会对值产生影响，内容不会显示异常。这里需要注意的是是的属性，要知道的值是由哪个引起的，可能是由自己的调整的，可能是调整的。是由哪个调整的，则设置哪个的值来抵消掉值。
五、遇到的另外一个与安全区域无关的内容下移的问题
我的作品页面的下移了约，这里是否跟安全区域有关呢？

查了下页面结构，的父视图的在的之下，在父视图的安全区域内，打印出来的值也是，，，所以不是安全区域导致的内容下移。
经过查看代码，发现的类型，默认开头和结尾是有间距的，不需要这个间距的话，可以通过实现方法返回一个较小值：和返回一个来去除头部的留白，底部同理。
 上发生顶部有留白，原因是代码中只实现了方法，而没有实现方法。那样写是不规范的，只实现高度，而没有实现，但代码这样写在 之前是没有问题的， 之后应该是由于开启了估算行高机制引起了。添加上方法后，问题就解决了。或者添加以下代码关闭估算行高，问题也得到解决。
 = 
 = 
 =  论坛的 _ 文件中有一个_ 配置，打开的时候可以对抗部分攻击，主要对抗策略是： 不启用  刷新限制 代理服务器访问限制 页面二次请求 验证问答 。
但是在没有收到攻击的时候如果默认开启这个对抗策略，一方面用户体验会受损，另一方面和的通讯会被阻断，很多管理操作都通知不到。那有没有办法只在收到攻击的时候开启这个策略，在攻击结束的时候关闭掉这个策略呢？我们可以写这样一个脚本：
 _




配置文件路径
_=在这里填写你自己的路径_
日志文件路径
_=在这里填写你自己的日志路径_
    _    _ 
配置项匹配模式
=\_\\\\\=\
检查当前对抗是否打开，并记录到_变量中
   \ _  _= _= 

如果分钟负载大于立刻开启，否则如果分钟负载回落到以下则停止
=` |  { }`

   =   _ =    
    分钟负载过高，打开对抗
      \\|\\\ _
     \ \   _
   =   _ =    
    分钟平均负载回落，关闭对抗
      \\|\\\ _
     \ \   _

这样在系统负载过高的时候就可以自动打开对抗策略，在系统负载降低的时候又可以及时关闭对抗策略降低影响了。最后可以把上面的脚本加入到中定时运行监测：
 
     你的脚本路径_    很多人都问过我，咖啡你的主题模板到底怎么改的。我就和那些开发者交流了下。的改造非常简单。今天就免费给大家献上改造方案。
好了，直接进入正题！模板文件规范自己改，不多说。
模板目录下的文件打开：
比如我的模板文件是

这里就加上这句：
_______
_这个改成你的模板变量 ←这句意思是替换内容页内容的调用正则 具体不太懂。。。
然后拉到随便一个你喜欢的地方插进去= =

这是去除  样式 和替换  的标签，就是直接规范化了  格式。
 __{
     
     = 
     = =|\||||||\
     =  =
     = _  
    _ =  =\\
    _ =  
    _ = __ _  
     = _
     
}
已经在应用中心发布了插件：=
原文地址在：
欢迎关注下我的博客  爱好者

相关推荐
利用搭建数据科学博客在   服务器上部署  博客王亮，腾讯云高级工程师。 年加入腾讯，曾负责腾讯社交产品  图片类业务，动态加速业务的运维工作。现负责数据库产品的解决方案工作。

某国内大型游戏开发商有超过  个  部署  实例，存储总量达 。因业务需要，将全部实例迁移到  腾讯云   。腾讯云数据库团队为保证业务迁移顺利进行，对迁移流程，工具进行了前期的调查研究，并对过程中发现的  大问题进行及时解决，以下是实际迁移经验分享：
一    测试用例过程
目前开发商上云外部  迁移到 提供多种方案，其中开发商的  实例有外网  的可以直接使用腾讯云数据库迁移工具完成迁移其他的迁移方法参见  链接 本次迁移任务中该开发商的所有  实例均有外网代理  供使用，故直接选用迁移工具完成数据导入。
迁移工具的基本原理：通过待迁移实例提供的高权限帐号获取源实例基本的  实例配置，并同步到目标  实例；通过  直接将源实例导出传输到  实例后导入；源数据库实例和目标  建立主从关系同步新数据。其中  实例与源  之间通过  方式以一台带外网的服务器为中转发起通信。
    迁移工具基本功能
在  腾讯云数据库控制台页面 根据引导建立迁移任务；在后台管理页面观察迁移任务后台日志等。
任务开始运行后检测代理机器流量变化， 的写入等数据展示

知识点：如何为测试数据库产生较大的数据量。这里推荐一个工具 __。产生测试数据并导入到  的过程如下：

__   \
   
 – – – “    \
  _ \
    \
    \
=  =”
   {} 
         
      
       
      
      –          _   
         

后台与腾讯云管理台查看本次测试任务，迁移成功完成。
    主从以及从机和  建立主从的同步
由于本次迁移的开发商将使用他们自建  的从机向  迁移数据，简单关系如下图，之前没有使用迁移工具进行过类似操作，故进行本次测试。知识点：如何配置  的主从关系。测试的  主从的配置如下：主 
_ = 
_ = 
_ = 
___ = 
后台与腾讯云管理台查看本次测试任务，迁移成功完成。
    多实例较大  并发同步
开发商在经过相关测试后，一期计划  个实例并发迁移到 ，每天总共产生约  的 。由于之前迁移工具没有大并发使用，且单日有较大数据更新，故提前测试用户场景。测试的基本架构如下图：在一个服务器上开启  个  实例映射到不同端口， 个  实例同时和  个  实例建立主从，并发起迁移任务。知识点：如何在一台服务器上创建多个  实例？这里使用的  自带的 _ 工具，其实这只是一个  脚本，开启多实例配置如下可以视内存大小，开多个  的配置项：
_
 = _
 = 
 =  
 = 


 = 
=
=
=
_ =  
_ = 
_ = 
__=
___ = 

=
 = 
_=____ 


 = 
=
=
=
_ = 
_ = 
_ = 
__=
___ = 
 = 
=

_=____





然后使用 _   启动配置项里面的对应数量实例即可。启动多个  实例如图：通过定时  对应数据库实例的数据，产生较大量的 ，单次  产生 ，每  小时执行一次，每天产生 =简单代码如下：


_=` `
_=
_=`  `

   {}


_=`  `
 {_}      _  _
 {_}  {}   _
  {}  {}     ={_}
_=`  `
 {_}  {}   _

使用  数据库迁移工具 建立  个迁移任务，控制台和后台检查均迁移成功：同时为了检验大量  情况下数据完整性，写了简单脚本定时检查数据是否有更新，脚本如下：这里经过测试发现可以通过广州跳板机直接连接  实例的 ，故直接在广州跳板机脚本拉取  更新数据，同时对比  实例数据，写入日志


_=
_=`  `
  |   


=`  |     { }`
=`  |     { }`
=`  |     { }`
_=`  {} {}  {}       \ |   |     { }`

 {_}      {} _
 {_}    _

  _  _ 

 {_}  

 {_}   



通过校验日志可以看到，数据更新均成功完成。
二    开发商迁移测试数据记录
以上我方内部测试完成后，开发商自行进行了  次迁移，相关数据如下：
某次迁移的带宽表现。由于开发商出口带宽只有约 ，经过测试发现迁移瓶颈主要出现在带宽限制上。实际并发时带宽大小待二期迁移时确认。
三遇到的问题

首次创建主从无法连接源数据库现象：如图所示，每次建任务后总提示源数据库无法连接’      分析解决：由于迁移工具本质是  代理经过  通过外网和  实例相连， 的代理系统时间和  外网机器有差异，同时  开启连接重用，导致建立连接时前后时间不一致，系统认为为异常包，丢弃，连接失败。直接修改  服务器的内核参数，即 _ =  和 __ =  即可

跨版本迁移的存储过程迁移失败现象：如图所示，开发商在迁移过程中出现  表无法迁移的现象’        解决：经  开发同事确认跨版本迁移的  表因字段定义不同存在异常，发布版本跳过  表解决。

迁移测试中创建新数据库导致  导入失败现象：迁移任务出现错误，无法迁移存储过程， 追加失败 ‘  ‘’ 解决：原因为本次迁移选定了只迁移某个数据库，迁移过程中新建了一个数据库，并开启 ，导致  拉到的  有新数据库信息，和迁移数据库不匹配。解决方法为迁移过程不要出现  操作。


四    总结
凡事预则立不预则废。正是因为客户在迁移前我们有多项功能测试，性能测试和边界条件测试的预备，使得在正式数据迁移时未出现数据不一致、现网运营切换故障等任何异常情况。为现网大规模的数据库实例迁移积累了经验。截止目前，客户逾  个  实例已顺利迁移到  腾讯云  并开启现网运营。基于这样的经验，我们有能力也有信心为腾讯云用户提供更加优质高效的数据存储迁移服务。

相关推荐
 数据迁移 数据离线迁移作者：孙浩峰

年月日，一个风和日丽的日子，笔者来到了位于深圳南山区的腾讯大厦，但这次，笔者并不是为采访而来，而是为了参加腾讯云云端视频应用开发工程师中级课程培训。据悉，这也是腾讯云认证课程的首期班。
实际上，收到腾讯云关于认证课程首期班的邀请时，笔者的内心是抗拒的，虽然十几年前笔者也是一个勤奋的码农，但经过十几年的岁月的折磨，那些编程能力、编程技巧早已经交还给老师了，因此，心中忐忑不安，生怕跟不上课程，在班中掉队，给媒体同行们抹黑，但左思右想，还是觉得应该去一趟，一是因为自己长期跟踪腾讯云，多了解一下腾讯云在视频方面的开发过程多少能够帮助笔者更深入的了解腾讯云，其次，做码农一直是笔者心中的梦想，虽然阴错阳差没有如愿，但参加这样的培训班也多少能满足一下自己曾经的梦想，于是， 笔者“义无反顾”的踏上了腾讯云”求学“之旅。
三天学习 收获满满
当踏入教室的时候，教室里已经坐满了同学，令笔者略感欣慰的是，笔者也许并不是来自外地的唯一一个学员，据腾讯云运营总经理谭茂介绍，班中有一半的同学是来自深圳以外的地区，这颇令笔者感到意外，因为学费中并不包括差旅和住宿费，这些外地来参加学习的同学们对腾讯云一定都是“真爱“。而随着第一位王宇讲师的授课正式开始，腾讯云云端视频应用开发工程师中级课程正式拉开了帷幕，在三天的课程中，腾讯云共派出了六位经验丰富的讲师为学员授课，课程强调理论和实际操作相结合，大部分实际操作都由讲师一步一步带领学员进行操作，学员有了问题，可以随时向讲师求助，因此，即使像笔者这样的”零基础“学员，竟然也能跟上课程的进度。
三天的课程安排如下：１一、直播基本原理讲解二、客户端部署及原理讲解三、服务端部署及原理讲解四、端部署及原理讲解五、高阶功能讲解六、场景应用与解决方案讲解  
而通过三天的课程，笔者从一个对视频直播技术和开发不甚了解的菜鸟，成为了一个基本了解视频直播平台从设计到实现的全过程，并简单了解客户端开发、直播后台设计与实现、直播消息互动、安全与运营监管等内容的一个准视频直播开发者，并能基于腾讯云直播平台搭建出一个简单的直播系统，成就感真是满满的下图即是笔者自己开发的直播 ，图中可以看到这个可以实现一些基本的直播功能！ 
精致课程 亮点多多
三天的课程时间很短，但笔者在此次腾讯云的课程中，收获了知识，结交了朋友，同时也圆了自己一个小小的梦想， 结合三天课程的情况，笔者认为腾讯云认证课程具有主要具有以下几个特点：
首先，腾讯云认证课程非常重视动手实践与理论的结合，不仅仅是学习视频直播的相关理论，更重要的是教授如何将这些理论在实践中灵活运用，并在不同的实际应用场景如何实现。
其次，与其他培训采用虚拟的实验环境不同，腾讯云认证课程采用的是真正的实际开发环境，学员通过课程的学习，可以直接将所学应用到自己的实际生产环境中，从而大幅提升从学习到应用的效率。
第三，腾讯云认证课程的讲师都是来自腾讯的资深开发工程师，他们具有高超的开发技巧和丰富的开发经验，学员如果在课程中遇到相关问题，可以得到讲师快速和专业的回答，使学员茅塞顿开，提升学习效率。
第四，腾讯云认证课程为学员提供了丰富的源代码、完整的以及实验手册，可以帮助学员在课程结束后，更好的消化吸收课程的内容，掌握视频直播开发的相关技术，快速实现视频直播平台的商用。
最后，需要提醒大家的注意的是：

在课程开始之前，做好相关准备工作，建议准备苹果笔记本，并安装好最新版本。如果习惯采用系统，建议先与课程负责人联系，取得 的打包安装包，并安装 ，并最好携带一部安卓系统的手机。
在课程中，因为课程内容相对紧凑，要尽量保持和讲师的讲解同步，否则可能会漏掉重要的信息，导致某些开发工作无法成功。
虽说像笔者这样的“菜鸟”也能顺利毕业，但还是建议具备一定的开发经验。

此外，据笔者了解，除了认证课程，腾讯云一站式培训认证体系还包括“专项课程”，“合作伙伴培训计划”这也是腾讯首度系统输出技术培训，将多年积淀的技术能力提供给业内广大开发者，为行业输送更多专业人才。其中“专项课程”中的特训营，是专为企业高端技术人才定制的系列课程，腾讯将携手腾讯技术专家、知名企业技术高管等行业技术精英，共同培养具备技术思维、产品思维、管理思维，创新思维管理人才。目前已经在苏州、合肥、西安等地开班。在自行推出各类培训认证课程的同时，腾讯云还将邀请更多的合作伙伴加入培训认证的计划，合作伙伴可以和腾讯云一起合作开发认证课程，共同打造认证生态。有兴趣的朋友可以点击链接了解培训课程详情。

相关推荐
腾讯云认证课程企业
互联网企业的敏捷开发之道作者 | 王拥军编辑 | 迷鹿

王拥军，毕业于天津大学计算机系，拥有从计算机硬件到操作系统安全、从后台服务器到客户端的全平台工作经历。目前在腾讯自选股从事互联网证券软件研发管理。对上市公司及创业团队的产品、文化、经营等具有独到的见解。
个人公众号“水滴的声音”，专注企业文化、团队管理。

导语
作为团队领导真正应该关注的是什么？有哪些问题仅仅是领导者惰性的体现？为什么董明珠说“没人恨说明你不是个完人”？
背景
最近和一个同事交流，我和他都是组长，马上面临的问题就是：这次谁来“背”二星？
老话说得好：当局者迷，旁观者清。他给我讲了半天，我很明显的感觉到他对某个员工的表现是不满意的，所以显然，我对他说：“当然要给这位代号打二星了。”
然而，对方对我说：“不太好吧？这个人对我很重要啊，给他打二星，那他的工作效率更差了。搞不好会离职的。”
我说：“那你觉得你们组还有谁比较适合给二星？”
他想了想：“给另外一个吧代号。他做的事情比较。给他二星他也不会说什么。”
他们组的情况我是大概清楚地：“这个理由不太合适吧？的级别本身就比低很多。作为的级别，做这种相对的事情，本身是符合预期的。”
“我也觉得有点不太公平，那怎么办？目前的情况，让背二星，影响不大，下次补偿他就好了。如果给，影响太大。”
“这倒也是。”
这个事情，我们又交流了很久，从各个方面都了一下，后来刚好周末上了一门《关键思考》的培训课程，大有收获。——此处为真心话，非软文广告，看完本文就知道了。
分析
、“背二星”，这个“背”字，首先就说明这个行为的出发点本身就是错误的。如果没有其它方面的顾虑，显然，谁表现好谁表现差，作为领导，自己心里是清楚的。所以，如果严格按照公平公正的方案去打分，问题是非常简单的。
、人分三六九等，法律面前人人平等之所以困难重重，就是因为每个人的重要性不同。同样的，一个团队内有级别高的，有级别低的。级别高的人做起事情来让领导省心，久而久之，作为团队领导，慢慢习惯于倚重级别高的人。于是，问题就产生了。突然这些被倚重的人，不再那么努力了，作为领导，却又舍不得甚至不敢动这些人。
为什么不敢动这些人？
本来他们就不积极了，给个二星，岂不是更不爽了？不爽还不打紧，万一辞职了怎么办？
这句话看似是的，其实其中有几个“隐含前提”。
、给二星一定会导致不爽。
、不爽一定会导致不积极。
、他们不积极会影响团队业绩。
、他们辞职是坏事，甚至是团队不可承受的。
更进一步分析，其实还有几个言外之意。
、不给二星他们就不会不爽。
、他们只要不是不爽，就会积极干活。
“不能打二星”的坏处
这下子问题就好办了，我们第一步，先来“拆柱子”支撑“不能打二星”的依据。
、给二星一定会导致不爽么？
这个几乎是一定的，没有人拿了二星还会很爽。但是，会不爽到何种程度？会延续多久？
任何人受到惩罚都会不爽，但是，如果受惩罚的人很明确知道自己是因何受到的惩罚，那么，他的不爽的痛苦程度和延续时间会大幅降低。
、不爽一定会导致不积极么？
从团队制度的逻辑，这个问题应该是相反的。
打分行为是对之前事实行为的总结。员工的工作态度和表现在前，打分在后。而不是打分在前，工作态度在后。
当然，诚如上述所讲，打分行为一定会对后续的工作态度和工作表现有所影响，这也是打分的目的所在。
法律和纪律，强调的是：如果你不想被惩罚，你不想不爽，那就不要不积极。
如果有人明知自己错了，甚至受到了惩罚，依然保持自己的消极和抵触，甚至变本加厉，那么，这些人，要么是对整个规则本身的质疑和不屑，要么是对自己地位的不清醒认识。
这些眼里没有团队纪律，甚至自认为自己的身份应该受到特殊对待的行为，对团队来讲，是最为严重的隐患。
至于是否需要特殊对待，下边统一论述。毕竟，无论喜欢不喜欢，确实是客观存在的事实。
、他们不积极会影响团队业绩。
正常来说，如果所有人都不积极，一定会影响团队业绩。那么，某个些人不积极，一定会影响团队业绩么？
这个就体现出管理者平时的统筹安排能力了。
如果团队内部的工作没有任何备选或预案，别说有人主动不积极工作了，万一有人生了病，确实无法工作，团队的业绩就必然会受到影响，这只能说明工作的安排本身是有严重漏洞的。
所以，这一点，就看领导自己给自己刨了多少坑。
、他们辞职一定是坏事么？
核心员工辞职，当然会对团队有所影响。首先需要找个人接替他手里的活儿，其次会对其他同事造成心理影响。
如果他手里的活儿领导自己能够撑得住，或者本就有预案，甚至在外边早就面试好了一个更牛逼的哥们儿等着接替，这还是坏事么？
表现不好的同事离职，如果解释清楚，对其他同事来讲，只会是好的影响，除非其他同事也都一样是些混日子的人——做领导做到这个地步，自己也该走人了！
、不给二星他们就不会不爽么？
他们表现差的原因何在？一定是遇到了某些问题。如果这些问题没有解决，给个三星，他们一样会继续不爽继续消极下去。
们不爽，要么是待遇问题，要么是职位或级别问题，这些问题，如果领导自己无能为力，就算给个五星，们依然会不爽。
“背着五星”离职，这种事情一定是有的吧？其他同事会作何感想呢？更何况还是表现不够好的人！
、他们只要不是不爽，就会卖力干活么？
如同上一条，就算用五星让他们爽一把，核心诉求没有解决，该怎样还会怎样。
“不能打二星”的好处
好了，“不能打二星”的理由基本上都拆完了。下边，讨论下打二星的好处。
首先一点，坦白的讲，打二星之后对该员工工作积极性以及离职意愿的影响，到底是负面居多还是正面居多，很难说。因为取决的因素很多，不仅仅是目前团队和员工本人，还涉及到外部团队是否挖人，等等。
但是，有一点是毋庸置疑的：给表现不好的人打二星，对团队其他人，对整个团队，都是有巨大好处的！
、表现不好被打二星，那么，其他员工都会避免受到这个惩罚。
如果表现不好也不会打二星，那大家全都凑合着得了！反正不会打二星，我也不求五星。
、表现不好被打二星，是对那些三星员工的激励。
我比他表现好，他拿三星，我怎么着也得四星吧？
如果表现不好也拿三星，长期会导致大家对“三星”有错误的认知，以为拿了三星不过如此，稍微表现好一点点就要拿五星。
、如果被打二星的人实在不爽，领导也说服不了他，于是离职了，那就太好了，可以招聘个更牛逼的人进来。
长此以往，团队的事情非但不会越来越没有人干，反而会越来越多牛逼的人争着干活。
以上是站在团队的立场上，其次，站在个人的立场上，对被打二星的人，也是有极大好处。
、发展遇到瓶颈而离职，对于员工个人，也是好事情。
如果在当前团队遇到发展瓶颈，短期内团队又无法提供机会，因此而整天浑浑噩噩得过且过，此时出于领导的恩情留下来，对员工个人，真的好么？
到外边展翅高飞，还是被人保护着堕落下去，到底哪个才是好的？
更何况，所谓的“瓶颈”，只是方向和欲望的不同罢了。任何一个岗位，都能做到牛逼的不得了的地步！
换个环境，大部分人，都能够变得主动、积极。这一点，笔者自己也是有亲身感受。
我很感激上一家公司领导没有裁掉我，但坦白讲，我无论如何都不会再选他做我的领导。
我跟着领导，不是为了安安稳稳领工资，而是为了做些更牛逼的事情。
、如果工作不积极不会受到惩罚，这是在培养违背社会发展方向的价值观。无论对哪个人，这种价值观都是相当有害的。
、如果工作不积极不会受到惩罚，那么，长期下去，这个人整个就废掉了。一旦有一天整个团队完蛋了，这个人已经形成了不良的习惯，谁还会要他？
评星技巧
总结以上“关键思考”，其实是动用了两个技巧。
、正面不行，就从反面。
许多事情就是这样，如果一直想着“为什么我要给这个员工打二星？”往往答案是不稳定的。
因为，作为一个团队的领导，可能自己是有办法让其他人背这个二星的，甚至，是有办法让自己团队所有人都不背二星的。
这个时候，不妨站在对立面考虑一下：“为什么我不能给他二星？”
结果发现，所有支持“不能给他二星”的理由，都是自己的杞人忧天。
、转移关注点。从关注二星到关注团队氛围；从关注某个员工转移到关注整个团队；从关注稳定性到关注业绩；从关注眼前到关注长远。
当关注点一直保持在“如何把上级压下来的二星消化掉”的时候，领导自己是被动的，而不是主动的；相反，当团队领导关注的是整个团队的氛围，那么，二星就不再是上级压下来的任务，而是便利自己的管理工具。
当关注点一直保持在单个员工身上的时候，考虑的问题是：“如何找出一个能够高高兴兴接受二星的人。”相反，当关注整个团队的时候，大多数人的反应远远重要于单个人的反应。
当关注点一直保持在每一个人的稳定性的时候，考虑的问题是：“如何能够留住那些最不想离职的人。”相反，当关注团队业绩的时候，就会发现：“二星和淘汰能够促进大家的积极性和主动性。”
当关注点一直保持在眼前的影响，考虑的问题是：“这个人走了谁来干活。”相反，当关注长远影响的时候，就会发现：“怎么做才能保持持久的战斗力。”
其实，最最关键的，一个团队的领导，是关注做事，还是做人！如果关注点在做事上边，显然某个人的反应就不是最重要的，大家的反应、团队的业绩才是最最重要的。历史上的伟人，总会被大家揭露出对某些人残忍的一面，正是因为此。让所有人都满意，无论如何是做不到的。
反思
其实，反思一下管理者自己，感觉有点懦弱，或者说管理上的惰性。
有几个问题可以说明这种管理者的惰性。
、总想着找个人“背锅”。
毕竟团队的考核不是一次两次，而是持续不断。无论如何，给任何人打二星，总需要做很多的沟通工作，这个事情蛮累人的。
如果团队内有一个人，工作态度一直不太好，在团队内帮着“背锅”，而“难能可贵”的是，这个人自己也很清楚自己业绩最差，可人家就想在这里混日子。
上边的状况，是不是很省心？
可是，这样，真的好么？
首先，团队其他人会怎么想？反正有人帮我们背锅，只要我比他稍微强些就稳拿三星了呗！
其次，团队业绩会如何？大家一团和气，没有人争高下，团队那么多问题，谁会主动站出来解决？
甚至，长期下去，领导自己的号令都有人敢不听！因为我就想轻轻松松的拿三星，那个烂摊子，谁愿意挑谁挑去！我不挑，你也不会把我怎么着！
、惧怕员工离职。
招聘员工有多难，做过领导的自己都清楚。更何况，即便招聘进来，熟悉业务至少也得一段时间。
这个过程，谁来负责离职员工之前的工作？
其实，无论惧怕与否，离职都是难免的。不是消极的员工离职，就是积极的员工离职。
消极的员工跟积极的员工同样拿三星，消极的员工是满意了，积极的员工呢？
当然了，积极的员工主动离职，肯定不会说：“他管理有问题”，而只是说：“我有更好的发展机会。”
消极的员工被动离职，一定会抱怨：“他管理有问题，我不认可他的管理方式。”
所以，该打二星的不打二星，那些拿着三星的员工，嘴上没意见，心里有意见。
用手投票得罪老大，不如用脚投票大家好聚好散！
难怪格力老板董明珠会说：“没人骂你，说明你不是个完人。”
、表现差的都走了，剩下的都是表现好的，谁来“背二星”？
我自己曾经也一直纠结于这个问题。是啊，大家都表现好了，谁来“背二星”？
现在突然发现，这是个杞人忧天的事情。
首先，打二星不是裁员。即便再三强调“二星”不是不认可，依然有很多同事认为二星就是不认可。那是因为有许多本该打一星干掉的，领导为了留下个背锅的，只给了二星！于是，大家都误以为二星就是最差的。
其次，大家表现的越好，对团队领导的要求也就越高。谁拿二星，不是谁愿意背二星，而是根据团队的纪律，领导的考察和记录，谁的得分最低。这些，都对领导平时对团队成员的关注要求很高。如果作为直接上司，自己下属的业绩竟然排不出个高低顺序，只能说这是领导自己的问题。
再次，极限的情形下，二星是个相对概念。大家都做个产品，做个的就是落后；大家都做个产品，做个的就是落后。看似很残酷，事实也确实如此残酷。大公司二星员工的工资，还比其他公司五星员工的工资高呢！这又怎么说？
最后，如果所有人都表现非常好，这个团队的业绩一定好到爆！这样的团队，怎么可能会被分配二星？
如果哪位的团队业绩好到爆，而被分配了二星，那么，趁早，团队领导自己走人吧！留下来自己也不会有什么好机会。
总结
最后，回归到领导力。
、如果呆在腾讯这样的业界知名大公司里带团队，都担心“离职”问题而对下属妥协，那么，放到一家业界不知名的小公司，那还不得被下属吃了！
、用五星或其它优待方式去激励那些不积极的，试图给他们鼓舞，这种行为，绝对是在给自己刨坑，而且是很大的坑，最后倒霉的是领导自己！因为，换回的不是感激，而是“他不敢得罪我，这个团队离不开我”。这个事情如果让上司和其他下属知道，结论只有一个：把他们俩对换下位置吧。
一个团队，能力强的人越多越好，但是，不可或缺的事情越少越好。
一个员工对公司的价值，不是体现在不可或缺，而是体现在业绩和贡献。
一个员工的利益，是用自己的业绩和贡献换取的，而不是通过自己的必不可少要挟得到的。
员工自己有这个认识最好，如果没有，做领导的有义务有责任将这一点教育给员工。
有两句话很经典：离了谁地球都照样转；世界因我而更加精彩。这就是个人与团队的关系。
、绩效考核，是事后的评价，而非提前的承诺。对合作伙伴可以讨价还价：“你帮我做这个，我给你对应的好处。”如果对下属也是讨价还价：“你帮我做这个，我给你五星。”那么，会得到如下结果。
首先，自己抛弃了作为领导的权势不可否认，上下级的评估关系本身就是一种权势。所有人都来跟老板讨价还价，这难道是做领导的想要的局面？
其次，将员工的主动性转变为了被动性。而主动性本身就是评估的一个很重要指标。主动不仅仅是主动解决问题，而且包括：主动发现问题。
再者，将员工自己需要考虑的问题，转化为领导自己必须考虑的问题，自讨苦吃。团队的领导，固然需要向团队成员传达自己的导向，然而，作为团队领导，最大的责任是激发大家的激情和智慧，而非自己一个人把所有人该负责的事情全都考虑的清清楚楚。更何况，所有行为都是领导预料之中的，那能叫“超出预期”么？
最后一点，其实涉及到的制定。显然，这是另外一件非常头疼的事情。
传统制造业，大都是根据历史经验的均值做出的，所以超出均值就是超出预期，低于均值就是低于预期。
然而，软件行业，互联网行业，一则没有靠谱的历史经验数据，二则竞争瞬息万变，今天制定的六个月后是否依然对业务有价值？
正因为如此，大家才是幸运的，可以继续探索下去。
最后，打个广告，对企业文化、团队管理有兴趣的，请关注本人公众号：水滴的声音。之所以叫这个名字，意思是：大部分的问题，当自己静心下来，排除一切干扰因素，能够听到水滴的嘀嗒声，也就能够听到自己内心深处的声音，那其实就是自己想要的答案了。前言
                                                                   
英文官网：
中文官网：
一、下载并安装
点击下载： ，并且安装到本地。
二、支持文件的基本语法高亮
在  搜素 出现关于语法高亮的插件有 ，，，，等等。比较了下载数量可以了解到， 是目前比较好的语法高亮插件，我们来安装一下吧。

安装插件：  然后输入    然后回车点安装即可
安装之后，还需配置一下：，预防识别错误，不配置也没有太大问题

无语法高亮效果图：

高亮语法效果图：舒服多了

三、支持文件的
安装可以有效的提示代码的低级错误，初期可能有些不习惯，但是使用时间长了会是很要的帮手。

安装插件：   然后输入   然后回车点安装即可
 不是安装后就可以用的，还需要一些环境和配置：
首先，需要全局的   如果没有安装可以使用    来安装。
其次，文件是类  的文件，为了支持对  文件的  ，需要  这个插件。可以使用     来安装
接着，安装了  插件后，还需要在  中配置下 ：
     
        
        
        
        
    
     {
         
    }
最后，别忘了在项目根目录下创建   如果还没创建，还可以使用下面快捷命令来创建。
四、个人首选项配置推荐可根据自己喜好修改

五、插件拓展提高效率有效使用插件
   自动闭合标签
   修改标签时，自动修改匹配的标签
添加行书签
   、、的浏览器兼容性检查
  运行选中代码段支持大量语言，包括
 在中弹出浏览器并搜索，可编辑搜索引擎
  颜色值在代码中高亮显示
  拾色器
  注释文档生成
     插件
 在代码中输入
插件，高亮提示
  根据路径字符串，快速定位到文件
    提示代码段
 同步文件到
 在状态栏显示当前行的信息
   查看 
 显示文件最近的和作者，显示当前行信息
 高亮缩进基准线
  代码段
     提示
    提示支持
格式提示
 缩进高亮
    语法代码段
 语法高亮和提示
 代码段
 格式提示
 代码段
   快速导航到模块
运行命令
  导入模块时，提示已安装模块名称
  彩色输出信息
  对比两段代码或文件
 路径完成提示
  另一个路径完成提示
  格式化
  快速切换项目
  发送风格的请求
  设置同步到
  字符串转换处理驼峰、大写开头、下划线等等
   测试用例生成支持、、
  管理
  文件显示模块当前版本和最新版本
 目前比较好的语法高亮
   快速打开选中模块的主页和代码仓库
 文件图标，方便定位文件
   文件图标拓展
 代码段包括 、、
六、快捷键使用
全局
     显示命令面板

按一下  会进入到 模式

在  下输入 可以进入  模式


   快速打开

直接输入文件名，跳转到文件

 列出当前可执行的动作

 显示  或 ，也可以

 跳转到行数，也可以 直接进入

跳转到 搜索变量或者函数，也可以  直接进入

根据分类跳转 ，查找属性或函数，也可以 后输入进入

根据名字查找，也可以


     打开新窗口
     关闭窗口
基本
   剪切未选中文本的情况下，剪切光标所在行
   复制未选中文本的情况下，复制光标所在行
   向上移动行
   向下移动行
     向上复制行
     向下复制行
     删除行
   下一行插入
     上一行插入
    \ 跳转到匹配的括号
   增加缩进
   减少缩进
 跳转至行首
 跳转到行尾
   跳转至文件开头
   跳转至文件结尾
   按行向上滚动
   按行向下滚动
   按屏向上滚动
   按屏向下滚动
     折叠代码块
     展开代码块
      折叠全部子代码块
      展开全部子代码块
      折叠全部代码块
      展开全部代码块
      添加行注释
      移除行注释
   添加、移除行注释
     添加、移除块注释
   自动换行、取消自动换行
多光标与选择
  点击 插入多个光标
     向上插入光标
     向下插入光标
   撤销上一个光标操作
     在所选行的行尾插入光标
   选中当前行
     选中所有与当前选中内容相同部分
   选中所有与当前选中单词相同的单词
     折叠选中
     展开选中
    拖动鼠标 选中代码块
       列选择 向上
       列选择 向下
       列选择 向左
       列选择 向右
       列选择 向上翻页
       列选择 向下翻页
查找替换 
   查找
   替换
 查找下一个
   查找上一个
   选中所有匹配项
   向下选中相同内容
      移除前一个向下选中相同内容
   区分大小写
   正则
   完整匹配
进阶
   打开建议
     参数提示
 插件缩写补全
     格式化
      格式化选中内容
 跳转到声明位置
   查看具体声明内容
    分屏查看具体声明内容
   快速修复
   显示引用
 重命名符号
     替换为上一个值
     替换为下一个值
      删除行尾多余空格
    更改文件语言
导航
   显示所有符号
   跳转至某行
   跳转到某个文件
     跳转到某个符号
     打开问题面板
 下一个错误或警告位置
   上一个错误或警告位置
     编辑器历史记录
   后退
   前进
   切换焦点
编辑器管理
      关闭编辑器
    关闭文件夹
  \ 编辑器分屏
   切换到第一分组
   切换到第二分组
   切换到第三分组
      切换到上一分组
      切换到下一分组
     左移编辑器
     右移编辑器
    激活左侧编辑组
    激活右侧编辑组
文件管理
   新建文件
   打开文件
   保存
     另存为
    全部保存
   关闭
      全部关闭
     重新打开被关闭的编辑器
    保持打开
   打开下一个
     打开上一个
    复制当前文件路径
    在资源管理器中查看当前文件
    新窗口打开当前文件
显示
 全屏、退出全屏
     切换编辑器分屏方式横、竖
   放大
   缩小
   显示、隐藏侧边栏
     显示资源管理器 或 切换焦点
     显示搜索框
     显示面板
     显示调试面板
     显示插件面板
     全局搜索替换
     显示、隐藏高级搜索
     打开新命令提示符窗口
     显示输出面板
     显示、隐藏 预览窗口
    分屏显示 预览窗口
调试
 设置 或 取消断点
 开始 或 继续
 进入
   跳出
 跳过
      显示悬停信息
集成终端
  ` 显示命令提示符窗口
    ` 新建命令提示符窗口
     复制所选内容
     粘贴所选内容
   向上滚动
   向下滚动
   向上翻页
   向下翻页
   滚动到顶部
   滚动到底部
修改默认快捷键
打开默认键盘快捷方式设置：
     ，或者：    
修改 ：

           

      被切换输入法快捷键占用
    {
         
         
         
    }
      删除一行
    {
         
         
         
    }
     与删除一行的快捷键互换
    {
         
         
         
    }
     多行注释
    {
        
         
         
    }
     定制与  相同的大小写转换快捷键，需安装  插件
    {
          
         
         
    }
    {
          
         
         
    }
作者：，高级研究员，隶属腾讯架构平台部，主要研究方向为深度学习异构计算与硬件加速、云、高速视觉感知等方向的构架设计和优化。“深度学习的异构加速技术”系列共有三篇文章，主要在技术层面，对学术界和工业界异构加速的构架演进进行分析。

一、概述：通用=低效
作为通用处理器，    是计算机中不可或缺的计算核心，结合指令集，完成日常工作中多种多样的计算和处理任务。然而近年来，在计算平台领域一统天下的步伐走的并不顺利，可归因于两个方面，即自身约束和需求转移。
自身约束又包含两方面，即半导体工艺，和存储带宽瓶颈。
一方面，当半导体的工艺制程走到后，已逼近物理极限，摩尔定律逐渐失效，导致不再能像以前一样享受工艺提升带来的红利：通过更高的工艺，在相同面积下，增加更多的计算资源来提升性能，并保持功耗不变。为了追求更高的性能，更低的功耗，来适应计算密集型的发展趋势，更多的设计通过降低通用性，来提升针对某一或某一类任务的性能，如和定制。
另一方面，内核的计算过程需要大量数据，而片外不仅带宽有限，还具有较长的访问延迟。片上缓存可以一定程度上缓解这一问题，但容量极为有限。通过数据预读、乱序执行、超线程等大量技术，解决带宽瓶颈，尽可能跑满，但复杂的调度设计和缓存占用了大量的硅片面积，使真正用来做运算的逻辑，所占面积甚至不到。同时，保证程序对之前产品兼容性的约束，在一定程度上制约了构架的演进。
需求转移，主要体现在两个逐渐兴起的计算密集型场景，即云端大数据计算和深度学习。尤其在以为代表的深度学习领域，准确率的提升伴随着模型深度的增加，对计算平台的性能要求也大幅增长，如图所示。相比于面对的通用多任务计算，深度学习计算具有以下特点：任务单一，计算密度大，较高的数据可复用率。对计算构架的要求在于大规模的计算逻辑和数据带宽，而不在于复杂的任务调度，因此在上并不能跑出较好的性能。

图 深度学习的发展趋势：更高精度与更深的模型，伴随着更高的计算能力需求。
基于上述原因，构架在深度学习、大数据分析，以及部分嵌入式前端应用中并不具备普适性，此时，异构计算开始进入人们的视野。本文主要针对深度学习的计算构架进行讨论。
在讨论之前，先上一张经典的类比图：分别以“可编程能力灵活性”和“开发难度定制性计算效率能耗”为横轴和纵轴，将与当前主流异构处理器，如、、专用等进行比较。

图 计算平台选择依据
通过前文分析可知，最大限度的灵活性是以牺牲计算效率为代价。将应用场景缩减为图形图像与海量数据并行计算，设计了数千计算内核，有效的提升了硅片上计算逻辑的比例，但随之而来的带宽需求也是相当恐怖的。为了解决这一问题，一方面，为了保证通用性，兼容低数据复用的高带宽场景，内部设计了大量分布式缓存；另一方面，的显存始终代表了当前可商用化存储器的最新成果。显存采用的始终领先服务器内存代，并成为业界首先使用的应用。因此，相比于，具备更高的计算性能和能耗比，但相对的通用性和带宽竞争使其能耗比依然高于和，并且性能依赖于优化程度，即计算模型和数据调度要适配的底层架构。
和则更倾向于针对某一特定应用。无疑，专用具有最高的计算效率和最低的功耗，但在架构、设计、仿真、制造、封装、测试等各个环节将消耗大量的人力和物力。而在深度学习模型不断涌现的环境下，当尚未出现确定性应用时，对、中的各个模型分别进行构架设计甚至定制一款独立是一件非常奢侈的事情，因此在处理器的设计上，大家的做法逐渐一致，设计一款在领域具备一定通用性的构架，称为领域处理器。使其可以覆盖深度学习中的一类如常见模型，或多类如等。
二、嵌入式云端，不同场景下，处理器的两个选择
 处理器的发展和现状
伴随着深度学习模型的深化和算力需求的提升，从学术界兴起的处理器方案已经迅速蔓延到工业界。目前，各大互联网、半导体、初创公司的方案主要分为云端、嵌入式端两类或称为云侧和端侧，可归纳如表所示若感兴趣可转到唐杉同学维护的列表：

表 深度学习处理器方案列表

图 处理器的发展和设计目标
处理器的发展过程如图所示。在早期，对处理器架构的探讨源于学术界的半导体和体系架构领域，此时模型层数较少，计算规模较小，算力较低，主要针对场景为嵌入式前端；随着模型的逐渐加深，对算力的需求也相应增加，导致了带宽瓶颈，即问题带宽问题的成因详见节，此时可通过增大片内缓存、优化调度模型来增加数据复用率等方式解决；当云端的处理需求逐渐浮出水面，多用户、高吞吐、低延迟、高密度部署等对算力的需求进一步提升。计算单元的剧增使瓶颈愈加严重，要解决需要付出较高代价如增加接口通道数量、片内缓存容量、多芯片互联等，制约了处理器实际应用。此时，片上  ，高带宽存储器的出现使深度学习模型完全放到片上成为可能，集成度提升的同时，使带宽不再受制于芯片引脚的互联数量，从而在一定程度上解决了瓶颈，使云端的发展方向从解决带宽问题，转向解决算力伸缩问题。
到目前为止，以的应用为标志，云端高性能深度学习处理器的发展共经历了两个阶段：
第一阶段，解决带宽问题；第二阶段，解决算力伸缩问题。 带宽瓶颈
第一阶段，囊括了初期的处理器，以及至今的大部分嵌入式前端的解决方案，包括第一代、目前方案的相关构架、寒武纪构架，以及以上的学术界成果。欲达到更高的性能，一个有效的方法是大幅度提升计算核心的并行度，但算力的扩张需要匹配相应的带宽。例如，图中的个乘加运算单元若运行在的频率下，每秒需要的数据读写带宽；一个典型的云端高性能以 为例共有个，跑满性能需要的带宽；而一条 仅能提供的带宽上述分析并不严谨，但不妨碍对带宽瓶颈的讨论。因此在第一阶段，设计的核心是，一方面通过共享缓存、数据调用方式的优化等方式提升数据复用率，配合片上缓存，减少从片外存储器的数据加载次数。另一方面通过模型优化、低位宽量化、稀疏化等方式简化模型和计算。

图 一个乘加单元及其带宽计算累加值通常与输出共用，故未计入带宽
 算力伸缩
尽管片上分布的大量缓存能提供足够的计算带宽，但由于存储结构和工艺制约，片上缓存占用了大部分的芯片面积通常为至，限制了算力提升下缓存容量的同步提升，如图所示。

图 芯片中片上缓存的规模，上图为第一代，蓝色部分为缓存区域，占用芯片面积的；下图为寒武纪公司的  设计，缓存占面积的。
而以为代表的存储器堆叠技术，将原本一维的存储器布局扩展到三维，大幅度提高了片上存储器的密度，如图所示，标志着高性能处理器进入第二阶段。但的需要较高的工艺而大幅度提升了成本，因此仅出现在互联网和半导体巨头的设计中。使片上缓存容量从级别提升到级别，可以将整个模型放到片上而不再需要从片外中加载；同时，堆叠存储器提供的带宽不再受限于芯片引脚的制约而得到倍以上的提升，使带宽不再是瓶颈。此时，设计的核心在于高效的计算构架、可伸缩的计算规模、和分布式计算能力，以应对海量数据的训练和计算中的频繁交互。

图 与片内垂直堆叠技术
目前构架已从百家争鸣，逐渐走向应用。在后续的篇幅中，将对这两个阶段进行论述。
 王逵 “和双低效，摩尔定律之后一万倍 ——写于版重出江湖之际”新智元，                    背景
今年以来，人工智能成为一个时代热点，同时   的发布后，我也想蹭蹭时代的热点，初步学习一下神经网络和机器学习，在这里把成果以初学者的方式记录下来。 学习一个新东西，不可避免会遇到很多坑，很多教程都是一个有经验，熟悉的人写的，那样其实并不是特别接地气，因为很多坑在作者写文章的时候都忘了，这篇文章也是记录一下我掉的坑，做一个备忘的作用。 阅读这一系列文章，你需要做好以下准备，或者有以下技能：

能够在你的环境中安装好 、
了解基本的  语法和数据结构
有基础的线性代数知识
英语水平能够大概看懂 官方入门教程

我也只是一个刚接触机器学习的初学者，所以你不用太过于担心这篇文章难度问题，我会尽量用高中生能够看懂的方式来叙述问题，希望能够帮助到大部分初学者。 介绍性的话就不多说了，直奔主题。
解决什么问题？
这篇文章是我正式使用  第一天写的，在这之前，我阅读了一些关于机器学习的理论知识，在阅读完官网的  入门教程后，我发现  最基础的应用可以用来拟合方程，即给出  个点，这些点符合一定规律，我们希望推导出其他符合这个规律的  对应的  值。
最简单的情况是线性的，我们希望能够使用一条直线拟合这几个点，得到方程式完整的内容，即假设  =   ，我们只需要求得  和  的值就好了，在初中数学中，只需要提供  组，即可通过消元法求得  和 ，这是一个很简单的数学问题。但是如果想用  的比较通用的方式解决这个问题，就不能教机器这样解了，我们必须让机器通过不断尝试的方式，来获得  和  的值。 
我们来实际操作一下，假设我们现在有一个方程  =    ，我们需要让机器通过一些 来推导出  =  = 。 首先要使用 ，需要   和数学库 ， 的数学计算是以  为基础的这点我还不是特别确认，可能也可以有其他的数学库，不过他们之间关系紧密：
   
   
我们要提供一系列已经存在的 组合，这个叫做训练集，我们先用代码生成  组训练集，先随机生成  组  的值，命名为 _ 为训练  的意思，其中使用  来生成  到  之间的随机数，将其乘以  可以获得  到  之间的随机数，最后使用  函数对其进行取整，并且令数据类型为浮点数  以便于计算：
_ =   =
 _
结果如下，其中随机数每次执行会不一样：
         
然后根据公式求得 _ 的值：
_ = _     
 _
结果为：
         
这样我们就能够得到  组训练集了，可以开始使用  求解了，关于  的基本用法我现在也没办法讲的太清楚，可以简单参考下  官网基础教程，我以我的理解，重新简单讲解一下， 所有的执行流程会在一个  中执行，可以把它暂时看做执行计算的一个载体。我们要在执行前，构造计算的规则，对于计算量的表示，目前只需要知道  种，一种是输入量，在  中以占位符  表示，另一种是变量，以  表示。我们的训练集是在计算过程中以输入表示，因此将其定义为占位符，它的类型为浮点类型 ：
 = 
 = 
而需要用于输出的  和  的值，我们将其定义为变量，初始化为浮点数 ，这个初始值并不是特别重要，因为  在训练的过程中，会不断调整这两个值，这个后面会详细说明：
 = 
 = 
而在  的  内部，我们需要根据内部  的值，求得当前的  的值 _，因此按照线性公式使用  定义 _，这行语句执行时并不会进行真正的计算，只是仅仅描述他们的关系：
_ =      
得到了当前的  值 _，我们就要和我们提供的训练集中对应的  值进行比较，使得差异最小，这个差异在机器学习中称为损失函数 ，当损失函数值最低时，就可以认为找到了一个比较好的值，当然实际应用中会有一些局部最小值，这个本例不涉及到，就不讨论了。一般来说，可以使用他们的方差来描述损失函数，因为  能够很好的支持矩阵运算，而 _ 和  都可以看做是  行  列的一个矩阵，因此损失函数可以定义为矩阵各元素之差的平方之和：
 = __     损失函数，实际输出数据和训练输出数据的方差
重温一下我们训练的目的，是通过不断调整变量  和  的值，来达到损失函数值最小的目的。而调整  和  的值的方法，我们采用一个叫做梯度下降 的方法，简单来说，可以看做做  =  形成了一个三维曲面，大概如下图所示图来源文末参考资料：

梯度下降可以看做是一个小球，沿着曲面滚动，它距离地面的面积，就是  函数的值，当它滚动到最低点时，也就找到了损失函数最小的位置关于局部最小值和梯度下降更深入的内容可以参考原文。  中能够很方便地定义梯度下降的训练方法以及描述求损失函数最小值的目的：
 = 
 =                      训练的结果是使得损失函数最小
其中梯度下降的参数  是我调出来的，我目前并不清楚这个值如何更好的调整，太大可能找不到局部最小点，太小会导致训练过慢，也许这就是机器学习工程师有时候被戏称为调参工程师的原因？ 至此，我们的  描述部分已经完成了，可以开始进入执行流程了，首先，我们要创建一个  用于执行对于变量，我们需要进行初始化操作，内部会对变量进行内存的分配操作，这个内存会在  关闭时被释放：    
 = 
__
然后我们可以对数据开始训练，第一个参数是训练的内容 ，第二个参数是指定变量  和  对应的实际值：
 {_ _}
一般，训练次数和准确度是有关系的，我通过调参，确定训练  次，在每次训练后，把当前的  和损失函数  的值打印出来，需要注意的是， 中的值需要在  中执行才能看到结果，如果需要得到多个值，可以将其放到一个数组 中，因此打印  和  的值需要放到  中执行，同时也要将 _ 和 _ 传入：
   
         {_ _}
         {_ _}
完整的  代码如下：

=
   
   

_              日志级别设置成 ，避免干扰
_=                    打印内容不限制长度

_ =   =
 _

_ = _     
 _

 = 
 = 
 = 
 = 
_ =      

 = __               损失函数，实际输出数据和训练输出数据的方差
 = 
 =                         训练的结果是使得损失函数最小

 =                                      创建 
__             变量初始化

   
         {_ _}
         {_ _}


好了，现在可以执行一下，如果环境没有问题的话，你应该能看到屏幕上不断出现的值，我稍微截取头尾一部分看看：
   
     
     
  
  
  
  
  
  
  
  
  
  
  
  
  
  

  
  
  
  
  
  
  
在刚开始执行的时候，代码打印出训练集 _ 和 _ 的值，然后开始进行训练， 和  的值快速增长，损失函数也在不断减少，最后  的值停留在 ， 的值停留在 ，损失函数则为 ，可见与结果 =，= 已经非常接近了，如果要更加接近结果，可以尝试降低梯度下降学习速率参数。这样就达到了求  和  的值的目的。
再深入一点：多元一次方程
上面的例子如果能完成，结合官网的资料和其他博主的资料，我相信你已经算入了个门了，后面能不能通过修改上面的例子进行解决更加复杂的问题呢？再看看下一个问题，如果有一个值，它受到  个参数的影响，但是每个参数的权重我们并不清楚，我们希望能用刚刚学到的  来解决这个问题。 首先建立一个模型，表示  组数据，具体点，先实现  个变量的求解，生成  个数据集，我们可以很容易联想到使用大小为 的矩阵表示 _，使用大小为 的矩阵表示参数权重 _，使用大小为 的矩阵表示结果 _，即 _ = _  _。 当然，为了更加通用，变量的数量和数据集的数量可以使用常量来表示，矩阵的向量乘法在  库中使用  函数实现：  
_ =          数据集数量
_ =          变量数
_ =   __=

要求的值
_ =   _=

根据公式 _ = _  _ 算出值 _
_ = __

 _
 _
 _
与上面的例子一样，我们以  占位符形式定义输入训练集  和 ，矩阵大小可以使用  参数来定义：  
 是输入量，对应 _，用于训练输入，在训练过程中，由外部提供，因此是  类型
 = =__
 = =_
以  变量形式定义结果 ：
 是要求的各个参数的权重，是目标输出，对应 _
 = _=_ 
定义  计算结果 、损失函数  和训练方法：
_ =                           实际输出数据
 = __  _    损失函数，实际输出数据和训练输出数据的方差之和
 = 
 =                  训练的结果是使得损失函数最小
针对训练次数的问题，我们可以优化一下之前的方式，设定当  函数值低于一定值或者不再变化的时候停止，因为  函数需要在  中使用，它需要使用  的常量表示：
__ =                达到此精度的时候结束训练
好了，模型已经建立完毕，开始训练，我们使用变量 _ 来记录训练的次数，以 _ 记录上一次训练的损失函数的值，初始值为 。
 = 
__
_ = 
_ = 
训练主循环，将当前的  函数值保存在 _ 中，与上一次相比，如果相同，则退出训练，另外如果  函数低于设定的精度 __，也会退出训练：
 
        _  = 
         {_ _}

        __ =   __{_ _}
         运行 次=  __

         _ == _
                

        _ = _
         _
                
最后打印结果，由于我们知道 _ 的值是整数，因此将得到的结果四舍五入的值 _ 也打印出来，再看看 _ 与 _ 的差距 __ 是多少：
_ _ =   {__}
_  _  __  _ _ _ _ _  _


完整代码如下：

=
   
   

_              日志级别设置成 ，避免干扰
_=                    打印内容不限制长度

_ =          数据集数量
_ =          变量数
_ =   __=

要求的值
_ =   _=

根据公式 _ = _  _ 算出值 _
_ = __

 _
 _
 _

 是输入量，对应 _，用于训练输入，在训练过程中，由外部提供，因此是  类型
 = =__
 = =_

 是要求的各个参数的权重，是目标输出，对应 _
 = _=_     

_ =                           实际输出数据
 = __  _    损失函数，实际输出数据和训练输出数据的方差之和
 = 
 =                  训练的结果是使得损失函数最小

__ =                达到此精度的时候结束训练

 = 
__
_ = 
_ = 
 
        _  = 
         {_ _}

        __ =   __{_ _}
         运行 次=  __

         _ == _
                

        _ = _
         _
                

_ _ =   {__}
_  _  __  _ _ _ _ _  _


运行一下，仍然把头尾的部分记录下来，中间部分太多就省略掉：
   
          
          
          
          
           
          
          
          
           
          
  
  
  
   
  
  
   
   
   
   
  
  
  
   
   
运行  次= 
运行  次= 
运行  次= 
运行  次= 
运行  次= 
运行  次= 
运行  次= 
运行  次= 
运行  次= 
运行  次= 
运行  次= 
运行  次= 
运行  次= 
运行  次= 
运行  次= 

运行  次=
运行  次=
运行  次=
运行  次=
运行  次=
运行  次=
运行  次=
运行  次=
_  
  
  
  
  
   
  
  
  
  
_  
  
  
  
  
 
_
可见，这次在执行了  次之后， 函数从   降低到  后不再变动，看起来有点大，但是实际上我们的  值也是非常大的，最后求得的结果与实际值有大约不到千分之一的差距，要缩小这个差距，可以通过减少梯度下降学习速率，同时增加训练次数来解决，而 _ 的值已经等于 _ 的值了。 目前这个代码也可以修改一下训练集的数量以及变量的数量，然后通过调梯度下降学习速率参数来进行训练，如果学习速率过大，可能就会得到  函数为  值，这样就无法得到结果了，具体原因我还得继续研究一下。
还能做什么呢？
能够解决这样的问题，基本上就能够初步使用机器学习的思维来解决问题了，比如预测股票下个交易日涨跌幅，参数可以是昨日开盘价，昨日收盘价，昨日涨跌幅，昨日成交量等。不过先别激动，股票的模型也不是简单的线性模型，如果想建立股票预测模型，还需要使用更加复杂的方法才行，有兴趣的读者可以继续深入研究，比如使用多元多次方程来进行数据的拟合，只要建立起这个思想，这篇文章的目的就达到了。
参考资料

 机器学习入门：线性回归及梯度下降
  
  
官网系列教程翻译： 
 一文入门谷歌深度学习框架 
【  文档翻译】入门教程




相关推荐
 入门：使用分类器对数据进行分类入门：使用神经网络拟合元一次方程护卫神镜像是由国内知名的服务器安全专家——护卫神制作，集成了常规的安装环境，内置有网站管理面板等自主研发的软件，同时对系统进行安全加固的一个镜像系统。
下面大概说一下如何在腾讯云主机上安装护卫神镜像。
一，登录腾讯云“控制台 ”，找到“云主机”，勾选要安装的主机，然后选择“关机”，如下图一所示

图一
二，选择“重装系统”，如下图二所示

图二
找到“服务市场”，在搜索框中输入”护卫神“，找到护卫神相应的镜像，然后在”密码“项，填写服务器的管理员密码，如下图三、图四、图五所示

图三

图四

图五
操作重装系统后，需要耐心稍等几分钟，直到主机状态显示为”运行中“，就表示已经安装完成，如下图六所示

图六
三，安装镜像完全成后，可远程登录服务器，打开您本地电脑的命令行，输入”“，如下图七所示

图七
接着选择用户后输入步骤二中重装系统时输入的密码，如下图八所示

图八
登录后，因护卫神镜像需要初始化生成镜像中集成的相关软件管理账户密码，预计需要两分钟，请稍等，如下图九、图十所示

图九

图十 
初始化完后系统自动重启，然后重新登录云主机

打开桌面的“使用说明“查看相关信息，接着你可以打开”主机管理系统“，开始创建您的网站啦
护卫神·全能安全环境 |||一、安装

下载
下载地址

自己定义一个目录安装，一步步安装下来，我是安装到了盘，如图所示：


设置环境变量

我的电脑右击点属性，再点高级系统设置

点击环境变量进行环境变量配置如图所示：


配置方法一：

配置时找到系统变量，找到变量，如果没有则新建。
在变量名填，变量值填 \\注意要加分号！
如图所示：

同理，找到变量名，没有就新建一个
变量值填\\

配制方法二：
新建_变量变量名：_变量值：\变量名：变量值：_\变量名：变量值：_\

这个是以后配置时直接引用_比较方便
这样的安装和环境变量的配置就完成啦！
测试是否成功：在命令行输入  如果出现下列字符则说明成功

二、的下载
注意：此处提供的版本，若版本太高，没有与相对应的版本则无法配置，目前最高是版本

下载地址

注意：如果你已经有了版本，那么可以跳过此步。
我新建了一个文件夹，解压到此文件夹如图所示：

首先进行汉化

语言包下载

下载后新建一个_文件夹，解压到此文件夹下，创建这个文件夹的目的是把所有下载的插件都保存到这里，便于管理
目录层次如图所示，下有，下有和文件夹

在原先的下的文件夹下新建一个文件夹，再新建文本文件，扩展名为，内容如图所示：

这样汉化就完成了
三、配置

下载地址

同样下载解压到原先创建的_文件夹下，如图所示：

同上在原先的下的文件夹下新建一个文件夹，再新建文本文件，扩展名为，内容如图所示：

这样就配置完成啦，启动一下试试！

此处显示中文，说明汉化成功！
小问题的解决：或许有的人会显示这样的页面：

那么下载



这个文件，把目录下的文件替换掉。用记事本打开这个文件显示如下内容：

 \_
 
 \_
 
 
 
 
 
 \  \\
 
 
 
 =
是启动所需要的文件，这里我把相对路径配好了
我也把相对路径配好了
是最大内存限制，如果这个数值过大也会出现上述情况，我改成了

 这里是相对的环境设置，这个要设置成你自己的环境，自己写一个路径，在目录下，一个文件，如果还不行，那么可能是的版本导致的，我换用了测试成功！如果不能用的话，就换用版本的吧！
好，小问题暂告一段落，看下图。

如果你能新建  说明你已经全配置成功啦！欢呼吧骚年们！
四、配置

下载地址

这个是免安装版，可以直接下载解压，我放在了盘

环境变量的配置：
，新建变量名：_，变量值：\ \
，新建变量名：_，变量值：\ \
【和中的路径根据你存放的目录不同而不同】
，打开，添加变量值：_\_\
启动：
在开始菜单输入，然后命令定位到的目录，如图

然后输入 命令，这时就启动起来了，会弹出一个新的窗口，那个就是

下面这个图就是：

下面进行测试：在浏览器输入 看看能否出现界面，如果出现了，那么说明成功了！如果不行，检查环境变量的配置。

五、嵌入
打开，窗口–首选项，界面如下：

点选服务器–运行时环境–添加，选择–，完成

创建之后编辑，添加的目录，名称自己随便取，用缺省

这样在下方就出现了一个了，绿色的箭头就是启动，红色的方块是停止

可以点击运行，其中点下方标记的红色处，可以对进行详细配置，默认配置即可，不用更改了

六、测试项目
新建一个  项目

点下一步，我取名为，服务器选刚才创建的，然后下一步，下一步，直到完成就好了

在目录下面新建一个文件，我的叫

我在区输入了  
右击该文件，在服务器上运行，选择，然后结果如图所示。恭喜你，所有配置都成功啦！

点选的窗口然后浏览器，选   ，即系统默认浏览器，就可以用自己的浏览器打开界面啦。如图所示


相关推荐
腾讯云下搭建服务器
腾讯云搭建代理服务器年加入腾讯，从事区域业务的应用开发，具备十余年的项目经验。在的应用、腾讯新闻和微信的开发有深度实践。

前言
企鹅社区移动版前端采用 开发。随着官方的推出，前端界反响良好，由于项目本身在的时候存在没有解决的问题，正好在中得到解决，所以义无反顾地决定升级框架至版本。
首先，官方推荐使用迁移工具，对当前项目做特性识别，并给出修改意见。个人觉得可以节省很多工作，可以快速找到差异点，并快速修改代码。下面简单介绍一下此次升级的过程，可为相似的项目提供参考。
第一步、安装迁移工具
官方文档参考：
本案例是在环境下运行的，若环境下，可能后续操作略有差异。
运行命令：   

尝试运行一下如下命令，检查是否安装成功：


当运行上述命令提示   时，你需要做一下操作。上图中已经告知程序安装的路径下述命令中请替换你的文件路径，所以你可以执行以下操作：
 
   
第二步、借助迁移工具来评估迁移代码
进入项目文件目录，运行命令：
 
正常的情况下就可以得到需要升级的代码清单：

由于清单数据量较大，不方便查看，可以调整一下命令将结果保存到文件：
   
下载文件后，可以通过文本工具查看：

第三步、升级代码
这个部分是升级工作中最花时间的部分。官方也有详细的参考说明，根据对应的点进行代码调整即可。
：
 ：
通过实践，我总结了几点在整个过程中遇到的难点和我的解决思路：
、插值变化，移除了{{{}}}语法
在中，需要格式化显示内容时用来处理换行转 及一些允许使用的特殊字符，我的做法是预先定义数据处理函数，然后使用定义为全局过滤器，直接对数据进行处理
 
{{{ | }}}
而在中，给出了新的方案
 =

根据文档大意，在指令中不支持过滤器。当然，我也尝试了一下
 = | 
测试结果没有得到想要的，所以放弃了这种做法。要实现的输出：
方法一：是在层预先做数据格式化，再赋值给变量也可以用“计算属性”的方法。优点是简单易用，直接调用输出；缺点是在多种场景下调用的话，就会出现重复的代码。
方法二：封装公用组件，将数据处理放在组件内部，再将组件定义为全局组件。优点是可重复调用，统一处理方法，一处修复全局生效。缺点是在组件嵌套时，需要单独引入组件。
下面是组件示例代码：

定义到全局组件：

调用示例：

、生命周期变化，意味着来原的逻辑将会有大的调整

图：版本

图：版本    
在中使用钩子的地方需要替换，在中可以使用替代，可以参考官方文档

当然，在整个业务逻辑中，如果使用了上述其它钩子，也需要做调整。
、升级，导航钩子变化较大，带来的代码改造相对较多
详细的升级说明，请参考官方文档：
在中，当页面上有鉴权操作时，我会用到钩子，鉴权失败后可以友好终止用户的访问。升级后，虽然官方文档中建议使用钩子替代，但缺点是无法访问，需要做回调来实现。
所以，我决定使用全局钩子来统一实现鉴权，实践证明能节省不少代码，在全局钩子中实现鉴权后，后续业务逻辑可以不再关注鉴权逻辑，代码更清爽了。

当然也非常好用，可以通过它来设置页面等一些后续操作。
在中，在加载数据环节，会用到钩子，它专用于设置当前组件的数据，在中，移除了此方法，确实带来了不便。文档建议使用对做响应，然后调用定义的方法来处理。
实际项目中，获取组件数据的可以在编译前执行，因此钩子可以用来处理数据，代码升级的改造量最小。
通过对做响应似乎有更重要的事情要做，看如下路由配置：

当路由带参数时，参数变化不会导致整个组件重新初始化，因此不会再执行事件。在这种场景下，就必须使用。
、关于组件的使用
在使用该组件时，需要考虑项目是否适用。下述情况不建议使用：
当数据交互相对较多的情况下，数据不会及时更新；
当页面需要带参数进行访问时，参数变化可能导致数据未更新；
需要及时鉴权的页面
我企鹅社区项目中，要让生效，需要在顶层入口添加指令，模板如下：



其中即是动态组件，此时会将整个项目的路由缓存起来有些路由我是不希望被缓存的，这也是我感到不够灵活的地方。
当然，事实也并非不可解决，提供了两个专用方法可以场景下使用：
：在组件激活时调用；
：在 组件停用时调用；
因此在部分场景下，可以借助钩子来对数据进行处理，同时也借助对做响应，可以实现带参数的页面动态起来。当然，这将带来巨大的代码改造量，需要仔细评估。
、实现遇到的坑

在配置相对简单，仅需要添加一个方法即可：
配置后，并没有得到预想的效果。在测试过程中，打印的值，始终为“，”，猜想触发的事件没有正确获得滚动位置，于是查阅了的实现代码

这里监控的是整个页面的滚动位置，而我们在实现上对、挂载节点上做了=的处理，导致滚动时并没有触发的。
于是，通过改造页面部局，将=的定义去掉后，终于生效了。但新的问题也随之而来，当的高度没有超过的高度时，会影响到页面上定义的浮层效果，所以优化无止境，还在探索中。
结束
此次升级原本计划天时间，而最终花费的时间是周。根据官方文档进行代码迁移后，仍然会有大量的报错，所以调试的过程也是深度理解变化的过程。
本文有一部分内容未提及，就是生产环境的升级，包括、和所依赖的库等系列工具，这部分虽然有一些变化，但都比较容易调整，这里就不多说了。
企鹅社区项目的移动版体验地址请扫二维码作者：张强

前言
在使用   之前，我们对微服务实践是没有太多的体会和经验的。从最初的开源软件云收藏来熟悉  ，到项目中的慢慢使用，再到最后全面拥抱  。
这篇文章给大家介绍我们使用     一年多的经验总结。
在开始之前我们先介绍几个概念，什么是微服务，它的特点是什么     都做了那些事情？他们三者之间又有什么关系？
什么是微服务
微服务的概念源于  年  月   所写的一篇文章“”。文中内容提到：微服务架构是一种架构模式，它提倡将单一应用程序划分成一组小的服务，服务之间互相协调、互相配合，为用户提供最终价值。
每个服务运行在其独立的进程中，服务与服务间采用轻量级的通信机制互相沟通通常是基于  的  。每个服务都围绕着具体业务进行构建，并且能够被独立地部署到生产环境、类生产环境等。
另外，应尽量避免统一的、集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具对其进行构建。
微服务是一种架构风格，一个大型复杂软件应用由一个或多个微服务组成。系统中的各个微服务可被独立部署，各个微服务之间是松耦合的。每个微服务仅关注于完成一件任务并很好地完成该任务。在所有情况下，每个任务代表着一个小的业务能力。
微服务架构优势
  复杂度可控
在将应用分解的同时，规避了原本复杂度无止境的积累。每一个微服务专注于单一功能，并通过定义良好的接口清晰表述服务边界。
由于体积小、复杂度低，每个微服务可由一个小规模开发团队完全掌控，易于保持高可维护性和开发效率。
 独立部署
由于微服务具备独立的运行进程，所以每个微服务也可以独立部署。当某个微服务发生变更时无需编译、部署整个应用。
由微服务组成的应用相当于具备一系列可并行的发布流程，使得发布更加高效，同时降低对生产环境所造成的风险，最终缩短应用交付周期。
 技术选型灵活
微服务架构下，技术选型是去中心化的。每个团队可以根据自身服务的需求和行业发展的现状，自由选择最适合的技术栈。
由于每个微服务相对简单，所以需要对技术栈进行升级时所面临的风险就较低，甚至完全重构一个微服务也是可行的。
 容错
当某一组件发生故障时，在单一进程的传统架构下，故障很有可能在进程内扩散，形成应用全局性的不可用。
在微服务架构下，故障会被隔离在单个服务中。若设计良好，其他服务可通过重试、平稳退化等机制实现应用层面的容错。
 扩展
单块架构应用也可以实现横向扩展，就是将整个应用完整的复制到不同的节点。当应用的不同组件在扩展需求上存在差异时，微服务架构便体现出其灵活性，因为每个服务可以根据实际需求独立进行扩展。
什么是  
  是由  团队提供的全新框架，其设计目的是用来简化新  应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。
用我的话来理解，就是   不是什么新的框架，它默认配置了很多框架的使用方式，就像  整合了所有的  包，  整合了所有的框架不知道这样比喻是否合适。
  简化了基于  的应用开发，通过少量的代码就能创建一个独立的、产品级别的  应用。  为  平台及第三方库提供开箱即用的设置，这样你就可以有条不紊地开始。
  的核心思想就是约定大于配置，多数   应用只需要很少的  配置。采用   可以大大的简化你的开发模式，所有你想集成的常用框架，它都有对应的组件支持。
  都做了哪些事
  是一系列框架的有序集合，它利用   的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用   的开发风格做到一键启动和部署。
 并没有重复制造轮子，它只是将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过   风格进行再封装、屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。
以下为   的核心功能：

分布式版本化配置。
服务注册和发现。
路由。
服务和服务之间的调用。
负载均衡。
断路器。
分布式消息传递。

我们再来看一张图：

解释一下这张图中各组件的运行流程：

所有请求都统一通过  网关来访问内部服务。
网关接收到请求后，从注册中心获取可用服务。
由  进行均衡负载后，分发到后端的具体实例。
微服务之间通过  进行通信处理业务。
 负责处理服务超时熔断。
 监控服务间的调用和熔断相关指标。

当然上面只是   体系的一部分，  共集成了  个子项目，里面都包含一个或者多个第三方的组件或者框架！
  工具框架：

  ，配置中心，利用  集中管理程序的配置。 
  ，集成众多  的开源软件。
  ，消息总线，利用分布式消息将服务和服务实例连接在一起，用于在一个集群中传播状态的变化 。
    ，利用   集成你的应用程序。
    ，为建立管理云托管服务的服务代理提供了一个起点。
  ，基于 、、、 实现的领导选举和平民状态模式的抽象和实现。
  ，基于   实现的服务发现和配置管理。
  ，在  代理中为   客户端和认证头转发提供负载均衡。
    ，应用的分布式追踪系统和 、、 兼容。
   ，一个云本地程序和操作模型，组成数据微服务在一个结构化的平台上。
  ，基于 、、 实现的消息微服务，简单声明模型用以在   应用中收发消息。
    ，基于   为外部系统提供  的集成。
  ，短生命周期的微服务，为   应用简单声明添加功能和非功能特性。
    。
  ，服务发现和配置管理基于  。
     ，快速和亚马逊网络服务集成。
  ，便于  应用在各种平台上连接到后端像数据库和消息经纪服务。
  ，项目已经终止并且在  后的版本和其他项目合并。
  ，插件用  快速的创建   组件应用。

这个数量还在一直增加
三者之间的关系
微服务是一种架构的理念，提出了微服务的设计原则，从理论为具体的技术落地提供了指导思想。
  是一套快速配置脚手架，可以基于   快速开发单个微服务。
  是一个基于   实现的服务治理工具包；  专注于快速、方便集成的单个微服务个体；  关注全局的服务治理框架。
    是微服务实践的最佳落地方案。
    微服务实践背景
 年初的时候，因为公司业务的大量发展，我们开始对原有的业务进行拆分，新上的业务线也全部使用独立的项目来开发，项目和项目之间通过  接口进行访问。
 年的业务发展非常迅速，项目数量也就相应急剧扩大，到了年底的时候项目达  多个，当项目数达到  几个的时候，我们就遇到了问题，经常某个项目因为扩展增加了新的  地址，就需要被动的更新好几个相关的项目。
服务越来越多，服务之间的调用关系也越来越复杂，有时候想画一张图来表示项目和项目之间的依赖关系，线条密密麻麻无法看清。下面有一张图可以表达我们的心情：

这个时候我们就想找一种方案，可以将我们这么多分布式的服务给管理起来，到网上进行了技术调研我们发现有两款开源软件比较适合我们，一个是 ，另一个是  。
刚开始我们是走了一些弯路的，这两款框架我们都不熟悉，当时国内使用   进行开发的企业非常的少，我在网上也几乎没找到太多应用的案例。但是  在国内的使用还是挺普遍的，相关的资料各方面都比较完善。
因此在公司扩展新业务线众筹平台的时候，技术选型就先定了 ，因为也是全新的业务没有什么负担，这个项目我们大概开发了  个月投产，上线之初也遇到了一些问题，但最终还比较顺利。
在新业务线选型使用  的同时，我们也没有完全放弃  ，我们抽出了一两名开发人员学习  ，我也参与其中。
为了验证   是否可以到达实战的标准，我们在业余的时间使用   开发了一款开源软件云收藏，经过这个项目的实战验证我们对   就有了信心。
最重要的是大家体会到使用   的各种便利之后，就再也不想使用传统的方式来进行开发了。
但是还有一个问题，在选择了   进行新业务开发的同时，并没有解决我们上面的那个问题，服务与服务直接调用仍然比较复杂和传统，这时候我们就开始研究  。
因为大家在前期对   有了足够的了解，因此学习   就显得顺风顺水了。所以在使用  半年之后，我们又全面开始拥抱  。
为什么选择使用   而放弃了 
可能大家会问，为什么选择了使用  之后，又选择全面使用   呢？其中有如下四个原因：
 从两个公司的背景来谈
，是阿里巴巴服务化治理的核心框架，并被广泛应用于中国各互联网公司；  是大名鼎鼎的  家族的产品。
阿里巴巴是一个商业公司，虽然也开源了很多的顶级的项目，但从整体战略上来讲，仍然是服务于自身的业务为主。
 专注于企业级开源框架的研发，不论是在中国还是在世界上使用都非常广泛，开发出通用、开源、稳健的开源框架是他们的主业。
 从社区活跃度这个角度来对比
 虽然也是一个非常优秀的服务治理框架，并且在服务治理、灰度发布、流量分发这方面做的比   还好，除过当当网在此基础上增加了  支持外，已有两年多的时间几乎没有任何更新了。
在使用过程中出现问题，开发者提交到  的  也少有回复。相反   自从发展到现在，仍然在不断的高速发展。
从  上提交代码的频度和发布版本的时间间隔就可以看出，现在   即将发布  版本，到了后期会更加完善和稳定。
 从整个大的平台架构来讲
 框架只是专注于服务之间的治理，如果我们需要使用配置中心、分布式跟踪这些内容都需要自己去集成，这样无形中增加了使用  的难度。
  几乎考虑了服务治理的方方面面，更有   这个大将的支持，开发起来非常的便利和简单。
 从技术发展的角度来讲
 刚出来的那会技术理念还是非常先进，解决了各大互联网公司服务治理的问题，中国的各中小公司也从中受益不少。
经过了这么多年的发展，互联网行业也是涌现了更多先进的技术和理念， 一直停滞不前，自然有些掉队，有时候我个人也会感到有点可惜，如果  一直沿着当初的那个路线发展，并且延伸到周边，今天可能又是另一番景象了。
 推出    也是因为自身的很多原因。 最初推崇的轻量级框架，随着不断的发展也越来越庞大，随着集成项目越来越多，配置文件也越来越混乱，慢慢的背离最初的理念。
随着这么多年的发展，微服务、分布式链路跟踪等更多新的技术理念的出现， 急需一款框架来改善以前的开发模式，因此才会出现     项目。
我们现在访问  官网，会发现   和   已经放到首页最重点突出的三个项目中的前两个，可见  对这两个框架的重视程度。
因此  曾经确实很牛逼，但是   是站在近些年技术发展之上进行的开发，因此更具技术代表性。
如何进行微服务架构演进
当我们将所有的新业务都使用   这套架构之后，就会出现这样一个现象：公司的系统被分成了两部分，一部分是传统架构的项目；另一部分是微服务架构的项目，如何让这两套配合起来使用就成为了关键。
这时候   里面的一个关键组件解决了我们的问题，就是 。在   架构体系内的所有微服务都通过  来对外提供统一的访问入口，所有需要和微服务架构内部服务进行通讯的请求都走统一网关。如下图：

从上图可以看出我们对服务进行了四种分类，不同服务迁移的优先级不同：

基础服务，是一些基础组件，与具体的业务无关。比如：短信服务、邮件服务。这里的服务最容易摘出来做微服务，也是我们第一优先级分离出来的服务。
业务服务，是一些垂直的业务系统，只处理单一的业务类型，比如：风控系统、积分系统、合同系统。
这类服务职责比较单一，根据业务情况来选择是否迁移，比如：如果突然有需求对积分系统进行大优化，我们就趁机将积分系统进行改造，是我们的第二优先级分离出来的服务。
前置服务，前置服务一般为服务的接入或者输出服务，比如网站的前端服务、 的服务接口这类，这是我们第三优先级分离出来的服务。
组合服务，组合服务就是涉及到了具体的业务，比如买标过程，需要调用很多垂直的业务服务，这类的服务我们一般放到最后再进行微服务化架构来改造，因为这类服务最为复杂，除非涉及到大的业务逻辑变更，我们是不会轻易进行迁移。

在这四类服务之外，新上线的业务全部使用     这套技术栈。
架构演化的步骤
架构演化的步骤如下：

在确定使用    这套技术栈进行微服务改造之前，请先梳理平台的服务，对不同的服务进行分类，以确认演化的节奏。
先让团队熟悉   技术，并且优先在基础服务上进行技术改造，推动改动后的项目投产上线。
当团队熟悉   之后，再推进使用   对原有的项目进行改造。
在进行微服务改造过程中，优先应用于新业务系统，前期可以只是少量的项目进行了微服务化改造，随着大家对技术的熟悉度增加，可以加快加大微服务改造的范围。
传统项目和微服务项目共存是一个很常见的情况，除非公司业务有大的变化，不建议直接迁移核心项目。

服务拆分
服务拆分的两个原则：

横向拆分。按照不同的业务域进行拆分，例如订单、营销、风控、积分资源等，形成独立的业务领域微服务集群。
纵向拆分。把一个业务功能里的不同模块或者组件进行拆分。例如把公共组件拆分成独立的原子服务，下沉到底层，形成相对独立的原子服务层。这样一纵一横，就可以实现业务的服务化拆分。

要做好微服务的分层：梳理和抽取核心应用、公共应用，作为独立的服务下沉到核心和公共能力层，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。
服务拆分是越小越好吗？微服务的大与小是相对的。比如在初期，我们把交易拆分为一个微服务，但是随着业务量的增大，可能一个交易系统已经慢慢变得很大，并且并发流量也不小。
为了支撑更多的交易量，我会把交易系统，拆分为订单服务、投标服务、转让服务等。因此微服务的拆分力度需与具体业务相结合，总的原则是服务内部高内聚，服务之间低耦合。
微服务  传统开发
使用微服务有一段时间了，这种开发模式和传统的开发模式对比，有很大的不同，如下面几点：

分工不同，以前我们可能是一个一个模块，现在可能是一人一个系统。
架构不同，服务的拆分是一个技术含量很高的问题，拆分是否合理对以后发展影响巨大。
部署方式不同，如果还像以前一样部署估计累死了，自动化运维不可不上。
容灾不同，好的微服务可以隔离故障避免服务整体  掉，坏的微服务设计仍然可以因为一个子服务出现问题导致连锁反应。

给数据库带来的挑战
每个微服务都有自己独立的数据库，那么后台管理的联合查询怎么处理？这是大家普遍遇到的一个问题。
有如下三种处理方案：

严格按照微服务的划分来做，微服务相互独立，各微服务数据库也独立，后台需要展示数据时，调用各微服务的接口来获取对应的数据，再进行数据处理后展示出来，这是标准的用法，也是最麻烦的用法。
将业务相关的表放到一个库中，将业务无关的表严格按照微服务模式来拆分，这样既可以使用微服务，也避免了数据库各种切换导致后台统计难以实现，是一个折中的方案。
数据库严格按照微服务的要求来切分，以满足业务高并发，实时或者准实时将各微服务数据库数据同步到  数据库中，在同步的过程中进行数据清洗，用来满足后台业务系统的使用，推荐使用 、 等。

三种方案在不同的公司我都使用过，第一种方案适合业务较为简单的小公司；第二种方案，适合想在原有系统之上，慢慢演化为微服务架构的公司；第三种适合大型高并发的互联网公司。
微服务的经验和建议
 建议尽量不要使用 ，页面开发推荐使用 
 项目建议独立部署 ，不要使用内嵌的 ，内嵌  部署  项目会偶现龟速访问的情况。
 服务编排是个好东西，主要的作用是减少项目中的相互依赖
比如现在有项目  调用项目 ，项目  调用项目 一直到 ，是一个调用链，那么项目上线的时候需要先更新最底层的  再更新 更新  更新  最后是更新项目 。
这只是一个调用链，在复杂的业务中有非常多的调用，如果要记住每一个调用链对开发运维人员来说就是灾难。
有一个好办法可以尽量的减少项目间的相互依赖，就是服务编排，一个核心的业务处理项目，负责和各个微服务打交道。
比如之前是  调用 ， 掉用 ， 调用 ，现在统一在一个核心项目  中来处理， 服务使用  的时候去调用 ，使用  的时候去调用 。
举个例子：在第三方支付业务中，有一个核心支付项目是服务编排，负责处理支付的业务逻辑， 项目使用商户信息的时候就去调用“商户系统”，需要校验设备的时候就去调用“终端系统”，需要风控的时候就调用“风控系统”，各个项目需要的依赖参数都由来做主控。以后项目部署的时候，只需要最后启动服务编排项目即可。
 不要为了追求技术而追求技术
需要考虑以下几方面的因素：

团队的技术人员是否已经具备相关技术基础。
公司业务是否适合进行微服务化改造，并不是所有的平台都适合进行微服务化改造，比如：传统行业有很多复杂垂直的业务系统。
  生态的技术有很多，并不是每一种技术方案都需要用上，适合自己的才是最好的。

总结
  对于中小型互联网公司来说是一种福音，因为这类公司往往没有实力或者没有足够的资金投入去开发自己的分布式系统基础设施，使用   一站式解决方案能在从容应对业务发展的同时大大减少开发成本。
同时，随着近几年微服务架构和  容器概念的火爆，也会让   在未来越来越“云”化的软件开发风格中立有一席之地。
尤其是在目前五花八门的分布式解决方案中提供了标准化的、全站式的技术方案，意义可能堪比当前  规范的诞生，有效推进服务端软件系统技术水平的进步。

作者：张强，曾经先后在互联网金融、第三方支付公司担任高级  工程师、架构师、技术经理、技术负责人等职务。在互联网金融领域工作期间，从零参与公司技术平台建设，组织平台进行过四次大架构升级，目前在一家第三方支付公司做架构师，负责支付公司大数据平台建设。
编辑：陶家龙、孙淑娟背景
现如今互联网时代，“快”正在成为一种潮流。发现用户需求，快速开发测试产品，迅速迭代，也许你就抢占了市场。
在曾经的团购市场，大众点评和美团为了抢占市场份额打得火热，双方也付出了沉痛的代价。但大众点评的张涛从消费者的角度出发，发现用户需求，提出 的概念。随之以手机支付为切入点推出“闪惠”并快速铺向市场。“闪惠”的出现帮助大众点评快速缩小与美团市场份额，从而使年月日，大众点评与美团在市场份额还有一定差距时双方以：的占比合并成为一家新的公司。
现在回想，假如大众点评没有快速推出“闪惠”这款产品，以当时的市场份额占比大众点评是不可能与美团以：的比例合并。因此现如今“快”意味着你离成功更近。
腾讯云服务器是一种专业的高性能高稳定的弹性伸缩的计算服务，它可以帮助您在几分钟内轻松搭建一台属于您的服务器，让您快起来！
为了展示云服务器的方便快捷，现在为您演示使用腾讯云服务器搭建一台属于自己的站点。
所需设备
办公电脑一台
操作步骤
、登陆腾讯云 、新建云服务器、选择云服务器的计费方式、地域、机型等信息。、选择系统镜像。选择“公共镜像”即安装的操作系统为纯净版系统，不带任何附加服务；“服务市场”中的镜像即为已经安装了某些服务的镜像，可以按需选择。本文因为是安装服务，即选择已经预装了的系统镜像。、设置“存储与网络”云硬盘：除了支持服务器的\内存升级服务之外，还支持数据的高可用达到本地硬盘：服务器的\内存\硬盘等无法升级，服务器到期之后硬盘数据一并删除。本次安装选择使用本地硬盘。、选择网络、确认服务器基本信息并设置服务器名称、登陆密码、以及端口策略、至此服务器的基本设置完毕、搭建自己的站点，暂且下载一个百度首页作为自己站点的主页、进入设置网站主页浏览配置文件所在的主目录将下载的百度页面拷贝到主目录并复制文件的完整名称文件名文件类型设置的默认文档浏览网站至此，在腾讯云服务器搭建服务器完毕！
结束语：
腾讯云服务器先较于传统服务器：弹性扩展，灵活配置；稳定可靠，数据安全；即买即用，快速部署；立体防护，专业支持；成本低廉，按需购买。欲了解云服务器更多，请点击链接。
互联网时代，唯快不破！腾讯云，助你一步登天！

相关推荐
【腾讯云的种玩法】从购买服务器到建站，从打造自己的网络领地
【腾讯云的种玩法】从到搭建自己的互联网领地
如何在腾讯云快速构建一个个人站点作者简介：梁定安，腾讯社交平台业务运维负责人，技术运营通道评委，腾讯云布道师，腾讯课堂讲师。

前言
运维团队审视业务质量监控能力时，有九个问题值得思考：

您产品的服务质量监控是度无死角的吗？ 
传统的监控手段是否足够有效发现问题？ 
用户投诉的问题中，如何快速识别是“个案”还是“共性问题”？ 
用户对产品的正负评价如何能有效的被产品经理感知到？ 
用户的求救信号能否被您的服务收到？ 
如何实现远程手摸手指导小白用户收集排障信息？ 
如何让运营事故尽可能不对用户体验造成太大的影响？ 
您的产品与竞品的差距有多少？ 
默默无闻的运维团队如何给业务传递技术运营的价值？九问运维后，我们重新审视传统的运维监控能力是否仍然能够满足业务对质量的要求，结合当下移动互联网与新兴的业务形态的质量诉求，规划与建设新型运维监控能力。

监控的手段
常见的互联网业务多为分布式的高可用架构，典型架构如下图，分价构成管理，用户通过运营商与客户端访问到企业的内网，获取互联网产品的功能和服务。基于典型的互联网架构，运维团队为保障业务的质量，使用常见的监控手段被划分成三种类型如下图：

主动监控，提前埋点，应用主动上报自身的运行情况
被动监控，无需埋点，从应用外部探测或获取服务的运行情况
旁路监控，与程序逻辑无关，对服务质量的监控 

在日常工作中，主动监控与被动监控是最广泛被采用的有效监控手段，它们的区别就是有没有代码级的预埋监控逻辑，俗称埋点。旁路监控是这次重点要介绍的新型监控手段，在靠后的篇幅会着重介绍。
基础监控
在传统的运维工作中，网络系统运维的工作内容相对其他运维工种更为基础，因此在传统监控能力中，对硬件性能和网络情况的监控被认为是最基础的监控能力。在腾讯的监控实践中，我们把这部分称之为基础监控能力，是主动监控的一种。顾名思义就是对硬件的、内存、硬盘、流量等硬件性能指标来监控，以达到发现软件层异常的一些目的。这类监控大部分的开源程序都支持，如、等等。随着技术的不断发展与演变，分布式计算、高可用架构、微服务的普及，单的异常影响面已经被弱化到最小的程度，因此基础监控的重要性已经逐渐降低，但是这并不意味着基础监控的数据不再重要。这些基础监控数据被使用在大规模的运维中，更贴近应用的监控或运维管理需求，例如，被用来评估整个模块的容量状况和趋势，或者会被抽象成一个与业务相关联的指标进行集中度量。 
基础监控的架构很成熟，主要的技术难点是，在分布式架构下多节点数据的采集与计算结果，因为基础监控数据往往被当成是其他上层监控的基础数据，所以对结果数据的实时性要求很高。可参考腾讯基础监控的架构实践，可以支持分钟颗粒度的监控数据展现。 
监控
在时代，社交业务突飞猛进的发展，为做好全局的监控，运维团队建设了测速返回码的监控能力，这也是主动监控能力的一部分。 

测速，包括两部分：网络连接的速度，页面渲染的速度。 
返回码，对于标准化的服务，可以统一监管起来。 

常见的测速监控做法是，提前嵌入的上报点，通过不同时间锚点的差值计算出对应操作的执行耗时。从而有监控数据可以发现页面打开耗时较大的点，技术人员可以开展相应的优化工作。测速数据可以被运用到考核服务质量的维度，下图是腾讯社交业务考核慢速用户的系统截图。监控方法中，还有一种常用的手段，是利用外部探测点对服务波测，以此来获取服务的质量数据的监控能力，在腾讯我们称之为自动化测试服务。这是一种被动监控的手段，无需业务开发配合修改代码，直接通过黑盒模拟用户访问我们服务或的传参，构造出与真实业务请求一样的对服务质量进行的波测。如下图所示，这种监控手段需要有测试人员或其他技术人员，提前编写好测试用例，并需要部署在不同分布点来模拟不同地域的用户请求，然后便可以通过定时任务调度来对服务质量进行波测。 自动化测试能够监控到主动监控无法发现的问题点，如下图运营商劫持等，是监控中最真实反馈用户使用情况的一种能力。但是，该监控方式依赖测试用例的编写与维护，需要投入的管理成本较高。在腾讯的海量业务的运维监控中，自动化测试是不可或缺的重要监控手段之一。 
服务端监控
在运维监控实践中，服务端监控是监控能力的很重要一环。这是一种主动监控手段，通过提供，业务程序主动实现接口调用质量与延时的监控数据上报，从而实现主调与被调两个角度的服务质量监控如下图。模块间调用监控系统是服务端监控在腾讯的实践，为了保证所有业务应用程序上线运营后，都能把质量数据上报到模调监控，使业务质量能被度量被监控，运维制定的标准化运营规范明确要求这点，以此保证与构建质量监控体系。
服务端监控还有很多实现形式，如日志监控，因篇幅关系便不展开介绍。可参考开源的方案
客户端监控
在移动互联网时代，社交用户习惯从转移到手机，客户端监控在整个监控体系中变得十分重要。在客户端监控的场景中，除了监控常用的成功率、延时、请求量这三大质量指标外，流畅度和卡顿率也是衡量客户端质量的很重要的指标。针对客户端监控的特殊性，我们主要采用注入方法实现客户端的监控和卡顿监控。 
监控的本质
上面介绍了几种典型的互联网监控方式，概括下监控的本质，无非就是把服务质量从请求量、成功率、耗时这三个纬度，通过不同的分析策略，最终产出图、表和告警。 
用户体验监控
大多数的监控系统都是这么设计实现的，从技术的角度看，主动监控与被动监控的手段可以覆盖完业务自身的所有质量问题，但是因为国内运营商网络互联互通的客观难题和移动多版本兼容性不佳的问题，造成了很多用户体验受损的情况。这些都无法被我们传统的监控手段有效的发现和告警，也就无法实现度无死角的监控。最坏的情况是，用户侧的问题我们无法及时发现和处理，导致产品口碑受损和用户流失。经过对用户反馈或投诉的数据进行分析，我们发现用户侧的问题主要集中在：

小众机型异常
用户侧故障定位和排障难
运营商劫持
本地网络配置错误
用户无法连接服务
用户对产品功能不满

负责跟进这类问题的运维同事发现，这些反馈和投诉都是非上述监控手段能够发现的，因为所有的投诉来源都不是格式化的数据，不是请求量、成功率、耗时这类常见的指标，而是从用户的言论中分析得到的。为了打造立体化的监控体系，我们建设了天网云用户体验监控系统，专门针对用户言论的监控，旨在从中能够及时监控到与服务质量相关的关键信息。
与传统的监控手段不同，用户体验监控是通过技术手段收集用户使用腾讯社交产品时的反馈或投诉言论，利用机器学习的技术手段对自然语言进行分词、语意识别、词组聚类等方法，实现社交业务的舆情监控能力。
用户的反馈言论主要来源于产品反馈论坛、评论与反馈功能，为了这些渠道的数据收集，运维提供了爬虫、、页面等能力，联合客户端开发实现了收集能力的埋点。对用户舆情监控，主要依赖对关键字的识别，但是靠人工配置关键字做监控告警，发现问题总是滞后的，不能达到监控的目的。因此，通过增量式词向量训练改进对用户的自然语言进行处理，使自动热词识别与关键词自动分类的准确率接近，舆情监控系统便可以基于此做好用户对业务的反馈言论监控。客户端植入用户反馈的页面后，当用户主动触发问题反馈或投诉时，结合可以采集到用户本地网络的信息、等网络指标，不涉及隐私，再与整个大盘用户数据做对比，可以快速识别个体问题。用户体检监控上报数据的通道是走专属域名，降低了被劫持的风险，与常规的客户端监控形成双通道的上报方案，以保障监控数据最终能够上报到服务端。
随着用户体验监控平台的推广，腾讯社交网络事业群的所有业务都接入了该监控平台，也对用户体验监控提出了新的要求——运营闭环管理。既然是用户体验监控，就应该给用户更好的体验。当用户反馈了问题后，我们需要有流程实现对问题的跟进，并且对用户提出的问题也做出及时的反馈。用户体验监控平台弥补了常规技术手段难以发现的空缺，也是腾讯运维在构建立体化监控体系的一个新的成功尝试，在该平台持续的运营过程中，我们还逐步完善了其他的监控能力，使其能更接近产品、开发、运维的监控需求，为业务输出更大的价值。天网云用户体验监控平台已经完成产品化的改造，可以在 腾讯云上申请接入使用。

相关推荐
腾讯云手机运维——腾讯云助手公众号
腾讯云监控告警的使用作者：柯灵杰 

一个优秀的图片组件应该具有这些特性：集并发控制，请求合并，下载，缓存，缓存自动淘汰，图片处理，动画的从数据源到图片显示的一站式解决方案。做到图片加载展示如丝般顺滑。
支持和代码布局，提供了对网络图片、系统相册图片、本地图片的加载与现实的支持。经过实际项目检验，性能优秀、运行稳定。
高度可定制性：可以和现有的任何下载组件和图片处理组件协同工作。
核心特性
  框架的结构设计具有很强的兼容性和扩展性
使用了桥接模式的中间件设计具有很强的兼容性和拓展性。
现有的项目中往往具有成型的下载组件，相册图片加载组件等相关图片加载组件。如果图片组件也具有相同功能就显得多余且不利于统一管理，而如果没有这些功能，又难以方便的使用。
为了解决这个问题。本框架仅仅实现了表层的图片显示，中间层的请求调度，对于底层的数据加载和数据处理采用插件化的形式，可以很轻易的桥接其他组件，形成一站式的解决方案。
  将图片进行预处理来降低内存的消耗和增加渲染速度
手机的内存是十分有限的，下载下来的图片大小往往比显示区域更大。这就造成了内存缓存资源的浪费，同时也降低了图片的渲染速度。在显示之前图片需要进行解码，缩放，显示这样的步骤。
为了优化内存，加快速度。框架提供了图片预处理的功能，根据实际的显示大小对图片进行解压、缩放处理，也就是后台线程预绘制。这样能降低图片占用的内存，并大幅提高图片的显示速度。
  优秀的缓存淘汰算法，对于缓存命中有很大的提升
常规的图片缓存往往对图片数量进行限制，进行简单粗暴淘汰。但是本框架提供了高效的图片大小估算方式，并可选的限制缓存总大小或是缓存图片数量，根据图片的使用频率和时间进行智能化的淘汰。并对于批量突发图片对于缓存的污染有良好的防范能力。
主要特性
  使用简单
只需要设置一个参数即可开始工作，其他参数都是可选的
  高度可定制性，可以和任意下载组件和图片处理组件协同工作
插件化的设计使得组件可以轻易的加入到任何的项目中，和项目中已有的下载和图片处理组件协同工作。
  支持、和代码布局
同时支持使用代码布局、布局、放入等多种操作方式，适应性强。
  支持并发控制
提供对多个请求的可配置并发数量控制。并对密集型和密集型操作分别进行控制，提高程序的性能，减少调度的开销。
  支持多种缩放模式
提供了对十几种常见缩放模式的支持，无需额外接入图片处理组件即可对图片进行初步的处理。
  使用后台线程加载、绘制
核心逻辑运行运行在后台线程，实现异步的图片加载和处理，高效提高组件的运行效率。
  高效的缓存
提供完善的缓存机制，大幅提高缓存的命中率，加快图片的显示速度。
  支持预绘制，减少线程压力
根据实际的显示大小对图片进行解压、缩放处理，也就是后台线程预绘制。这样能降低图片占用的内存，并大幅提高图片的显示速度。
  定制化进度条，失败、加载图片
可以设置图片的进度条，失败或加载状态显示的图片。
  渐变显示动画
支持图片加载完成后的渐变显示动画，使图片的显示更加平滑。
基本结构

组件由、、、、五大部分组成它们分别负责图片显示，请求管理，缓存，数据加载，数据处理。
图片显示
继承自聚合，实现对上层的委托，对外提供操作的接口。在时，对发起图片请求。收到传回的图片后显示在屏幕上。
请求管理

使用单例模式，对于所有发来的请求进行统一处理。并根据请求进行下一步的操作。
当收到一个新的请求时。首先进行重复请求判断，对于多个不同发来的相同的请求进行合并，加入中，在请求完成之后一同回调，防止重复请求。
然后，根据请求向查询内存缓存，如果缓存存在，则返回缓存图片，否则向发起图片请求。
返回图片之后，将图片传入中进行处理，处理完成之后传回给进行显示。
内存缓存
使用单例模式，由一个队列及一个队列以及一个组成，使用 缓存淘汰算法。
算法
当存在热点数据时，的效率很好，但偶发性的、周期性的批量操作会导致命中率急剧下降，缓存污染情况比较严重。
周期性的批量操作，会立即淘汰队列中的大量数据，导致缓存命中率大幅度下降。而常规操作中，有大量偶发批量操作，比如：进入页面后立即返回，就是很典型的一种。
所以算法并不是一个非常好的选择。

 算法
 算法是的改进版，含有一个队列及一个队列。
算法流程：
新访问的数据插入到队列；
如果数据在队列中一直没有被再次访问，则最终按照规则淘汰；
如果数据在队列中被再次访问，则将数据移到队列头部；
如果数据在队列再次被访问，则将数据移到队列头部；
队列淘汰末尾的数据。
在收到批量图片请求的时候，队列依然能保持缓存清洁。
 
数据加载

使用单例模式和桥接模式。本身并没有数据加载的功能，而是进行桥接，将其他有这样功能的组件连接起来。
在收到数据请求的时候，识别请求的类型，将其分发到相应的数据源。比如收到了一个为 的请求，发现具有处理这样的请求的能力，于是将请求转发给，并把请求回来的数据发回给。
因此，具有高度的可定制性，可以桥接任意的数据加载、下载组件，实现对网络文件，本地文件，相册文件等数据的加载。
图片处理
使用单例模式和桥接模式。本身不进行图像处理，而是桥接任意的图像处理组件。
与不同的是还实现了对多个图片操作的串行连接和并发控制。就像一个流水线一样的，将图片进行多种处理操作之后传回给，并在流水线的入口进行控制，防止堵塞。
因此，也具有高度的可定制性，可以轻松的与任意图片处理组件协作工作。


完整流程
设置或者大小改变，都会触发。

显示并；

向请求图片；

判断请求是否重复，决定是否合并请求；

向查询缓存；

返回缓存，并提高该缓存在缓存队列中的优先级；

如果没有缓存，向请求数据；

根据不同将请求分发给相应的加载数据；

返回加载完成的数据给；

将数据发送给进行处理；

根据请求中带有的对图片进行处理；

返回处理后的图片给；

请求写入新的缓存；

返回缓存图片有缓存时，或处理后的图片；

显示图片。


文章来自公众号 空间终端开发团队

相关推荐  启动连续闪退保护方案 预审总被拒腾讯教你提升审核通过率编辑：郭凡

什么是局部图像特征？
基于传统的图像局部二值特征 的图像识别与匹配，有没有更简单的特征融合方法？
近日，社交网络运营部的高永强做了一个实验：将目前四种性能较好的二值特征描述子进行融合，会怎样？
实验结果显示，融合特征呈现最好性能，而且这种融合方法同样适用于多模型融合。他的这一“ 更简单”的方法发表在《》期刊隶属于分区二区后，引起了较多关注，影响因子为。下文为整理的部分内容—— 敲黑板，都是知识点！

作者简介：

高永强博士，年毕业于中国科学院大学，主攻图像处理、计算机视觉、机器学习及深度学习方向。目前在社交网络运营部数据中心知识发现组从事推荐及内容理解相关方面的工作，已发表期刊、会议多篇，并翻译视觉界经典教材《计算机视觉，一种现代方法第二版》。

知识点：图像特征
视觉属于人类高级感知，图像在人类感知环境中扮演着非常重要的角色。数字图像处理由成像机器获得，并可以对非人类所习惯的图像源进行加工和处理。同一张图，比如 ，人类看到的是图像画面，而计算机里存储的则是一串数字。这串数据矩阵就是图像数据，如何从这些图像数据中提取有效的图像特征，就是计算机视觉处理的前期研究工作。

   人眼中的图像与计算机眼中的图像显示
对于同一物体的识别，即图像识别问题，一般会采取如下几个任务步骤：
首先，提取图像特征用于表征图像；
其次，对提取特征进行建模以迎合完成不同的任务需求。
比如，采用计算近邻作为两种特征之间的相似度判定，而完成测试图与标准图的匹配或者识别。
在图像分类中，常常采用某个分类器预测输出这些特征标记的类别。同一个物体，由于受到拍摄环境、角度、距离、时期等影响，在图像中会呈现出不同的变化，所得到的特征就会有所区别，因此构造具有高鉴别性和鲁棒性的图像特征显得至关重要。鲁棒性，指控制系统在一定结构、大小的参数摄动下，维持其它某些性能的特性
图像特征是计算机视觉研究的基础，也是机器学习领域构成模式重要的一部分。特征的构造方式一般具有三种：
第一种是基于兴趣点构造，根据兴趣点的邻域构建图像块，采用人工设计或者学习的方式从该图像块提取特征，此类兴趣点通常只具有可鉴别性或者鲁棒性的点，包括比如角点、斑点、型点或者显著性点等；
第二种是基于稠密采样构造，根据网格对图像或者多个尺度的图像进行划分，在每个网格内进行人工设计或者经过学习的方式构造特征；
第三种是根据机器学习的理论框架，采用监督非监督的深度学习直接学习构造图像特征，采用深度学习的框架，优势在于对源图像到标记分类，完成对特征提取和分类的联合优化。
知识点：图像识别的常规步骤
对于一幅完整的图像，人们并非对所有的图像内容感兴趣，在图像识别应用中，可以通过一些具有代表性或可鉴别的关键点来判断该物体是什么。因此，在计算机视觉领域，常规的物体识别的步骤：
首先，提取具有可鉴别性的关键点，并根据这些关键点的邻域构造图像块；
其次，在这些图像块中进行特征提取用于表征这些具有可鉴别性的关键点；
再次，分别计算对应特征之间的距离，根据距离的大小判定两个关键点是否相似距离小于某个阈值判定为相似；
最后，根据匹配的关键点的个数来判定两幅图像是否相似。
特征描述子的应用领域很广，比如人脸识别、图像检索、场景分类和视频行为分析等。图像特征作为计算机视觉的底层运算，在视觉的中层编码学习和高层语义理解中体现极大作用。
知识点：局部图像特征描述子构建
局部图像特征对于分析和理解图像内容具有很重要的作用。近年来，局部图像特征 在图像处理和计算机视觉领域取得巨大成功。
传统的局部特征描述子构建如图 ，构建步骤为：
首先，构建图像块基于兴趣点周围形成图像块；
其次，将图像块进行归一化处理包括主方向旋转和尺度归一化；
最后，基于图像块构建特征描述子比如根据梯度直方图构建，、、等。
好的特征描述子除了具有很强的鉴别力，同时具有计算代价低、匹配速度快的特性。而对于特征描述子的匹配过程，往往采用彼此的距离作为度量准则，即两特征描述子的距离欧式距离或者汉明距离等小于某个阈值，认为该特征描述子对应的图像块是相似的，反之亦然。
然而，现实中，图像的拍摄往往存在拍摄时期、拍摄角度、当天光照和不同距离等变化因素，同时对于同一物体可能对于本身具有一定的畸变，该特征描述向量应具有很高鉴别性和鲁棒性。

  传统的局部特征构建方法
在先前的工作中，描述子广泛应用于多个视觉应用中，然而，描述子维度高、计算代价大等因素制约着该描述子在某些方面的应用，比如根据应用需求而需要处理更大数据量使得该特征很难在这些设备进行实时处理，又比如运行在具有较低计算能力的移动设备上……
由此可见，为了迎合这种需求，对应的特征描述子还应该具有快速生成、快速匹配和合理利用内存的特性。  根据成对的像素值比较进而二值化，将这些二值字符串拼接得到二值特征，即    。描述子在特征提取和匹配过程中计算代价非常低，并在公开数据库取得非常好的性能。
常见的构造二值特征描述子方式有两种：
第一种，根据像素值之间的比较进行二值化，从而构成对应的特征描述子。描述子对高斯随机形成的采样对进行比较，将比较的结果进行二值化；采用的方法对采样对进行学习采样，同时对采样对进行比较构成二值描述子；
第二种，根据已有的浮点型特征做一次变换，从而构成相应的二值描述子，这是由于直接对像素值二值化鲁棒性低。
知识点：两种类型的局部二值特征
这里介绍两种类型的二值特征：
第一类为基于技巧采样的二值特征构建方法，这类特征包括和特征。他们采用的方法去学复杂的非线性的局部二值特征表征，采用弱分类器族编码特定的区域和有意义的特征属性。和的区别在于弱分类选择的不同：采用的是的弱分类器为许多梯度方向图的线性组合；而采用的是单个梯度方向图。
第二类的二值特征构建方法为基于感受域进行采样，包括_和_特征。_和_的区别在于感受域的定义不同，_是采用高斯函数定义的感受域，_是采用的矩形作为的感受域。给出这三种二值特征的采用方式，其中和采用左图的采样方式，_采用中间图的采样方式，_采用右图的采样方式。
 
  左图为和的采样方式，中图为_的采样方式，右图为_的采样方式
实验：不同二值特征的融合
将目前四种性能较好的二值特征描述子进行融合，这四种特征分别为，，和。给定训练集和，分别代表正确匹配对和错误匹配对，我们目标是为了使得错误匹配对之间的距离大于正确匹配对之间的距离，定义如下：

实验结果：融合特征呈现最好性能
实验数据主要采用广泛使用的局部图像块数据集： 和 ，见 ，从左到右顺序依次来源于 数据库、数据库和数据库，其中大小为原图大小的四分之一，每个数据集包括超过的尺度归一化和旋转归一化的局部图像块，其分辨率为。每个图像块是由差分高斯检测子或者多尺度的角点检测器检测，并根据领域生成对应的图像块。每个数据子集提供有、和标准匹配对，其中为正确匹配对，另外为错误匹配对。
采用经过差分高斯检测子检测得到的数据集，并将每个图像块调整分辨率到，所有的图像块经过标准高斯分布进行滤波去噪。假阳性为时的召回率 为测试结果，即当查找的正确匹配对为时的错误率。

部分局部图像块数据库数据库
 给出四种基特征与融合特征的比较结果，其中训练数据集为数据库，每个特征的维度不同，测试数据集为数据库和 数据库，且数据量大小为包括正确匹配对和错误匹配对，的错误率为汇报结果，“”列，是由四种基特征的全部特征作为输入，优化所得，即、、和对应特征维度分别为、、和位。四种特征分别采用、、 和全部可提供维度作为融合的每组维度。正如表格所示，融合特征都呈现最好的性能最低的错误率。

  实验对比结果
这里，我们提出一种非常简单的特征融合的方法，并在局部二值特征的融合上取得了非常好的效果。更多的关于局部二值特征，以及特征融合的方法可以见我们最新的论文和。  _
参考文献
【】        “       ”  
【】        “         ”         
【】                       
【】      _                  
【】                           作者：丛磊，白山合伙人兼工程副总裁。年加入白山，主要负责云聚合产品的研发管理和云链产品体系构建等。年至年就职于新浪，原创始人，曾任总负责人兼首席架构师，年起，带领新浪云计算团队从事云相关领域的技术研发工作。注：是国内最大的公有云平台，拥有万用户拥有项发明专利，现任工信部可信云服务认证评委。

云给安全带来的影响
距离年发布服务已经过去了年，在这年里，发生的不仅仅是收入从几十万美金上涨到多亿美金，更重要的是云计算已经走进每一家企业。根据信通院发布的“云计算白皮书”，目前近的企业都已经开始使用云计算包括公有云、私有云等，这说明大规模云化对于企业而言已经不只是趋势，更是确凿的既成事实。
云化普及的同时也给安全带来很多挑战，主要包括：
云化导致以硬件设备为主的传统安全方式失效。我在跟企业交流时，不止一家企业提出了这样的担心：在上公有云的过程中，因为无法把已购买的硬件防护搬到云上，所以非常担心业务安全性。有趣的是，他们对于上云后的流量层攻击反倒不担心，因为他们认为云上的高防等产品可以解决大部分问题。云化导致了业务层的安全空白，这不仅发生在公有云环境，在私有云环境也时有发生，以 版本为例，至今仍缺少能够有效横向扩展的安全组件。
云化导致攻击作恶成本大大降低。云是领域里“共享经济”的再升级，从最早的租用升级进化到  租用，但这种“共享经济”在给企业带来成本降低、使用便利等益处的同时，也顺便给攻击者带来了同样的好处。按目前市场行情，攻击者租用一个公网弹性的成本可低至元天，租用一个平台的层的计算环境，每日成本也只有几元，如果是层的计算环境，成本还要更低。如此低的成本，致使攻击者不再像过去那样花大力气挖掘培养肉机，而是可以在瞬间轻松拥有用于攻击的计算网络资源。以白山服务的某著名互联网招聘领域客户为例，攻击者最多可以在一天内动用上万个以极低的频率爬取核心用户简历。
云化导致业务可控性降低，遭遇攻击的风险大大提高。实际上云客观造成了业务的复杂性和不可控性：大量自身或合作方的业务都跑在同一个云上，其中任何一个业务被攻击，都有可能对其他部分造成影响。不可否认，现有的隔离技术很成熟，以为例，通过计算时间片分配进而在执行指令间插入各种自旋锁可以精确控制执行体的分配，其他资源包括内存、也都可以恰当的控制。但在所有资源里，隔离性最脆弱的就是网络，尤其是公网，毕竟出口、域名等很难被隔离。
所以，我们不得不面对这样的现实：在享受云计算时代红利的同时，面临的业务层安全问题也越来越严重。
安全产品需要变革
遗憾的是，很多传统安全产品并没有跟上这个时代。最明显的例子，年前的防火墙就依靠着在命令行设定各种各样的工作；而年后的今天，一切的变化只是由命令行设定变成了界面设置，这不得不说是一种悲哀！

对于传统安全产品，设定是一种痛苦
我曾经听某著名安全厂商的布道师演讲，“买了我们的产品不代表你的业务就安全了，你必须学会怎么配置！”，这话听起来有道理，但遗憾的是，大多数公司的安全人员并不是公司的业务开发者，他们不知道业务页面应该从哪个过来、不应该接受哪个的请求，也不知道某个接口应该接受哪些参数，甚至不知道业务对于单个用户的合理访问频率区间。更遗憾的是，这些传统安全产品价值不菲，在你花了上百万银子后，很可能毫无作用，而最悲哀之处在于“你以为它在起作用！”
传统的安全产品因为必须要串接到业务中间，这带来了极大的不稳定性。虽然某些先进的硬件机制可以通过技术降低这个风险，但仍不可避免的是：串接会带来性能延迟带宽瓶颈。有些企业一开始购买了吞吐量的硬件安全产品，但当业务突增时，硬件却无法自由横向扩容。更麻烦的是，串行模式一旦分析的维度变得复杂如策略变多时，就注定会造成业务的访问延迟；而分析维度一旦少，如退化为只做固定时间内访问频率限制，又会造成识别错误率上升。这是传统安全产品无法解决的永恒矛盾体。
不幸的是，虽然传统安全产品存在诸多问题，但很多用户仍在默默忍受，甚至习惯了每天配置策略的工作。但这并不意味着合理。
在不便中，一直蕴藏着技术革新的机会！这时，机器学习来了！
机器学习是解决安全问题的金钥匙

机器学习发展史
机器学习其实早已到来。由上图中可以看出，目前大红大紫的深度学习，其源头神经网络，早在上世纪年代就已经被提出。从上世纪年代到本世纪，机器学习本身经历了几次平淡期和爆发期，随着大数据的发展和一些热点事件如战胜李世石机器学习又一次进入爆发期。
那么大数据和机器学习具有什么关系呢？这还要和深度学习挂钩，从理论上讲，深度学习本质上是利用多层的神经网络计算，代替传统特征工程的特征选取，从而达到媲美甚至超越传统特征工程进行分类算法的效果。基于这个逻辑，当标注样本足够多时即所谓“大数据”，通过深度学习就可以构造出非常强大的分类器，如判断一个围棋的棋局对哪方有利。
随着目前深度学习的火爆看似非常强大，但不幸的是，坦白讲目前的发展成熟度远没有达到可以取代人脑抑或接近人脑的水平。根据图灵测试理论，本身要解决的问题无外乎：识别、理解、反馈。
这三个问题逐步递进，真正智能的机器人最终可以跟人脑一样反馈，从而在图灵测试中无法区分它是人还是机器。
按当前发展情况，“识别”的进展目前效果最好，无论是图像、语音还是视频，目前很多厂商都可以做到很高的识别率；但“理解”就差强人意了，大家都用过苹果的，它还未能达到与人真正对话的程度；而反馈就更难了，这要求在理解的基础上不断地应变，同一个问题可能因对方身份、心情、交流场合不同，以不同的语气语调做出不同反应。
所以，目前应用机器学习效果非常好的领域，几乎都是某个特定领域内的识别问题，并非通用领域，如人脸识别、人机对弈人机对弈本质上也是某个棋种领域的识别问题：机器通过学习成千上万的棋局后，就可以自动识别某一棋局在一方走的情况下对谁有利。
非常幸运的是，安全领域中问题大多是特定场景下的识别问题，而非通用场景，也并未涉及理解和反馈，你只需要把相关数据交给机器学习系统，让它做出识别判断即可：安全或者不安全，不安全的原因。
正因为安全问题本质是特定领域内的识别问题，所以从理论上讲，机器学习非常适合应用在安全领域，是解决安全问题的金钥匙。
安全结合机器学习的难点
虽然机器学习早已存在，但是长久以来并未改变安全市场，以“土办法设定策略”立足的产品仍旧占据主导地位，究其原因，主要有以下几点：
不同于其他通用领域，安全领域的样本标注成本较高。对于机器学习而言，拥有海量、完整、客观、准确的标注样本异常重要，标注样本越多、越全面，训练出来的分类器才可能越准确。对于所有行业来讲，获取样本标注样本都并不容易，而安全领域尤为困难。如对人脸识别的标注，初中生甚至小学生就可以完成，但对于一次安全的威胁事件，就需要极具经验的安全人员才可以完成，两者的成本差距十分巨大。

某个注入攻击
如上图所示，这个注入攻击经多次复杂编码，非专业人事很难进行样本标注。所以目前在通用场景下，之所以安全领域中深度学习落地并不多，主要原因也是很难获取海量的标注数据。
不同于通用领域，安全领域的场景特点更加明显，判断攻击的标准会随着业务特点的不同而不同。以最简单的攻击为例，次 分钟的访问对于某些企业可能意味着破坏性攻击，但对其它企业则属于正常访问范围。所以，即便有大量的标注样本，某一企业的标注样本可能对于其他企业毫无用处，这也是导致安全领域应用机器学习较为困难的另一个重要原因。
针对传统的文本型攻击，传统思维认为简单的特征工程，甚至直接的正则匹配更有效。 
我们把攻击分为行为型攻击和文本型攻击两类：

行为型攻击：每个请求看起来都是正常的，但将其连接成请求走势图时，就会发现问题，如爬虫、撞库、刷单、薅羊毛等。以刷粉行为为例：每个请求看起来都是正常的，但攻击者可能动用大量在短时间内注册大量账号，并关注同一个用户。只有我们把这些行为连接起来一起分析时，才能发现问题。

文本型攻击：传统的漏洞类攻击，如注入、命令注入、攻击等，单纯的把一个请求看成是一段文本，通过文本的特征即可识别其是否为攻击。


当特征的维度空间较低，且有些维度的区分度很高时，通过简单的线性分类器，就可以实现不错的准确率，例如我们简单的制定一些注入的正则规则，也可以适用于很多场景。但是，这样的传统思维却忽略了召回率问题，实际上也很少有人知道，通过注入的正则规则，可以达到多少的召回率。同时，在某些场景，假如业务的正常接口通过传递语句，那么这种基于正则规则的分类器就会产生极高的误判。
然而传统安全厂商还尚未意识到这些问题。
传统安全人员并不了解机器学习。这是一个不争的事实，大量传统安全公司的安全人员精于构造各种漏洞探测、挖掘各种边界条件绕过，善于制定一个又一个的补丁策略，却并不擅长机器学习方面的内容，这也说明了这种跨界人才的稀缺和重要。
正是由于以上原因，智能的安全产品迟迟没有出现，但没人可以否认，用户其实早已厌倦驱动的规则模式，期待有一种可以适应大多数场景、能够针对行为或文本做深入分析、不需要复杂配置就可以达到高准确率和召回率的安全产品。
于是，我们用重新定义安全，因为我们坚信异常行为和正常行为可以通过特征识别被区分。
用重新定义安全
那如何解决安全领域的样本标注问题呢？机器学习分为两大类：监督学习和无监督学习。监督学习要求有精准的标注样本；而无监督学习则无需标注样本，即可以针对特征空间进行聚类计算。在标注困难的安全领域，显然无监督学习是一把利器。
应用无监督学习
无监督学习无需事先准备大量标注样本，通过特征聚类就可以将正常用户和异常用户区分开，从而避免大量样本标注的难题。聚类的方式有很多，如距离聚类、密度聚类等，但其核心仍是计算两个特征向量的距离。在安全领域，我们获得的数据往往是用户的流量或 日志，在做距离计算时，可能会遇到一个问题：每个维度的计算粒度不一样，如两个用户的向量空间里 返回码比例的距离是两个值的计算，而 的距离则是两个值的计算，这就涉及粒度统一归一化的问题。在这方面有很多技巧，比如可以使用距离来代替传统的欧式距离，距离的本质是通过标准差来约束数值，当标准差大时，说明样本的随机性大，则降低数值的权值，反之，当标准差小的时候，说明样本具有相当的规律性，则提高数值的权值。
无监督的聚类可以利用计算模型，可以把类别、簇数或者轮廓系数 看成计算模型中的隐变量，然后不断迭代计算来逼近最佳结果。最终我们会发现，正常用户和异常聚成不同的簇，之后就可以进行后续处理了。当然，这只是理想情况，更多情况下是正常行为与异常行为分别聚成了很多簇，甚至还有一些簇混杂着正常和异常行为，那么这时就还需要额外技巧处理。
学习规律
无监督聚类的前提是基于用户的访问行为构建的向量空间，向量空间类似：

这里就涉及两个问题：“如何找到”以及“如何确定”。
 找到合适的本质是特征选择问题，如何从众多的特征维度中，选择最具有区分度和代表性的维度。为什么不像某些一样，将所有特征一起计算？这主要是考虑到计算的复杂度。请注意：特征选择并不等同于特征降维，我们常用的主成分和分解只是特征降维，本质上的前几层某种意义上也是一种特征降维。
特征选择的方法可以根据实际情况进行。实验表明在有正反标注样本的情况下，随机森林是一个不错的选择。如果标注样本较少或本身样本有问题，也可以使用距离来挑选特征。
最终，用户的访问行为会变成一组特征，那特征的如何确定？以最重要的特征——访问频率为例，多高的访问频率值得我们关注？这需要我们对于每个业务场景进行学习，才能确定这些的。
学习的规律主要包括两大类：

行为规律：自动找出路径的关键点，根据状态转移概率矩阵，基于的 计算原理，网站路径的状态转移矩阵的最大特征值代表的就是其关键路径关键汇聚点和关键发散点，然后顺着关键点，就可以学习到用户的路径访问规律。

文本规律：对于，可以学习出其输入输出规律，如输入参数数量、每个参数的类型字符串数字邮箱地址等、参数长度分布情况，任何一个维度都会被学习出其概率分布函数，然后就可以根据该函数计算其在群体中的比例。即便是最不确定的随机分布，利用切比雪夫理论也可以告诉我们这些值异常。例如：假如 =中的参数，经过统计计算得出平均长度是，标准差是，如果有一个用户输入的长度是，那么该用户的输入在整体里就属于占比小于群体的小众行为。


通过特征选择和行为、文本规律学习，我们就可以构建出一套完整且准确的特征空间将用户的访问向量化，进而进行无监督学习。
让系统越来越聪明
如果一个系统没有人的参与，是无法变得越来越聪明的，强大如也需要在同人类高手对弈中不断强化自己。在安全领域，虽然完全的样本标注不可能，但是我们可以利用半监督学习的原理，挑选具有代表性的行为交给专业的安全人员判断，经过评定校正，整个系统会越发聪明。安全人员的校正可以与强化学习和集成学习结合实现，对于算法判断准确的情况，可以加大参数权重，反之则可以适当减少。
类似的想法出现于国际人工智能顶级会议 的最佳论文之一，“       ”，的团队，提出了基于半监督学习的系统，可以在有限人工参与的情况下，让安全系统更安全更智能。
重新定义安全
基于上述几点，我们基本可以勾勒出基于的安全的基本要素：

 安全技术栈
从图中可以看到，所有算法均包含在实时计算框架内。实时计算框架要求数据流的输入、计算、输出都是实时的，这样才可以保证在威胁事件发生时系统迅速做出反应。但是，实时计算的要求也增加了很多挑战和难点，一些传统离线模式下不是问题的问题，在实时计算下会突然变成难题。如最简单的中位数计算，要设计一套在实时流输入的情况下同时还能保证准确性的中位数算法并不容易，是一个不错的选择，可以限定在的内存使用空间。还有一些算法可以实现在内存占用的情况下计算相对准确的中位数。
综上所述，我们可以看出利用实现安全是一个必然的趋势，它可以颠覆传统基于配置模式的安全产品，实现准确全面的威胁识别。但是，构造基于的安全产品本身也是一个复杂的工程，它涉及特征工程、算法设计和验证，以及稳定可靠的工程实现。

深度威胁识别系统
白山一直在基于的安全方面探索，并于年月正式推出  ，深度威胁识别产品，可以准确识别并拦截各种行为或者文本攻击，包括爬虫、恶意注册、撞库、刷单刷票、薅羊毛、各种注入攻击脚本攻击等，短短半年内已经积累了余家大中型企业客户。实践证明，机器学习确实在安全方面收效颇佳，如：

国内某招聘网站，长期以来一直被爬取简历，这些恶意爬虫非常智能，在、等字段上完全模拟正常用户，并内嵌，可以执行脚本，使传统的跳转防御方式完全失效。这些爬虫动用大量弹性，以极低频率抓取，据统计，单个客户端每天最低可以低至十次以下，传统的安全产品对此完全丧失防御能力。而基于机器学习的 则可以通过特征向量建模，准确区分低频爬虫与正常用户行为。经验证，准确率高达。

国内某直播平台，存在大量的恶意刷分刷排名情况，这种行为破坏了平台的公平性，本质上损害了平台利益。作恶团伙事先批量注册大量小号，在需要时冲排名。这些行为显然传统安全产品无能为力，某些新兴安全产品虽然可以解决，但需要大量定制化规则，通用性较差。机器学习算法正好弥补了以上不足，通过行为分析可以计算出关键路径和规律，然后利用子图识别等算法分析出作恶团伙，最终输出账号。经用户验证，的准确率高达以上，召回率比传统安全产品提高倍以上。


总之，基于的安全是新兴的技术领域，虽然目前还处于发展期，但最终一定会取代以为驱动的传统安全产品，成为保证企业安全的基石。作者：莫卓颖

可视化前端测
背景
相信进行过前端开发的同学都知道，前端测试不仅仅涉及到功能的测试，而且也需要考虑到界面样式测试、多浏览器兼容性测试、性能测试。本文主要讨论分析目前前端测试的现状，并讨论目前流行的测试工具，下篇文章将会介绍工具的使用方法。
前端测试分类
前端测试主要分三大方向测试，而这三大方向也分很多小方向测试，首先简单的介绍每个方向的概念。

界面样式测试 
固定界面样式测试：主要针对文字内容不变的区域，例如页面的页头，页脚这类结构、内容不变的区域，而测试一般通过截图对比解决。
结构不变界面样式测试：主要针对结构不变的区域，例如新闻区域这类结构不变，内容变化的区域，这类测试一般通过元素对比解决。
计算样式测试：主要针对计算样式不变的区域，这类测试一般通过比较计算样式解决，但是这种测试不推荐，因为测试成本比较大。

功能测试 
服务器数据预期测试：主要针对用户在前端界面进行某种操作后，提交数据给后台后，测试后台能否返回预期的数据
界面功能测试：主要针对用户在前端界面进行某种交互性操作后，测试能否获取预期的功能、界面交互

多浏览器测试 
多浏览器测试：基于界面样式测试、功能测试的基础上来进行不同浏览器的的测试。

性能测试 
白屏时间：用户浏览器输入网址后至浏览器出现至少画面为止。
首屏时间：用户浏览器首屏内所有的元素呈现所花费时间。
用户可操作时间  ：网站某些功能可以使用的时间。
页面总下载时间网站中所有资源加载完成并且可用时间。


前端测试工具
欲善其事必利其器，在深入讨论如果打造可视化测试工具之前，我们先得讨论目前前端流行的测试工具。

 
工具地址：
工具介绍：是一个基于  的服务器端  。它全面支持而不需浏览器支持，其快速，原生支持各种标准：  处理  选择器   和 。  可以用于 页面自动化 ， 网络监测 ， 网页截屏 ，以及 无界面测试 等简单来说就是通过操作浏览器。
工具可测试类型：性能测试、功能测试、界面测试。
工具点评：作为众多测试工具的核心基础库，可谓无所不能，基本上在前端测试领域只有你想不到的，没有它做不到的，但是也正是因为的功能过于强大，更加接近原生浏览器，导致其语法十分晦涩。

 
工具地址：
工具介绍： 是基于作为内核的测试工具，为界面测试、功能测试提供了更加易用的 增强了测试的便利性。
工具可测试类型：性能测试、功能测试、界面测试。
工具点评：极大的简化了的接口，特别在前端测试方面，封装了大量相关的函数，而且支持定制化的单元测试结果。

 
工具地址：
工具介绍：是基于作为内核，并结合 去进行图像像素级的比较，支持不一致的地方。
工具可测试类型：界面测试。
工具点评：加强了在界面测试中图像比较的不足，在的基础上提供更加易用的图像比较接口。


工具地址：
工具介绍：是一个用于应用程序测试的工具。测试直接运行在浏览器中，就像真正的用户在操作一样。支持的浏览器包括、、、 、 等。这个工具的主要功能包括：测试与浏览器的兼容性——测试你的应用程序看是否能够很好得工作在不同浏览器和操作系统之上。
工具可测试类型：多浏览器测试。
工具点评：作为多浏览器的测试工具，解决前端在多浏览器测试的空缺。但与类似语法十分晦涩难懂，而且各个浏览器之间的兼容性对比比较容易出错。因不同浏览器之间由于标准原因很难做到像素级别的比较，因此不推荐使用作界面比较比较测试，而推荐进行功能回归测试。




 工具地址：
工具介绍：基于的性能数据收集工具。
工具点评：作为自动化性能数据收集工具，解决了日常性能数据收集的问题的，但是性能优化的指标数据需要的是大样本、更加贴近用户数据的平均值，而不是使用假设在条件良好的环境下获取的性能数据，因此更推荐使用作性能异常监控，而不是性能指标的评测。


总结：
随着互联网产品的日益复杂，前端的单页面应用、前端界面、前端功能逻辑变得越来越复杂，为了保证功能的正常，因此前端测试变得越来越重要，但是进行前端测试必然会影响到前端开发的效率，因此我们后面将会提供一种自动化前端测试方案来平衡效率与稳定性的问题。

原文链接：


相关推荐打造前端工程测试体系 【腾讯】精准测试之精简用例作者：郭林烁 

 的实践从去年在  家校群开始，由于  上的网络及环境都相当好，所以在使用时可谓一帆风顺，偶尔遇到点小磕绊，也能够快速地填补磨平。而最近一段时间，我们将手的家校群重构成 ，除了原有框架上存在明显问题的原因外，选择也是因为它确实有足够的吸引力以及优势，加之在家校群上的实践经验，斟酌下便开始了，到现在已有页面在线上正常跑起。
由于移动端上的网络及环境迥异，性能偏差。所以在移动端上用  时，遇到了不少的坑点，也花了一些力气在上面。关于在移动端上的优化，可看我们团队的另一篇文章的 移动端极致优化
一提到优化，不得不提直出
关于这块可以查看  直出理论与实践总结，这篇文章较详细的分析直出的概念及一步步优化，也结合了 手家校群使用快速的数据直出方式来优化性能的总结与性能数据分析。
一提到 ，不得不提同构
同构基于服务端渲染，却不止是服务端渲染。
服务端渲染到同构的这一路
后台包办
服务端渲染的方案早在后台程序前后端包办的时代上就有了，那时候使用、等动态语言将数据与页面模版整合后输出给浏览器，一步到位

这个时候，前端开发跟后端揉为一体，项目小的时候，前后端的开发和调试还真可以称为一步到位。但当项目庞大起来的时候，无论是修改某个样式要起一个庞大服务的尴尬，还是前后端糅合的地带变得越来越难以维护，都很难过。
前后分离
前后端分离后，服务端渲染的模式就开始被淡化了。这时候的服务端渲染比较尴尬，由于前后端的编码语言不同，连页面模板都不能复用，只能让在前后端开发完成后，再将前端代码改为给后端使用的页面模板，增大了工作量。最终也还是跟后台包办殊途同归。
语言变通
 驾着祥云腾空而来，谷歌  引擎给力支持，众前端拿着看家本领开始涉足服务端，于是服务端渲染上又一步进阶

由于前后端时候的相同的语言，所以前后端在代码的共用上达到了新的高度，页面模版、  都可以做成前后通用。同构的雏形，只是共用的代码还是有局限。
前后同构
有了 后，前端便有了更多的想象空间。前端框架开始考虑兼容服务端渲染，提供更方便的 ，前后端共用一套代码的方案，让服务端渲染越来越便捷。当然，不只是  做了这件事，但  将这种思想推向高潮，同构的概念也开始广为人传。

关于  网上已有大多教程，可以查看阮老师的。关于  上的数据流管理方案，现在最为火热的  应该是首选，具体可以查看另一篇文章  数据流管理架构之，此篇就不再赘述，下面讲讲  同构的理论与在手家校群上的具体实践总结。
 同构
 虚拟 
 的虚拟  以对象树的形式保存在内存中，并存在前后端两种展露原型的形式


客户端上，虚拟  通过  的  方法渲染到页面中

服务端上， 提供的另外两个方法： 和  可将其渲染为  字符串。


 同构的关键要素
完善的  属性及生命周期与客户端的  时机是  同构的关键。
 的一致性
在前后端渲染相同的 ，将输出一致的  结构。
不同的生命周期
在服务端上  生命周期只会到 ，客户端则是完整的。
客户端  时机
同构时，服务端结合数据将  渲染成完整的  字符串并将数据状态返回给客户端，客户端会判断是否可以直接使用或需要重新挂载。
以上便是  在同构服务端渲染的提供的基础条件。在实际项目应用中，还需要考虑其他边角问题，例如服务器端没有  对象，需要做不同处理等。下面将通过在手家校群上的具体实践，分享一些同构的  及优化成果
以手家校群  同构实践为例
手家校群使用      的架构。
同构实践 
  和 
 提供  和  的方法，大多数情况使用 ，这样会为组件增加 。

 在客户端通过  判断是否需要重新。
相同时则不重新，省略创建和挂载的过程，接着触发  等事件来处理服务端上的未尽事宜事件绑定等，从而加快了交互时间；不同时，组件将客户端上被重新挂载 。
 则不会生成与  相关的，也不存在 ，输出的  如下

在客户端时组件会被重新挂载，客户端重新挂载不生成  也没这个必要 ，所以该方法只当服务端上所渲染的组件在客户端不需要时才使用

 服务端上的数据状态与同步给客户端
服务端上的产生的数据需要随着页面一同返回，客户端使用该数据去 ，从而保持状态一致。服务端上使用  而在客户端上依然重新挂载组件的情况大多是因为在返回  的时候没有将服务端上的数据一同返回，或者是返回的数据格式不对导致，开发时可以留意  上的提示如

 服务端需提前拉取数据，客户端则在  调用
平台上的差异，服务端渲染只会执行到  上，所以为了达到同构的目的，可以把拉取数据的逻辑写到   的静态方法上，一方面服务端上可以通过直接操作静态方法来提前拉取数据再根据数据生成 ，另一方面客户端可以在  时去调用该静态方法拉取数据。
 保持数据的确定性
这里指影响组件  结果的数据，举个例子，下面的组件由于在服务端与客户端渲染上会因为组件上产生不同随机数的原因而导致客户端将重新渲染。
    {
   {
     {}
  }
}

可以将  封装至 的  中，在服务端上生成随机数并传入到这个中，从而保证随机数在客户端和服务端一致。如：
    {
   {
     {}
  }
}

服务端上传入
  = 
  =  ={} 

 平台区分
当前后端共用一套代码的时候，像前端特有的  对象， 请求 在后端是无法使用上的，后端需要去掉这些前端特有的对象逻辑或使用对应的后端方案，如后端可以使用  替代  请求，所以需要进行平台区分，主要有以下几种方式
代码使用前后端通用的模块，如 
前后端通过 配置  对应不同的文件，如客户端使用  来做  请求
 {
     {
          
    }
}

服务端  上使用  以  替代  请求
 {
     {
          
    }
}

使用  在构建时添加一个平台区分的值，这种方式的在   编译后，非当前平台 不可达代码 的代码将会被去掉，不会增加文件大小。如在服务端的  加上下面配置
 {
    ____ 
}

在逻辑上做判断
____{
       
}  {
       
}

 是浏览器上特有的对象，所以也可以用来做平台区分
  =   === 
  {
       
}  {
       
}

 只直出首屏页面可视内容，其他在客户端上延迟处理
这是为了减少服务端的负担，也是加快首屏展示时间，如在手家校群列表中存在 “我发布的” 和 “全部” 两个 ，内容都为作业列表，此次实践在服务端上只处理首屏可视内容，即只输出 “我发布的” 的完整，另外一个的内容在客户端上通过  的   机制来动态挂载，无页面刷新的感知。

  中依赖数据变化的方法，需考虑在  做兼容
举个例子， 默认为 ，从后台拉取到数据后，更新其值，从而触发  方法
 {
      ==  
          ==  {
        
    }
}

同构时，由于服务端上已做了第一次数据拉取，所以上面代码在客户端上将由于  已存在而导致永不执行  方法，解决方式可在  做兼容处理
 {
      判断是否为同构 
      ==  {
        
    }
}

 在服务端上的使用方式 
下图为其中一种形式，先进行数据请求，再将请求到的数据  一个 ，通过在将数据进行  的  化。还有其他方式，如直接  一个 ，在里面去做数据请求，后续是一样的，不过这样就要求请求数据的模块是  即前后端通用的。
 设计好   
设计好   是使用  的关键，而在服务端上，合理的扁平化  能在其被序列化时，减少  消耗。
 两个  在同个中数据存在依赖关系时，考虑的异步问题 
客户端上，由于  中  的异步机制，所以在同个中触发多个，会出现一种情况是：第一个  对  的改变还没来得及更新时，第二个便开始执行，即第二个  将使用到未更新的值。
而在同构中，如果第一个  如下的 是在服务端执行了，第二个  在客户端执行时将使用到的是第一个  对  改变后的值，即更新后的值。这时，同构需要做兼容处理。
 {
     
}
 {
    
}

  在同构上的姿势 
手家校群上使用了  来保证数据的不可变，提高数据对比速度，而在同构时需要注意两点服务端上，从  中拿到的  为对象，需转成  再同返回；
客户端上，从服务端注入到上的  数据，需要将其转成 对象，再放到  中，如
 ____ = ____
  = ____

 使用  去做  语法兼容 
实际上，如果是一个单独的服务的话，可以使用提供的方式来让环境兼容好 
{
     
     
}


但如果是以同一个直出服务器，多个项目的直出代码都放在这个服务上，那么，还是建议使用  的方式去兼容 ，减少  对全局环境的影响。使用  的话，在项目完成后，可将  代码编译成  再放到真正的  上，这样也可以减少动态编译耗时。
 不使用  的    的方式
使用时，默认是将文件以    的方式打包起来，这种情况将增加服务端运行耗时，通过将  外链，或在打包成独立的文件后再进去，可以减少服务端的处理耗时及负荷。
  在服务端编译时慎用
上面提及使用编译后的代码放到真正的上去跑，在前端发布前一般会进行代码，而后端实际上没多大必要，在实际应用中发现，使用  后运行服务端会报错，需慎用。
 纠正  与  的值 
当服务端代码需要使用到  时，需在  配置  为 ，并在  中声明和为，否则拿不到准确值，如在服务端代码上添加  和 __  
在服务端使用的  上指定  为 ，如下
  
 {
    __ 
    __ 
}

经  编译后输出如下代码，可看出   和  将正确输出注：需考虑生成的路径是否能在不同系统上跑，如下图是在下，使用的是双斜杠。

而不在上配置时，则为  ，则为文件名，这是不正确的。

将  编译后的文件暴露出来 
 使用  将一个模块编译后将形成一个立即执行函数，函数中返回对象。如果需要将编译后的代码也作为一个模块供其他地方使用时，那么需要重新将该模块暴露出去 如当业务上的直出代码只是作为直出服务器的其中一个任务时，那么需要将编译后的代码作为一个模块  出去，即在编译后代码前重新加上  =，从而直出服务将能够使用到这个编译后的模块代码 。写了一个  插件来自动添加 ，比较简单，有兴趣的欢迎使用 ，效果如下：
编译前

编译后

使用 编译后将带上

 去掉和浏览器专用模块
当服务端上不想处理样式模块或一些浏览器才需要的模块如前端上报时，需要在服务端上将其忽略。尝试  自带的  插件后出现一些奇奇怪怪的问题，重温 如何开发一个    一  时想起  在执行时会将原文件经 进行转换，如  转成 等。所以想法是将在服务端上需要忽略的模块，在前执行前就将其忽略。写了个 ，可以将需要忽略的模块在  执行前直接返回空，所以后续就不再做其他处理，简单但也满足现有需求。
优化成果
服务端上的耗时增加了，但整体上的首屏渲染完成时间大大减少。
服务端上增加的耗时
服务端渲染方案将数据的拉取和模板的渲染从客户端移到了服务端，由于服务端的环境以及数据拉取存在优势详见 直出理论与实践总结，所以在相比下，这块耗时大大减少，但确实存在，这两块耗时是服务端渲染相比于客户端渲染在服务端上多出来。所以本次也做了耗时的数据统计，如下图。

从统计的数据上看，服务端上数据拉取的时间约  ，服务端耗时为 ，这两块时间的和为  ，这耗时还是比较大。所以此次在同构耗时在计算上包含了服务端数据拉取与模板渲染的时间。
首屏渲染完成时间对比
服务端渲染时由于不需要等待  加载和 数据请求详见 直出理论与实践总结，在首屏展示时间耗时上将大大减少，此次在手家校群列表页首屏渲染完成时间上，优化前平均耗时约 ，而同构优化后平均耗时为  ，有了  的优化，提升约  的性能，秒开搓搓有余 


优化前与优化后的页面展示情况对比
优化前

优化后同构直出

可明显看出同构直出后，白屏时间大大减少，可交互时间也得到了提前，产品体验将变得更好。
总结
服务端渲染的方式能够很好的减少首屏展示时间， 同构的方式让前后端模板、类库、以及数据模型上共用，大大减少的服务端渲染的工作量。
由于在服务端上渲染模板， 时过多的调用栈增加了服务端负载，也增加了  的压力，所以可以只直出首屏可视区域，减少层级，减少调用栈，最后，做好容灾方案，如真的服务端挂了 虽然情况比较少 ，可以直接切换到普通的客户端渲染方案，保证用户体验。
以上，便是近期在  同构上的实践总结，如有不妥，恳请斧正，谢谢。
 查看更多文章 现在人工智能是个大热点，而人工智能离不开机器学习，机器学习中深度学习又是比较热门的方向，本系列文章就从实战出发，介绍下如何使用进行深度学习
既然是实战而且本文是入门级别的我们就不讲那么多大家都听不懂的数学公式啦～

 深度学习简介
虽然吧，我们不讲哪些深奥的数学原理，但是基本的原理还是要掌握下的～
在介绍深度学习之前我们要先了解两个概念，机器学习和神经网络。
机器学习：
在介绍深度学习之前，我们先简单介绍下机器学习，我们引用下维基百科上机器学习的定义：
机器学习是人工智能的一个分支。人工智能的研究是从以“推理”为重点到以“知识”为重点，再到以“学习”为重点，一条自然、清晰的脉络。显然，机器学习是实现人工智能的一个途径，即以机器学习为手段解决人工智能中的问题。机器学习在近多年已发展为一门多领域交叉学科，涉及概率论、统计学、逼近论、凸分析、计算复杂性理论等多门学科。
机器学习理论主要是设计和分析一些让计算机可以自动“学习”的算法。机器学习算法是一类从数据中自动分析获得规律，并利用规律对未知数据进行预测的算法。因为学习算法中涉及了大量的统计学理论，机器学习与推断统计学联系尤为密切，也被称为统计学习理论。算法设计方面，机器学习理论关注可以实现的，行之有效的学习算法。很多推论问题属于无程序可循难度，所以部分的机器学习研究是开发容易处理的近似算法。
简单的说机器学习就是让机器去分析数据找规律，并通过找到的规律对新的数据进行处理。
神经网络：
神经元：

以图像为例子，每个数据或者输入就是一张图片，而里面的每个可以是图片中的每个像素。对于每个像素我们都赋予一个权重，然后经过转换函数  这里是线性叠加得到一个数值。简单来说，我们对所有像素做个线性加权叠加。得到的数值会经过激活函数得到新的数值。这个激活函数 往往是那几个符合某些特性的非线性函数。为什么需要非线性的转换呢？举个简单的例子，在同一个平面你和你的影子是重叠是分不开的，在立体的空间你们却能分开了。非线性的转换有类似的作用。常用的激活函数有  。
简单的说一个神经元是一个简单的分类器，你输入一个
比如我们有一大堆猫、狗照片，把每一张照片送进一个机器里，机器需要判断这幅照片里的东西是猫还是狗。我们把猫狗图片处理一下，左边是狗的特征向量，右边是猫的

大家想想，最简单地把这两组特征向量分开的方法是啥？当然是在两组数据中间画一条竖直线，直线左边是狗，右边是猫，分类器就完成了。以后来了新的向量，凡是落在直线左边的都是狗，落在右边的都是猫。
一条直线把平面一分为二，一个平面把三维空间一分为二，一个维超平面把维空间一分为二，两边分属不同的两类，这种分类器就叫做神经元。
当然，上面那幅图我们是开了上帝视角才知道“一条竖直线能分开两类”，在实际训练神经元时，我们并不知道特征是怎么抱团的。神经元模型的一种学习方法称为算法：
先随机选一条直线平面超平面，然后把样本一个个拿过来，如果这条直线分错了，说明这个点分错边了，就稍微把直线移动一点，让它靠近这个样本，争取跨过这个样本，让它跑到直线正确的一侧；如果直线分对了，它就暂时停下不动。因此训练神经元的过程就是这条直线不断在跳舞，最终跳到两个类之间的竖直线位置。
神经网络：
神经网络简单点将就是由好多个神经元组成的系统。
神经元一个缺点是：它只能切一刀！你给我说说一刀怎么能把下面这两类分开吧。
解决办法是多层神经网络，底层神经元的输出是高层神经元的输入。我们可以在中间横着砍一刀，竖着砍一刀，然后把左上和右下的部分合在一起，与右上的左下部分分开；也可以围着左上角的边沿砍刀把这一部分先挖出来，然后和右下角合并。
每砍一刀，其实就是使用了一个神经元，把不同砍下的半平面做交、并等运算，就是把这些神经元的输出当作输入，后面再连接一个神经元。这个例子中特征的形状称为异或，这种情况一个神经元搞不定，但是两层神经元就能正确对其进行分类。
只要你能砍足够多刀，把结果拼在一起，什么奇怪形状的边界神经网络都能够表示，所以说神经网络在理论上可以表示很复杂的函数空间分布。但是真实的神经网络是否能摆动到正确的位置还要看网络初始值设置、样本容量和分布。
深度学习：
那什么是深度学习呢？深度学习简单点说就是一种为了让层数较多的多层神经网络可以训练，能够运行起来而演化出来的一系列的新的结构和新的方法。
就像下图

普通的神经网络可能只有几层，深度学习可以达到十几层。深度学习中的深度二字也代表了神经网络的层数。现在流行的深度学习网络结构有卷积神经网络、循环神经网络、深度神经网络的等。
当然我们是以实战为主，可以直接使用现在市面上的一些现有深度学习框架，现在流行的深度学习框架有等，本文主要介绍这个开源的优秀深度学习框架。
 安装
这里我们安装的是版的，为什么不安装版？因为偶的是的卡啊，只支持
下载源码
新建一个目录，到那个目录下执行
   
编译安装
运行目录下的脚本，中间要编译些东西，要多等会，再输入个密码，就自动编译安装完成啦。
注意一下：
因为要读取目录下的文件，所以这里要在源码的根目录执行安装脚本～
比如在的源码根目录执行
 
以后运行脚本可能需要一些模块，建议安装下
下安装的方法也很简单：  _ 
 样例运行
我们可以试着运行下自带的一些样例，这里我们试下 这个样例
 是个让机器模仿已有画作的绘画风格来把一张照片重新绘画的算法。
比如我们输入和最终生成
首先打开目录，大部分样例都是有的，大家在运行之前可以先看看
这个样例的有说

        
        

那我们就要运行这个目录下的
脚本会自动下载训练模型到目录，输入的素材到目录
运行
因为我们运行的是版，所以要这么输入
      _ 
：使用哪个一个代表使用
：最大迭代次数，这里我们迭代次
_：结果输出路径
可能大家一次运行不起来，会出现    的提示，一般是相应的模块没有安装，在搜下    一般都能找到安装方法，大部分都能通过安装
运行结果
我们看下不同迭代次数时的结果是什么样的
次：次：次：次：可以看出迭代次数越多效果越好当然由于深度学习是有很多层神经网络组成，需要的运算量巨大，使用即使是，次迭代也需要好几十分钟了，有条件的看官可以尝试使用版，可以将时间缩短到几分钟，甚至在云平台上跑。
样例的具体原理可以参考参考附录的第二个链接。
参考附录：
 

相关推荐深度学习入门实战二用训练线性回归深度学习入门实战三图片分类中的逻辑回归腾讯云总监手把手教你，如何成为工程师？当前浏览器不能支持视频播放，请采用或以上浏览器
今天这节课，我们来学习负载均衡的使用。我们主要讲以下几个方面

负载均衡如何帮我们分心

自建负载均衡和云端负载均衡的优劣之分

腾讯云负载均衡的优势

腾讯云负载均衡的使用


为什么需要负载均衡？

随着我们的应用的不断发展和进步，我们的用户越来越多，请求也越来越多，应用加载速度放缓。同时，由于用户量的增加，出现了多次后端故障，影响到了用户访问。我们不得不提升我们的应用的性能。但是，如何提升应用的性能？
一般情况下，有两种模式：一是横向提升，增加同一层次主机的数量，来提升整体的处理能力。二是纵向提升，将你的主机的配置进行提升。这里，我更推荐大家进行横向提升。
因为   

当两台云主机同时对外提供服务时，两台云主机的负载都不会很高，可以更加高效的处理工作。
当两台云主机同时对外提供服务时，整个应用的故障的可能性就会下降，即使一台云主机无法提供服务，另外一台仍然可以对外提供服务，保障业务运转，给你恢复故障云主机的时间。
除此之外，目前来说，主机商提供的机型配置都是有限制的，当你已经达到了平台所能给提供的顶峰的时候，你就无法再进行纵向提升，就更加需要横向提升。
既然我们选择了横向拓展，就会有一个问题如何把我们的请求分发给不同的云主机？

这里，就要用到负载均衡了。负载均衡可以帮助我们分发请求
除了负载均衡的确存在一些请求的分发方式，比如  层面的负载均衡，但是其劣势在于无法很好的监控主机的负载情况，必须要挂掉一台云主机，才会切换到另外的一台云主机上。这种情况如果云主机的配置不是阶梯状的，新的云主机依然会快速挂掉。
而使用负载均衡时，负载均衡会去检测云主机的连接数和健康情况，可以动态的调整，合理分配请求，不会出现一个主机空闲，而另外一个主机负载极高。
既然是负载均衡，就会有很多种实现的方式，我们来看看各种不同的负载均衡的优劣对比。

云负载均衡因为成本被云计算服务提供商摊平成本极低。云负载均衡背后是整个云计算集群，能够承载极高的请求，为用户提供高性能的请求分发服务。同时，云计算集群化的拓展性，也让云负载均衡具备了极高的拓展性，可以根据业务的需要，调整拓展性。在可用性方面，由于有云计算数据中心的保障，可用性也远高于普通的负载均衡硬件。
自行购买的负载均衡硬件成本极高，而且性能无法和云计算的负载均衡集群相媲美，拓展性也收到了物理限制，无法很方便的拓展，在可用性方面更是受外界环境因素影响较大。
软件负载均衡成本不高，但也需要自行购买云主机部署，能够承载的请求分发也受到底层的云主机的性能的限制，无法到一个较高的水平。其拓展性和可用性完全受制于自行购买的云主机。

腾讯云的负载均衡有以下优势

单集群并发量超过  亿
高达  可用性
借助可以实现自动的伸缩，跟随业务的提升来提升
用多少，付费多少。弹性成本费，收费较低

在我们加入了负载均衡器之后，我们的服务的架构就变成了如下图所示。用户的请求首先通过，过滤掉一部分的静态请求，其中剩下的静态请求分发到对象存储，动态请求通过负载均衡分发到不同的云主机中。


相关推荐
深入理解腾讯云内网负载均衡【腾讯云的种玩法】   负载均衡配置详解李跃森，腾讯云首席架构师，腾讯数据库团队架构师，负责微信支付商户系统核心数据库的架构设计和研发，社区核心成员，获多项国家发明专利。从事内核开发和架构设计超过年。

年之前，微信支付业务快速发展，需要一款数据库能够安全高效的支撑微信支付商户系统核心业务，这个重任落在了腾讯数据库团队自研上。
年月，腾讯云对外发布云数据库，提供腾讯自研的内核优化版和社区版两个版本，以及提供分布式集群架构分布式集群内部代号两种方案。目前云数据库在腾讯大数据平台、广点通、腾讯视频等腾讯多个核心业务中稳定运行。
腾讯自研分布式集群 
腾讯是由社区版本地化而来，能支撑水平扩展数据库集群。虽然很强大，但在性能、扩展性、安全、运维方面还是有明显的瓶颈，而腾讯经过多年的积累，在这些方面都有较大提升和强化。由于是用于微信支付的核心数据库，腾讯被定位为安全、高效，稳定，可靠的数据库集群。下面将以腾讯为代表介绍腾讯自研所做的优化和改进。
一事务管理系统的优化
在事务管理系统方案本身有一个明显的缺点，那就是事务管理机制会成为系统的瓶颈，  全局事务管理器会限制系统的扩展规模。如图所示，是每个请求过来 协调节点都会向申请必需的全局事务和全局快照信息，并把这些信息随着语句本身一起发往数据库节点进行执行。另外，的管理机制，只有主才会获取的，而备没有自己的，因此无法提供只读服务，对系统也是不小的浪费。图
而腾讯改进了事务管理机制，改进后，不再从获取和，每个节点使用自己的本地事务和快照，如此便不会成为系统的瓶颈；并且，备机就还可以提供只读服务，充分利用系统闲置资源。如图，优化后的事务管理系统架构如下：图
二备机只读实现与优化
当然，事务管理系统的优化为进行备只读提供了基础，然而原始集群并没有负载、调度等能力。在这方面，我们也做了大量的创新，总结起来包括：

正常和只读进行分离。
正常存储主用的元数据信息
只读存储备用的元数据信息
之间使用 热备份保护模式进行日志同步

通过这些方式，集群可以提供带有智能负载能力的备只读功能，充分利用系统资源。
    图
三业务最小中断的扩容方案
业务的快速增长不可避免的需要对资源进行扩容，社区版本的实现使得扩容成本高昂，需要对业务进行长时间的中断。因为，在社区版本中，通过 =  的方式决定一条记录的存储节点：
也就是说，先对分布列计算值，然后使用这个值对集群中的节点个数取模来决定记录去哪个节点如图。
这种方案简单，但实际应用中需要长时间停机扩容。这是因为，扩容后节点数会变多，数据无法按照原有的分布逻辑进行读写，需要重新分布节点数据。而再均衡数据需要停机并手工迁移再均衡到各个节点。对于规模较大的交易系统来说，由于原有节点存储的是海量数据，再均衡过程可能会持续好几天。相信这是业务完全无法忍受的。
     图
因此我们引入了一种新的分表方法— 。的数据分布采用如下图的方式：

引入一个抽象的中间层 。 中每一项存储和的映射关系。
 中的每条记录通过   来决定记录存储到哪个，通过查询的存储的。
每个上存储分配到本节点信息，进而进行可见性的判断。

通过上面的方案，在扩容新加节点时，就只需要把一些中的映射到新加的节点，并把对应的数据搬迁过去就可以了。扩容也仅仅需要切换中映射关系的，时间从几天缩短到几秒。
图
四数据倾斜解决方案
数据倾斜是指，在分布式数据库系统中会因为物理节点、或分布原因，导致某些物理空间不足，而另外的物理空间剩余较大。例如，如果以商户作为分布，京东每天的数据量和一个普通电商的数据量肯定是天地差别。可能某个大商户一个月的数据就会把一个的物理空间塞满，这时系统只有停机扩容一条路。因此我们必须要有一个有效的手段来解决数据倾斜，保证在表数据分布不均匀时系统仍然能够高效稳定的运行。
首先我们把系统的分为如下图，每个里面：

包含一个或者多个
每个有一个
在建表时，可以指定存储的，也就是要么存储在，要么
可以访问所有的，而且上也存储所有表的访问方式信息

图
对于系统中数据量较大用户进行特别的识别，并为他们创建白名单，使用不同的数据分布逻辑如下图：普通用户使用默认的数据分布逻辑，也就是：
 =   
大商户使用定制的数据分布逻辑，也就是：
 =     _  
图
通过在大商户分布逻辑中加入日期偏移，来实现同一个用户的数据在内部多个节点间均匀分布。从而有效的解决数据分布不均匀问题。
下面是一个例子如下图：
图
五记录高效排序解决方案
业务在列表查询场景下会收到如下的查询：

在微信支付的场景中，某个商户每天的数据有，一个月数据超过条，也就是说需要面向一个数据级数据进行快速排序，而且业务逻辑要求需要秒级输出，快速获取排序结果。

为此，我们提供表定义方案，即建立集群分区表。根据上述需求，可以采用按月分表，即每个月一张表，并对排序字段_建立索引，这样每个分区进行扫描是可以使用索引。

我们再通过一系列执行计划的优化，下推 和 子句到；上在执行对应的使用使用 算子对各个子表执行的结果进行汇总输出，这个算子本身会保证输出是有序的，也就是说对子表进行索引扫描，同时 又对各个子表的结果进行归并，进而保证节点本身的结果是排序的。对多个的结果同样使用 进行归并，保证整个输出结果是有序的，从而完成整个排序过程。

下面是我们对排序进行的性能测试结果：

通过在核，内存的机型上进行测试，数据的排序在最短可以在 内完成，最高可达。
六并行优化
随着当前硬件的发展，系统资源越来越丰富，多大内存成了系统标配，充分利用这些资源可以有效的提升的处理效率优化性能。腾讯在年底开始进行多核执行优化。
目前社区版也会包含部分并行化特性，但是没有我们这边这么丰富，下面介绍下腾讯并行化的原理和效果：


系统创建一个全局的共享内存管理器，使用管理算法进行管理
系统启动时创建一定数据的，这些用来执行执行计划的碎片
系统会创建一个计划队列，所有的都会在任务队列上等待计划
每个对应一个任务结果队列，在输出结果时就把结果的指针挂到结果队列中去
计划队列，结果队列，计划分片执行结果都存放在共享内存管理器中，这样所有的进程都可以访问到这些结构
会话进程在收到时，判断是否可以并行化，并进行任务的分发；在结果队列中有结果时就读出返回

我们完成优化的算子：


 
 
 
 
 


通过在核，内存的机型下测试，各个算子的优化结果：
整体来说性能普遍是优化前的倍，优化的效果比较明显。
七腾讯的两地三中心容灾
两地三中心容灾是金融级数据库的必备能力，对于金融类业务数据安全是最基本也是最重要诉求，因此我们为了保障高效稳定的数据容灾能力，也为建设了完善的两地三中心自动容灾能力。具体的两地三中心部署结构如下：

同城节点间采用强同步方式，保障数据强一致；异地采用专网异步同步。
节点内，每台物理机上部署，收集机器状态并进行上报，并进行相应的告警和倒换执行功能。
每个至少部署一个，负责收集上报每个上报的状态到集群。这么多个中只有一个是主用，主用的除了进行状态上报还进行故障裁决和倒换。在主用的异常后，系统通过自动裁决挑选一个备用的升主。
和是两地三中心的控制和裁决节点。
对于数据库节点，在每个至少部署一个。在每个中心部署一个，一个为主，另外两个并联作为备机放在主机上，一个为同步备机，另外一个为异步备机。
在主机故障宕机时，优先选择同城的备机升主。
目前，腾讯云已经提供云数据库的内测使用，并将提供内核优化版和社区版两个版本来满足更多客户的要求。

相关推荐
云数据库使用入门
性能调优
系统架构评审方法和思路总结什么是万象优图
万象优图是腾讯云为开发者提供图片智能鉴黄、图片内容识别、人脸识别、识别等服务；也可以根据需求提供定制化的图片识别服务；同时也提供灵活的图像编辑服务，如裁剪、压缩，水印等，满足您的各种业务场景图片需求。
如何在  上使用万象优图？
安装
执行  命令安装拓展
  
在中的  中添加
\\\
执行   将自动在  目录下生成    文件，修改配置文件中的对应选项。
配置完成后，在需要使用的文件中使用
 \\

然后使用静态方法调用比如
  = 
           
               
                             
           
        


方法列表



方法名
备注





上传图片，万象优图接口



查询图片信息，万象优图接口



复制图片，万象优图接口



删除图片，万象优图接口



上传图片，万象优图接口



查询图片信息，万象优图接口



复制图片，万象优图接口



删除图片，万象优图接口



上传视频



查看视频状态



删除视频文件



智能鉴黄，参数为



多图片智能鉴黄，参数为构成的



图片文件只能鉴黄，参数为文件的



示例代码
上传图片
 = 

智能鉴黄
 = 


相关推荐【腾讯云的种玩法】  整合微视频上传管理能力，轻松打造视频后台多维活体检测，让人脸识别更安全【腾讯云的种玩法】 整合  对象存储服务，享受无限容量存储服务作者：高苡新
团队腾讯移动品质中心

一、概述
本文以写实风格记录 开发调试工具测试全过程。包括测试人力申请、测试策略制定、系统测试以及众测体验。对于测试初学者可以了解到整个流程是如何一步一步走下来的。对于有一定经验的同学可以领略到测试策略制定过程中基于风险和成本的测试理念。
二、提测项目介绍
 是面向基于的开发者和移动应用开发商包括微信、手，三方等打造的开发服务整体解决方案，以提升广大开发者在真机环境下的开发效率，并帮助开发者分析和优化网页的设计，主要功能有网页调试，网页性能分析等。
详情：。
三、测试人力申请
月日，开发同学找到我，说有一个 的产品要申请测试资源。经过电话沟通，我了解到这个属于腾讯浏览服务的附属产品，提供给开发做网页调试用的。于是我去找我们测试组说明了情况。说和对网页调试比较熟悉，建议我拉上他们一起去沟通测试需求 ——实践证明，对于一个陌生的测试需求，多拉几个相关的同事一起去沟通准没错！
第二天，我和、一起去找到开发沟通需求。经过半小时的讲解，我们对测试需求有了比较清晰的了解。也明确了主要工作是项目跟进我比较擅长，而不是通过技术手段实现测试和比较擅长。下面是沟通结果记录：从中你可以知道测试需求沟通一般需要了解哪些东西。
背景：
开发调试工具。主要用于提升的影响力。之前都是小规模发布，现在想通过完整测试保证质量加大推广。目前日活具体数据不方便公开，下同，上半年目标是日活。
 功能简介及测试重点：
主要分部分：检测和模块。模块主要由开发自测保证。测试负责保证检测 模块。检测 模块有步操作。分别是：
：请连接手机，允许调试；
：确认需要调试的，检测当前是否接入内核；
：检测是否支持调试；
：设定调试状态。
模块本次只需要测试元素更改功能。
 发布节奏：
每周一个小版本，每周一个大版本跟随内核版本更新节奏。
小版本发布遵循如下流程：
开发使用方法自测；
测试验证修改点；
开发内测；
上线前测试。
大版本发布遵循如下流程：
开发自测主要保证模块 与 新版本内核兼容；
核心流程用例比上线前用例更小。主要保证检测 正常。
本次集成预计下周提测，发布计划尚未明确。
 参与角色：
产品：
前端开发：
终端开发：
测试：
测试点：
功能点：覆盖检测 模块 操作的不同分支；

平台适配：主要适配检测 第步；
宿主适配：自有内核共享内核 主要适配检测第步； 
机型适配：所有安卓手机主要适配检测第步，第步
版本适配：所有线上版本主要适配模块；
模块：本次只需要测试元素更改功能。
测试方法考虑：
主要是手工测试；
初步分析不适合使用自动化，具体需要请教下应用宝；
可以考虑众测来发现一些我们考虑不到的问题；
因为当前用户量不大，所以考虑用最小的投入评估产品质量。
跟进计划：
先评估工作量和是否采用自动化测试；
确认外包人力；
编写测试用例；
外包执行测试。
四、测试策略制定
和开发沟通完需求之后，对该项目的情况有了基本的了解。接下来需要评估工作量和制定测试策略。
工时预估：
测试策略制定选择测试方法、测试机型、覆盖范围等正职；
测试用例编写集成用例目前有个测试点、上线前用例、核心流程用例正职；
测试环境准备、、电脑，手机协调正职；
集成用例执行单机全用例条平台适配用例条宿主适配用例条机型适配用例条其他条=条外包天；
上线前用例条外包小时；
核心用例条外包小时。
本次集成测试总共需要的正职人力以及天的外包人力。
测试策略制定：
测试策略制定主要是解答“担心什么”、“测多少”、“怎么测”这个问题，其中会结合风险及成本的考虑。
担心什么风险：
本次提测是为了了解和提高版本质量，为产品加大推广做好准备。所以目前担心的问题是版本发到用户那里会出现各种各样的问题，影响到产品的口碑。那要解除这个担心，就需要了解用户使用场景，我们测试覆盖到这些场景就没问题。用户场景可以有种方式获取。一是看统计数据，二是找用户众测和体验。
总体来说，本项目的风险较小。因为 目前只有个日活用户。倘若经过系统测试和众测，依然有个别问题泄漏到真实用户也问题不大。通过用户反馈渠道把问题收集起来就行。
测多少成本：
上面提到 风险较小。同时， 尚未制定明确的发布计划，所以紧急性也不高。所以系统测试只需要使用初级外包覆盖到最主要的场景，保证以上的用户能顺利使用就行。没有覆盖到的场景可以交给众测和体验这两种成本更低的方式去发现。有这两道关，质量基本有保证。
怎么测：
这里主要是自动化测试、人工系统测试、众测这集中方式的选择。跟应用宝沟通后得知他们对连接这类功能也没有使用自动化测试。所以我们就放弃自动化测试了。系统测试肯定不能少。众测和公司内体验可以补充系统测试覆盖不到的点，所以可以用起来。
测试策略详情：
平台适配：
通过网上资料，我们可以看到、、 这个系统的市场份额之和达到。所以选择这个系统为平台适配系统。

。
因为系统分为位和位，所以通过查阅资料。我们发现位系统已经是主流。所以我们在测试中主要使用位系统来测试。


屏幕分辨率适配所有交互界面：
因为 是一个桌面应用，所以要考虑显示器的分辨率问题。保证在不同的屏幕上界面显示正常。通过网上数据，我们可以看到笔记本屏幕主流分辨率和台式机屏幕主流分辨率占了以上的比例，其他分辨率的屏幕占比都较低。所以屏幕适配选择了和两种屏幕。

宿主适配 
通过腾讯浏览服务的后台统计数据，我们可以得知不同宿主使用腾讯浏览服务的的用户数。通过选择每种类型的宿主，我们可以得知测试用例能覆盖多少用户场景。

最终选择测试宿主如下：
自有内核宿主：微信手覆盖用户场景；
共享内核宿主：音乐腾讯新闻京东应用宝王者荣耀唯品会覆盖用户场景；
：手机浏览器覆盖用户场景。
机型适配：
对于机型覆盖，我们在选择机型的时候会考虑覆盖，主流系统版本覆盖，主流手机厂商覆盖个方面。而因为连接和厂商关系较大。所以我们优先通过厂商排名来选择测试机型。通过后台监控数据，可以了解到华为、、、三星、小米为排名前的厂商。用户数占总用户数的。

结合测试组现有机型，我们选择的机型覆盖列表如下：
 
 
华为
小米
三星
测试计划：
跑通上线前用例冒烟测试；
跑通单手机全用例；
跑通机型适配品牌各台手机根据测试台手机测试经过决定要不要增加机型适配；
宿主适配；
跑通平台适配用例加屏幕适配测试；
发布众测；
发布公司内开发者有奖体验。
五、系统测试
测试策略和计划指定后，开始编写测试用例。
、测试用例编写
首先，为了保证用例能覆盖到每个一个逻辑分支。
我先用思维导图把每个逻辑梳理清楚：

但因为思维导图直接给初级外包去执行不方便我们很多中级以上的外包直接看着思维导图执行用例，甚至自己编写思维导图用例，所以还需要将思维导图转换为用例。考虑到这个用例除了上线前的用例会每个月用一次之外，其他用例使用频率都很低。所以只有需要交代的地方交代清楚。不需要交代的地方空着就行：

表格中最重要的信息是“功能点”和“测试点”这两列。其他都是需要特别提醒的地方才补充信息。这种用例看起来比较乱，但胜在快速、实用。
编写了单机用例之后，我又补充了各种适配用例：

这些用例都是以单机用例为基础。根据需要适配的内容修改一些测试条件。比如说换一个平台，或者换一个宿主。
这里有一点经验可以和大家分享：就是根据测试条件的影响范围来选择用例，而不是任意一个条件变了都测全用例。
比如说，覆盖不同的平台。我们在单机测试的时候已经在电脑上跑了全用例。这里需要适配和系统，是不是也要跑全用例呢？答案是否定的。因为在和开发沟通的时候，我们已经提前了解到平台适配只对有影响，其他步骤的逻辑与平台无关。所以这里只用过相关的条用例。用例量减少了。
用例编写完成之后，有一个很容易被忽略的环节是用例评审。很多人觉得用例评审可有可无，或者线上评审一下就行。但按照个人经验，笔者可以很负责任地告诉大家，对于小项目来说线下的用例评审很有价值！因为它不但可以发现用例的问题，还可以通过讨论发现需求和代码实现的问题，性价比很高！
、单机测试
执行用例的过程大家都比较熟悉了，这里直接粘贴测试报告。
 工具 单机用例测试结果：
测试版本： ：
平台：专业版位
手机机型：  已
任务链接：略
测试结果：总共条用例。条通过，条不通过，条未能执行。
不通过及不能执行用例列表：

列表：

、机型适配
单机用例通过后就陆续安排各种适配测试。这里不再展开，只分享一点经验：
“全面”比“深入”重要！
我们在测试中发现了两个有代表性的问题：
 位上程序闪退；
手机进入手机闪屏。
这两个问题都很明显，一测就能测出来。而同样的人力投入，如果我们继续测 位系统或者手机，就很难有这么大的收获。这是因为我们在同一条件下测试越深入，产生的边际效益就会越小。
所以通常来说，“全面”比“深入”重要。
、宿主适配
略。
、适配平台
略。
、回归及上线前测试
略。
六、众测及体验
上线前测试通过后，我们开始做众测。
、发布众测
公司内有大众测平台：企鹅众测和众测。企鹅众测倾向于发散性的测试，而众测倾向于用例测试。我们提众测的目的是为了发现系统测试没法覆盖到的点，所以我们选择了企鹅众测。
首先，我跟企鹅众测的业务接口人沟通了他们是否能承接我们这类客户端的测试，说可以。
然后，我就编写了测试要求给。关于测试要求的设计，这里提供点经验：
测试要求要足够简单明确。因为用户都是非专业认识，太复杂了他们会不懂。以 的提测为例，我们开始想让用户覆盖很多第三方。但是要给用户解释第三方里边怎么进入一个网页是很困难的。所以我们左后只选择了腾讯新闻个第三方作为代表。因为它进入网页最简单。
要有明确的反馈要求，做好是格式化反馈。比如说，我们需要了解用的和手机的信息。如果让用户在正文里文字反馈，收集到的结果会很乱，也不好统计。于是，我们把这些信息都做成了选项或独立文本框。手机到的信息更规范也方便统计。
具体的测试要求见附件。
经过天的问题收集。我们得到了多个反馈。我对问题进行了统计分析，输出了众测结果报告：
 工具众测结果分析
测试版本： ： 上线前测试版本。
测试时间：天。
测试要求：见附件。
数据分析：
公共收集反馈条众测审核后，其中成功条，问题反馈有条。说明遇到问题的用户比例还不少。

个反馈中，以“页面白屏”反馈最多，有个。另外，出现的用户为个，占所有 用户的之前也有不少开发者反馈这个问题。

按类型统计，总共台参与测试认为一个用户对应台。 位用户比例最大。没有收到用户反馈。

按手机品牌统计，总共覆盖个品牌的手机。参与众测的小米手机最多。没有发现哪个品牌的手机出现问题特别集中。

按手机版本统计，覆盖到的版本。其中的手机最多。

按使用统计，大多数用户使用微信、手测试。使用腾讯新闻测试的用户为。

浏览器的个反馈中，在没有打开网页的情况下开始调试的用户占。说明程序的引导提示做得不够。

、发布公司内开发者有奖体验
众测完成后，我们又在公司论坛发布了公司内部的有奖众测。
在一个星期的时间内，我们收到了份有效反馈。虽然反馈不多，但是反馈信息比较详细。开发同事对企鹅众测和内部体验的效果评价是：
“其实都还不错，众测覆盖的比较广，会容易碰到奇葩问题。这次也发现了一个白屏的。
内部体验的话，交流比较方便，而且大多都是需要这个工具的同事，更能给到一些建议之类的”。
七、线上数据监控
就此， 顺利发布。从后台数据看，日活用户数提高不少：月日增长是因为众测、内部体验引入了新用户，以及版本发布。

搜索微信公众号：腾讯移动品质中心，获取更多测试干货！摘要
本文主要介绍以下内容：

动态图片的定义、发展历史与现状，动态图片相关的术语和概念
动态图片各主要格式，及简要对比
在  平台对比  与  格式的各项性能参数，为技术选型提供参考


一、概述
 动态图片
动态图片格式泛指基于静态图片格式，扩展其编码规则，以帧动画形式实现动态展示的一类图片格式。
动态图片与视频等流媒体技术在实现上有一定的区别，但定义的界限比较模糊。总的来说，动态图片的编码规则更简洁、更轻量，不采用流式传输、较少考虑帧间关系、无固定帧率，更适合帧数较少、帧间关系复杂的场合。


“表情包”是动态图片的常见业务形式，是典型的帧数少、帧间关系复杂的案例

 动态图片的历史与现状
以  为代表的早期动态图片技术出现于  年代末。作为动态图片中最具生命力的格式， 在协议设计上，已经具有不设固定帧率、可定义单帧区域等动态图片的特性，并被后期动态图片格式的规范所借鉴。
 为早期  页面实现动态效果做出了卓越的贡献，目前依然在表情包、视频片段截取等业务场景中应用广泛。但  在颜色支持、压缩率、格式规范等方面也有其明显的能力局限性。
诸多方案在试图解决  的弊端。在  为主流终端的时期，出现于  世纪末的  是实现效果更优的动态展示方式，具有视觉效果更丰富、媒体承载能力更强等特点，也曾一度取代  在动态效果展示方面的地位。但是随着移动终端的发展， 的功耗、安全性问题日趋凸显， 渐渐淡出主流，应用场景一再被压缩。目前，主流浏览器已开始有计划地逐渐阻止  显示或运行。


《电脑迷》  第  期刊文。从中可以得知，当时的  采用  作为动态图片展示方式

而在静态图片格式动画化扩展方面，出现了  、基于 、、、 等“次时代”格式规范。其中由  主导开发并支持的  格式具有最强的发展势头，尤其是在  平台上得到了官方支持。但是这些“次时代”规范推广速度比较缓慢，且各个平台、各个浏览器的支持程度不一，并未成为事实的标准。这使得  仍然是目前使用场景最广泛的一种动图格式。
 术语和概念
为了便于后面的介绍，首先引入动态图片与静态图片相比具有的新术语和新概念。
 帧
“帧”即动态图片中多幅静态图片中的一幅。在动态图片编码中，通常以帧作为单位，记录图片数据、间隔时间等信息。
后面提到的“帧”既表示一幅静态图片，也可以理解为动态图片数据中的单个存储静态图片及动画信息的数据块。
 位置、尺寸、延迟时间、重复次数
与静态图片仅能定义尺寸有所差别，动态图片在定义画布的整体尺寸的基础上，每帧还可以额外定义当前帧的位置和尺寸，从而不必占满画布的全部范围，减小部分占用空间。
延迟时间即当前帧在展示下一帧之前停留的时间。区别于视频，动态图片的每帧具有独立的延迟时间。重复次数指完整地循环播放全部帧的次数。
主流动态图片格式都支持定义帧的位置、尺寸、延迟时间和重复次数。
  混合方式与处置方式
与静态图片相比，由于“帧”的引入，动态图片还会涉及到帧间关系的处理。 混合方式和处置方式是存储在帧中，用于控制帧间关系的字段。
简单来说， 混合方式用于控制半透明效果的实现方式；处置方式用于说明下一帧将展示时，当前帧应如何处理。

 混合方式支持的配置及意义



处置方式支持的配置及意义


主流动态图片格式都包含处置方式字段；、 等格式包含对  混合方式的支持。
 实例
以信号灯换色的  动态图片为例。
其中，图  为第  帧的数据，图  为第  帧，第  帧可以仅存储需要变化的部分。在设定第  帧的处置方式为“叠加”的条件下，第  帧的展示效果即如图  所示。


信号灯换色的例子

二、动态图片常用格式
 
 帧编码方式
 调色板与颜色量化
 格式引入了调色板的概念，限定每帧最多可支持的颜色数量，并建立颜色的索引。图片数据的记录方式从传统的色值变为索引，减少了图片数据的占用空间。
 支持全局调色板，也支持每帧有自己独立的调色板；每个调色板最多包含  种颜色。


在  中将一幅原始图片存储为  格式时，可见其生成的调色板

为了使调色板中的颜色尽可能地还原图片的原始数据，调色板中包含哪些颜色就尤为重要。颜色量化即是“挑选”颜色的过程，以减少颜色并减少失真为目的。颜色量化算法有很多种，较为常用的有八叉树量化、标准调色板误差扩散等算法，这里不再展开。
从编码方式的角度，颜色量化和调色板的引入，是  区别于其他主要图片格式的最大特点。它使  格式的图片文件更小，更易于传输和分发。虽然它大幅牺牲了图片颜色数量和图片质量，但当图片本身颜色就较少时，调色板的优势就尤为明显。
  压缩
图像数据可经调色板查询获得，索引的存储自然也有优化空间。  用于在出现重复的颜色索引时进行压缩。这是一个无损的压缩过程。
简单来说， 内部维护一个字典，首先添加所有出现的原始索引，接下来遍历并记录原始数据时新出现的子串，并按索引规则放在字典中，在后面的遍历中，先尝试是否可以匹配字典已有的子串，如果没有则新增一个子串。这个字典可以通过压缩过程生成，也可以通过解压过程还原；因此在存储时，只需存储压缩后的内容即可。

假定有两个值、，执行过程如下。各操作的执行时机与原始数据的读取进度通过背景色一一对应。



生成的字典


 透明、动态图片特性
 支持透明色，不支持透明度和  通道。
为  指定透明色，仅需指定每帧采用调色板中的哪个颜色作为透明色，并启用透明色模式即可。在写图片数据时需要注意，任何出现这个颜色索引的像素都将被置为透明。
动态图片特性方面，由于  没有透明度的概念，自然也没有  混合方式可供指定。除此之外，章节  中提及的特性， 均可实现。
 格式结构
 的文件组织方式比较原始，未引入“容器”的概念，一般采用“逻辑头”或规定每个分块的长度来确定分块位置。

 格式各分块及其解释


关于  格式及颜色量化的更多信息，可以阅读本公众号 简述及其在音乐的应用 一文。
 
 从  到 
 出现于  年，主要由  社区支持。但不是  的官方标准。
目前的支持情况： 未原生支持，  以上版本的  支持， 即将支持。


 代码库中，对  添加支持的提交记录

 由  发展而来，其格式结构在  的基础上进行了扩展，与  有很强的关联性。


 格式结构与  的关系，相同背景色的分块具有相同的数据
 新增分块及其解释


由于  采用块的方式组织文件内容，即使解码器不支持  的动态图片功能，也能正常读取并以静态图片形式展示其首帧。因此  具有向下兼容的能力。
 透明、动态图片特性
 本身支持透明度通道， 也具有对透明度的全面支持。
 支持章节  所述的全部动态图片特性。
 
  概述
 由  于  年发布， 年的版本支持动态图片， 年的版本支持无损图片存储。
 格式的设计目的是在不牺牲图片质量的条件下，减少文件大小。为了达成这一目的，从帧编码方式的角度， 引入了无损和有损编码方式，无损由  自研，有损使用  编码。新编码方式的引入均使文件大小得到了显著的改善。
目前的支持情况： 有原生支持 仅支持有损， 及以上支持无损；仅支持静态图片；  以上版本支持动态图片；自编译  可以实现  全版本支持。
 帧编码方式
由于有损编码也即  编码使用更广泛，本节主要讨论有损编码在减少图片占用空间方面的能力。
 块预测
首先，把每一帧的图片数据分成微小的分块 ，宏块，一般为  像素 ×  像素。
一个分块的内容可以通过其周边的块预测；可通过预测获得的部分就可以直接记录预测方式，而不记录实际色值。
例如，确认下图中  ×  分块的内容，可以通过其左、上两方向的像素信息，经各种预测方法获得预测结果，并与原始数据匹配，验证哪个预测结果最接近原始数据。


块预测

 可适应的块量化
图像可以被分为最多  个区域，并为每个区域设置独立的压缩参数。例如对细节更复杂的区域设置较小的拟合阈值，对细节简单的区域设置较大的拟合阈值。


可适应的块量化

 透明、动态图片特性
 支持透明度通道，也有对透明度的完整支持。但有损  在透明度通道上的实现与传统格式有所区别。有损  包含一个专门存储透明度通道的分区。独立透明度通道分区也可以针对性地优化图片的占用空间。
 除在处置方式字段的取值范围上与其他格式有所区别未支持“回退”方式，其他的动态图片特性均得到了良好的支持。
 格式结构
在容器的选择上， 选用了    ，资源交换文件格式。其格式明确且易于识别。其一，每个  块包含三个部分识别字、块大小、实际内容；其二，块之间可以嵌套，整个文件可以视为一个  块，其中可以包含多层、多个  块。


一个  容器的例子

因此，对于  的格式结构，主要关注各  块的名称、含义和功能。

 格式各分块


三、性能对比与解释
 通过  库，提供了  和  格式的动态图片展示能力。
通过  库 ，在接入  和  两个官方提供的编解码库后，设定图片尺寸、帧率、机型、格式、同时展示的实例数等前置条件，对比各主要性能参数。
参数解释

实例数：同时异步加载并显示的实例数量。用于模拟未经优化的多幅动态图片同时展示时，实际性能开销情况。
加载时间：多个实例同时异步加载，取最终加载完成的时间。
卡顿：实际帧率与文件帧率不符的程度。

 帧率、图片分辨率

以下参数不变：  图片格式：  机型：高配机型  实例数：

帧率对占用情况影响明显；不影响图片文件大小、内存大小和加载时间。
帧率过高时，可能引起卡顿情况；帧率越低，对性能影响越小。
图片分辨率对图片文件大小、加载时间、内存变化影响较大；对占用影响较小。

 格式


以下参数不变：  帧率：  机型：高配机型  实例数：


图片文件大小方面，同参数的  图片比  图片小。

 加载时间方面，同参数的  图片远快于  图片。
从格式组织方式上的差异上看，不难发现  快于  的原因。 采用  组织各个数据区域，便于直接通过  大小完成寻址； 的分块采用起始结束标记实现，拆分分块需要读取起始标记后的整个数据流，造成确定分块的速度偏慢。
  占用方面，同参数的  图片远高于  图片。
 占用偏高的问题，一定程度上制约了在业务中使用  格式。造成该问题的原因与  的实现方式有关，在展示时， 未直接缓存每帧的 ，每次请求重绘时都对当前帧进行了一次解码。 的解码消耗远大于 ，导致了  消耗偏大。 
 机型


以下参数不变：  帧率：  图片分辨率：  实例数：

机型的差异，对加载时间和  占用的影响较大。对于实际业务，有一定必要按机型区分下发不同参数的动态图片，必要时用静态图取代动态图展示。
 实例数同时异步加载并显示的实例数量

以下参数不变：  帧率：  图片分辨率：  机型：高配机型
实例数越多，内存、 和加载时间均有一定幅度的增加。因此在同一页面展示多张动态图片，并均处于播放状态时，需要将性能开销考虑在内。
 综合结论
下表以“★”的数量代表各性能参数与各前提参数的相关程度。

通过上述性能测试结果，可以导出如下在实际开发中可供参考的结论和指引：
在未进行特定优化的条件下，受动态图片影响最大的性能参数是  占用情况， 格式更易受到影响。加载时间和文件大小方面， 格式比  具有较大优势，因此在图片访问量较大，需要优化后台带宽和本地  的场景下，适合引入  。在实际业务中使用动态图片时，需要做好同时展示的实例数的控制，关注动画的暂停和  的回收。
四、结论
对于不同的动态图片格式，通过对编码方式、格式特性、性能参数等角度进行分析，得出如下对比结果：

从选型的角度来看，如果需要考虑兼容性和展示时的性能消耗， 是不二之选；如果需要考虑传输速度、文件大小和图片质量， 和  会提供更优的表现。从未来的发展上看， 的发展势头最强，在  平台上， 也最有希望取代 ，作为动态图片的首选格式。

引用
  
 官方文档 – 格式说明
__
 官方文档 –  编码
__
 官方文档 – 动画与透明
__
 八叉树颜色量化

 
 官方文档首页
 
 的压缩技术细节，包括  和无损编码
 
 的格式
_
    库
一、大数据 的优势
、更准确的评估用户信用
解释：能够考虑过去可能没有得到信用评分的人，或者可能被传统的基于逻辑回归的评分太匆忙地拒绝了。换句话说，可以查看消费者信用记录中的某些数据点，计算他们即将偿还的概率；或者考虑那些过去个月都没有还款基于某些原因，但是在某一个数据点，他们偿还了所有的款项的人群。
、对风控的控制更加精确
解释：人为的去做风控，每一个人都会有自己的主观看法和偏差，但是用  模型  大数据去判断风险，去控制风险，可以令风险的控制和判断更加精准。
、极大提升传统征信行业的决策效率
解释：对大数据量的加工处理更高效，决策效率也很高，替代了大部分的人工操作和决策过程。
二、以为例 和 以为例在征信大数据上的区别与联系
区别：
、对数据的学习更加全面深刻，而过于教条；
解释：可以通过复杂的推理，在大数据中找到不明显的东西优势中的第一点，而往往这些特殊的、或者个别的才最重要；则要求我们对数据强行结构化，这种做法容易消磨原始数据的真实性。
、在训练时能够兼顾多个变量之间的交互情况，而更多的是考虑单个变量；
、对借款人的可解释性更强，目前难以提供专业的“原因代码”据说公司已经有了一套生成原因代码的算法。
联系：
、：任何通过数据训练的学习算法的相关研究；
、：深度学习不仅仅是具备多层架构的感知器，而是一系列能够用来构建可组合可微分的体系结构的技术和方法；
、是一个很大的概念，而则是的一个分支——》是的子集；
、机器学习包括了人工神经网络，而是深度学习的起源——》是的子集；
、 ==   、图像处理、人脸识别、语音识别、知识图谱等
  ==   、贝叶斯、等

图  、、的联系
三、大数据技术如何应用到征信行业
大数据  ：利用大量用户金融交易行为记录类数据，通过机器学习方法，建立模型，预测用户信用情况，给出不同形式的反馈结果；
大数据  ：人工智能补充的不足，驱动征信业的发展；
可以通过那些手段、方法，补充的不足呢？
：深度训练、分析用户信贷类数据，分析多个变量之间的交互；
：智能问答系统、智能机器人解决信贷者的疑问；
图象处理：扫描信贷者的证件；
人脸识别：人脸识别活体，和身份证做对比；
知识图谱：解决反欺诈问题、不一致性验证、团伙欺诈等；
知识图谱应用举例如下：
不一致性验证
解释：张三、李四不同公司，但是同一个电话，这就是风险点，但是我们的实名认证没有包括这个信息；

解释：张三和李四是朋友关系，而且张三和借款人也是朋友关系，那我们可以推理出借款人和李四也是朋友关系，而不是父子关系红包关系链的问题；

组团欺诈
解释：张三、李四和王五之间没有直接关系，但通三者之间都共享着某一部分信息，组团欺诈的可能性较高。虽然组团欺诈的形式众多，但有一点值得肯定的是知识图谱一定会比其他任何的工具提供更佳便捷的分析手段。

四、监管万存知局长和业界对征信业的看法
、信用评分——信用模型所用信息不能包括非信贷类比如某宝所用的特征维度有：学习及职业经历、人脉关系已经涉及隐私等，是不可以的！信息；
、应用场景——主要在金融领域，特定的用途需要特定的授权；
、个人征信——三个原则：第三方征信的独立性；征信活动中的公正性；个人信息隐私权益保护；
、个人征信 ≠ 社会信用体系个人理解：主要是指应用场景的范围吧，像机场快速通道、谈恋爱等，有点夸张了，也是某宝的主意。
后记展望
人工智能听起来确实很强大，但是就目前的成果而言，只是提高了人类的工作效率，落实到具体的应用场景，我们还需要更加努力的探索和思考。特别是在金融领域和征信行业，我们更需要投入大量精力，不断尝试，不断创新，积极利用人工智能新技术，新方法，提高工作效率，提升模型精度，提升用户体验。
参考资料：
杨涛 对人工智能在金融领域应用的思考 国际金融 



_


作者：

微信架构历史
微信诞生之初，用的是常见的分层结构设计。这种架构简单、清晰并一直沿袭至今。这是微信架构的时代。
图架构演进
到了微信架构的时代，随着业务的快速发展，消息通知不及时和 版本之前内存泄露问题开始突显。由于代码、内存、大小都在增长，对系统资源的占用越来越多，导致微信进程容易被系统回收。因此微信开始转向多进程架构，独立的通信进程保持长连接的稳定性，独立的进程也阻隔了内存泄露导致的问题。
时间继续推进，我们也遇到了问题和问题。这时的微信已经具备了许多功能像朋友圈、摇一摇、附近的人等等，分离核心功能和其他业务模块变得越发重要。为此，微信开启了第三次架构改造。我们对各种产品功能进行解耦并拆分到相互独立的_工程中，这是微信第一次进行模块化架构的重构。经过几个月的努力，微信拆出了几十个工程，它们都通过基础组件访问网络、存储等服务，互相独立并行。新的工程架构支撑了微信更快速的业务发展，配合多分支开发模式的改进，能够支持团队多分支多的并行开发。
图  架构图
为何再次重构微信
原本好好的架构出了什么问题？
从上个架构之后的两年多时间里，微信基本没有大的架构改动。配合的编译，以及的多分支并行开发，微信的模块工程数量不断增多，支撑了游戏、支付等大功能，可以说这段时间里原有架构起到了很好的作用。
然而随着代码继续膨胀，一些问题开始突显出来。首先出问题的是基础工程和。基础工程一直处于不断膨胀的状态，同时主工程也在不断变大。同时基础工程存在中心化问题，许多业务类被附着在一个核心类上面，久而久之这个类已经没法看了。此外当初为了平滑切换到避免结构变化太大以及太多，我们将所有工程都对接到一个上。缺少了编译上的隔离，模块间的代码边界出现一些劣化。虽然紧接着开发了工具来限制模块间的错误依赖，但这段时间里的影响已经产生。在上面各种问题之下，许多模块已经称不上“独立”了。所以当我们重新审视代码架构时，以前良好模块化的架构设计已经逐渐变了样。
图  架构逐渐的变化
“君有疾在腠理，不治将恐深”，在我们还在犹豫到底要不要重构的时候，硬件同学向我们提出了需求。希望将微信代码移植到类似微信相册这样产品中。这样就可以快速跟进微信业务最新的支撑组件、协议、安全性、后台服务等能力，而且代码要尽可能精简，可以选择和定制模块，可以移植模块来实现原型尝试。但就之前的情况来说，微信一时难以满足。这下定了，还得重构。
于是我们回过头仔细看之前的设计，找找问题究竟是怎么来的。
问题出在哪
先寻找代码膨胀的原因。
翻开基础工程的代码，我们看到除了符合设计初衷的存储、网络等支持组件外，还有相当多的业务相关代码。这些代码是膨胀的来源。但代码怎么来的，非要放这？一切不合理皆有背后的逻辑。在之前的架构中，我们大量适用事件总线作为模块间通信的方式，也基本是唯一的方式。使用作为通信的媒介，自然要有定义它的地方，好让模块之间都能知道结构是怎样的。这时候基础工程好像就成了存放的唯一选择——定义被放在基础工程中；接着，遇到某个模块想使用模块的数据结构类，怎么办？把类下沉到基础工程；遇到模块想用模块的某个接口返回个数据，好像不太适合？那就把代码下沉到基础工程吧……
就这样越来越多的代码很“自然的”被下沉到基础工程中。
我们再看看主工程，它膨胀的原因不一样。分析一下基本能确定的是，首先作为主干业务一直还有需求在开发，膨胀在所难免，缺少适当的内部重构但暂时不是问题的核心。另一部分原因，则是因为模块的生命周期设计好像已经不满足使用需要。之前的模块生命周期是从“初始化”到“已注销”，所以可以看出在这时机之外肯定还有逻辑。放在以前这不是个大问题，刚启动还不等“初始化”就要执行的逻辑哪有那么多。而现在不一样，再简单的逻辑堆积起来也会变复杂。此时，在模块生命周期外的逻辑基本上只能放主工程。
此外的问题，模块边界破坏、基础工程中心化，都是代码持续劣化的帮凶。
总之在模块化上我们忽视了一些重要的问题，必须重塑。
重塑模块化
重塑模块化，我们分解为三个目标：

改变通信方式
重新设计模块
约束代码边界

改变通信方式
前面讲过，我们使用总线作为模块间通信的媒介，这种设计很常见。然而当回顾整体代码时能发现，并非所有通信需要的最佳形式。它的特点适合一对多的广播场景，依赖关系弱。一旦遇到需要一组业务接口时，用写起来那是十分痛苦的。也正因如此，这种情况下大家都跳过了的使用，直接将代码下沉到了基础工程，共享代码，进而导致基础工程的不断膨胀。
所以选个合适的通信方式很有必要，我们希望兼顾考虑开发的便利性和协议的约束性。
不合适。协议通信如何？
我们理解的协议通信，是指跨平台序列化的通信方式，类似终端和服务器间的通信或这种。现在这种形式在终端内很常见了。协议通信具备一种很强力解耦能力，但也有不可忽视的代价。无论什么形式的通信，所有的协议定义需要让通讯两方都能获知。通常为了方便会在某个公共区域存放所有协议的定义，这情况和引发的问题有点像。另外，协议如果变化了，两端怎么同步就变得有点复杂，至少要配合一些框架来实现。在一个应用内，这样会不会有点复杂？用起来好像也不那么方便？更何况它究竟解决多少问题呢。
所以我们想要简单点。经过权衡，我们决定用模块提供“”的方式作为它与其他模块进行通信的手段。
通常“”提供的是什么，是接口  数据结构。这种方式好处明显：实现简单也能解决问题，容易补全、调用接口方便，不用配合工具，协议变化直接反映在编译上，维护接口也简单了。
其实想想，用协议的方式在终端内作为通信手段，开发效率低，也容易出错。因此可能会诞生各种框架和工具来提升这里损失的效率。到头来，是不是大家都实现了一套类似这样的封装。其实本地的通信，能用接口就挺好，不能用的时候，再用协议封装也来得及。
确定了方案，实现起来就很简单。我们的注册方式和接口访问都很简单。用接口注册，再用接口访问，不暴露实现细节。如下图。
图  注册接口
图  访问接口
接下来，怎么暴露接口更方便？
模块暴露“”的方式无非就是新建个“”工程，剥离接口和数据结构到该工程里面，然后让其他模块引用编译。但这样有点麻烦，能不能再方便点？
当然有办法。我们实现了另一种接口暴露的形式——“化”。
使用方式和思路都很简单。对于文件，将工程里想要暴露出去的接口类后缀名从“”改成“”，就可以了。
而且并不只是文件，其他文件如果也想暴露，在文件名后增加”，也一样可以。
图  “化”
当然，要让工程支持这样的方式，文件肯定会有一点改变。
图     
就这样，可以说暴露接口变得非常容易，不用担心实现类也被人引用到。而它的实现原理也相当简单：自动生成一个“”工程，拷贝后缀文件到工程中就行了，后面其他工程依赖编译的只是这个生成的工程。简单好用。
还有个细节，如果想编辑后缀的文件，为了能让 继续高亮该怎么办？可以在 中把作为文件类型。
图  设置 
重新设计模块
要把模块重新设计，还要做好几件事。首先，消灭代码经常下沉的“三不管区域”——基础工程。这意味着原来的模块要把之前下沉的代码重新认领回去。
图  分层结构改造
为了巩固替代基础工程的层，不被滥用为新的代码堆放处，顺便还要解决中心化问题。就必须强化它的职责和设计。
结构可以很通用的定义为三个部分，分别提供了核心账号状态初始化、注销、网络状态回调链接建立、存储状态生命周期创建、销毁、用户存储路径切换、挂起。 
图
再然后是生命周期问题，我们需要重新设计正确的生命周期。
之前讲过，我们的模块生命周期大体上只有“初始化”和“注销”两个阶段。这已经不够用了。
所以扩大模块的生命周期，就给了模块实现各种代码需要的时机，才能避免大家往主工程塞代码。
图
实现新的生命周期是一个正确的选择，同时产生了解决另一个问题的机会——复杂的启动流程。
要知道主工程的代码一部分原因是启动流程堆积造成的，逻辑多了代码自然多。随之而来的问题就是代码多了，逻辑也就跟着复杂起来。微信的初始化逻辑是顺序排列在一起并从上到下执行，某种情况下还会异步启动。当程序启动流程比较复杂时，这样的代码会产生“隐性依赖”的问题。“隐性依赖”顾名思义就是：原本并应该存在依赖的代码，随着版本的迭代逐渐产生了依赖，而且还不明显。这样的情况会让情况恶化，大家只敢往里面堆代码，但却不敢“乱动”。
所以重新设计的模块应该要彻底避免这些问题。
我们重新定义了模块的生命周期，将模块的生命周期延长到应用启动和退出。而后，每个模块都可以定义一个类，作为模块的“支柱”或“起点”。作为解决初始化问题的手段，它具备几个主要阶段：、、
图  初始化的几个阶段
阶段，用于设置需要依赖的其他，当然提供那个的别名接口类就可以了。
图  设置
依赖阶段我们会生成整个模块的依赖树。这与编译时的依赖不同。通常的依赖关系是分为两种的，一种是类型依赖也就是编译期依赖，需要被依赖模块提供具体类型才能编译通过；另一种依赖则是运行期的逻辑依赖或数据一致性依赖，当一个模块用这种方式依赖另一个模块，就意味着，前者的执行要依赖后者执行已完成，通常是为了数据准备妥当或保证所需服务已被注册。
显性的运行期依赖把之前启动逻辑的“隐性依赖”完全暴露在阳光之下，改启动逻辑不用提心吊胆。
图  依赖关系树状图
阶段，该阶段是根据之前的依赖树遍历执行。通常用于初始化一些数据配置、注册服务、向前面依赖的模块注册一些回调等等。
此外这个阶段还有额外的作用是插入，用于后面阶段的执行。
图  阶段
阶段，为了改变启动流程不清楚的情况，强调启动逻辑之间的依赖关系，我们现在将每个要执行的启动步骤封装为。前面的阶段时，我们可以将插入到通过得到的依赖树。每个同时也是一个，也因此拥有接口。最终得到了包含所有的启动树，将遍历执行所有节点执行。
图  
独立使用的方式并不十分常见，通常本身的已经够用。不过在一些通用型组件初始化尝试会需要用到，如某些给某个全局使用的预加载资源提前初始化的逻辑。
为何设计和，这可以理解为“收集任务”和“执行任务”的两个阶段。另外这样的抽象还可以实现从外部调度的执行线程，将启动逻辑和启动异步代码分开。顺便解决了，原来异步启动代码混乱不堪的情况。
约束代码边界
从之前的经验看，要想约束好代码的边界不被破坏，编译上的隔离是唯一法宝。
除了工程和工程之间的分割，在工程的内部如果也能实现约束代码就更好了，算是将问题扼杀在摇篮里。之前通常的做法是以工程为单位的相互分离，但在工程内部并不限制代码相互引用。所以为了规范代码，常能看到用包名作为约定，区分内部功能职责，靠约定维持解耦。随着时间推移，很快就能发现包名约定作为约束太弱了，在快速迭代的代码上很难一直维持下去。不管怎么样解决，总要通过一些手段审查代码引用的对不对。感觉有点防不胜防。为此，我们实现了一种简单易用、粒度更细的工程组织结构——工程结构
图  
这样的工程组织形式的两个明显好处：

约束代码粒度和小代码边界的利器    

粒度极小，一个工程也许只有一个源文件，只要它能表达一个独立职责。对于任何一个模块，从内部约束自己的功能结构，是对整体代码边界约束的极大补充。以前面插的结构为例，一个业务可能提供了几种不同的产品功能，以及支撑能力。那么将其相互独立的代码进行区分，避免混杂，就会显得十分必要。清晰的结构，意味着后期维护成本的降低和开发效率的提高，留下了灵活性。

避免的超量的创建，轻量

工程某种程度上能减少一些粒度太小的工程，也一定程度的缓解太多工程时的编译性能问题。
至此，我们基本完成了重塑模块化的设计目标，解决掉很多之前没有考虑的问题。算是模块化的加强版。另外设计是一方面，拆分解耦原来代码以及迁移还是另一回事，这个过程也是十分艰难和枯燥这里就不细讲了。接下来想办法看看重构的效果。
看看效果
重新设计的模块化加上代码的重构。我们终于能满足之前硬件同学的需要。同时一并解决许多拖欠的问题。
在编译上，整体编译速度会因为增多而下降一些。但拆分之后，却能显著加快单工程增量编译的速度。和之前相比，一行代码的增量编译耗时能减少。
除了满足需求外，架构设计的效果并不好量化，不过我们尝试用一个来说明。
 
基于前面介绍过的轻量的微信内核层，再配合一个不包含界面的基础聊天模块和模块，可以在短时间里开发出一个及精简版本的微信—— 。
图   
模拟这个的界面是单独开发的，时间的大头都花在这上面。
它的效果不错：

可以让安装包大小缩减到，大概是完整版本的
能大幅减小内存占用，约占用完整版本的 注：只计算应用相关有不同的部分 

大概就是这样。
接下篇：《微信  模块化架构重构实践下》

本文来源于： 微信公众号热点事件
西部眼科联盟携手腾讯觅影 家医疗机构首启眼底筛查西部眼科联盟由西安市第四医院为核心的西部地区家医疗单位组成月日在年“互联网”数字经济中国行·陕西峰会携手腾讯公司成立人工智能医学影像联合实验室，共同启动眼底筛查临床预试验。此次西部眼科联盟联手腾讯公司，双方将依托腾讯觅影的图像识别、深度学习等领先的人工智能技术，对眼底筛查工作进行深入的研究和实践，辅助医生进行眼底筛查，有效提升诊断准确度，弥补西部地区医疗资源紧张和医疗水平分布不均衡的差距。
微软 今日宣布正式登陆中国微软 宣布其财务和运营企业版将提供本地业务数据部署选项，意味着今日起 将正式登陆中国。 是一款云软件，它把微软和云方案整合为单一的云服务解决方案。其引入了能力，销售人员使用它可以预测前景和跟踪消费者。据悉，大中华强客户中已经有企业，横跨子行业的客户，正在使用微软 的服务。
商汤科技已启动轮融资 有望月完成商汤科技联合创始人、副总裁徐冰在光大控股“投资年会”的主题演讲中透露，商汤科技已启动轮融资，新一轮融资计划于今年月完成。商汤科技是中国新锐人工智能公司，专注于计算机视觉和深度学习，在今年月宣布完成亿美元轮融资，创下当时全球人工智能领域单轮融资最高纪录。
“京东超脑”品牌上线，人脸识别准确率达京东金融人工智能技术解决方案“京东超脑”品牌近日上线。京东超脑的核心技术主要包括人脸识别、虹膜识别、深度学习、图像处理、知识图谱和自然语言等，其中人脸识别准确率可达。京东超脑人脸识别技术基于深度学习平台支撑的应用算法，可以对给定的一张人物照片，结合人脸轮廓、眼、口、鼻、眉毛等关键点，提取、识别人脸特征，实现人脸检测、检索、比对、聚类、美颜等应用。另外，通过多项人脸识别技术的应用，京东超脑的模型能够防止照片、仿生脸、视频等攻击行为，并对复杂背景的攻击和真人进行有效识别。京东超脑人脸识别技术已经实现在诸多场景中广泛应用，比如京东大厦内打卡、贩卖机购物、食堂、便利店支付等。除此之外，京东超脑还在京东无人车上搭载了人脸识别系统，可以实现刷脸取件的操作。在京东金融中，用户授权开通刷脸支付，就可以在支持京东刷脸支付的线下商户体验店中进行刷脸支付，整个支付环节只需要刷脸就能完成。另外，京东金融的人脸识别技术还实现了对外输出，比如在大连银行的落地。
郭明錤：明年主摄像依旧不支持 苹果公司的新款 摄像头支持脸部识别功能，可以使用脸部识别功能解锁 ，还具备通过识别脸部动态创建表情符号的功能。但这些功能是 前置摄像头才有的，后置摄像头并没有。凯基的郭明錤发布了一份报告，他预计这个功能路线明年也不会改变。凯基表示，苹果公司目前的功能发布至少比竞争对手领先一年，所以不用急于将此摄像系统实现到手机背面。凯基称，苹果将 仅安装在前置摄像头也有其他一些原因，包括维持销售价格和成本，以及确保目标发货时间等。新浪科技
宣布成立亿美元成长基金，欲通过机器学习技术鉴别创企消费零售投资市场宣布成立亿美元成长基金，将用于直接投资公司。通过一种名为的机器学习技术，  将通过公司的数据来鉴别哪些投资有可能会获取成功。尽管利用技术进行投资，但它投资的并不是技术领域。相反，它投资的都是饮食、个人护理这些行业。表示的策略就是投资那些“生产直接上架产品的公司”。这些公司的营收额最好在万到万美元之间。猎云网
英国剑桥大学的研究人员：用机器学习在模拟状态下成功预测了地震英国剑桥大学研究人员近日宣布，他们利用机器学习，在实验室的模拟状态下成功预测了地震。研究人员们发现了一个导致地震的隐藏信号——一种特殊的声音。这种声音由地壳的断层运动所发出，而地壳的断层运动被认为是地震的主因，机器学习算法能够找到这种运动发出声音中的规律，评估断层的压力以及发生断裂所需时间，最终进行精确预测。虽然还处在实验室阶段，但人工智能为我们预测地震提供了另一个角度，研究人员表示下一个目标将会是在尽可能接近实验环境的条件下进行地震预测。
中国平安联合清华大学打造金融与医疗全球智库中国平安与清华大学合作在全球共同发展研究院成立了全球金融与经济发展研究中心以及全球医疗与健康研究中心。其中，全球金融与经济发展研究中心将人工智能、云技术、区块链、大数据等国际前沿科技用于对于全球金融业的影响和趋势研究；全球医疗与健康研究中心将聚焦人工智能医学应用研究、个人健康风险研究、医疗服务机构管理研究、卫生经济学研究以及健康大数据研究等课题。
高新兴发布基于物联网和的新一代立体防控技术高新兴科技集团月日举办的“基于物联网和的新一代立体防控技术研讨会”在深圳召开。会上，高新兴发布了基于物联网和的新一代立体防控技术：城市级立体云防系统。据悉，城市立体防控云防系统开创了与安防技术融合的先河，预示着在视频综合应用层面终于摸索出一条新的道路，翻开了新的视频监控建设模式。证券时报网
国内首例重建胸壁术成功，打印让患者“挺起胸膛”天津医院医生为一名来自黑龙江省的岁男子成功进行了国内首例“打印胸骨柄恶性肿瘤切除定制假体功能性重建术”，为其顺利切除所患多年、已长成成人拳头大小的罕见胸骨柄软骨肉瘤，并采用兼顾强度、个体化和组织相容性的打印定制假体，完全保留患者双侧胸锁关节、肩关节及上肢功能。天津日报
投资事件
人工智能公司旷视科技完成亿美元轮融资旷视科技已于近期完成轮融资，本轮融资金额约为亿美元，由中国国有资本风险投资基金、蚂蚁金服、富士康集团联合领投，中俄战略投资基金、阳光保险集团、集团等参投。本轮融资很可能会被用于加快在城市综合大脑及手机智能领域的技术落地，打造智慧城市。旷视科技成立于年，主要做计算机视觉相关技术研发与应用落地，最早以“”的名字为外界熟知。氪
驭光科技获得千万美元轮融资，顺为资本、百度风投领投驭光科技是衍射光学和微纳光学整体解决方案提供商，致力于衍射光学和微纳光学的设计、制造及应用；针对激光和的光学应用提供标准或定制的衍射光学元件，广泛用于扫描、智能传感识别、机器人视觉等众多领域，近日，驭光科技获得千万美元轮融资，顺为资本、百度风投领投，真格基金跟投。
知情人士透露依图科技获得新一轮融资依图科技是一家计算机视觉科技公司，为用户提供基于图像理解的信息获取和人机交互的产品，致力于构建机器视觉的未来，近日，据知情人士透露，依图科技获得新一轮融资，招行、红杉、高瓴共同参与。
麦极客获得千万级人民币轮融资，腾龙股份投资弗圣威尔是一家致力于无线供电技术的研发与相关产品的商业化应用的公司。公司旗下产品麦极客无线供电套装，无线时代和电源线说再见，可以帮助客户更好的提供电源服务，从而使生活更加方便快捷，近日，麦极客获得千万级人民币轮融资，腾龙股份投资。
麦德魔方获得千万美元轮融资，有成创投投资麦德魔方是一家智能音乐教育服务商，主要面向各类音乐艺术教育机构，为岁青少儿提供素质教育及音乐教育服务。在音乐培训上主打专业爵士鼓教学， 同时覆盖吉他、钢琴、古筝以及马林巴等乐器，近日，麦德魔方获得千万美元轮融资，有成创投投资，据悉，本轮资金将用于麦德魔方的产品优化和人工智能教学研发。
获得万美元融资是一家人工智能研发商，研发了能够模拟人类神经系统的神经元芯片，可以用人类大脑相似的方式处理信息，因此预测股票市场趋势也会更加“人性化”。除了预测股市之外，该公司的技术还能应用在语音和图像识别、以及无人驾驶汽车行业，近日，获得万美元融资。
 获得万美元轮融资 是一个无银行卡的电子账户支付平台，利用区块链技术降低了跨境汇款成本，其服务范围主要包括一些没有部署银行服务，或是一些欠发达地区，特别是海外劳工，近日， 获得万美元轮融资。
提供与人类医生相结合的远程医疗， 获万美元轮融资 的远程医疗应用将人工智能和人类医生结合在一起，成功吸引了大量用户。今日这家公司宣布获万美元轮融资，领投方为 、 和柏林风投公司 。会向用户寻味一些个人的问题，并利用自己的数据和用户陈述的症状给出信息和建议，帮助用户了解自己可能出现了哪些健康问题。这款应用发布于年，表示目前大约有万人在使用这项服务。公司计划利用这轮新融资去进行产品开发，并在美国建立办事处。同时它将为营销、工程等所有部门招聘新员工。猎云网
专为无人车设计固态激光雷达，以色列创企获万美元轮融资 是一家专为无人驾驶汽车而设计固态激光雷达技术的创企，近日它宣布其先前获得的轮融资数额增加到万美元。上个月这家以色列创企宣布获万美元融资。目前又有两家巨头为这家公司投资了万美元，他们分别是三星电子旗下的投资部门 以及软银在韩国的控股公司  。目前正在开发两款雷达产品：和。前者是一个无人驾驶级别的设备，主要用于高级的无人驾驶级别，预计会在年进入市场。后者会在年早期问世，其他公司能通过它测试自己的无人汽车。猎云网
完成数百万美元天使轮融资，致力于用技术塑造未来世界宣布完成数百万美元天使轮融资。本轮融资由顺为资本和洪泰基金共同领投，新松创投参与投资。本轮融资将用于 接下来在  技术方面的研发升级、硬件量产化探索、人才引进和团队建设等方面。融资完成后，洪泰智造工场钱晨博士将担任在硬件以及供应链领域的顾问。成立于 年初，是一家致力于用 混合现实技术塑造未来世界、改变人类认知体验的公司。

本文来源于 腾讯  加速器 微信公众号网址 作者：王少飞

在做业务时我们用    框架，其中  的  是用的纯函数。这里什么是纯函数？为什么要用纯函数？纯函数的好处是什么？接下来的我们一起研究下。
 强调  一定要是纯函数

什么是纯函数
满足以上两条的函数成为纯函数：

在相同的输入值时，需产生相同的输出。函数的输出和输入值以外的其他隐藏信息或状态无关，也和由设备产生的外部输出无关
不能有语义上可观察的函数副作用，诸如“触发事件”，使输出设备输出，或更改输出值以外物件的内容等

 
图一中函数在相同的输入时，输出总是一样的，并且并没有改变，所以是纯函数
图二中函数在输入相同是，输出并不相同，并且发生了改变，所以是非纯函数          
 纯函数
  {
        
}

 这里在输入时，返回的永远是
  =   


 非纯函数
  = 
  {
       
}

  = 

 引用了外部变量，如果发生变化，在输入相同的情况下，输出也会发生变化。
 = 
  = 

中的为什么要用纯函数
如下图所示，如果我们把的纯函数修改为不纯的函数：         
纯函数的代码           
修改为不纯的函数，我们在内修改了旧的变量                   
 
下面来看下是如何处理的            
 
将旧的状态和要修改的数据一起传进去，然后返回一个新的状态，和相比较来确定数据是否改变。如果我们用不纯的函数，和将一致，就算数据改变，也会是。
函数式编程与纯函数



维基百科的解释不太通俗，我们来看下他具有那些特点：          

函数是第一等公民 

所谓第一等公民 ，指的是函数与其他数据类型一样，处于平等地位，可以赋值给其他变量，也可以作为参数，传入另一个函数，或者作为别的函数的返回值。

只用表达式，不用语句 

表达式是一个单纯的运算过程，总是有返回值；语句是执行某种操作，没有返回值。函数式编程要求，只使用表达式，不使用语句。也就是说，每一步都是单纯的运算，而且都有返回值。原因是函数式编程的开发动机，一开始就是为了处理运算，不考虑系统的读写。语句属于对系统的读写操作，所以就被排斥在外。当然，实际应用中，不做是不可能的。因此，编程过程中，函数式编程只要求把限制到最小，不要有不必要的读写行为，保持计算过程的单纯性。

没有副作用 

所谓副作用 ，指的是函数内部与外部互动最典型的情况，就是修改全局变量的值，产生运算以外的其他结果。函数式编程强调没有副作用，意味着函数要保持独立，所有功能就是返回一个新的值，没有其他行为，尤其是不得修改外部变量的值。

不修改状态 

上一点已经提到，函数式编程只是返回新的值，不修改系统变量。因此，不修改变量，也是它的一个重要特点。在其他类型的语言中，变量往往用来保存状态。不修改变量，意味着状态不能保存在变量中。函数式编程使用参数保存状态。

引用透明 

引用透明 ，指的是函数的运行不依赖于外部变量或状态，只依赖于输入的参数，任何时候只要参数相同，引用函数所得到的返回值总是相同的。有了前面的第三点和第四点，这点是很显然的。其他类型的语言，函数的返回值往往与系统状态有关，不同的状态之下，返回值是不一样的。这就叫引用不透明，很不利于观察和理解程序的行为。
从后面三点可以看出：函数式编程要求函数也会是纯函数。
函数式编程来举个例子
传统的编程语言可能是这样
  =   
  =   
  =   

函数式编程是这样：
  =   

看下它有哪些好处：

代码简洁，开发快速           

函数式编程大量使用函数，减少了代码的重复，因此程序比较短，开发速度较快。

接近自然语言，易于理解       

函数式编程的自由度很高，可以写出很接近自然语言的代码。

更方便的代码管理

函数式编程不依赖、也不会改变外界的状态，只要给定输入参数，返回的结果必定相同。因此，每一个函数都可以被看做独立单元，很有利于进行单元测试 和除错，以及模块化组合。

易于并发编程函数式编程不需要考虑死锁，因为它不修改变量，所以根本不存在锁线程的问题。不必担心一个线程的数据，被另一个线程修改，所以可以很放心地把工作分摊到多个线程，部署并发编程。

函数式编程深入理解待续

原文链接：


相关推荐响应式编程中对象的实现原理玩转正则表达式前言
资讯产品近几年持续火爆，赚足了人们的眼球。以今日头条披露的数据为例：日活跃用户超过一亿，单用户日均使用时长超过 分钟，资讯类产品的火爆程度可见一斑。资讯类产品的火爆让巨头坐卧不安，纷纷站出来反击。手机百度除了搜索框之外，大部分已经被一条条新闻占据。阿里则是依托浏览器上线了自己的头条。腾讯在腾讯新闻之外，从头搞起了天天快报。
头条为何能取得成功？很多人会说是头条的个性化推荐技术做得好，个人认为其实不尽然。本文罗列了相关的个性化推荐技术，特别是资讯推荐常用的算法，带大家从“内行”的角度来解密下个性化资讯推荐技术。希望读者读后能发自内心地觉得：头条其实也就那么回事。
本文主体分以下三个大的部分。除此以外也会在最后用一小节展望下个性化资讯推荐的未来。
    个性化资讯产品：先介绍资讯推荐产品是什么，着重分析其业务特点。
    个性化推荐方案：接着介绍资讯推荐所需的技术，着重分析其技术难点。
    个性化推荐算法：最后介绍业界常用的个性化推荐算法。
个性化资讯产品
资讯推荐产品要解决用户的需求很简单，一句就可以概括：为用户找到有趣的资讯。而做到这个需求就要做好两个关键点：
新闻聚合。用户希望在一个产品里获取任何他想要或者可能想要的东西，这就要求产品要聚合其他、网站、甚至线下媒体里的各种资讯，这也是最基本的一个产品特性。
个性化。要去最大程度地理解、猜测用户的兴趣，结合兴趣为其推荐相关资讯，这是资讯产品后期衍生出来的一个产品特性。
更进一步，如果将上述两个关键点展开，一个好的个性化资讯产品就要具备以下亮点：
    时效性这是所有资讯类产品共同的特性，而不仅仅是资讯推荐类产品。人们总是希望通过你的产品看到最近发生了什么，而不是很久之前的老新闻。
    精准性每天发生的事情有很多，对应的新闻稿子也非常多，如果每个都看，信息过载的问题会让人吃不消。你能否猜出我的兴趣，并精准地推荐感兴趣的新闻才是用户关心的，也是用户能直接感受到的体验。
    丰富性这点恰是很多用户最容易忽略的一个点。其实很多用户才不管这个资讯类产品是怎么推出来的，对于单个用户而言，其第一诉求必然是通过这个产品来了解世界，知道每天都在发生什么，所以新闻的丰富性是最最基本的。
    排他性每天描述同一事件稿子很多，在自媒体时代这个问题更加突出，但用户只会用有限时间去了解这件事，而不是去研究所有关于这件事的报道，更不想甄别不同报道的差异。所以，用户往往需要的是一个事情的一两个报道，保证给我差异化的内容是必须的。
    热门性谁都不想在周围朋友们讨论热点事件时，自己是个懵逼，什么都不知道。这点很关键，跟精准性和个性化看起来有点背道而驰，但人性天生就有求同的天性。没有同样的话题，生活将会失去太多色彩，不知道该和人交流什么。
    高质量媒体质量层次不齐，有的文章写得很好很炫，读的时候很过瘾，但一旦你发现它是一个假新闻或者歪曲报道，你还是对这类文章嗤之以鼻。新闻可以高于事实，但不能背离事实。
    合法性人总是对非法的事情感兴趣，如黄赌毒之类。而对于被压抑的需求，则更是感兴趣，如色情之类。但一个伟大的产品，首先必须是一个合法的产品。所以，一切尽在不言中了。
个性化推荐方案
要做到上一节提到的产品特性，有两条路可以走：人工运营和算法推荐。在类头条产品出现之前，请新闻方面专业人才来运营是最稳妥的方式。但人工运营成本越来越高，局限性越来越明显。走算法推荐的路，在张扬个性的年代，是一条必由之路。下表简要对比下两者的差别。



对比项
人工运营
算法推荐




风险把控能力
强
弱


投入产出比
有瓶颈
有空间


覆盖度用户、内容
部分人群、部分内容
无限大


个性化程度
一般
精细



推荐算法应用在资讯类产品时有一些挑战，这也是资讯推荐能否做好的关键所在。

可扩展性 

推荐本质是建立和的关联，一般问题要么是侧量级大，要么是侧量级大，而资讯推荐是典型的“双大”场景。又由于是高度依赖个性化的场景，还不能简单地将某一侧大幅降维，所以可扩展性显得尤为重要。

稀疏性

资讯的高度个性化自然而然的带来一个很棘手的问题就是稀疏性。举个最简单的例子，如果将和的 点击行为用矩阵形式表示出来，会发现比一般问题更多的项存在。而稀疏问题是一直困扰机器学习高效建模的一大难题。


冷启动

每天都有大量的新闻产生，如何将如此多的新闻快速、合理地冷启动，尽快将高质量的新闻推给合适的用户是个大问题。

 时效性

不同于商品、书籍、电影、视频等的推荐，新闻一大特点是生命周期非常短，有的甚至只有几个小时。如何在最短的时间里把新闻推给感兴趣的人，在新闻进入“暮年”之前发挥它的最大价值是个非常重要的问题。

质量保证新闻本身量大，且时效性强，如何在短时间里快速评估每篇稿子的质量和合法性，做到最高效、最精准的内容审核是个大课题。

动态性这里的动态性主要体现为用户兴趣随时间改变、当前热点随时间改变。用户在一天里的不同时刻、不同地点、不同上下文里的阅读兴趣都有所差别，动态在变化。


个性化推荐算法
围绕上面这几个挑战，业界各大资讯类产品在做推荐时想出了各种招儿来解决，接下来，我们就梳理下业界经典的做法。这里以产品为主线，以具体要解决的问题为辅线来进行梳理，会集中介绍下 、 、今日头条等产品的推荐算法，并着重介绍下深度学习在这个领域的最新进展。
 
 是一款经典的资讯推荐产品，也是后来者竞相模仿的对象。年， 在上首次发表论文《      》公开资讯推荐技术。该论文的做法非常自然、简洁，从论文题目就能看出是的落地上线。是这样想的：鉴于大家都觉得是推荐领域公认的有效算法，那将其直接用在产品上效果自然也不会太差。 
但经典的有个巨大的问题，无论是还是，当你要算任意两个或者两个之间相似度的时候，计算量会非常巨大。因为的计算量直接取决于特征维数和、 的数目，而资讯类产品这两个数目都非常巨大：每个、的特征因为大多是曝光、点击等行为类特征，而资讯类产品这些行为发生的很小几乎可以忽略不计，导致维度往往比较高；资讯类产品的数目和数目都很大，这和一般领域往往只有一方比较大是不同的。这篇论文的核心就是将改造为支持大规模计算的方法。其原理也很简单：将用户事先分成群，再做 时实际变成了  。这样在工程实现上就简化了很多，线上只需要记录每群用户喜欢什么实际做法是用到了基于的内存系统，为资讯，而则是资讯在用户群上的各种统计值。一个用户来了之后，先找到其对应的群，再推荐这个群喜欢的资讯就好。而线下则借助实现了、两种聚类分群算法，定时把最新分群结果推到线上。
为什么 会先选择协同过滤算法呢？除了算法在其他场景有成功的应用之外，还有一个重要的特点：是一个依赖用户行为数据就可以的算法，它不像其他基于内容推荐的算法对能力要求很高。选择，则绕过了这个拦路虎有经验的人都知道，是一个长期积累的过程，很难一开始就做到比较出色的程度。透过这篇文章，我们也不难发现工业界解决实际问题时的一个基本套路：重头做一个模型时，会选择最经典的一个实现，然后快速上线解决一大半问题。
结合前面总结的资讯推荐的挑战，可以看到该算法主要解决了可扩展性问题。我们也不难发现这个 的算法也有一些明显的缺点：它不能解决新用户、新资讯的冷启动，因为没有行为数据来支撑运转；推荐精度不够高，没有做到真正的个性化。这是 算法本身的特点决定的；实时性不够。用户聚类不能做到快速更新，这导致了对用户最新兴趣把握有不及时的风险。这些问题在 的另一篇论文中得到了解决。
 在 上放出了《      》。这篇文章重点解决推荐精准性和新资讯的冷启动问题，文章想法也很朴素自然，主要是基于贝叶斯理论进行建模。他们假设用户兴趣有两个方面：个人不断变化的兴趣以及当前新闻热点。在具体建模之前，作者先基于历史数据进行了统计分析，验证了他们的假设，得到如下基本结论：用户的兴趣是随时间变化的，新闻热点也是随时间变化的。还有一个比较有趣的结论是不同地区同一时间的新闻热点是不一样的。下图是不同地区不同时刻体育类新闻的阅读占比。
 
这幅图纵轴是体育新闻阅读量在该地区总新闻阅读量的占比，越高表示该地区的用户越喜欢看体育新闻。横轴则是时间点，用黑线标示出的三个时间点从右到左则分别对应奥运会、欧洲杯以及美国职业棒球大联盟进行时。而图中的三条不同颜色标示的线则代表西班牙、美国、英国三个地区。不难发现，这副图不仅揭示了同一地区用户对体育新闻的感兴趣程度是随时间变化的，更揭示出西班牙、英国等国家更爱看体育新闻。
方法主要建模用户对当前某类新闻的感兴趣的程度，这取决于两个方面：用户对这类新闻的兴趣度以及当前某类新闻的热度。通过贝叶斯理论，这两个方面可以直接用如下公式联系在一起：

其中分子左半部分 表示用户当前对某类新闻感兴趣的概率，它是通过最近不同时间段用户对某类新闻感兴趣的程度来汇总计算，而用户某个时间段内对一类新闻感兴趣的程度则通过下式计算。 

这个公式粗看起来比较复杂，实际含义其实很简单，可以理解为简单统计下某类新闻阅读量占用户该时间段内所有新闻阅读量的比例即可。而分子右半部分 表示当前本地区某类新闻的热度这类新闻被该地区点击的概率，实际也是统计一下短时间内对这类新闻的用户点击占比得到的。
总体来看，该算法是非常简洁自然的，它针对遗留的问题进行了很好的解决：引入新闻类别解决了新新闻的冷启动；引入用户兴趣解决了个性化和推荐精确度的问题。但新用户冷启动还有优化的空间，因为按照这个方法，同一地区不同新用户推荐的都是该地区最热门的内容。
 
 团队年在上发表 《        》，重点解决资讯推荐里的冷启动问题。不同于上一篇 的做法，这篇文章试图同时解决新用户和新资讯的冷启动。本文的基本假设：用户画像能刻画用户的阅读兴趣，新闻的画像也可以表示新闻的点击率，而用户喜欢一条新闻的程度则取决于静态预测和动态预测两个方面，都是用 方法来建模用户对资讯感兴趣的程度。具体来讲，用户_对资讯_的兴趣得分如下计算。
 
所谓的 的含义当你隐去一个自变量时，另一个自变量和因变量成线性关系。比如下式不考虑时，和成线性关系；不考虑时，和也成线性关系。进一步如果将用户和资讯的特征分为静态和动态两大类，则上式可写为
 
最后一个等式后面的第一项是静态预测得分，第二项则是动态预测的得分。
所以当一个新的用户到来时，第二项的特征是没有，相当于仅用用户的画像等静态特征来解决新用户的预测问题。当一个新资讯时，也是同样的道理。静态特征如搜集到的用户的年龄、性别、地域等基础属性，以及从其他途径获取的如在相似产品上的行为、其他场景上的历史信息等，还有资讯的类目、主题等。而动态特征如用户在 上的各种阅读、点击、评分以及加工出来的某条资讯、某类资讯分时间段的各种统计值等。有了预测分，和真实的 比如用户是否点击一个资讯做个比较就能得到机器学习训练时的反馈信息。本文优化目标是基于贝叶斯理论推导出来的最大化后验概率 ，而优化方法则采用熟知的梯度下降法 。
 上，又发表了一篇更加有效解决冷启动的文章《       》。这篇文章基于传统的套路，大家可能比较熟悉的是为新随机一部分流量让其曝光，得到一些反馈，然后模型才能对其有较好的建模能力，这是最ï的策略。稍微高大上一点的做法则是  策略 假设有个新没有任何先验，每个的回报也完全不知道。每个的回报均值都有个置信区间，而随着试验次数增加，置信区间会变窄，对应的是最大置信边界向均值靠拢。如果每次投放时，我们选择置信区间上限最大的那个，则就是策略。这个策略的原理也很好理解，说白了就是实现了两种期望的效果。：均值差不多时，每次优先给统计不那么充分的资讯多些曝光；均值有差异时，优先出效果好的。而这篇文章，则是对进行了优化，因为对没有任何先验知识，而可以引入一些先验知识。比如你在推荐新闻时，可能发现娱乐类新闻天然比体育类新闻点击率高。如果能把这个信息作为先验知识考虑进策略中，就可以加速的效率。假设每次曝光的回报是和  成关系的，然后使用预估期望点击和置信区间来加速收敛。
接个性化资讯推荐 算法篇  下 导语
腾讯云文件存储  终于可算发布了。在这之前我们已经有了本地硬盘、云硬盘、 硬盘、对象 存储、归档存储等这么多种存储产品，为什么还需要一种新的产品呢？在应用场景说明文档中已经列举部分常用的应用场景，但是其实也可以用来解决一些长久以来的困扰。比如，最突出的一个特点是可以同时挂载到多台服务器上，每台服务都可以当本地硬盘来使用实测读写速度比本地硬盘慢一点，但是多数场景下不成为瓶颈。这就意味着，多台上可以有一个目录从此可以实现全自动的文件实时同步。以往我们启动多台服务器做集群服务的时候，常常遇到最困难的一些文件同步问题从此就可以迎刃而解了。我们列举几个场景：
统一反向代理缓存
我有一个服务器集群，是使用的回源特性，来对一个数据源做数据分发，并且在分发的时候会尝试在本机做一个文件缓存的：
__   __   指定临时文件目录
__  __ = _=_ = _=
设置缓存区名称为_，内存缓存为，自动清除天内没有被访问的文件硬盘缓存为。
这样经常遇到的一个困扰就是各台服务器之间的缓存目录无法共享缓存的文件，因此不得不每台服务器都各自回源一次，又浪费数据源的带宽、给数据源增加不必要的访问压力，还浪费存储。现在有了，我们就很容易让所有的服务器共享同一个文件夹了：
   
  
    _     _ 
         
    
    __    __ 
    __   __ 
  
把上面的替换成自己开通的的，然后把这段脚本在每一台服务器依次运行一遍，所有的服务器的缓存目录就都收敛到一处了。当然如果要切换回来也很容易：
  
 
  
   _    _  
    __    __ 
    __   __ 
  
统一附件
很多系统，比如、等如果启动了多个实例做负载均衡，经常会出现被分配到服务器的用户上传了附件，分配到服务器的用户看到帖子和文章的时候却看不到图片。这是因为附件文件被传到了本地目录中，难以在多个服务器之间及时共享。
过往这类问题都要通过比较复杂的方式来尽量解决，比如用触发进行文件同步别忘了删除文件也要同步，或者采用远程附件形式把文件上传到等目前的不支持直接，因此还需要在本地搭建一个代理。而且这些操作都不是实时的，在附件比较大或者网络比较繁忙的的时候，仍然会有一个比较长的时间窗各个服务器上的文件无法同步，用户看到互相矛盾的信息。
但是有了这个问题就简单多了。新建一个并挂载到全部主机上，然后在后台管理界面把附件目录指向上的一个目录，然后所有的服务器上的附件就都实现了实时同步。
比如在上修改附件保存位置的后台配置项目是这里：

统一登录态
等服务经常把用户的回话状态保存到文件系统中，这样在使用服务器集群的时候就会出现登录态不一致，在服务器上登录过的用户，在服务器上却被认为没有登录。
在以往，为了实现集群中的一组服务器上的登录状态共享，经常需要修改默认的会话逻辑，比如另外搭建或者采购一个等缓存服务来存储会话，或者干脆用数据库来存储会话。这样不但麻烦，而且为了避免这个存储会话的服务成为新的系统单点往往还要做更多的保障工作，比如做主从设计等等。
但是有了以后，我们只要新建一个并且挂载到全部主机上，然后修改文件中的 _ = 配置项，把回话保存路径指向同一个在上的目录，这样一个人登录一台服务器，集群中所有的服务器旧都能立刻同步到信息。而且本身是一个排除了单点风险的可靠服务。
统一服务代码版本
一些采用了集群服务的系统经常需要反复更新代码逻辑，这样每次更改代码后，都要逐一发布到集群中的所有服务器上，这个过程如果手工操作很容易出错或者改漏，如果开发一个专业的运维系统来解决这样的问题成本不低。
但是有了以后，我们只要把原来的代码拷贝进，然后把所有服务器代码的目录指向，代码立刻就能实现实时同步。
搭配弹性伸缩服用效果更佳
弹性伸缩服务可以按需为云上的系统提供恰到好处的计算和分发能力，但是 在遭遇系统扩容的时候，用旧镜像新生成的扩容服务器经常数据不是最新的，需要做额外的工作来同步  在需要缩容的时候，如果在扩容出来的服务器上有新生成或者用户新上传的数据，需要做更多的数据同步工作收尾然后才能执行缩容。这样腾讯云默认的系统缩扩容就难以全自动的完成缩扩容所需要的全部工作了。
问题也许还好一点，我们可以在服务器镜像中前置一个开机任务来追上新数据。问题如果采用系统触发的缩容，连数据同步的机会都可能没有，除非自己主动监测缩容条件，自己迁移数据后，调缩容来实现缩容。这样开发量也不小。
但是有了以后，只要确保新生成和新上传的数据是保存在上的，服务器可以随意的生成和销毁，不需要做什么额外的数据同步工作。
结语
解决了集群服务的很多困扰多年的问题，实乃居家旅行，负载均衡、弹性伸缩之必备良药。
  以上有部分场景纯理论探讨，时间仓促没来得及实际验证，如有错漏敬请指出。作者 | 莫韵编辑 | 京露

莫韵，高级运维工程师。观念的支持者，曾在迅雷担任运维工程师，精通、大数据、海量运维之道。 目前就职于互联网企业担任业务系统运维职位，致力于高效运维实践。

经常会遇到满的情况 特别是大家共用的时候 这时候需要找到，哪个比较大，哪个表比较大，默认的方法你得一个一个的查询， 毕竟这里你没法使用   这种文件系统级别的命令 但这肯定不是偷懒程序员爱干的事。
原理很简单： 在系统库中记录了这些数据，只需要使用一条命令组合起来就好
| _ |  |  | | | | 数据库的名字
| _ |  |  | | | |    表名
| _ |   |  | |  | |  数据空间大小
| _ |   |  | |  | |  数据索引大小
详细表结构见下面

|  |  |  |  |  |  |

| _ |  |  | | | |
| _ |  |  | | | |  数据库的名字
| _ |  |  | | | |    表名
| _ |  |  | | | |    
|  |  |  | |  | | 
|  |   |  | |  | |
| _ |  |  | |  | |
| _ |   |  | |  | |
| __ |   |  | |  | |
| _ |   |  | |  | |   数据空间大小
| __ |   |  | |  | |
| _ |   |  | |  | |   数据索引大小
| _ |   |  | |  | |
| _ |   |  | |  | |
| _ |  |  | |  | |
| _ |  |  | |  | |
| _ |  |  | |  | |
| _ |  |  | |  | |
|  |   |  | |  | |
| _ |  |  | |  | |
| _ |  |  | | | |
查询所有数据库占用磁盘空间大小的语句：
 _ _   _
_  _
 _
  _
  _ 
查询单个库中所有表磁盘占用大小的语句：注意替换为你要查询的_
 _ _   _
_   _
 _  _ = 
  _
  _ 
是不是很简单，一条查询你要的数据，再也不担心某人偷偷用我的数据库！
相关推荐  数据加密功能解析【腾讯云的种玩法】自建 迁移云 过程小记背景介绍
谷歌 开发者大会今年将于月日在美国加州举办。大会将跟往年一样发布最新的  系统，今年为  。谷歌在今年 月日发布  新系统开发者预览版时已给新系统取名为  。自 年发布以来，  依靠  的生态运作，全球市场份额在年底已超过 。而近几年依靠  发展起来的智能手机厂商不断增加，  生态大家庭也正在不断壮大。
  是  发布的第个新系统版本。 那备受开发者关注的   有哪些新特性，开发者需要关注哪些问题呢？腾讯云乐固团队结合相关文档对此进行了分析总结，我们一起来看看   的新特性及开发指南。

  新特性一介绍以及开发指南
通知渠道 —  
通知渠道是由应用自行定义的通知内容类别，借助渠道，开发者可以让用户对不同种类的通知进行精细控制，用户可以单独拦截或更改每个渠道的行为，而不是统一管理应用的所有通知。

开发指南
创建通知渠道的步骤：

创建  对象，并设置应用内唯一的通知 。
配置通知渠道的属性，比如提示声音等。
在  中注册通知渠道对象。


  新特性二介绍以及开发指南
画中画模式 — 
  现已支持  的画中画模式。 是一种多窗口显示模式，多用于视频播放，即你可以一边发微信一边看视频。

△ 画中画模式图示
开发指南
 关于生命周期
 模式不会改变  的生命周期。在指定时间只有最近与用户交互过的  为活动状态。 该  将被视为顶级 。 所有其他  虽然可见，但均处于暂停状态。当一个  处于  模式时，其实它是出在暂停状态，但其内容会继续展示。
 变更
在   中新增  对象来指明你的  在  模式中的属性，比如长宽比等。
  还新增了以下方法来支持 。

 ：将置于  模式之下。
：用于更新  在  模式下的设置。如果  正处于  模式之下，那么更改的属性将立即生效。

  新特性三绍以及开发指南
自适应图标 —  
 的屏幕适配一直以来都折磨着不少的开发者。为了帮助开发者更好的与设备  集成，  支持创建自适应图标，系统可以基于设备选择的蒙版将这些图标显示为不同形状。系统还将实现与图标的自动交互，并在启动器、快捷方式、设置、共享对话框以及概览屏幕中使用它们。

△   支持创建自适应图标图示
开发指南
 自适应图标支持多种形状
通过定义两张图层前景与背景你可以制定你的桌面图标外观，你必须提供没有形状和阴影的  格式图象作为图层。

△ 多形状桌面图标外观图示
 自适应图标由两张图层和一个形状来定义
在以前的  版本中，图标大小定义为    。现在你必须按照以下的规范定义你的图层大小：

两张图层大小都必须为    。
图层中心     范围为可视范围。
系统会保留四周外的  范围用于生成有趣的视觉效果如视差和跳动。


  创建你的自适应图标
首先你需要在  标签中加入  属性，定义你的  图标。其次如果你需要创建一个原型的 ，你还需要加入  属性。

接下来，你需要 _ 文件中定义您的图层。在  选项中加入您的前景和背景图层。

  新特性四介绍以及开发指南
固定快捷方式和小部件 —  
  是一个比   更小的快捷方式，放置于桌面上，用于更快速的打开某一  的某单一任务。  在桌面上可呈现不同的图标显示。

△ 固定快捷方式和小部件图示
开发指南

首先使用  方法校验手机是否支持启动这种快捷方式。
创建  对象。
用  方法应用  。你可以通过  来通知你的  有没有创建成功。


  其他特性介绍
除了以上几个新特性以外，  还未增加了其他的功能。比如增加了  ，方便用户在不同  之间填写信息。比如开放 __，以后在自己的  里也可以对来电做响应。
在性能优化上，  还对隐式广播、后台服务和位置更新等进行了后台自动限制，以此来增加手机电池寿命。并对     和  进行了优化，使应用的运行速度更快，手机使用更流畅。
今年谷歌  开发者大会还会带来什么你期待的呢？我们也将持续关注。
总结
 每次的更新，虽然表面上没有非常惊艳的新功能，但在内部， 为  的性能做了很多的优化，让  更快更强更有内涵。
目前  的市场占比已经超过，智能手机已经全面普及，对于广大手机厂商来说，适配  的系统版本更新迭代是一个挑战。对于开发者来说，让自己的  兼容新系统是首要任务。
腾讯作为中国安卓绿色联盟的创始企业，也不断在为  生态做出贡献。腾讯云乐固团队也是紧跟  的步伐，目前已全面兼容   。欢迎广大开发者体验试用。
体验地址：
参考文档链接：

相关推荐
腾讯云——免费为您提供最佳上云实践机会【腾讯云的种玩法】安卓加固在腾讯云上的使用附反编译结果事件与事件流
事件是与浏览器或文档交互的瞬间，如点击按钮，填写表格等，它是与之间交互的桥梁。是树形结构，若同时给父子结点绑定了相同的事件，那么他们的执行顺序是什么样子的呢？这就涉及到了事件流的概念。首先解释两个概念：
事件冒泡
的事件流叫事件冒泡，即事件开始时由最具体的元素文档中嵌套层次最深的节点接收，然后逐级向上传播到较为不具体的节点。
事件捕获
团队提出的另一种事件流叫事件捕获，事件捕获的思想是不太具体的节点应该更早接收到事件，而最具体的节点应该最后接收到事件。
一个事件分为三个阶段：捕获阶段、触发阶段、冒泡阶段。

事件捕获阶段为事件的触发奠定了基础，当事件发生的时候，首先由最不具体的结点向下捕获那个具象元素触发事件的元素，事件捕获之后就开始执行绑定在上面的函数；当函数执行完毕，触发事件冒泡进入冒泡阶段，一直从触发的元素逐级想上传递，直至元素。
事件模型
级事件
这样的事件模型中，事件是没有事件流的概念的，事件的绑定比较简单：直接在中绑定事件处理函数
 =
通过在中获取元素来绑定事件
  = 
 = 
移除事件
 = 
级事件
级事件现代浏览器都支持，事件流的概念也是支持的。
绑定方式
  
移除方式
  
最后一个参数是一个类型的参数，表示是否捕获过程，不填为。
事件
事件，取消了事件流中的事件捕获过程。
绑定方式
 
移除方式
 
事件封装
={
  {
    {
        
    } {
        {
                让中的指向目标元素
        }
    }{
        =
    }
  }
 {   
      {    
                  
     } {
        
     }{
        =
     }
  }
 {      获取事件对象
      =||
      
 }
 {      获得目标对象
      =
      
     { =}
      {=}
      
 }
 {  停止冒泡
      =
      {}
      {=}
 }
 {   阻值默认行为的发生
      =
     {  }
      {=}
 }
}
事件代理
事件在冒泡过程中会上传到父节点，因此可以把子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件，这种方式称为事件代理 。
 =
     = =按钮 =
     = =按钮 =
     = =按钮 =

直接通过父节点一次性为所有子结点注册监听函数：
  = 

  {
    ===  {
      
  }
}
 事件
常见的鼠标事件主要是以下几种：

：鼠标的键钮被按下。
：鼠标的键钮被释放弹起。
：单击鼠标的键钮。
：鼠标的键钮被按下。
 ：弹出右键菜单。
：鼠标移到目标的上方。
：鼠标移出目标的上方。
：鼠标目标的上方移动。

事件与事件可以说事件在时间上的细分，顺序是 =  = 。因此一个点击事件，通常会激发几个鼠标事件。
在  中鼠标有了新的事件，如下表格：



属性
描述





元素被拖动时运行的脚本。



在拖动操作末端运行的脚本



当元素元素已被拖动到有效拖放区域时运行的脚本。



当元素离开有效拖放目标时运行的脚本。



当元素在有效拖放目标上正在被拖动时运行的脚本



在拖动操作开端运行的脚本



当被拖元素正在被拖放时运行的脚本



当鼠标滚轮正在被滚动时运行的脚本。



当元素滚动条被滚动时运行的脚本。



对上述新增事件的详解参考__
 事件
键盘事件相对较简单，主要在于根据键盘上每个按键对应的码，来执行相应的脚本。



属性
描述





在用户按下按键时触发。



在用户敲击按钮时触发。



当用户释放按键时触发。



 事件
下面是事件的常见类型：



属性
描述





元素失去焦点时运行的脚本。



在元素值被改变时运行的脚本。



当元素获得焦点时运行的脚本。



当表单中的重置按钮被点击时触发。 中不支持。



在元素中文本被选中后触发。



在提交表单时触发。



如下为事件新增的事件类型：



属性
描述





当上下文菜单被触发时运行的脚本。



在表单改变时运行的脚本。



当表单获得用户输入时运行的脚本。



当元素获得用户输入时运行的脚本。



当元素无效时运行的脚本。



主要参考的技术网站如下：
_腾讯云技术社区「腾云阁」举办【腾讯云的种玩法】征文活动吸引了大量程序员们入驻社区。活动期间，一共征集到来自  位作者的  篇征文。经过评委老师从可操作性、创新性和技术性三个维度的评分以及阅读数、分享数、评论数三个维度的指标，综合得出前  名获奖作者名单如下：
一等奖
总得分第名
奖品：  
刘卓夫
【腾讯云的种玩法】云中漫步，做个公众号方便生活、取悦自己 
二等奖
总得分第名
奖品：  
张戈

【腾讯云的种玩法】网站使用之后禁止用户真实访问的方法
【腾讯云的种玩法】发布更新文章、提交审核评论自动清理腾讯云缓存 
姜学栋
【腾讯云的种玩法】从到搭建自己的互联网领地 
三等奖
总得分第名
奖品：樱桃红轴机械键盘
王志昊
【腾讯云的种玩法】快速通过搭建个人博客
【腾讯云的种玩法】实现全站访问 
赵越
【腾讯云的种玩法】零基础微信机器人实践云技术对个人开发者的影响
张宁
【腾讯云的种玩法】几种在腾讯云建立的方法一
【腾讯云的种玩法】几种在腾讯云建立的方法二
【腾讯云的种玩法】  单机环境搭建与初步学习
【腾讯云的种玩法】关于服务器反向代理 的一点思考脚本
【腾讯云的种玩法】  升级与实战练习与笔记 
陈润泽
【腾讯云的种玩法】搭建属于自己的服务器
李郑
【腾讯云的种玩法】轻松搭建内网穿透服务
【腾讯云的种玩法】编译下客户端和相关配置 
张泽旭
【腾讯云的种玩法】邮件服务器的搭建
【腾讯云的种玩法】伪分布式搭建
【腾讯云的种玩法】、、服务器虚拟主机配置
【腾讯云的种玩法】   负载均衡配置详解 
天问
【腾讯云的种玩法】运维的网络管理利器：弹性网卡体验
入围奖
总得分名
奖品：腾讯云元代金券
王启航
【腾讯云的种玩法】在腾讯云服务器搭建平台，简体中文汉化版，更新缓存
【腾讯云的种玩法】一个小白的自学建站史菜鸟建站入门 
【腾讯云的种玩法】发送邮件设置
蔡鹏
【腾讯云的种玩法】安卓加固在腾讯云上的使用附反编译结果 
【腾讯云的种玩法】自建 迁移云 过程小记 
【腾讯云的种玩法】元体验腾讯云小程序后端解决方案 
白宦成
【腾讯云的种玩法】  整合微视频上传管理能力，轻松打造视频后台
【腾讯云的种玩法】  整合万向优图图片管理能力，打造高效图片处理服务
【腾讯云的种玩法】自定义  
【腾讯云的种玩法】 为  设置特定启动提示信息
【腾讯云的种玩法】 整合  对象存储服务，享受无限容量存储服务 
魏豪
【腾讯云的种玩法】网站服务器学习与入门
【腾讯云的种玩法】架构实现动态网站论坛系统 
阮永顺
【腾讯云的种玩法】一分钟加固你的腾讯云主机 
黄杰元
【腾讯云的种玩法】利用 节省成本
李鑫
【腾讯云的种玩法】如何腾讯云存储上搭建一个博客
应兆康
【腾讯云的种玩法】如何利用腾讯云搭建个人网盘
【腾讯云的种玩法】在腾讯云上部署你的集群 
周庆华
【腾讯云的种玩法】小心！ 升级到 的几个坑
肖金阳
【腾讯云的种玩法】 搭建  服务器实测版
李斯达
【腾讯云的种玩法】在腾讯云创建您的 ——机准备篇
【腾讯云的种玩法】构建企业级应用环境之数据层面优化一 
【腾讯云的种玩法】构建企业级应用环境之数据层面优化二
【腾讯云的种玩法】构建企业级应用环境之应用层面优化 
点击查看全部腾讯云的种玩法征文
【腾讯云的种玩法】征文活动
之后腾讯云技术社区会举办更多的活动，敬请期待哟。欢迎各位踊跃投稿。作者：左明 


这个，叫做竹笕，是中日传统禅文化中常见的庭院装饰品，它的构造可简单可复杂，但原理很简单，比如这个竹笕，水从竹笕顶部入口流入内部，并按照固定的顺序从上向下依次流入各个小竹筒，然后驱动水轮转动。对于强迫症患者来说，观赏竹笕的绝对是一种很享受的过程的最爱，你会发现这些小玩意竟然能这么流畅的协调起来，好神奇。

如果竹笕是一个组件的话，那么水就是组件的数据流。
在中，数据流是自上而下单向的从父节点传递到子节点，所以组件是简单且容易把握的，他们只需要从父节点提供的中获取数据并渲染即可。如果顶层组件的某个改变了，会递归地向下遍历整棵组件数，重新渲染所有使用这个属性的组件。


这个是前面看到的  热点问题组件，拥有一个叫做  的属性。
在组件内部，可以通过来访问，是组件唯一的数据来源，对于组件来说：
 永远是只读的。
不要尝试在组件内部调用方法来修改，如果你不小心这么做了，会报错并给出非常详细的错误提示。
组件的属性类型如果不进行声明和验证，那么很可能使用者传给你的属性值或者类型是无效的，那会导致一些意料之外的故障。好在已经为我们提供了一套非常简单好用的属性校验机制。

有一个属性校验工具，经过简单的配置即可。当使用者传入的参数不满足校验规则时，会给出非常详细的警告，定位问题不要太容易。

 包含的校验类型包括基本类型、数组、对象、实例、枚举。

以及对象类型的深入验证等等。如果内置的验证类型不满足需求，还可以通过自定义规则来验证。
如果某个属性是必须的，在类型后面加上  就可以了。

的一大创新，就是把每一个组件都看成是一个状态机，组件内部通过来维护组件状态的变化，这也是唯一的作用。

一般和事件一起使用，我们先看，然后看看和事件怎样结合。
这是一个简单的开关组件，开关状态会以文字的形式表现在按钮的文本上。
首先看方法，返回了一个元素，给注册了一个事件用来处理点击事件，在点击事件中对的字段取反，并执行  方法设置字段的新值。一个开关组件就完成了。

组件渲染完成后，必须有事件的支持才能正常工作。

通过将事件处理器绑定到组件上来处理事件。
事件本质上和原生一样，鼠标事件用来处理点击操作，表单事件用于表单元素变化等，事件的命名、行为和原生差不多，不一样的地方是事件名区分大小写。
比如这段代码中，组件的节点注册了一个事件，点击后弹出。
有时候，事件的处理器需要由组件的使用者来提供，这时可以通过将事件处理器传进来。

这个是刚才那个组件的使用者，它提供给组件的中包含了一个属性，这个指向这个组件自身的一个事件处理器，这样就实现了在组件外部处理事件回调。

这是一个组件实现组件可交互所需的流程，输出虚拟，虚拟转为，再在上注册事件，事件触发修改数据，在每次调用方法时，会自动执行方法来更新虚拟，如果组件已经被渲染，那么还会更新到中去。

这些是目前支持的事件列表。

的组件拥有一套清晰完整而且非常容易理解的生命周期机制，大体可以分为三个过程：初始化、更新和销毁，在组件生命周期中，随着组件的或者发生改变，它的虚拟和表现也将有相应的变化。

首先是初始化过程，这里会着重讲，需要充分理解。
组件类在声明时，会先调用  方法来获取默认值，这个方法会且只会在声明组件类时调用一次，这一点需要注意，它返回的默认由所有实例共享。在组件被实例化之前，会先调用一次实例方法  方法，用于获取这个组件的初始。
实例化之后就是渲染，方法会在生成虚拟之前被调用，你可以在这里对组件的渲染做一些准备工作，比如计算目标容器尺寸然后修改组件自身的尺寸以适应目标容器等等。接下来就是渲染工作，在这里你会创建一个虚拟用来表示组件的结构。对于一个组件来说， 是唯一一个必须的方法。方法需要满足这几点：    只能通过  或  访问数据
只能出现一个顶级组件

可以返回 、 或任何  组件

不能对 、 或  进行修改

需要注意的是， 方法返回的是虚拟。
渲染完成以后，我们可能需要对做一些操作，比如截屏、上报日志、或者初始化等第三方非插件，可以在  方法中做这些事情。当然，你也可以在这个方法里通过  方法取得最终生成节点，然后对节点做爱做的事情，但需要注意做好安全措施，不要缓存已经生成的节点，因为这些节点随时可能被替换掉，所以应该在每次用的时候去读取。
组件被初始化完成后，它的状态会随着用户的操作、时间的推移、数据更新而产生变化，变化的过程是组件声明周期的另一部分。

更新过程。
当组件已经被实例化后，使用者调用  方法修改组件的数据时，组件的  方法会被调用，在这里，你可以对外部传入的数据进行一些预处理，比如从中读取数据写入。
 默认情况下，使用者调用组件的  方法后，会遍历这个组件的所有子组件，进行“灌水”，将从上到下一层一层传下去，并逐个执行更新操作，虽然内部已经进行过很多的优化，这个过程并不会花费多少时间，但是程序员里永远不缺乏长期性能饥渴的同学，不用担心，有一个能够解决你性能饥渴的办法——。有时候，发生了变化，但组件和子组件并不会因为这个的变化而发生变化，打个比方，你有一个表单组件，你想要修改表单的，同时你能够确信这个不会对组件的渲染产生任何影响，那么你可以直接在这个方法里 来终止后续行为。这样就能够避免无效的虚拟对比了，对性能会有明显提升。
如果这个时候有同学仍然饥渴难耐，那么你可以尝试 不可变数据结构用过的同学应该懂。
组件在更新前，会执行 方法，这个方法类似于前面看到的 方法，唯一不同的地方只是这个方法在执行的时候组件是已经渲染过的。需要注意的是，不可以在这个方法中修改或，如果要修改，应当在  中修改。
然后是渲染，会拿这次返回的虚拟和缓存中的虚拟进行对比，找出【最小修改点】，然后替换。更新完成后，会调用组件的 方法，这个方法类似于前面  方法，你仍然可以在这里可以通过  方法取得最终的节点。
香港电影结尾经常看到一个剧情，就是英雄打败了坏人，然后警察出来擦屁股。

警察偶尔还能立功，而  最可怜，他除了擦屁股什么也做不了。
你可以在这个方法中销毁非组件注册的事件、插入的节点，或者一些定时器之类。这个过程可能容易出错，比如绑定了事件却没销毁，这个可帮不了你，你自己约的炮，含着泪也要打完。
两节内容讲了上手所必备的知识。
后面讲价值。

直出有多快我就不多说了。
因为有虚拟的存在，可以很容易的将虚拟转换为字符串，这便使我们可以只写一份代码，同时运行在里和和浏览器里。

在里将组件渲染为一段一句话即可。
不过围绕这个我们还要做一些准备工作。代码有点多，大家做好心理准备。

这是一个的路由方法，在这里：
从后台或数据库等来源拉取数据
引入要渲染的组件
调用方法来生成
最后发送和数据给浏览器
这里为了方便描述，没有写拉取数据的代码，大家自行脑补。
需要注意的是这里的字符串中可能出现结尾标签或注释，可能会导致语法错误，这里需要进行转义。

页面的示例代码本来打算用大家更熟悉的，但发现代码量太多了里一页放不下，所以换成了代码，没用过的同学也顺便了解一下，我也顺便给打个广告。这个页面做了个事：将前面在里生成的写到元素里；
引入必须的文件；
获取提供的数据；
渲染组件。
 这就是的服务端渲染，组件的代码前后端都可以复用。
  有没有没理解清楚的同学？
是不是感觉挺牛逼的？大家以为就这么点能耐吗？


能够用一套代码同时运行在浏览器和里，而且能够以原生的姿势运行在和系统中，即拥有了迭代迅速的特性，又拥有原生的体验。这个姿势叫做 。
这是和在上的数据，可以看出也是相当热门——因为能够使的价值最大化，这个价值是什么呢——对业务来说，意味着不需要为了做终端版本就招聘和前端等量人力的终端开发，同时意味着我们成为全栈工程师有了一个捷径。

了解开发的同学都知道，水果公司对应用上架的审核效率实在让人无力吐槽，很多团队上一个版本还没审核结束，下一个版本就已经做好了。而支持从网络拉取，这样应用也能够像一样实现快速迭代了。 

这个是的调试过程
作为一个没写过一句代码的前端开发，我只用了一天时间就上手了，然后用了半天时间做出了一个简单的页面，可以看到的生产效率还是非常高的。

单元测试顾名思义，是对各个模块进行最小范围的测试，容易。
我们来演示一个的单元测试过程。

看代码

因为虚拟的存在，使得的代码很容易做好单元测试，这是上面那段代码的测试用例，通过执行后即可看到结果。

所以你可能需要这些东西






课后练习

如果你已经看到这里了，为何不再花分钟思考一下上面个问题

文章来源公众号 小时光茶社 


相关推荐深刻理解  一 ：和虚拟展示组件与容器组件英译   项目实战总结 是一个全用户态的高性能的网络接入开发包，基于 、 协议栈、微线程接口等，并集成了 、 等应用，适用于各种需要网络接入的业务，用户只需要关注业务逻辑，简单的接入  即可实现高性能的网络服务器。
本文介绍如何在腾讯云主机上使用  快速部署  服务器。首先在腾讯云上使用  镜像创建一个  实例，并启动登录到腾讯云服务器，然后按顺序执行以下命令即可。
【注意】云主机在只有一个网卡的情况下，需要开启  功能以便管理，如不开启，需要通过控制台登录腾讯云主机进行操作，因中途网络连接会有中断，相关命令需要使用脚本执行。
      
 
 __
  _

 
   

  
 
  =_


      
   _
 
    

  
 
 _
 _

   
 =`  |   |    |      { }`
 =`  |   |     { }`
 =`  |   |     { }`
 =`  |   |     { }`
 =`  |   |   |   |     { }`

 =={}  
 =={}  
 =={}  
 =={}  

  
 \\\\  
 ==  
 ==  
 _=_=  
 ==  


   
 _=
 _=
 


  
 
 =_ _

 

       ，       
  
  =_ 

  
 
  _  

  
 
  {}   {}   {}   {}
     {}  前言
之前有在虚拟机通过翻墙搭建了平台，但是毕竟是虚拟机搭建的，只能在校园里网内使用，要让外网访问就需要做内网穿透了，麻烦而且不稳定，于是就想要在云服务器上搭建，由于开始思路就很正确，一次就成功了，具体方法如下：
准备工作
一、既然是在云服务器上搭建平台，首先自然得有一台腾讯云服务器，如果你的云服务器在国外，第二条就不用看了；
二、如果你的云服务器在国内的话，由于的一个重要组件在墙外，所以首先需要准备一个墙外的服务器，必须选香港的！因为只有香港的才能复制镜像。不要包月了，没必要，直接按量计费，挑个核的配置，整个计费过程不会花超过块钱除非你耗时太长，详细如下：
打开腾讯云官网注册账号并登录，点击如下位置选购服务器：

进入后后点击立即选购，然后选择配置，推荐如图：

继续选择镜像，注意必须选择如图：

继续选择网络，反正按量计费，任性如图：

之后选择安全组，默认全部放通即可，如图：

之后点击开通并等待它创建完成即可，通常之内创建完成。
三、如果需要下载汉化版，可以点击这里下载
开始安装
一、下载一款用于远程连接的软件，打开后输入公网如图操作：

之后在可能弹出的对话框里点确定，然后在弹出的黑底白字的界面依次输入你的服务器账号和密码注意输入密码时不会显示，不要担心是自己没输入，得到如图：

二、输入在里边选中就是复制，右键是粘贴代码   然后敲击回车来安装，中间会提示你是否安装，输入后再敲击回车；
三、输入代码  让服务器从拷贝源码到服务器；
四、下载 一款软件并打开，点击左上角文件站点管理器新站点，然后如图操作，注意公网改为自己的：

之后就可以列出服务器目录如图：

之后依次打开，删除掉其中的“_”，点击这里下载汉化版，解压并上传到该目录下，方法为从左边本地目录找到解压后的“_”，拖到右边即可，如图：

五、打开输入代码 敲击回车，再输入代码      ，就可以开始安装了，如图：开始：

约后：

约后：

约后安装完成，并打印出密码，务必记下在里边选中就是复制，右键是粘贴，如图：

后续工作
一、之后会有证书问题，编辑这个文件即可，详细就不多说了，我的方法是在腾讯云申请证书，然后下载并解压出对应版本上传到目录下，然后编辑将证书目录修改为实际目录即可，注意修改这个文件需要权限！
二、如果安装完之后想要修改源文件需要重新编译才能生效，可以参考博客。
三、一切准备好之后就进入控制台把服务器关机，然后制作镜像，如图：

制作完镜像记得销毁服务器以免产生不必要的费用
四、将镜像跨地域复制到你的国内服务器所在区域，如图：

有时候一次不成功，需要多试几次，或者换个区域。
五、在国内的服务器上重装系统，在选择镜像时选择自定义镜像，然后就能看到你做好的镜像了
至此完成，感谢阅读！

相关推荐
在腾讯云服务器上体验
高性能高稳定的弹性伸缩计算服务导语
 作为最受欢迎的开源数据库，也是云上使用最多的数据库，在实际业务中应用广泛。但在实际应用经常遇到  各种各样的瓶颈，比如：如何优化  、怎么完成数据库迁移、应掌握  哪些关键问题以及数据库的性能问题等等。 不少鹅厂工程师针对这些问题在腾讯云技术社区上分享了  实战技术经验，小编在此梳理了一些干货，让我们跟着腾讯工程师一起玩转  。
 内核优化
由于  在实践应用中存在对于事务性支持不太好、多个分支、读写效率瓶颈等问题，所以如何用好变得至关重要。在腾讯云，因为用户数的不断增加，对  提出越来越高的要求，腾讯云团队针对用户的需求和业界发展的技术趋势，对    分支进行深度的定制优化。以下三篇技术干货将为大家介绍如何对进行内核级优化的思路和经验。

 内核深度优化
腾讯云  内核特性与优化实践
腾讯云数据库优化最佳实战：以  为例

 优化
学习了  内核级优化的思路和经验。那么，当谈到  优化时，你会谈些什么呢？以下两篇文章是作者根据自己的实践经验以及曾经踩过的坑，总结出的一些  索引原理以及常用的查询优化的理解与实践，希望对  的开发者有所启发。

 索引及查询优化总结
当谈  优化时谈些什么？

关键知识点
 有关的话题不仅仅是性能优化，还有其高可用性、强一致性、高性能、纵向扩展、负载均衡、读写分离等等。然而要想掌握其中的精髓，可得花费不少功力。以下两位笔者通过研发项目的实践经验分别梳理了  的技术点以及  比较具有代表性的问题。

 开发实践  问，你能  住几个？
埋在  数据库应用中的个关键问题！

高性能与高可用
以上提到  有关的话题不仅仅是性能优化，还有其高可用性以及高性能。众所周知， 数据库是目前开源应用最大的关系型数据库，有海量的应用将数据存储在  数据库中。存储数据的安全性和可靠性是生产数据库的关注重点。接下来的两篇文章对其性能进行测试与分析并总结经验，以及分析了目前采用较多的保障  可用性方案。

 性能测试经验
 数据库的高可用性分析

 迁移
那么，如果因为业务需要，将数据库进行迁移，如何保证业务迁移顺利进行，迁移过程中遇到问题该如何快速解决等等一系列迁移问题。以下两篇文章分享了创梦者和某国内大型游戏开发商数据库搬迁到腾讯云数据库的实际迁移经验，并详细阐述了一些数据库迁移过程的解决思路和小窍门。

存储总量达  的  实例，如何完成迁移？
基于  的  云数据库搬迁实例解析

结语
以上的几篇文章主要介绍了  的性能优化、高性能以及高可用等特性，总结了  必须掌握的关键技术点，以及阐述了数据库迁移问题。如果你也是  的技术大咖，欢迎到腾讯云技术社区分享有关  的技术干货，同时也欢迎大家在社区一起交流！导语
 ：吴恩达表示，“在继深度学习之后，迁移学习将引领下一波机器学习技术。

大牛吴恩达曾经说过：做  研究就像造宇宙飞船，除了充足的燃料之外，强劲的引擎也是必不可少的。假如燃料不足，则飞船就无法进入预定轨道。而引擎不够强劲，飞船甚至不能升空。类比于 ，深度学习模型就好像引擎，海量的训练数据就好像燃料，这两者对于  而言同样缺一不可。在训练深度神经网络、学习输入到输出的精准映射上，近年来大家做得越来越好。不管是针对图像、语句，还是标签预测，有了大量做过标记的样例，都已不再是难题。
但是！今天的深度学习算法仍然欠缺的，是在新情况不同于训练集的情况上的泛化能力和训练模型所必须的海量数据难以获取。
一、深度学习的局限性
在深度学习热火朝天，全民深度的时候说深度学习的坏话，而且对于那些没有看完本文的标题党，会不会打我。但是我还是要鼓足勇气说一下深度学习目前面临的困难：

表达能力的限制。因为一个模型毕竟是一种现实的反映，等于是现实的镜像，它能够描述现实的能力越强就越准确，而机器学习都是用变量来描述世界的，它的变量数是有限的，深度学习的深度也是有限的。另外它对数据的需求量随着模型的增大而增大，但现实中有那么多高质量数据的情况还不多。所以一方面是数据量，一方面是数据里面的变量、数据的复杂度，深度学习来描述数据的复杂度还不够复杂。

缺乏反馈机制。目前深度学习对图像识别、语音识别等问题来说是最好的，但是对其他的问题并不是最好的，特别是有延迟反馈的问题，例如机器人的行动， 下围棋也不是深度学习包打所有的，它还有强化学习的一部分，反馈是直到最后那一步才知道你的输赢。还有很多其他的学习任务都不一定是深度学习才能来完成的。

模型复杂度高。以下是一些当前比较流行的机器学习模型和其所需的数据量，可以看到随着模型复杂度的提高，其参数个数和所需的数据量也是惊人的。



，从上面的阐述，我们可以得出目前传统的机器学习方法包括深度学习三个待解决的关键问题：

随着模型复杂度的提高，参数个数惊人。

在新情况下模型泛化能力有待提高。

训练模型的海量的标记费时且昂贵。

表达能力有限且缺乏反馈机制。


迁移学习帮你搞定一切，让你的模型小而轻，还能举一反三！
二、到底什么是迁移学习？
 你永远不能理解一种语言——除非你至少理解两种语言。
任何一个学过第二语言的人，对英国作家杰弗里·威廉斯的这句话应该都会感同身受。但为什么这样说呢？其原因在于学习使用外语的过程会不可避免地加深一个人对其母语的理解。事实上，歌德也发现这一理念的强大威力，以至于他不由自主地做出了一个与之类似但更为极端的断言：
 一个不会外语的人对其母语也一无所知。
这种说法极为有趣，但令人惊讶的是恐怕更在于其实质——对某一项技能或心理机能的学习和精进能够对其他技能或心理机能产生积极影响——这种效应即为迁移学习。它不仅存在于人类智能，对机器智能同样如此。如今，迁移学习已成为机器学习的基础研究领域之一，且具有广泛的实际应用潜力。
一些人也许会很惊讶，计算机化的学习系统怎样能展现出迁移学习的能力。 通过一项涉及两套机器学习系统的实验来思考了这个问题，为了简单起见，我们将它们称为机器  和机器 。机器  使用全新的 ，机器  则使用已经接受训练并能理解英语的 。现在，假设我们用一组完全相同的普通话录音及对应文本来对机器  和  进行训练，大家觉得结果会怎样？令人称奇的是，机器 曾接受英语训练的机器展现出比机器  更好的普通话技能，因为它之前接受的英语训练将相关能力迁移到了普通话理解任务中。
不仅如此，这项实验还有另一个令人更为惊叹的结果：机器  不仅普通话能力更高，它的英语理解能力也会提高！看来威廉斯和歌德确实说对了一点——学习第二语言确实能够加深对两种语言的理解，即使机器也不例外。
其实这就是计算机化的迁移学习。然而在我们身边，迁移学习的例子太多太多，一个精通吉他的人会比那些没有音乐基础的人能更快地学习钢琴；一个会打乒乓球的人比没有经验的人更容易接受网球；会骑自行车的人能更快学习骑电动车，等等，迁移学习就在你身边。

三、迁移学习和传统机器学习的差别
在机器学习的经典监督学习场景中，如果我们要针对一些任务和域  训练一个模型，我们会假设被提供了针对同一个域和任务的标签数据也就是说训练集和测试集的数据必须是的，即独立同分布。我们可以在下图中清楚地看到这一点，其中我们的模型  在训练数据和测试数据中的域和任务都是一样的后面我会详细地定义什么是任务，以及什么是域。

现在我们可以在这个数据集上训练一个模型 ，并期望它在同一个任务和域中的未知数据上表现良好。在另一种情况下，当给定一些任务或域  的数据时，我们还需要可以用来训练模型  的有标签数据，这些数据要属于同一个任务和域，这样我们才能预期能在这个数据集上表现良好。
但是，现实往往很残酷，当我们没有足够的来自于我们关心的任务或域的标签数据来训练可靠的模型时新的标签数据很难获取，或者很费时，传统的监督学习范式就支持不了了。
但传统的监督学习方法也会失灵——在缺乏某任务领域标记数据的情况下，它往往无法得出一个可靠的模型。举个例子，如果我们想要训练出一个模型，对夜间的行人图像进行监测，我们可以应用一个相近领域的训练模型——白天的行人监测。理论上这是可行的。但实际上，模型的表现效果经常会大幅恶化，甚至崩溃。这很容易理解，模型从白天训练数据获取了一些偏差，不知道怎么泛化到新场景。
如果我们想要执行全新的任务，比如监测自行车骑手，重复使用原先的模型是行不通的。这里有一个很关键的原因：不同任务的数据标签不同。但是迁移学习就允许我们通过借用已经存在的一些相关的任务或域的标签数据来处理这些场景，充分利用相近任务领域的现有数据我们尝试着把在源域中解决源任务时获得的知识存储下来，并将其应用在我们感兴趣的目标域中的目标任务上去，如下图所示。

四、迁移学习的概念、定义及分类
迁移学习的基本概念：域和任务，源和目标
一个域  由一个特征空间  和特征空间上的边际概率分布  组成，其中 =… ∈。对于有很多词袋表征 的文档分类， 是所有文档表征的空间， 是第  个单词的二进制特征， 是一个特定的文档。对我来说，通俗的理解就是域  就是特征的空间及分布。
给定一个域 ={}，一个任务  由一个标签空间  以及一个条件概率分布 |构成，这个条件概率分布通常是从由特征——标签对 ∈∈ 组成的训练数据中学习得到。在我们的文档分类的例子中， 是所有标签的集合即真或假， 要么为真，要么为假。
源域 ，一个对应的源任务 ，还有目标域 ，以及目标任务 ，这个就很好理解了，源就是对应的我们的训练集，目标就是对应我们的测试集。
迁移学习的定义：
在 ≠ 和或 ≠ 的情况下，让我们在具备来源于  和  的信息时，学习得到目标域  中的条件概率分布 |。绝大多数情况下，假设可以获得的有标签的目标样本是有限的，有标签的目标样本远少于源样本。
迁移学习的分类：

≠，即源域和目标域的特征空间不同，举个例子，文档是用两种不同的语言写的。在自然语言处理的背景下，这通常被称为跨语言适应 ，我们将这种情况称为异构迁移学习 。

=，即源域和目标域的特征空间相同，称为同构迁移学习 

 ≠，源域和目标域的边际概率分布不同，例如，两个文档有着不同的主题。这种情况通常被称为域适应 。

|≠|，源任务和目标任务的条件概率分布不同，例如，两个不同数据集的标签规则是不一样的。

≠，两个任务的标签空间不同，例如源域是二分类问题，目标域是  分类问题，因为不同的任务拥有不同的标签空间，但是拥有相同的条件概率分布，这是极其罕见的。


借用一张之前自己做的幻灯片：

迁移学习的四种常见解决方法：

四种方法分别为：基于样本的迁移学习、基于特征的迁移学习、基于参数特征的迁移学习和基于关系的迁移学习。
 基于样本的迁移学习

第一种为样本迁移，就是在数据集源领域中找到与目标领域相似的数据，把这个数据的权值进行调整，使得新的数据与目标领域的数据进行匹配将分布变成相同。样本迁移的特点是：需要对不同例子加权；需要用数据进行训练，上图的例子就是找到源领域的例子 ，然后加重该样本的权值，使得在预测目标领域时的比重加大。
 基于特征的迁移学习


第二种为特征迁移，就是通过观察源领域图像与目标域图像之间的共同特征，然后利用观察所得的共同特征在不同层级的特征间进行自动迁移，上图左侧的例子就是找当两种狗在不同层级上的共同特征，然后进行预测。
 基于参数模型的迁移学习

第三种为模型迁移，其原理时利用上千万的狗狗图象训练一个识别系统，当我们遇到一个新的狗狗图象领域，就不用再去找几千万个图象来训练了，可以原来的图像识别系统迁移到新的领域，所以在新的领域只用几万张图片同样能够获取相同的效果。模型迁移的一个好处是我们可以区分，就是可以和深度学习结合起来，我们可以区分不同层次可迁移的度，相似度比较高的那些层次他们被迁移的可能性就大一些。
 基于关系的迁移学习

这种关系的迁移，我研究的较少，定义说明是可以将两个相关域之间的相关性知识建立一个映射，例如源域有皇帝、皇后，那么就可以对目标域的男和女之间建立这种关系，一般用在社会网络，社交网络之间的迁移上比较多。
五、迁移学习到底可以解决哪些问题
迁移学习主要可以解决两大类问题：小数据问题和个性化问题。
小数据问题：比方说我们新开一个网店，卖一种新的糕点，我们没有任何的数据，就无法建立模型对用户进行推荐。但用户买一个东西会反应到用户可能还会买另外一个东西，所以如果知道用户在另外一个领域，比方说卖饮料，已经有了很多很多的数据，利用这些数据建一个模型，结合用户买饮料的习惯和买糕点的习惯的关联，我们就可以把饮料的推荐模型给成功地迁移到糕点的领域，这样，在数据不多的情况下可以成功推荐一些用户可能喜欢的糕点。这个例子就说明，我们有两个领域，一个领域已经有很多的数据，能成功地建一个模型，有一个领域数据不多，但是和前面那个领域是关联的，就可以把那个模型给迁移过来。
个性化问题：比如我们每个人都希望自己的手机能够记住一些习惯，这样不用每次都去设定它，我们怎么才能让手机记住这一点呢？其实可以通过迁移学习把一个通用的用户使用手机的模型迁移到个性化的数据上面。我想这种情况以后会越来越多。
六、迁移学习的应用
      我到底是什么颜色？

大家一看这幅图就知道，这里以此前网上流行的一个连衣裙图片为例。如图所示，如果你想通过深度学习判断这条裙子到底是蓝黑条纹还是白金条纹，那就必须收集大量的包含蓝黑条纹或者白金条纹的裙子的图像数据。参考上文提到的问题规模和参数规模之间的对应关系，建立这样一个精准的图像识别模型至少需要  个参数， 张相关的图像训练数据，这几乎是一个不可能完成的任务。
现在引入迁移学习，用如下公式可以得到在迁移学习中这个模型所需的参数个数：
   =      =    
可以看到，通过迁移学习的引入，针对同一个问题的参数个数从 减少到了 ，减少了  的  次方个数量级！这样的对参数和训练数据的消减程度是惊人的。
这里给大家介绍一个迁移学习的工具 ，它是一个简单方便的基于云端实现的迁移学习工具，其内部包含了一组已经实现好的预训练模型，每个模型有数百万个训练好的参数。用户可以自己上传或通过网络搜索得到数据， 将自动根据待解问题选择最佳的预训练模型，并根据该模型建立一个 纳米网络，并将之适配到用户的数据。以上文提到的蓝黑条纹还是白金条纹的连衣裙为例，用户只需要选择待分类的名称，然后自己上传或者网络搜索训练数据，之后  就会自动适配预训练模型，并生成用于测试的  页面和用于进一步开发的  接口。如下所示，图中为系统根据一张连衣裙图片给出的分析结果。具体使用方法详见  官网： 。

       的作品   机器人
 的  向来是大家关注的热点，就在去年，其将三个小游戏    通过将已学其一的游戏的  通过一个    到一个新游戏。外墙的可以看  的视频：=_，与此同时， 最新的成果   终于伸向真正的机器人了！

它做了什么事情呢？就是在仿真环境中训练一个机械臂移动，然后训练好之后，可以把知识迁移到真实的机械臂上，真实的机械臂稍加训练也可以做到和仿真一样的效果！视频在这：=_
      舆情分析

迁移学习也可应用在舆情分析中，如用户评价方面。以电子产品和视频游戏留言为例，上图中绿色为好评标签，而红色为差评标签。我们可以从上图左侧的电子产品评价中找到特征，促使它在这个领域电子产品评价建立模型，然后利用模型把其迁移到视频游戏中。这里可以看到，舆情也可以进行大规模的迁移，而且在新的领域不需要标签。
      个性化对话

训练一个通用型的对话系统，该系统可能是闲聊型，也可能是一个任务型的。但是，我们可以根据在特定领域的小数据修正它，使得这个对话系统适应不同任务。比如，一个用户想买咖啡，他并不想回答所有繁琐的问题，例如是要大杯小杯，热的冷的？
      基于迁移学习的推荐系统

在线推荐系统中利用迁移学习，可以在某个领域做好一个推荐系统，然后应用在稀疏的、新的垂直领域。影像资料——书籍资料
      迁移学习在股票中的预测
香港科技大学杨强教授的学生就把迁移学习应用到大家公认的很难的领域中——预测股市走势。下图所示为  股里面的某个股票，用过去十年的数据训练该模型。首先，运用数据之间的连接，产生不同的状态，让各个状态之间能够互相迁移。其次，不同状态之间将发生变化，他们用了一个强化学习器模拟这种变化。最后，他们发现深度学习的隐含层里面会自动产生几百个状态，基本就能够对这十年来的经济状况做出一个很完善的总结。
杨强教授也表示，这个例子只是在金融领域的一个小小的试验。不过，一旦我们对一个领域有了透彻的了解，并掌握更多的高质量数据，就可以将人工智能技术迁移到这个领域来，在应用过程中对所遇到的问题作清晰的定义，最终能够实现通用型人工智能的目的。

迁移学习的应用越来越广泛，这里仅仅介绍了冰山一角，例如生物基因检测、异常检测、疾病预测、图像识别等等。
七、风头正劲的迁移学习

当今全世界都在推动迁移学习，当今  中大概有  多篇迁移学习相关文章，而往年只有五六篇。与此同时，如吴恩达等深度学习代表人物也开始做迁移学习。正如吴恩达在   讲座上画了一副草图，大致的意思如下图所示：

有一点是毋庸置疑的：迄今为止，机器学习在业界的应用和成功，主要由监督学习推动。而这又是建立在深度学习的进步、更强大的计算设施、做了标记的大型数据集的基础上。近年来，这一波公众对  人工智能技术的关注、投资收购浪潮、机器学习在日常生活中的商业应用，主要是由监督学习来引领。但是，该图在吴恩达眼中是推动机器学习取得商业化成绩的主要驱动技术，而且从中可以看出，吴恩达认为下一步将是迁移学习的商业应用大爆发。
最后，借鉴香港科技大学计算机与工程系主任，全球第一位华人   杨强教授在  年底腾讯暨   大数据峰会上的一页胶片来作为结束。

 昨天我们在深度学习上有着很高成就。但我们发现深度学习在有即时反馈的领域和应用方向有着一定的优势，但在其他领域则不行。打个比方：就像我在今天讲个笑话，你第二天才能笑得出来，在今天要解决这种反馈的时延问题需要强化学习来做。而在明天，则有更多的地方需要迁移学习：它会让机器学习在这些非常珍贵的大数据和小数据上的能力全部释放出来。做到举一反三，融会贯通。
打个小广告，由于自己本人希望在迁移学习方向上长期研究和学习，因此申请了一个迁移学习的公众号，每周会推送迁移学习的技术和学术干货，同时对自己也是一种监督，也希望在学习和分享的过程中遇到同路人，共同交流和进步，请大家多多支持。
参考资料：

 香港科技大学杨强   技术峰会演讲
       
     ，  一文本聚类概述
文本聚类是文本处理领域的一个重要应用，其主要目标是将给定的数据按照一定的相似性原则划分为不同的类别，其中同一类别内的数据相似度较大，而不同类别的数据相似度较小。聚类与分类的区别在于分类是预先知道每个类别的主题，再将数据进行划分；而聚类则并不知道聚出来的每个类别的主题具体是什么，只知道每个类别下的数据相似度较大，描述的是同一个主题。因此，文本聚类比较适合用于大数据中热点话题或事件的发现。
文智平台提供了一套文本聚类的自动化流程，它以话题或事件作为聚类的基本单位，将描述同一话题或事件的文档聚到同一类别中。用户只需要按照规定的格式上传要聚类的数据，等待一段时间后就可以获得聚类的结果。通过文本聚类用户可以挖掘出数据中的热门话题或热门事件，从而为用户对数据的分析提供重要的基础。本文下面先对文本聚类的主要算法作介绍，然后再具体介绍文智平台文本聚类系统的原理与实现。
二文本聚类主要算法
文本聚类需要将每个文档表示成向量的形式，以方便进行相似度的计算。词袋模型  ，是文本聚类里面的一种常用的文档表示形式，它将一个文档表示成一些词的集合，而忽略了这些词在原文档中出现的次序以及语法句法等要素，例如对于文本“北京空气重污染拉响黄色预警”，可以表示为词集{北京，空气，污染，黄色，预警}。通过词袋模型将文档转化为维向量，进而构造整个文档集合的词语矩阵，就可以使用一些数值运算的聚类算法进行文本聚类。
当然，并不是所有的词都用来构建文档的词向量，可以去掉一些像、、这样的出现频率很高而又无实际意义的词，这样的词没有什么类别区分能力，应作为停用词而去掉。另外，可以使用等方法来评估一个词对于文档的重要程度，保留对文档较为重要的词作为词向量之用。
以词袋模型为基础，将文档表示成维向量，进而可以利用相关的聚类算法进行聚类计算。常用的文本聚类算法有层次聚类算法、划分聚类算法例如、算法以及基于主题模型的聚类算法例如、等。
层次聚类算法
层次聚类算法是对给定的数据集进行层次的分解，直到达到某个终止条件为止。具体可以分为凝聚和分裂两种方式。凝聚是自底向上的策略，首先将每个对象作为一个类别，然后根据对象之间的相似度不断地进行合并，直到所有对象都在一个类别中或是满足某个终止条件；而分裂则与凝聚相反，用的是自顶向下的策略，它首先将所有对象都放到一个类别中，然后逐渐分裂为越来越小的类别，直到每个对象自成一个类别或是满足某个终止条件。大多数的层次聚类算法都采用凝聚的方式，这里就以凝聚的方式为例对算法进行介绍。
层次聚类算法的输入是数据集中所有对象的距离矩阵，并预先设定一个距离阈值，用于迭代的终止，算法的主要步骤如下：

将每个对象作为一类，类与类之间的距离就是它们所包含的对象之间的距离

找出距离最接近的两个类，如果它们的距离小于，则将它们合并为一类

重新计算新的类与所有其它旧类之间的距离

重复第步和第步，直到所有的类无法再进行合并为止


其中步骤中类与类之间距离的计算方法有种，分别为：

 ：类间距离等于两类对象之间的最小距离，这种方法计算简便，但是容易导致两个类从大范围看是比较远的，却由于个别的点比较近而被合并的情况，而且这种情况还会不断扩散，最后造成类别比较松散

 ：类间距离等于两类对象之间的最大距离，这种方法有时也不太好，容易导致两个比较近的类由于存在一些较远的点而老死不合并

：类间距离等于两类对象之间的平均距离，前面两种方法的不足都是由于只考虑了类内数据的局部情况，而缺乏整体上的考虑，取平均距离能够改善前面两种方法的不足，但是计算量相应也有所增加。


层次聚类算法的优点是计算速度较快，并且不需要指定最终聚成的类别个数，但是需要预先指定一个距离阈值作为终止条件，这个距离阈值的设定需要一定的先验知识。
 划分聚类算法
划分聚类算法中有代表性的算法是算法和算法，这里以较为常用的算法为代表进行介绍。
算法是基于距离的聚类算法，输入是数据集中所有文档的词向量矩阵，需要预先指定最终聚成的类别个数，并且还需要指定算法迭代终止的条件，这可以通过指定迭代的次数或是指定前后两次迭代中个质心距离变化的总和小于一定阈值作为算法迭代终止的条件。算法的主要步骤如下：

初始条件下，随机选取个对象作为初始的质心

计算每个对象到个质心的距离，将对象归到距离最近的质心的类中

重新计算各个类的质心，取类中所有点的平均值作为该类新的质心

重复第步和第步，直到达到指定的迭代次数或是新旧质心距离变化之和小于指定阈值


算法需要预先指定聚成类别的数目，这需要一定的先验知识，而且算法迭代终止条件的设定也是要根据一定的经验。另外，算法初始质心的选取会影响到最终的聚类结果，有不少文献都在研究优化算法初始质心的选取。
基于主题模型的聚类算法
基于主题模型的聚类算法是假定数据的分布是符合一系列的概率分布，用概率分布模型去对数据进行聚类，而不是像前面的层次聚类和划分聚类那样基于距离来进行聚类。因此，模型的好坏就直接决定了聚类效果的好坏。目前比较常用的基于主题模型的聚类算法有和等，其中是的一个“升级”，它在的基础上加了先验分布，相比不容易产生过拟合现象，是目前较为流行的用于聚类的主题模型，这里以为代表介绍基于主题模型的聚类算法。
  ，隐含狄利克雷分配，是一种三层贝叶斯概率模型，它由文档层、主题层和词层构成。对三层结构作了如下的假设：

整个文档集合中存在个相互独立的主题

每一个主题是词上的多项分布

每一个文档由个主题随机混合组成

每一个文档是个主题上的多项分布

每一个文档的主题概率分布的先验分布是分布

每一个主题中词的概率分布的先验分布是分布



图  三层模型结构
模型的训练过程是一个无监督学习过程，模型的生成过程是一个模拟文档生成的过程，文档中的一个词首先是根据一定的主题概率分布抽取出一个主题，然后是从这个主题中以一定的概率分布抽取出一个词，如此重复，直到生成文档中所有的词。在模型中以分布为基本假设，其生成过程如图所示。

图  的模型生成过程
在实际的应用中，可以通过 来对给定的文档集合进行训练。首先是用户需要设定生成的模型的主题个数，然后是对给定的文档进行分词，去掉停用词，获得文档的词袋模型，作为训练的输入。

图  使用 的训练过程
中隐含的变量包括文档的主题分布Θ、主题的词分布Φ以及词所属的主题。 通过不断的抽样与迭代，推算出这些隐含变量。如图所示， 在初始时随机给每个词分配主题，然后统计每个主题下出现词的数量以及每个文档下出现主题中的词的数量，再计算，即排除当前词的主题分布，根据其它词的主题分布来估计当前词分配到各个主题的概率。当得到当前词属于所有主题的概率分布后，再根据这一概率分布为该词抽样一个新的主题。然后用同样的方法不断更新下一个词的主题，直到文档的主题分布Θ和主题的词分布Φ收敛或是达到预定的迭代次数为止。最终输出所有的隐含变量，每个词所属的主题也能够得到。根据每个词所属的主题分布，就可以进一步计算出每个文档所属的主题及其概率，这就是聚类的结果。
三文本聚类系统的实现
在上一节中我们介绍了常用的文本聚类算法，其中层次聚类算法和算法等都是基于距离的聚类算法，而则是使用概率分布模型来进行聚类。基于距离的聚类算法的优点是速度比较快，但是它们都是通过两个文档共同出现的词的多少来衡量文档的相似性，而缺乏在语义方面的考虑。相反，等基于模型的聚类算法能够通过文本中词的共现特征来发现其中隐含的语义结构，对“一词多义”和“一义多词”的现象都能够建模，并在聚类结果中得到体现。“一词多义”就例如“苹果”一词，它可能是指水果，可能是指手机，也可能是指公司，能够将其分配到不同的主题中；而“一义多词”就例如众多的同义词，它们虽然在文本上并不相似，但是在语义上是相似的，能够将它们聚集到一起。正是由于在语义分析方面的优势，我们文智平台的聚类系统使用来进行文本聚类。但是在训练中会比较耗时，单机情况下万的文档数据训练需要多个小时，这是不能接受的，因此需要对做并行化计算。
基于的并行化计算
是继之后新一代的大数据并行计算框架，是目前大数据分析的利器。相比于传统的 ，将计算时的中间结果写到内存中，而不是写磁盘，而且在同一个任务中可以重复利用对象，而无需重新创建，这使得非常适合应用于类似这样的需要反复迭代的算法中。

图  任务执行总体框架
在任务的执行上也是跟类似，通过一定的任务管理器和调度器将任务分配给各个节点来并行化执行，从而能够取得比单机环境下快数十倍的计算效率，如图所示。对于，其训练过程主要是 ，目前已经有对中 进行并行化的方法。具体地说，就是将训练数据分成多份，分配给每个节点进行独立的并行化训练，训练完成后再更新全局模型，然后再根据全局模型进行下一轮的迭代训练，如此重复，直到任务结束，如图所示。

图  并行化计算
在中实现上述的并行化流程，可以极大地提升的计算效率，训练万的文档数据由原来的需要多个小时减少到只需到个小时。
文本聚类系统整体架构
文智平台文本聚类系统的整体架构如图所示，主要分为接入层、计算层和存储层三层。用户通过前台页面按照规定的格式上传数据文件，然后在计算层首先会对数据进行预处理，去除无效数据，接着使用对数据进行聚类，这是一个反复迭代的过程。用户可以指定生成的主题个数以及迭代的最大次数，如果用户不指定我们也会有默认值。聚类得到的结果再经过简单的统计和排序整理就能够生成数据中的热门话题，热门话题和聚类结果最后会返回给用户。整个计算层的操作都是无需用户参与的，用户只需要上传数据文件，然后等待一段时间后就可以获得文本聚类的结果。

图  文本聚类系统整体架构
文智平台基于的聚类系统能够快速而有效地对数据进行聚类，聚类的平均准确率达到以上，而且经过对平台的不断优化，聚类的效率也在不断提高，表中所示的是系统目前聚类的性能情况，后续还会在性能方面对系统不断进行优化。
表  基于的聚类系统性能情况

四总结
文智平台文本聚类系统使用对文本数据进行聚类，可以从语义的层面上挖掘出用户数据中的热门话题。系统的应用范围非常广泛，可以应用于各类文本数据，尤其是对海量社交数据的分析非常有效。这一整套使用进行文本聚类的机制目前已经较为成熟，已经在为公司内的一些部门提供文本聚类服务，我们期待今后系统能得到更为广泛的应用。

相关推荐【 文智背后的奥秘 】系列篇：结构化抽取平台【 文智背后的奥秘 】系列篇：情感分类【 文智背后的奥秘 】系列篇：关键词智能提取作者：李金涛
团队：腾讯移动品质中心

笔者语：是一个类似于和的自动化构建工具，是 天然的构建工具。
本文总结了项目从迁移到的实践经验和相关技巧，供大家参考。
由于的种种优点大家可以参考网上的资料，这里不多说了，前一段时间项目组打算将原来的编译打包方式迁移到编译打包方式。现在迁移基本完成，我这里将迁移过程遇到的坑以及经验做一个总结，希望能给大家在转的时候带来一些提示。
一、打包流程
这里，我们先来看一下脚本的一个片段：

这段脚本执行的流程是：

上述编译打包关键任务的说明：
：编译工程代码；
：生成主的类列表；
：生成从的类列表；
___：打包资源文件；
：将代码和资源一起打包成。
从脚本和流程可以看出，的任务都是直接在脚本中实现，然后按照脚本定义的执行顺序来依次执行任务。
二、打包流程
这里先给出一个脚本的最简单的模版，如下：

这个最简单模版即可完成的编译、打包、签名等过程。它是怎么做到的呢？
原来，在中，官方已经为我们定义好了一个专门编译打包的插件，该插件包含了编译打包的基本任务，我们就不用自己再费力去重写了，可以直接复用。这个添加的插件就是上面脚本的第一行：
  
在该插件中，默认的编译打包流程如下：

上述编译打包关键任务的说明：
、：主要完成了代码的编译，生成文件。
：主要完成了代码的混淆，生成混淆后的包和文件。
：主要完成了将文件和第三方库一起打包生成字节码文件。
：主要完成了将字节码文件和其他资源文件一起打包。
在这个插件中，代码编译、打包等基本任务已经有了，但是我们还有一部分自定义的任务怎么办呢？只能从移植过去！
因为打包方式从移植到后，最重要的是保证打包的功能和最终效果保持不变，做到平滑的移植。所以，这里我们就应该平滑的将任务改造成任务，然后移植到脚本中。
这里跟有一个很明显的区别就是，的任务基本上都是自定义的，代码直接可见，所以我们想要添加、插入、删除任务都比较方便。但是的基本任务都在插件中，代码不可见，那么我们自定义任务以后该怎么跟插件的任务融合在一起呢？
接下来我们具体说明。
三、任务改造成任务
下面就以分包过程中生成从的类列表为例，来说明如何将中自定义的任务移植到。
任务代码示例：

这是一个脚本任务，目的是分包时生成从的类列表。
将任务改造成任务时，为了平滑改造以及减少改造的工作量，我们仍然采用这个脚本。由于的方式也可以直接调用脚本，所以我们的任务定义如下：

以上两种方式均可达到同样的效果。
上述代码中的__、、是该中用到的自定义局部变量，它们可以跟单独的就近定义，也可以多个任务一起集中定义。
任务定义好了，放在脚本的什么位置呢？直接放在脚本文件后面就好，跟定义块分开。具体例子如下：

四、自定义任务的注入
的任务定义好以后，我们还需要将它加入到的编译打包流程中才可以被执行。
正如前面所说，由于的编译打包插件已经有一个基本的、完整的流程，我们自定义的任务必须插入到这个流程中合适的位置，这一步也称作任务的注入。
任务注入的方法是利用任务之间的依赖关系。
比如，我们这个任务需要放在代码编译之后、打包之前，怎么做呢？可以放在块中注入。具体代码如下：

下面对这段代码进行解释：
说明是在脚本解析完之后、开始执行之前插入任务；
第一个是使“”任务依赖于“”所有的依赖；第二个是使“”依赖于“”。这样一来，就将“”置于“”之前了。
在完成任务的注入以后，我们的脚本变成如下的样子：

这样，一个任务就改造成任务并注入完成了。
其他的任务可以同样移植过来。
五、任务移植实例
、分包
自带分包插件，但是缺点是定制比较麻烦。我们在下已经有现成的自己定制的分包脚本和相关配置，如果能直接在中使用，那就好了。怎么做呢？
根据上面自定义任务和插入任务的做法，我们只需将下已有的分包任务改写成任务，已有的脚本照搬过来，然后再把任务注入到插件的编译打包流程中即可。
前面已经演示了如何把生成从类列表的任务改造、注入任务流程中，其他任务可用类似的方法来实现移植。
、代码混淆
代码混淆在我们的移植过程中也是一个坑。
也自带代码混淆插件，但是它默认的混淆跟我们下混淆出来的结果很不相同。要想让下的混淆跟我们下的混淆完全一样，则需要重写混淆配置文件和调试，这个过程比较麻烦。如果能把我们在下已有的混淆配置拿过来直接用，那肯定是最好的。怎么做呢？方法就是弃用自带的混淆任务，使用我们自定义的混淆任务。
弃用混淆任务的方法是在脚本的中设置为，然后自定义混淆任务并注入到编译打包流程的适当位置。
自定义混淆任务时，混淆的配置可以放在一个配置文件中，然后在任务中引用；也可以直接放在任务体的代码中。这两种形式体现在代码上有所不同，具体举例如下：
第一种形式：混淆配置放在配置文件中

第二种形式：混淆配置直接放在任务体中

这两种形式本质上是一样的，但是它们还是有些使用上的不同：
第一种形式的优点是的配置都放在一个独立的配置文件中，可以减少脚本的代码量，代码看起来更清爽。不过，它有一个缺点就是不好传入和使用脚本中定义的通用变量，这在某些情况下可能不太方便比如，使用的包路径可能包含编译时的环境变量，我们就无法在配置文件中使用该环境变量。
第二种形式的优缺点正好跟第一种形式相反。
我们在使用的时候可以根据情况来选择使用哪种形式。
六、总结
以上讲述了我们从到的移植方法和案例。无论是脚本还是脚本，其中关键的地方还是在于如何定义任务、如何让任务做正确的事，这才是真正考验我们代码能力的地方。
欢迎大家一起讨论交流！
获取更多测试干货，请搜索微信公众号：腾讯移动品质中心！作者 | 程丽萍编辑 | 顾乡

中国网络电视台英文简称 ，是由中央电视台主办的国家网络广播电视播出机构，全面部署多终端业务架构，拥有中央重点新闻网站——央视网，并建设网络电视、电视、手机电视、移动电视、互联网电视等集成播控平台，通过部署全球网络视频分发系统，已覆盖全球多个国家及地区的互联网用户，建立了拥有全媒体、全覆盖传播体系的网络视听公共服务平台。
客户挑战
原服务提供商失败慢速比较高，影响现网业务体验及未来业务拓展。
腾讯解决方案
腾讯云  针对从以下五个方面提供差异化全面的加速服务，帮客户实现流畅的视频播放体验：
     定制优化技术优化
在技术层面实施  协议栈调优，大幅优化性能。
回源链路优化，引入超级中间源设备，通过多路归并和回源收敛，有效应对突发带宽高峰，提供流畅的视频播放体验。
     流量调度 直通车
提供  全自动管理能力，避免资源冲突，管理风险；提供直通车解决方案，就近接入，节省资源。
   边缘节点 集群方案模型 
根据  业务定制化  服务器，具备高性能和扩展性， 在  内部实现以  为节点，采用  模型化、标准化，规模化原则组建群内集群，最大化提高安全和效率。
   网络通讯 智能路由冗余调度 
腾讯  自研智能路由产品，可定期对加速网络中的各个阶段进行探测，并上报系统后台，使用多种算法，算出最佳路径，实现资源调度最优化。
     立体监控  监控拨测 
腾讯  从  状态监控到用户体验指标监控，通过拨测，服务器拨测等手段多维度控制  运营质量。
    专业完善的支撑团队
从客户、业务、时间、技术等多重纬度指定割接计划，保障业务的平稳运行。提供小时不间断专业服务，包含企业服务、工单系统服务及值班电话服务等多种服务渠道。
为客户带来收益
业务切换到腾讯云后，即使是突发高峰，启动失败率和播放卡断率也低于客户要求的指标，很好的保证了用户的体验。

相关推荐
易企秀为什么选择腾讯云快手为什么选择腾讯云作为反向代理服务器，实现负载均衡。首先浏览器发起请求，到达，由将请求地址转发给相应的服务器，再由服务器将结果返回给，将结果再转发给浏览器。在这过程中，对于浏览器来说，并不知道后端的存在， 相对于来说，当前的客户端是服务器。这就完成了一个代理的过程。
首先准备三台服务器；地址分别为     其中安装服务器，将发给的请求全部转发给安装了的服务器
配置文件
 {
 
_ 
 
_  
  {
    
  
_ 
}
_  
         
_     
 =  {
 
}
保存退出，我们的反向代理就配置好了。
我们在准备多个服务器，为        
如果我们有多个服务器，并有根据一定的策略将用户的请求分别让多个服务器，处理，这样我们就实现了负载均衡。
配置负载均衡，修改配置文件为
_ 
 { 
_     
}
 {
 
_ 
  配置一组后端服务器，
 请求转发到后，按策略将请求指派出某一服务器
 即配置用于负载均衡的服务器群信息
  {
均衡策略
 轮询权重由决定
_

_
 
 
 权重，值越高负载越大；
   =
 ：备份机，只有非备份机都挂掉了才启用；
  
  停机标志，不会被访问
  
 _达到指定次数认为服务器挂掉；
 _挂掉之后过多久再去测试是否已恢复
  _= _=
}
 {
 
_ 
 
_  
  {
 
  
}
 反向代理设置，将所有_路径下请求发给本机上的
 _ {
_ 
}
 负载均衡设置，将所有请求发送到 指定的服务器群上
  \ {
_ 
 真实的客户端
__  _ 
 请求头中信息
__   
 代理路由信息，此处取有安全隐患
__  ____
 真实的用户访问协议
__  
 默认值，
 后端 时  中的是
 因为收到的请求是发过去的 发起的请求 是
 设置为后，自动把响应头中 部分替换成当前用户请求的部分
 网上很多教程将此值设置成 ，禁用了替换，
 这样用户浏览器收到后跳到，直接将后端服务器暴露给浏览器
 所以除非特殊需要，不要设置这种画蛇添足的配置
_ 
}
 一个重写的例子，浏览器请求 时，被重写成
  \ {
 \ \ 
}
_  
         
_     
 =  {
 
}
}
}
配置均衡策略，会根据配置的策略将不同的请求转发给服务器组的成员。
  {
均衡策略
 轮询权重由决定
_

_
 
 
 权重，值越高负载越大；
   =
 ：备份机，只有非备份机都挂掉了才启用；
  
  停机标志，不会被访问
  
 _达到指定次数认为服务器挂掉；
 _挂掉之后过多久再去测试是否已恢复
  _= _=
}

相关推荐
反向代理腾讯云的一个坑
内部体验腾讯负载均衡的新功能
【腾讯云的种玩法】关于服务器反向代理 的一点思考脚本月日，腾讯云宣布，正式开放国内首款   ，函数即服务 产品——无服务器云函数，  。用户只需要上传代码即可以最简捷的方式使用腾讯云高效稳定的全球基础设施，并可实现毫秒级的弹性伸缩，同时该服务兼具成本低廉的特点，代码按需运行，空闲时不收费。经测试，按调用次数和运行时间付费，在每个月请求不足百万时，使用无服务器云函数比使用多台云主机搭建集群的成本减少约。

图：腾讯云官网已开放无服务器云函数的使用申请
无服务器云函数，  是腾讯云提供的无服务器执行环境，帮助用户在没有购买和管理服务器时仍能运行代码。用户只需要使用云平台支持的语言编写核心代码及设置代码运行的条件，代码即可在腾讯云基础设施上弹性、安全地运行，并可完全管理底层计算资源，包括服务器、内存、网络、代码部署、弹性伸缩、负载均衡等服务。使用无服务器云函数将可免除所有运维性操作，企业和开发者可以更加专注于核心业务的开发，实现快速上线和迭代，把握业务发展的节奏。
相比云主机，在微服务架构场景下无服务器云函数展现了更为明显的弹性轻便的优势，为中小型开发者和大型服务的部分模块设计提供了新的思路和技术支持。同时在互联网、金融、电商等领域，在移动及服务后端、视频图像处理、数据分析等场景下，如果用户需要更易用、弹性、低价的服务，选择无服务器云函数的体验更佳。
腾讯云专家工程师刘颖认为，无服务器云函数从底层开始变革计算资源的形态，为软件架构与应用服务部署带来新的设计思路，极大降低云计算的使用成本，推动全行业的业务创新步伐。他表示，腾讯云无服务器云函数在、微信等腾讯海量业务中运行已久，具备深厚的技术积累和应用实践，希望通过这项技术的开放，让大中小型企业及全体开发者均可享受这项技术。
：云端新革命
从行业趋势看，是云计算必经的一场革命。
云计算把传统的物理服务器拆解成了更加弹性易用的虚拟机和容器，虚拟化的对象从硬件设备到运行环境，用户越来越不需要关心底层基础设施。然而，开发者仍然避免不了花费大量精力处理与服务器相关的、无差异化的运维操作。
过去在设计一个服务时，开发者需要预估使用多少公有云的或私有云的服务器，用什么形式的持久存储，网络带宽需要多大，如何在服务请求波动时进行服务伸缩。处理这些复杂的问题对业务本身并没有决定性的助力。有研究称，开发团队真正花在开发业务代码的时间只有，其他时间都被处理部署变更、突发事件等占用了。
在这样的背景下，新的服务形态–函数即服务于年应运而生。用户只需要编写并上传最核心、最有竞争力的代码，无需配置或管理服务器即可运行，仅按实际运行收费。并且平台自动管理其他的工作如高可用部署、流量分发、弹性伸缩等。
无服务器云函数在移动及服务后端、视频图像处理、数据分析等场景下，其易用、高效、弹性、按需、低价等优势都能很好地满足多样化的需要。例如，证券公司分析每小时的交易内容，找出交易量 并根据用户进行个性化推荐。使用无服务器云函数进行周期性的统计任务，并响应用户点击流，即可轻松实现随用随启、任务完成后立即释放的弹性模块。
轻量易用：解决上云第一步问题
云函数轻量易用的特点使没有接触过云计算的开发者也能轻易上手使用。用户只需要简单地改造在本地环境运行正常的代码，并打包上传至腾讯云平台，即可以极低的价格根据运算时间不同价格不定，一般调用费用在元百万次左右在腾讯云遍布全球的基础设施上运行代码。
例如，使用的开源图片压缩算法应用于生产系统中帮助压缩用户上传的图片，只需要完成：第一步，将代码及依赖打包上传至云函数平台；第二步，配置一个 为触发器。完成上述两个简单的步骤后，即可在应用如相册、头像应用、商品系统等中完成用户上传图片后自动进行高保真度的压缩，对应用后台的存储空间和传输的带宽使用率上都有较大的优化。
微服务：无服务器云函数是最好搭档
目前，开发者正在将目光投向了微服务这一模块化、灵活、动态的解决方案，腾讯云无服务器云函数是实现微服务的最佳方式。
随着业务的发展，代码常呈现出几何级别的增长速度。在传统的单体式服务架构中，各个模块相互强依赖、代码间耦合度高。对于开发和运维人员来说，维护困难、部署耗时等弊端急需解决。
在这一背景下，尤其在业务快速变化时期，使用微服务来构建业务敏捷的系统是保持业务竞争力非常有效的手段。这样模块化的方式使得整个项目分散成为多个部分、使用不同语言、由不同业务部门的不同开发团队独立完成，帮助缩短项目的生命周期，加快项目开发效率。
通常情况下，应用逻辑层是无状态的，缓存、日志、数据库等全部通过外部的独立资源来支持，这样才能保证在业务请求突增时，服务能迅速扩展。各个模块之间通过  ，远程过程调用 调用或消息中间件互相通信，这样每个模块都是自治的。
因此，腾讯云无服务器云函数是实现微服务的最好的方法之一，其与生俱来的事件驱动和无状态属性正好满足微服务架构的要求。每个服务即函数都拥有几乎无限的处理能力，能跟随业务请求的波动自动完成扩容和缩容。如果采用云服务器构建服务模块，即使在使用量很低时据测算，数据中心服务器的平均利用率仅在左右仍要支付相应的小时费用。而云函数按实际使用量收费，运行完毕后立即结束计费，价格非常容易预测，没有请求就没有成本支出，价格优势明显。
整体而言，云函数可实现独立开发、简化测试和加速部署等一系列优点，可助力企业在关键时期快速上线和迭代，为初创期的产品提供了很好的解决方案。
了解、申请腾讯云无服务器云函数：导语
 在的使用中，性能的调优配置过程中，查阅了很多资料，本文的思路是从最细节的本质，即核心的数据结构出发，到整个集群宏观的调度过程做一个整理归纳，从微观到宏观两方面总结，方便自己在调优过程中找寻问题，理清思路，也加深自己对于分布式程序开发的理解。有任何问题和纰漏还请各位大牛指出啦，我会第一时间改正
详谈
在开山之作“         ”的这篇中以下简称 ，等提出了这种数据结构，文中开头对定义是：

                

也就是说设计的核心点为：

内存计算
适合于计算机集群
有容错方式

文中提到了对于设计的最大挑战便是在提供有效的容错机制  ，之前存在的基于内存存储的集群抽象，例如分布式共享内存、键值存储、数据库等，更多是细粒度的更新一个可变状态表，而其容错方式通常为在机器间进行数据复制或者日志更新，而这些方式很明显会造成机器负载加大以及大量的网络传输开销。
而则使用了粗粒度的转换，即对于很多相同的数据项使用同一种操作如，这种方式能够通过记录之间的转换从而刻画的继承关系，而不是真实的数据，最终构成一个有向无环图，而如果发生丢失，会有充足的信息来得知怎么从其他重新计算得到。
这也是设计的核心理念，接下来围绕这一理念我们来剖析，看是怎么实现这种高效的容错机制的。
存储结构
实现的数据结构核心是一个五元组，如下表：



属性
说明




分区列表
每个分区为的一部分数据


依赖列表
存储其父即依赖


计算函数
利用父分区计算各分区的值


分区器
指明的分区方式


分区位置列表
指明分区优先存放的结点位置



其中每个属性的代码如下：
 中的依赖关系由一个数据集来记录，这里使用的原因是经常取第一个元素或者遍历
  _ _ = 

 分区列表定义在一个数组中，这里使用的原因是随时使用下标来访问分区内容
 分区列表不需要被序列化
   _  = 

 接口定义，具体由子类实现，对输入的分区进行计算
     

 分区器
 可选，子类可以重写以指定新的分区方式，支持和两种分区方式
    = 

 可选，子类可以指定分区的位置，如可以重写此方法，让分区尽可能与数据在相同的节点上
     = 
在 中，作者提到在抽象时，一个很重要的点便是如何使得能够记录之间的继承依赖关系，这种继承关系来自丰富的转移操作。所以作者提出了一种基于图的表示方式来实现这个目标，这也正是上面五种属性的核心作用。
这五种属性从诞生到新的版本迭代，一直在使用，没有增加也没有减少，所以可以说的核心就是，而的核心就是这五种属性。
的操作
在《踩坑记：初试》中对的操作也进行了简单说明，在中，对的操作可以分为和两种，我们分别进行整理说明：

对于操作是指由一个生成新的过程，其代表了是计算的中间过程，其并不会触发真实的计算。

=  =返回一个新的分布式数据集，由每个原元素经过函数转换后组成

=  =返回一个新的数据集，由经过函数后返回值为的原元素组成

=  =类似于，但是每一个输入元素，会被映射为到多个输出元素因此，函数的返回值是一个，而不是单一元素

       =将这个集合内的元素进行采样，获取所有元素的子集。用户可以设定是否有放回的抽样、百分比、随机种子，进而决定采样方式。=， 表示有放回的抽样；=， 表示无放回的抽样。如下图：



每个方框是一个分区。通过函数，采样的数据。、、、、、采样出数据和、，形成新的。

  =在一个由对组成的数据集上调用，返回一个，对的数据集。注意：

  默认情况下，使用与父的数量对应的并行任务进行分组，也可以传入可选参数，根据数据量设置不同数目的。  另外如果相同的求和或者求平均，那么使用性能更好

=    = 在一个，对的数据集上使用，返回一个，对的数据集，相同的值，都被使用指定的函数聚合到一起。和类似，任务的个数是可以通过第二个可选参数来配置的。

  =返回一个新的数据集，由原数据集和参数联合而成

   =返回值相同的所有匹配对，如下图：



操作会将两个中相同值的合并成 的形式。

  =函数将两个进行协同划分。对在两个中的类型的元素，每个相同的元素分别聚合为一个集合，并且返回两个中对应的元素集合的迭代器  。其中，和，是两个下相同的两个数据集合的迭代器所构成的元组。

  =笛卡尔积。但在数据集和上调用时，返回一个，对的数据集，所有元素交互进行笛卡尔积。

   =根据值进行排序，如果设置为则按照升序排序

 对中的所有数据进行操作，建立更多或者更少的分区使得更加平衡。往往需要通过网络进行数据传输



不同于操作，代表一次计算的结束，不再产生新的，将结果返回到程序。所以只是建立计算关系，而才是实际的执行者。每个都会调用的方法向集群正式提交请求，所以每个对应一个。

  =返回数据集的元素个数

  = 对类型的有效，返回一个，对的，表示每一个对应的元素个数

  =在中，以数组的形式，返回数据集的所有元素。这通常会在使用或者其它操作并返回一个足够小的数据子集后再使用会比较有用。

=  =通过函数接受两个参数，返回一个参数聚集数据集中的所有元素。这个功能必须可交换且可关联的，从而可以正确的被并行执行。

将数据集的元素，以的形式，保存到本地文件系统，或者任何其它支持的文件系统。对于每个元素，将会调用方法，将它转换为文件中的文本行

将数据集的元素，以 的格式，保存到指定的目录下，本地系统，或者任何其它支持的文件系统。这个只限于由对组成，并实现了的接口，或者隐式的可以转换为的。包括了基本类型的转换，例如，，，等等

利用的接口进行持久化操作，之后可以使用重新回内存

返回一个由数据集的前个元素组成的数组。注意，这个操作目前并非并行执行，而是由驱动程序计算所有的元素

  返回一个数组，在数据集中随机采样个元素组成，可以选择是否用随机数替换不足的部分，用于指定的随机数生成器种子

 返回前个元素，可以使用元素的自然顺序，也可以使用用户自定义

返回数据集的第一个元素类似于

在数据集的每一个元素上，运行函数进行更新。这通常用于边缘效果，例如更新一个累加器，或者和外部存储系统进行交互，例如。关于我在踩坑记——数据库中对的操作有详细整理


依赖方式
 的容错机制是通过记录更新来实现的，且记录的是粗粒度的转换操作。在外部，我们将记录的信息称为血统关系，而到了源码级别，  记录的则是  之间的依赖关系。在一次转换操作中，创建得到的新  称为子 ，提供数据的  称为父 ，父  可能会存在多个，我们把子  与父  之间的关系称为依赖关系，或者可以说是子  依赖于父 。
依赖只保存父  信息，转换操作的其他信息，如数据处理函数，会在创建  时候，保存在新的  内。依赖在   源码中的对应实现是  抽象类。
  将依赖进一步分为两类，分别是窄依赖 和  依赖 ，在部分文献中也被称为  ，即宽依赖。
窄依赖 
窄依赖中，父  中的一个分区最多只会被子  中的一个分区使用，换句话说，父  中，一个分区内的数据是不能被分割的，必须整个交付给子  中的一个分区。下图展示了几类常见的窄依赖及其对应的转换操作。

依赖宽依赖  
 依赖中，父  中的分区可能会被多个子  分区使用。因为父  中一个分区内的数据会被分割，发送给子  的所有分区，因此  依赖也意味着父  与子  之间存在着  过程。下图展示了几类常见的依赖及其对应的转换操作。

需要说明的是，依赖关系时到之间的一种映射关系，是两个之间的依赖，那么如果在一次操作中涉及到多个父，也有可能同时包含窄依赖和依赖，如操作：

集群部署
组件
说到集群的部署，我们先来讨论一下中一些关键的组件，在我的博文《踩坑记：初试》中，我对几个关键概念做了阐述。首先，先上官方文档中的一张图：

官方文档对其中的术语进行了总结，如下表：

从官方文档摘抄了这么多东东，对中基本的集群结构，以及一个程序提交到后的调度情况我们有了了解。
部署方式
对于集群的部署方式，提供了多种集群部署方式，如下：

模式：本地调试的一种模式，可以在一台机器上完成程序的运行与调试
模式：即独立模式，自带完整的服务，可单独部署到一个集群中，无需依赖任何其他资源管理系统。
  模式：将搭建在之上，由中的负责资源调配，负责计算任务；
  模式：这是很多公司采用的模式，官方推荐这种模式当然，原因之一是血缘关系。正是由于开发之初就考虑到支持，因此，目前而言，运行在上会比运行在上更加灵活，更加自然。目前在  环境中，用户可选择两种调度模式之一运行自己的应用程序。

集群部署举例
由于在我平时的使用中，是直接采用的的部署方式，我这里将部署的框架做一个简单的介绍，其他部署方式其实可以做一些参考来进行搭配部署：

假设我们的网段为，其中、、机器我们用作集群节点，和位节点，这里我们用到了，关于的介绍大家可以在网上搜搜，我们这里加入的目的就是节点如果崩溃后进行一个主备切换，保证集群能够继续正常运行。如果我们在提交我们的应用，那么和就将作为我们的节点参与运算。而关于配置文件中需要的具体配置项可以参考官方文档：  
从看集群任务调度
上文我们从微观和宏观两个角度对进行了总结，以及的依赖，集群以及部署，那么当我们在提交了一个任务或者说到集群时，它是怎么运作的呢？

首先我们通过或者等，将我们的应用以及其依赖的包完整的打包，利用命令将提交到；
提交程序的这个节点会作为节点，并从 中获取资源；
程序会在节点中获得用来执行我们的任务；
在程序中每次的变换会产生一个新的，每个包含多个；
而在进行时，会产生新的；
会被送往各个运行；
而最终的计算结果会回到节点进行汇总并输出如。

针对这个过程，我们可以从微观和宏观两个角度把控，将的操作依赖关系，以及在集群间的分配情况综合起来看，如下图：

监控界面
在提交任务时，我们可以在提交命令中加入一项参数— =，其中””为你需要的端口号，这样在浏览器中我们就可以利用提供的界面对的运行情况进行监控如下图：

踩坑小记
在平时的使用过程当中，由于程序在整个集群当中奔跑，经常会遇到很多莫名其妙的错误，有时候通过日志给定的错误很难真的定位到真正的原因，那叫一个忧伤阿
程序崩溃
出现这类错误，往往日志中会提到。在中大多数操作会分担到各个结点的进行计算，但是对于类操作，如我们经常会用的或者等，都会使得将所有结点的数据汇总到进行计算，这样就会导致需要远大于正常的内存，所以遇到这类问题，最先可以考虑的便是增加结点的内存，增加方式如下：
 
编码错误
在利用 的版本，消费数据的时候，遇到类似下面的问题：
            
我们知道中的字符串形式有两种即形式和普通形式，通过反复分析日志和查看的源码找到了问题所在。首先在的 中，找到函数的如下说明：

图中红框内清楚的说明了，在解析传来的数据的时候，默认使用了_函数，那这个东东是个什么玩意呢，找到的源码，其定义如下：
 默认解码器
 _
          
       
         
     

 

    
         =
                     =___
                     =_ =_
        
                  
            
             
                
             _    
                               
             
             
                   _
                   _
           
        
           
             = 
        {
             
             
             
        }
           
                
         = __
         = ___
         = _   
         =  
         =   
          _ _ _


我们看到默认的解码器直接调用了，那么当传来的数据中有非编码的字符时，整个就会挂掉，所以修改如下：
 __                                                      
创建时传入
 =  \     _ __ {____} {                        }        ___        =__```
如果采用来创建与此类似，不再赘述。所以在的消费中遇到解码问题可以关注一下这里。
总结
挺长的一篇整理，前后拖了很久。本篇博文我的构思主要就是，当我们提交了一个应用到时，我们需要大致了解做了什么，这里我并没有分析源码因为我木有看哈哈。从最微观的的操作，到宏观的整个集群的调度运算，这样从看集群调度就有了一个整体的认识，当遇到问题的时候就更容易排查，遇到性能拼瓶颈也容易查找。，这就是这篇博文的全部整理哈，其中末尾部分阐述了在实际项目中遇到的一些问题和坑，如果有相似的问题的朋友可以参考下。
做个小广告，项目是舆情，企鹅风讯，感兴趣的欢迎大家来踩踩：
参考文献：

《最佳实践》陈欢 林世飞鹅厂大神的作品
                                
源码阅读
【】操作详解——值型算
  
 开发指南
 
 依赖
  
 探秘：三种分布式部署方式比较
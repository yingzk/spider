作者：

这篇是前段时间总结给自己备忘的，要用到的工具实在太多，没法一一记住。
个人感觉，作为一个测试的工具，只要会用就好了。
所以这里稍微做了一些修改，简单介绍一下常用的写法和命令，其次将之前的一些示例改成版本，方便没有基础的同学浏览。
介绍
是一个拥有丰富功能的测试框架，可以用于和浏览器。支持同步异步测试用例，有多种报告形式。
官网介绍了很多的特性，个人感觉实用的就几点：
一个是和浏览器都可以用，不用再记那么多奇怪的和写法了。
其次是编写同步异步测试用例非常简单。
安装
    
成功安装后就可以使用命令了。
使用
运行目录所有
 
指定文件
  
监听文件变化
   
指定编译
  
    
  
    
浏览器的使用
   
指定一个目录，初始化一个用于浏览器的测试目录。执行后会在该目录生成、、和一个空白的，可以直接在中添加测试用例。
当然，也可以不敲命令直接复制引用到。
编写用例
常用的断言库都可以运行的很好。以下列出几个：

      
      
  


个人一般用自带的方便不用安装和功能强大很好用
同步代码

测试数组{
测试方法{
不存在的元素会返回{


}
}
}

异步代码
写法和同步代码类似，只是在的第二个参数的函数参数中传入一个函数，用于控制异步函数的结束。
测试模块{
测试方法{
此处不应出错{
={董小姐}
{


}
}
}
}

其中，函数也可以接受一个作为参数，所以上面其实可以简化为：
测试模块{
测试方法{
此处不应出错{
={董大爷}

}
}
}


支持多种体位的，用法做一些或者干掉一些东东。如下：

开始前次
结束后做次
开始前每次都做
每次结束后都做

所有的都可以接收参数用于异步结束。甚至可以不使用参数，而是直接返回一个对象，例如：
{
{

}
}

不过建议还是加上参数，看起来清晰，习惯统一。
和
现在一般都用。
提供了。
和没区别。
提供了
其他常用
参数只显示第一个异常
一般测试用例多的时候非常有用，不然某个接口变化全屏报错就悲剧了
参数指定单个测试用例的超时时间
默认单个测试用例超时时间为。
命令行中添加为全局的设置，也可以在测试用例内部调用方法单独控制。
，介绍到此就结束了，最后附上其他命令速查
其他命令行

—
—
—强制为异步模式，即所有测试必须包含一个回调。
—
—
—
—\
—\



\
\


\
\
\设置超时，默认为，如果是长时间运算需要设置。
\
监视文件变化

\\…使用指定模块编译文件，经常会用到编译

\





\






\…



原文链接：


相关推荐黑盒测试相关学习单元测试基本篇【腾讯】基于模型的自动化测试工具一、前言
，一个后台逻辑层的高性能框架，目前支持三种语言，往后可能会考虑提供更多主流语言的支持如等，自定义协议，同时也支持。它集可扩展协议编解码、高性能通信框架、名字路由与发现、发布监控、日志统计、配置管理等于一体，通过它可以快速用微服务的方式构建自己的稳定可靠的分布式应用，并实现完整有效的服务治理。
当前已开源，易名为“”，赶紧上去一下吧。
此系列文章选用语言进行描述，先对部署开发环境、相关概念和整体架构做介绍，后面分、两部分展开，相关文档不多，主要从代码上进行理解。
二、部署开发环境
部署
的部署有管理平台的支持，如果是或测试环境，申请服务节点和部署都不需要管理人员的审批，已经接入环境，按需申请，上线成功后支持动态扩容，非常方便，使用完关闭下线即可。
开发
需要使用进行项目管理，引入如下依赖：












然后需要在平台上创建一个代码仓库，将创建好对应的位置填写到管理平台的编译选项中，这样平台就可以直接从你填写的位置去拉取代码到编译机上进行编译了。注意：代码仓库需要添加一个用户_的读权限；当然也可以采用其他的编译方式，如申请编译机和开发机，可上查找并理解区分一下测试机，编译机，开发机。
最后需要有一个跳板机，这个需要审批，申请之后安装工具用来远程登录节点看日志，这样准备工作就基本完成了。
在开发中只需要关注业务逻辑实现即可，但如果想进一步了解清楚框架底层的机制和实现，后面的文章将进行相关探讨。
部署开发过程如下图所示：

为了简化开发，可以下载使用这个项目快速构建的小工具：工程快速构建小工具
三、整体交互流程
官方文档的这张图再清晰不过了

其中为主控服务，提供路由查询；另外这里的为发布服务请求，传达到服务后由服务在各个节点上拉起；
服务会定期上报心跳到服务，由服务统一将心跳上报，我觉得这样是要比单独一个个上报更加高效的，同时可以向发送管理命令；
下面的各个服务节点就是提供的运营支持，定期上报统计信息到，打印远程日志到，定期上报属性信息到、上报异常信息到、从拉取服务配置信息；
最后需要注意，部分代码没有主控的实现，仅包括和端，但在使用上只要将，和各个运营服务部署运行成功，服务之间都是可以通过走协议进行交互的。
四、配置管理
有配置管理服务，此外管理平台上也有许多配置项，代码中有很多地方都会从配置文件中读取配置项的，容易搞混，这里先简单做个介绍。
服务上线后，跳板机登录进入到目录，展开目录结构如下：
├──_
└──
├──
│├──
│├──
│├──
│└──
├──
│└──
└──
└──
其中：为你上线服务对应的应用名和服务名；
目录下的即为项目代码资源所在位置；
管理平台的服务配置项上添加的配置文件，可或拉取到本地目录；
另外，有三个重要的默认目录提一下，
应用根目录：=

日志目录：=_

数据目录：=
当然以上这些配置你也在配置文件中看到，管理平台上的操作为：
服务管理页中，点击私有模版可对模版进行更改；
点击管理页可对单个服务的最大连接数，线程数，线程池大小，是否灰度等选项进行更改，如下图：

具体的这些配置项，在之后会逐一提到。
五、
，即远程过程调用，可理解为一种通信协议，该协议允许运行于一台计算机的程序调用另一台计算机的子程序。使用框架的好处就是不需要额外编写网络交互这部分代码了，这部分代码编写上也极容易出错，因此框架相当于在层之上做了一层可靠的应用层封装。另外，远程调用涉及数据包的编解码，框架通常会定义接口描述语言，，方便跨平台的远程过程调用。
框架正是提供了以上问题的完整方案，服务端采用异步通信模式，客户端可支持同步或异步调用；数据编码提供了协议支持，同时支持编写运行脚本实现代码自动生成。从某种意义来说，我觉得可以简化跨语言混合编程，
在服务端处理客户端的并发请求中，实现上采用了多线程模式，这里贴两张网上看到觉得比较好的时序图，有利于理解。
服务端：

客户端：

下节单独对线程模型做介绍。
感谢阅读，有错误之处还请不吝赐教。

上周答辩结束，终于有时间把之前整理的整理一下
这段时间的实习还是收获良多，除了技术上的，还有思维逻辑和方法论上的吧，有许多的致谢，留待以后慢慢言谢吧
：
不知不觉已完成了预期的总结，该系列文章汇总如下，欢迎阅读指教，交流学习：
必修课一：整体架构理解必修课二：多线程模型必修课三：启动全过程必修课四：过载保护必修课五：端调用必修课六：容错必修课七：负载均衡
当然，相关的内容远不止这些，比如这里暂时没有具体探讨的还有：协议、分组、部署、就近接入、日志相关、消息染色、配置中心、运营监控服务等；
计划往后继续深入学习慢慢补充，或许还可以搞成一个系列，再升级到选修课先给自己定个小目标，比如是吧
由于水平有限，文章难免有错误或纰漏之处，请各位看官不吝赐教俗话说：“物以类聚，人以群分”，在机器学习中，聚类算法是一种无监督分类算法。聚类算法很多，包括基于划分的聚类算法如：，基于层次的聚类算法如：，基于密度的聚类算法如：，基于网格的聚类算法等等。基于划分和层次聚类方法都无法发现非凸面形状的簇，真正能有效发现任意形状簇的算法是基于密度的算法，但基于密度的算法一般时间复杂度较高，年到年间，研究数据挖掘的学者们提出了大量基于网格的聚类算法，网格方法可以有效减少算法的计算复杂度，且同样对密度参数敏感。
典型算法
：基于网格多分辨率，将空间划分为方形单元，对应不同分辨率
：结合网格和密度聚类的思想，子空间聚类处理大规模高维度数据
：用小波分析使簇的边界变得更加清晰
这些算法用不同的网格划分方法，将数据空间划分成为有限个单元的网格结构并对网格数据结构进行了不同的处理，但核心步骤是相同的：
、划分网格
、使用网格单元内数据的统计信息对数据进行压缩表达
、基于这些统计信息判断高密度网格单元
、最后将相连的高密度网格单元识别为簇
算法
算法的核心思想：首先我们先划分一些层次，每个层次上我们根据维度或者概念分层不同的，实际上这里的每个层次对应的是样本的一个分辨率。每个高层的在其下一层中被对应得划分成多个，每个我们都计算出它的统计信息，估计出它的分布。利用这样的结构，我们很容易进行查询，比如我们查询具有某些属性的样本，我们从上到下开始，根据的统计信息计算在每个的置信区间，找出最大的那个，然后到下一层，依次直至到最底层。这样的好处是，我们不用计算所有的样本，算法每进一层都会抛弃不相关的样本，所需的计算量会越来越少，那么速度就会很快。
这种方法虽然不是一种显然的聚类法，但它确实可以用来聚类，因为返回的样本实际上就是某一聚类。本质上于聚类问题是有等价性的。
算法的两个参数：
•网格的步长确定空间网格划分
•密度阈值网格中对象数量大于等于该阈值表示该网格为稠密网格
网格建立流程
首先我们先划分一些层次，按层次划分网格

计算最底层单位网格的统计信息如均值，最大值和最小值；网格中统计信息：
•网格中对象数目
•网格中所有值的平均值
•网格中属性值的标准偏差
•网格中属性值的最小值
•网格中属性值的最大值
•网格中属性值符合的分布类型。如正态分布，均匀分布，指数分布
最底层的单元参数直接由数据计算，父单元格统计信息由其对应的子单元格计算，具体计算公式见
父单元格计算公式如下




父单元格计算方式
设为对应子单元格多数的分布类型，计算





示例：根据以下子网格计算父网格的参数

=
===
=
=
=
=
从最底层逐层计算上一层每个父单元格的统计信息，直到最顶层；
同时根据密度阈值标记稠密网格

查询算法步骤：
　　从一个层次开始
　　对于这一个层次的每个单元格，我们计算查询相关的属性值。
　　从计算的属性值以及约束条件下，我们将每一个单元格标记成相关或者不想关。不相关的单元格不再考虑，下一个较低层的处理就只检查剩余的相关单元
　　如果这一层是底层，那么转，否则转
　　我们由层次结构转到下一层，依照步骤进行
　　查询结果得到满足，转到步骤，否则
　　恢复数据到相关的单元格进一步处理以得到满意的结果，转到步骤
　　停止
聚类算法
算法是结合了基于密度和基于网格的聚类算法，因此既能够发现任意形状的簇，又可以处理高维数据。
算法核心思想：首先扫描所有网格。当发现第一个密集网格时，便以该网格开始扩展，扩展原则是若一个网格与已知密集区域内的网格邻接并且其其自身也是密集的，则将该网格加入到该密集区域中，知道不再有这样的网格被发现为止。密集网格合并算法再继续扫描网格并重复上述过程，直到所有网格被遍历。以自动地发现最高维的子空间，高密度聚类存在于这些子空间中，并且对元组的输入顺序不敏感，无需假设任何规范的数据分布，它随输入数据的大小线性地扩展，当数据的维数增加时具有良好的可伸缩性。
高维数据聚类的难点在于：

适用于普通集合的聚类算法，在高维数据集合中效率极低
由于高维空间的稀疏性以及最近邻特性，高维的空间中基本不存在数据簇
聚类的目标是将整个数据集划分为多个数据簇聚类，而使得其类内相似性最大，类间相似性最小，但在高维空间中很多情况下距离度量已经失效，这使得聚类的概念失去了意义。另一方面，建立索引结构和采用网格划分方法是很多大数据集聚类算法提高效率的主要策略，但在高维空间中索引结构的失效和网格数随维数呈指数级增长的问题也使得这些策略不再有效。


识别候选搜索空间的主要策略是使用稠密单元关于维度的单调性。这基于频繁模式和关联规则挖掘使用的先验性质。在子空间聚类的背景下，单调性陈述如下：
一个维单元至少有个点，仅当的每个维投影它是维单元至少有个点。考虑下图，其中嵌人数据空间包含个维：例如，子空间和中的一个二维单元包含个点，仅当该单元在每个维即分别在和上的投影都至少包含个点

算法的两个参数：
•网格的步长确定空间网格划分
•密度阈值网格中对象数量大于等于该阈值表示该网格为稠密网格
算法流程：
、对维空间进行划分，对每一个维度等量划分，将全空间划分为互不相交的网格单元
、计算每个网格的密度，根据给定的阈值识别稠密网格和非稠密网格，且置所有网格初始状态为“未处理”
采用自下而上的识别方式，首先确定低维空间的数据密集单元，当确定了维中所有的密集单元，维空间上的可能密集单元就可以确定。因为，当某一单元的数据在维空间中是密集的，那么在任一维空间中都是密集的。如果数据在某一维空间中不密集，那么数据在维空间中也是不密集
、遍历所有网格，判断当前网格是否为“未处理”，若不是“未处理”状态，则处理下一个网格；若是“未处理”状态，则进行步骤处理，直到所有网格处理完成，转到步骤
、改变网格标记为“已处理”，若是非稠密网格，则转到步骤
、若是稠密网格，则将其赋予新的簇标记，创建一个队列，将该稠密网格置于队列中
、判断队列是否为空，若空，则处理下一个网格，转到第步；若队列不为空，则进行如下处理
取队头的网格元素，检查其所有邻接的有“未处理”的网格
更改网格标记为“已处理”
若邻接网格为稠密网格，则将其富裕当前簇标记，并将其加入队列
转到步骤
、密度连通区域检查结束，标记相同的稠密网格组成密度连通区域，即目标簇
、修改簇标记，进行下一个簇的查找，转到第步
、遍历整个数据集，将数据元素标记为所有网格簇标记值
示例：以下是密度阈值为的结果

算法
离散小波变换
离散小波：
=
为了达到压缩效果，取　来代表新的
表示为　即平均数频率，是小范围波动数振幅
同理表示为
和是局部的平均值，反映的是频率，叫做低频部分
和是小范围波动的幅度，叫做高频部分
即经过一次小波变换，可以表示为，低频部分在前，高频部分在后
示例：
对=进行三次小波变换，结果如下所示

离散小波变换用于二维图像处理
示例：

•第一步，对原始图像的每一行进行一次，得到新的特征图像；
•第二步，对第一步得到的特征图像的每一列进行一次，得到结果

•接近原始图像缩小了一倍；
•图像水平边界信息；
•图像垂直边界信息；
•
聚类算法
算法的核心思想是将数据空间划分为网格后，对此网格数据结构进行小波变换，然后将变换后的空间中的高密度区域识别为簇。基于数据点数目大于网格单元数目≥的假设，的时间复杂度为，其中为数据集内数据点数目，为网格内的网格单元数目。
算法需要两个参数：
•网格的步长确定空间网格划分
•密度阈值网格中对象数量大于等于该阈值表示该网格为稠密网格
算法流程
将原始空间离散化为网状空间，并把原始数据放入对应单元格，形成新的特征空间；

对特征空间进行小波转换，即用小波变换对原始数据进行压缩对每行进行小波变换，得到

再对每列进行小波变换，得到

注：空间相当于是压缩后的信息，本例是压缩为
找出小波转换后的空间中密度大于阈值这里取的网格，将其标记为稠密；

对于密度相连的网格作为一个簇，打上其所在簇序号的标签；

建立转换前后单元格的映射表

把原始数据映射到各自的簇上。

小波聚类效率

聚类算法对比
不同的聚类算法有不同的应用背景，有的适合于大数据集，可以发现任意形状的聚簇；有的算法思想简单，适用于小数据集。总的来说，数据挖掘中针对聚类的典型要求包括：
可伸缩性：当数据量从几百上升到几百万时，聚类结果的准确度能一致。
处理不同类型属性的能力：许多算法针对的数值类型的数据。但是，实际应用场景中，会遇到二元类型数据，分类标称类型数据，序数型数据。
发现任意形状的类簇：许多聚类算法基于距离欧式距离或曼哈顿距离来量化对象之间的相似度。基于这种方式，我们往往只能发现相似尺寸和密度的球状类簇或者凸型类簇。但是，实际中类簇的形状可能是任意的。
初始化参数的需求最小化：很多算法需要用户提供一定个数的初始参数，比如期望的类簇个数，类簇初始中心点的设定。聚类的结果对这些参数十分敏感，调参数需要大量的人力负担，也非常影响聚类结果的准确性。
处理噪声数据的能力：噪声数据通常可以理解为影响聚类结果的干扰数据，包含孤立点，错误数据等，一些算法对这些噪声数据非常敏感，会导致低质量的聚类。
增量聚类和对输入次序的不敏感：一些算法不能将新加入的数据快速插入到已有的聚类结果中，还有一些算法针对不同次序的数据输入，产生的聚类结果差异很大。
高维性：有些算法只能处理到维的低纬度数据，而处理高维数据的能力很弱，高维空间中的数据分布十分稀疏，且高度倾斜。
可解释性和可用性：我们希望得到的聚类结果都能用特定的语义、知识进行解释，和实际的应用场景相联系。
几种常用的聚类算法从可伸缩性、适合的数据类型、高维性处理高维数据的能力、异常数据的抗干扰度、聚类形状和算法效率个方面进行了综合性能评价，评价结果如表所示：



算法名称
算法类型
可伸缩性
适合的数据类型
高维性
异常数据的抗干扰性
聚类形状
算法效率





层次聚类
很高
混合型
很高
很高
任意形状
一般



层次聚类
较高
数值型
较低
较低
球形
很高



层次聚类
较高
数值型
一般
很高
任意形状
较高



划分聚类
较低
数值型
较低
较高
球形
较低



密度聚类
较低
数值型
较高
一般
任意形状
较高



密度聚类
一般
数值型
较低
较高
任意形状
一般



网格聚类
很高
数值型
很高
较高
任意形状
很高



网格聚类
一般
数值型
较高
一般
任意形状
一般



网格聚类
较高
数值型
较高
较高
任意形状
较低



网格聚类算法对比

参考文献：
数据挖掘概念与技术第三版，，
数据挖掘使用机器学习工具与技术，

，
，笔者也是刚刚获知，迫不及待体验本文的元购买是建立在已经申请好微信小程序且已经认证的用户
前序：大致分为三部分，购买后端资源、资源说明、小程序开发。

一，购买小程序解决方案
官方刚出来小程序解决方案元购买
微信小程序后台设置开发设置服务器域名

首次点击会有一个授权腾讯云的确认操作，授权以后进行下一步类似下面的图，我已经授权成功，我找了一个登录图，

网站会直接引导到小程序解决方案开通的画面，填写好我们自己的小程序和密钥小程序后台可以查到达到条件首次使用腾讯云的用户，两个月的价格是元，对你没看错就是块钱，白菜价。支付画面当时没有截图，给一个账单明细看下。

我这里选择默认环境配置当然你也可以选择你自己熟悉的环境，支付成功以后，系统会进行环境初始化

会把小程序需要的所有环境一并弄好预计耗时分钟，资源完全创建好以后会以短信和站内消息通知，并告知密码。

二大牛请漂过资源说明：
腾讯云小程序解决方案给的是后端一整套，这是对开发者是省心多了。
各个资源的有两种方式：
一个是在当前小程序解决方案的总览处看到

当然也可以在顶部云产品看到：

域名以及证书：
创建资源的时候，会自动创建一个二级域名，，
负载均衡：
，此域名绑定的是，腾讯云的负载均衡服务

负载均衡里已经添加好了一台云服务器负责业务

云服务器：

云数据库：

到此资源也了解差不多了，管理资源的密码站内通知了，可以前去查看，这里要注意正式上线的项目要把密码改一下
三后续小程序的配套开发
小程序解决方案也替开发者想好了，

其实大致分三块，

配置域名，在小程序后台上，此处注意域名写法



部署业务服务这个已经自动创建好了也配置好了单纯测试的话，足够了，如果是真正运行有些参数需要再次修改一下，你可以选择你熟悉的语言



开发小程序，下载小程序，修改根目录下的，域名=我们自己的域名，导入项目即可


点击项目预览，用我们开发者身份二维码扫描就可以体验了！

相关推荐
新增线下、、公众号多处入口，小程序会再火起来么？内有福利
免费体验腾讯云服务器
小程序发布后最全解析！是基于开发的，可以在上跨平台运行，接下来我们来看看如何在上使用托管运行，通常我们在部署应用，按照微软的官方文档，我们通常需要搭配，并没有接管进程，我们需要维护个进程，增加了复杂度。如果你把部署于上，我们可以用来接管进程，我们在上也可以用来达到一样的体验。
安装运行时
按照官方文档：运行以下命令，安装

=


安装
按照《下安装》安装好了我这里是安装通用版的，通用版的才能使用到我们自己安装的最新版的。安装直接使用一下命令即可需要在身份下执行
|
安装成功后会提示：

备注：你可以直接安装独立版的，独立版的自带，使用的是的稳定版本，安装命令也是一个命令就可以搞定：|

发布
数据库
我使用的是腾讯云的云数据库是腾讯云基于全球最受欢迎的开源数据库专业打造的高性能分布式数据存储服务，完全兼容协议，适用于面向关系型数据库的场景。
默认使用的是官方的驱动，由于官方的驱动有很多问题，目前还是版本，最近也不见更新，我在生产环境使用的是，我的驱动更改为，经测试工作良好，我已经把相关修改给。扩展包系列包括和，推荐大家使用，经过了实际项目的检验。
的数据库脚本只有将数据库转换为的工具非常多，这里不做具体介绍了。
发布
发布比较简单，双击即可。

生成的文件在目录\\\\\。
修改连接字符串
打开，加入的数据库连接字符串，结果如下
{
{


==_==
}
{

}
{

{



}
}
{


}

}
上传服务器
我们将发布好的程序同程序上传到服务器目录，具体操作可参考文章《使用软件在和中进行文件传输》

配置运行
定位到目录，然后使用命令运行


运行成功以后，就可以使用您服务器的或者域名访问了，默认访问的端口是退出远程连接客户端后，发现访问不了，这是因为也退出了。下面我们就通过来管理我们服务进程。
使用以下命令：
、切换到配置文件目录、复制默认的配置文件为、编辑配置文件




=
=
=

={
=
=
=
}
配置的重点就在于中，需要注意的是在中的端口号不代表对外服务的端口号而是指要转发的应用程序的端口号，如果在程序中使用了自定义端口则使用中填写的端口不建议使用自定义端口在没有使用自定义端口的情况下端口号设置为，会在运行时与进行协商具体使用的端口号，避免多个应用分配，端口的麻烦和冲突的风险。简单来说就是会将外部的请求转发到这个端口，由这个端口对应的应用程序对请求进行处理。
、启动重启
当配置文件编辑完成后使用以下命令对进行启动重启
如果已启动：


如果未启动：

启动重启成功后，在浏览器中输入地址域名端口号例如即可访问应用程序。
以上即是托管应用程序的配置全过程这里要讨论的话题，不是前端框架哪家强，因为在官网就已经有了比较全面客观的介绍，并且是中文的。

上图是二月份前端框架排名，位居第一，排名第三。还清晰记得，年十月份该首页并未看到，如今已有，那时的也差不多这个成绩，可见有多受关注，而排名第二的当时位居第一，短短数月、都有比较好的成绩，而的没有明显增长，是否可以断章取义，正在慢慢地退出这个舞台。
对于近期关注度最高的和，想在这里谈谈两个框架在开发风格上的差异。升级到之后新增了很多原有的特性，我的理解是在这些方面对的肯定和致敬，下面将在几个细节上作对比。
更容易上手
更容易上手！这是真的吗？我书读的少，作者是想支持国产吗？
的语法很自由，比如：

前期不需要认识复杂的生命周期函数，可能只关心和保证在中

熟悉的前端模板

父子组件间通信更灵活

，可以大尺度地扩展组件但也不要过度使用哦

，的方式处理表单更方便

官网中文文档哈哈，不得不承认


从入门学习一个框架的角度看，少一些规则多一些自由空间，门槛会低些。
表单在中的蛋疼之处
和如何拿的，先上代码

{
{

={


}
}
_{
{

}
}
_{
{

}
}
{



={_}
={}


={_}
={}



}
}






=

=
=

=
=


=




{

{


}
}
进行表单处理的方式是不是更简洁，由于属性支持数据双向绑定，说白了就是的单向绑定事件监听的语法糖，但这个味道还不错吧，比起在中需要绑定多个事件确实要方便得多。

刚接触，因为用惯了模板引擎，一直坚信视图与功能逻辑分离是正确的选择，突然看到把写在里，内心是拒绝的！
官方好像知道大家对有偏见，在文档一开始就给出解释

“”“”

在这里结合我的理解翻译一下，团队坚信一个组件的正确用途是“”，而不是前端模板或者展示逻辑。我们认为前端模板和组件代码是紧密相连的。另外，模板语言经常让展示的逻辑变得更复杂。
刚开始没弄明白什么是“”，其实现在也…可能是在强调组件应该从功能上去抽象定义，而不仅仅从视觉上区分。

看完官方答复我欣然接受了，有谁在写前端模板的时候，没有掺杂业务逻辑的，掺杂了不就违背吗！觉得这种“分离”让问题更复杂，不如把模板和逻辑代码结合到一块。而开发者一开始不接受，是受到传统拼接字符串模板的死板方式影响，其实更灵活，它在逻辑能力表达上完爆模板，但也很容易写出凌乱的函数，不如模板直观

组件通信
组件向上通信可通过触发事件，但在废弃，建议使用。而大多初学者以为只能靠调用父组件的，并且这种方式遇到组件层次太深的时候简直就是噩梦。其实也可以通过事件通信来解决问题，只不过需要额外或调用第三方插件，而的核心库已实现了该功能。拥有丰富的生态圈，很多事情是大家一起完成的。

父组件可通过定位子组件并调用它的，也可通过传递数据，实现父组件通知子组件，和这两种方式将决定组件的形态。在实际开发中，可能先入为主，也用的比较多，因为它在组件封装力度上确实有优势，可让组件更抽象、更关注自身的功能，不受外界影响。而后来转到几乎都是用通信，一开始还以为是的问题，甚至还得出了这样的结论：组件像是组件，组件更接近对象。直到最近看了文档，才发现另有蹊跷。先看看之前用，我是如何去创建一个列表组件，并实现列表数据的新增和删除，以及调用方式。
没用过的同学，可以先看下文档，不过看完下面代码也能大概知道的作用。

=

=

=
=


=




=


={
{
{

{}
}
}
={{}}=
{
{

}
}
{
{
{}
}
{

}
}
}



{

{

}
{
{

}
}
}
再看看是怎么做的
{
_{

}
{


{
={


={}

{}
={_}




}
}


}
}

{
{

={


}
}
_{
{

}
}
_{


}
_{


}
{



={_}
={}


={_}




={}
={_}



}
}





通过上面两段代码可以看出，在调用组件的时候，比复杂的多，不仅仅是多了，还有新增和删除的逻辑，都必须在父组件中实现，这样会导致项目中多处调用组件，都必须实现这套相似的逻辑，而这套逻辑在中已封装在组件里，这也是为什么利用在封装力度上有优势，所以给我的感觉，比较关注组件的展示，而比较关注功能。
细心的同学可能发现了，也有属性，它也可以让父组件调用子组件的，但实际项目中却很少看到，为什么大家都这么同步一致呢？我查了一下文档，原来不推荐过度使用

“”“”

官方还有个栗子，这里我也举个比较常见的基于上面的栗子，比如现在列表数据多啦！需要在列表顶部显示有多少条数据！我们可以定义一个显示条数的组件。

=
={
{
{

}
}
{{}}
{
=
{

}
{

}
}
}


=={


{}


}
如按照的实现方法好吧！这里好像要黑，其实是我一开始的误解，组件需监听两个事件，在事件回调中去更新条数，当进行或需触发，且不说组件复杂，这事件流也很难追溯，代码放久看着吃力！但把共享数据抽离了，父组件把通过传入，这种方式逻辑更清晰，扩展能力更强。虽然像这种，在不需要组件共享数据时，调用起来很繁琐，调用时逻辑都要写一遍，但业务的发展很难说，很多意想不到的情况都会发生，比如上面的栗子，后期指不定还要加一个分页组件呢，所以我悬崖勒马，以后不管在还是，尽量少用调用子组件。当组件之间有共享数据时，该数据与操作该数据的逻辑，应该放在最接近它们的父组件，这样组件的逻辑会更合理，更清晰！
最后，这两个框架的路线有差异，偏向大而全，把很多特性都封装进核心库，则不同，核心库只是生态圈很小一部分，只负责这个层面，其它事情都是由大家一起完成，所以会有这么多插件。和都是伟大的框架！引语截止年月月，《战狼》的票房已经在预期中超越了中国年度票房总冠军《美人鱼》，并且已有各方大神从各个角度去预测，《战狼》的票房或将超越亿，创下中国电影票房历史新高。


无疑，《战狼》在暑期档，或者可能是整个年度的成绩都是瞩目的，甚至可以说是一部爱国主义的现象级电影作品。
以下，我们尝试用目前获取的大数据去评价分析这部电影背后的超高票房以及贡献票房的人群。
观影人群

收获一二线固定观影人群的好评戳中三四线临时观影人群的点

中国电影市场极速扩张，随着中国加入，要求每年必须引入指定数量的进口影片，大约是部年。
伴随大片的引进也逐步养成了用户走进电影院观影的习惯，观影人群中有的用户每年观影次以上，这部分人群以一二线城市为主，我们称之为固定观影人群，他们贡献了中国年票房的。
《战狼》的成功无疑要感谢被众多高质量大片培养出来的观众。
值得一提的是，后群体已成功超越后成为新一代票房主力军，这些年轻人热忱度高，在观影、互动等方面表现活跃，显示出对票房的巨大影响力见下图。

图截止至《战狼》全国受众年龄占比
此外，随着银幕数扩大，一二线城市已接近饱和，三四线主流商圈正被开发。
三四线城市的用户没有固定的观影习惯，我们称之为临时观影人群，其观影特点包括：比较抵触英文原版电影、对电影兴趣浓厚、关注电影主创阵容。
《战狼》很符合这些用户的口味，弘扬主旋律、彰显中国男人的智慧与阳刚，完全可以与美国的队长、蜘蛛侠等大银幕英雄一决高下。
这一点，我们可以在大数据中明显观察出：平时普通国产片的三四线城市观影用户占比，在《战狼》在三四线城市占比为。

图截止至至《战狼》票房构成
上映档期

暑期强档建军周年国际大片排期少

电影的上映时机也是票房走高的一大因素。年票房冠军《捉妖记》在暑期档上映，年《美人鱼》在春节上映斩获票房头筹，年《战狼》选择在暑期档上映也是明智之举；此外，今年为建军周年，爱国主义的主旋律被强调和突出，配合建军周年阅兵仪式的举行，国民的爱国情绪和民族自豪都达到了一个小顶点，需要这样一部凸显民族自信和大国力量的作品；
再有，今年月份国际大片排期少，减少了好莱坞大片对票房的冲击。
市场红利

电影市场规模持续扩大带来银幕红利不断增加

业界经常使用银幕数这个指标来衡量电影市场的规模，基本上每个电影院都由多个放映厅组成，每个放映厅都只有一个用于投放影片的银幕。
单个影院的银幕数量=影院放映厅的总数中国总银幕数量=全中国所有电影院的放映厅数的总合
影院的电影必须通过银幕来投放，一个银幕一天能放上场左右电影。若电影院数量或银幕数量没有增长，则我们每天能看到的电影场次就是有上限的。那么在影院上座率保持不变的情况下，银幕数不涨则年度总票房也不会涨。
目前国家在加大影院建设，近几年的银幕数复合增长率都在左右。银幕数的增涨现象称为银幕红利，年的银幕数预计比年多出，即在影院整体上座率保持稳定的情况下，年的全年总票房会因为银幕红利的存在比年的总票房高出左右。
简单来说，如果美人鱼在今年上映，票房理论是为：
亿元≈注：《战狼》此时银幕数约为万块左右。前冠军《美人鱼》票房为亿当时中国银幕数约为万块
下图数据显示了近年来我国银幕数量的增长情况。自年以来，全国银幕数一直保持稳定增长，平均年复合增长率达。

银幕红利的存在导致观影人数逐年增多，观影人数多了便导致全年票房的逐年增多。下图显示我国每年票房与观影人数的变化趋势。预计年的总票房为亿。

我们再换张图，看得更明显。下图为每年票房增幅与观影人数增幅比例，两者相关性为，高度相关。

上图中年票房增幅只有，结束了中国电影市场持续多年的的票房增长率。该年电影票房骤冷，跟电影质量下滑有一定关系，下图整理了近几年院线公映的国产片数量及其在豆瓣上的平均评分，可以看出影片质量在逐年降低。

回到《战狼》票房的问题上。在两者银幕数相差的情况下，单纯的比较票房略显简单粗暴。
如何排除掉银幕红利的影响对票房进行比较？
可引入每银幕观影人数公式=观影人数银幕数这个指标来评估每块银幕的平均观影情况，抵消银幕数增长带来的影响。通过每块银幕放映的同一个电影被多少人看过来反映影片的受欢迎程度。数据如下表：

该表中《战狼》的每银幕观影人数为人该值仍在上涨，尚不及《美人鱼》的人，但其场均人次的成绩已经遥遥领先其他历届票房冠军。

年张艺谋凭借《英雄》这部电影在当时只有多块银幕时拿下亿的票房是何等的威风，以元票价计算当时观影人数多万，每银幕观影人数达到人。

若中国的银幕红利一直持续，新片票房的长江后浪推前浪将是必然趋势，未来定会有其他影片超越《战狼》的票房。
加分题：银幕红利能持续多久呢？
我们可以跟美国做个对比，美帝近几年的年票房都在亿美元左右都保持稳定，其亿的人口拥有万块银幕，平均人一块。把这个比例搬到中国则银幕数应为万块。
但中国经济发展并不均衡，国内一二线城市的票房贡献占比超过，故根据城市规模等各种情况预估中国银幕数达到万块就不会有太大上涨空间。
目前国内银幕数以每天块速度保持增长，预计年底银幕数能达到万块，年达到万块后银幕红利消失，票房市场才会保持稳定，票房指标才更有可比性。
从整体上看：年上半年全国总票房亿，平均每个月为亿。《战狼》上映天，狂揽亿，着实体现了观众对于高质量电影的喜爱。《战狼》票房突破亿甚至亿，并不是什么奇迹，而是各类因素的叠加。
当然除去以上分析的因素，电影本身的精良制作和影人的拍摄诚意自然也是《战狼》票房创下新高的原因，期待未来的国产电影越来越棒！

“写在结尾：
月日昨晚时分，在四川阿坝州九寨沟县北纬度，东经度发生级地震，震源深度千米。
截至日发稿，已确认造成人死亡，受伤人。
面对灾情，除了祈福，我们也呼吁不传谣、不信谣，理性救援，不盲目前往灾区。
天佑我中华！

文章来源：【腾讯大数据】微信号：腾讯云社区是一个面向开发者的技术分享型知识社区。我们希望您在社区上交流、分享、学习。欢迎您使用腾讯云社区功能下称：本功能！用户也称：您在使用本功能前请认真阅读以下规则下称：本规则：一【相关定义】社区功能：指腾讯所有、运营及管理的供具有技术爱好者的用户进行分享、交流的平台，简称为：本功能。以技术内容分享为基础建立的社区平台，称为腾讯云社区。腾讯在本功能中，向用户提供信息存储空间以及平台搭建等相关的技术服务，社区中的内容由用户自行发表产生，与腾讯无关。用户：本协议中的用户包括使用本功能的全部各类用户二【协议范围】本协议是您和腾讯云之间关于您使用本功能所涉相关事项的法律协议。三【使用规则】用户在使用本功能时须遵守法律法规，不得利用本服务从事违法违规行为，包括但不限于不得发布、传送、传播含有以下内容的信息：反对宪法所确定的基本原则的；危害国家安全，泄露国家秘密，颠覆国家政权，破坏国家统一的；损害国家荣誉和利益的；煽动民族仇恨、民族歧视、破坏民族团结的；破坏国家宗教政策，宣扬邪教和封建迷信的；散布谣言，扰乱社会秩序，破坏社会稳定的；散布淫秽、色情、赌博、暴力、凶杀、恐怖或者教唆犯罪的；侮辱或者诽谤他人，侵害他人合法权利的；煽动非法集会、结社、游行、示威、聚众扰乱社会秩序的；以非法民间组织名义活动的；含有虚假、有害、胁迫、侵害他人隐私、骚扰、侵害、中伤、粗俗、猥亵、或其它道德上令人反感的内容；含有任何与部落主题不相关的任何内容与部落主题无关的信息，包括但不限于各种商业、广告、垃圾或骚扰等内容；含有附录具体所示的违法、色情、低俗、广告诈骗及侵犯他人隐私等信息具体见附录含有其他违反相关法律、法规、规章、条例以及任何具有法律效力之规范所限制或禁止的其它内容的；含有其他违反社会公德、公共利益、相关协议规则或其他可能会被认为不适当的内容。用户不得在社区内发布任何形式的广告，包括但不限于：发布带有任何有联系方式的网络创业、网络兼职、刷币以及中奖信息；发布任何带有联系方式的银行卡代办、买卖发票、非法彩票等信息；含有联系方式的黑客、收费删帖、办证刻章等违法信息；您理解并同意：腾讯云及社区运营人员等对社区有一定管理权限的人，对于有任何违反相关法规、本规则、规范等的用户，有权采取删除、屏蔽相应违法违规内容的处理措施，并有权根据情况对相应的用户采取中止、终止您对相应腾讯云账号在社区内的使用权限，中止或终止您在本功能中发表内容的权限等措施前述对用户采取的措施统称为“拉黑”。若您违反本规则，腾讯云及社区运营人员等对社区有一定管理权限的人，对您采取任何措施，若造成您任何损失的，您应自行承担；若您的行为导致任何第三方或腾讯云损害的，您应当独立承担责任和赔偿损失，并承担由此给腾讯云带来的一切损失。您清楚和同意：您和其他用户在社区中发表的任何内容均仅代表您和其他用户的自己观点，与腾讯云公司无关；您应自行保证您发表内容的真实性、合法性和有效性；您应对使用本功能时接触到的内容自行加以判断，并自行承担因接触、使用内容而引起的所有后果、风险，包括因对内容的正确性、完整性或实用性的依赖而产生的风险，腾讯云无法且不会对您因前述风险而导致的任何损失或损害承担责任。任何用户除享有按照腾讯的相关规则所约定的权限之外，其他的与所有类型社区相关的所有权、经营权、管理权等全部权利均归腾讯云单方所有。用户仅享有按照腾讯的相关规则所约定的管理、使用权限，腾讯有权根据整体运营情况收回用户对腾讯云社区使用权限或者采取拉黑等措施。四【关于网络知识产权】、用户在社区上发表的全部原创内容，著作权均归用户本人所有。用户可授权第三方以任何方式使用，不需要得到社区的同意。、腾讯云社区提供的网络服务中包含的标识、版面设计、排版方式、文本、图片、图形等均受著作权、商标权及其它法律保护，未经相关权利人含腾讯云社区及其他原始权利人同意，上述内容均不得在任何平台被直接或间接发布、使用、出于发布或使用目的的改写或再发行，或被用于其他任何商业目的。、为了促进其创作内容的分享和传播，用户将其在社区上发表的全部内容，授予腾讯云社区免费的、不可撤销的、非独家使用许可，社区有权将该内容用于腾讯云社区各种形态的产品和服务上，包括但不限于网站以及发表的应用或其他互联网产品。第三方若出于非商业目的，将用户在腾讯云社区上发表的内容转载在社区之外的地方，应当在作品的正文开头的显著位置注明原作者姓名，给出原始链接，注明「来源于腾讯云社区」，并不得对作品进行修改演绎。若需要对作品进行修改，或用于商业目的，第三方应当联系用户获得单独授权，按照用户规定的方式使用该内容。、腾讯云社区为用户提供“保留所有权利，禁止转载”的选项。除非获得原作者的单独授权，任何第三方不得转载申明了禁止转载的内容，否则均视为侵权。除非获得原作者的单独授权，并邮件通知社区邮箱：，任何第三方不得转载标注了「禁止转载」的内容，否则均视为侵权。、在社区上传或发表的内容，用户应保证其为著作权人或已取得合法授权，并且该内容不会侵犯任何第三方的合法权益。如果第三方提出关于著作权的异议，腾讯云社区有权根据实际情况删除相关的内容有权追究用户的法律责任，给社区或任何第三方造成损失的，用户应负责全额赔偿。、如果任何第三方侵犯了社区用户相关的权利，用户同意授权腾讯云社区或其指定的代理人代表社区自身或用户对该第三方提出警告、投诉、发起行政执法、诉讼、进行上诉，或谈判和解，并且用户同意在腾讯云社区认为必要的情况下参与共同维权。、腾讯云社区有权但无义务对用户发布的内容进行审核，有权根据相关证据结合《侵权责任法》、《信息网络传播权保护条例》等法律法规及社区指导原则对侵权信息进行处理。对于经用户本人创作并上传到社区的文本、图片、图形等，社区保留对其网站所有内容进行实时监控的权利，并有权依其独立判断对任何违反本协议约定的作品实施删除。社区对于删除用户作品引起的任何后果或导致用户的任何损失不负任何责任。五【腾讯云社区的投诉处理】当社区中出现与各种问题包括版权纠纷、用户投诉等的时候请将投诉内容发送到中，并注明投诉，我们保证最迟不超过个工作日回复。投诉不得有到处张扬影响社区正常工作的行为。六【其他】本规则是《腾讯云服务协议》和《社区协议内容》的不可分割的组成部分，与其构成统一整体。腾讯云有权在必要时修改本规则，您可以在相关页面中查阅最新的本规则。您的任何使用本功能的行为，即视为您已经阅读并同意本规则及相应更新。完附录：、【违法信息】在社区内以文字、图片、语音或视频等方式发表传播威胁生命健康、具备社会危害性等违法内容。该类内容具体表现包括但不限于：刀具、枪支、高仿真枪支图片、具有高度危险性的节目截图等；殴打他人、以枪支刀具威胁他人的图片等；传播香烟、毒品、抽烟、含有毒品样品、传授毒品吸食或注射方式、讲解毒品制作过程等；宣传传销机构、哄骗用户加入传销组织、或本人组织传销的图片等；自杀、自残、自虐的图片等。、【色情信息】在社区内以文字、图片、语音或视频等方式发表传播色情、淫秽、具有性特征、性挑逗、色情信息的内容。该类内容具体表现包括但不限于：裸露女性胸部全裸、露点、凸点、、男女性臀部、男女大腿内侧及生殖器官、穿着透视装等图片；与他人进行互相性挑逗的动作，使用性用品、相互抚摸敏感部位、进行能让人产生性幻想的动作、在床上以任何抚摸、亲吻的动作等图片；衣冠不整、穿戴浴袍、内衣裤等非公众场合衣物等图片；耍酒疯、酣睡、钢管舞、脱衣舞、低俗的类妆容、不雅等姿态图片；穿着过于暴露：男性赤裸上身，女性着透视装、肉色紧身内衣、露出乳沟、乳晕、胸部的服装、三点式露脐泳装、长度短于大腿的裙子、性感睡衣裙、内衣裙、三角短裤、三角连体裤等图片。、【低俗信息】包括但不限于在社区内以文字、图片、语音或视频等方式发表传播低俗信息：宣传以及涉嫌宣传与主流价值观不符、低级趣味如黄色笑话、婚外情、一夜情、约炮等信息；、【广告信息】包括但不限于在社区内宣传涉嫌交易倒卖、招聘兼职、网购店铺、商业广告、游戏私服外挂辅助脚本等信息；、【诈骗信息】包括但不限于在社区内以文字、图片、语音或视频等方式发布诈骗信息：冒充官方或其他机构或个人；诈骗、骗取他人财物、账号、增值服务，币等虚拟物品；、【侵犯他人隐私】包括但不限于在社区内侵犯他人隐私，危及公众利益，未经当事人同意，公开他人姓名、住址、电话等个人资料及其他隐私信息，并进行网络电话骚扰或鼓动他人骚扰，甚至发布侮辱、谩骂或者诽谤他人，侵害他人合法权益的信息等行为；、【其他行为】头像、昵称、发表图片、正文任一处带有以上广告、色情、低俗、联系方式等内容将被拉黑；多次违反发话题标准且屡教不改者；多次达到话题删除标准且屡教不改者；恶意伤害他人，对他人进行人身攻击者；辱骂管理人员；捏造事实，传播虚假内容；传播反动言论、恶意造成群众恐慌、传播禁止流通的技术重水提纯、高能炸药等。腾讯云商业智能分析产品由北京永洪商智科技有限公司提供，永洪一站式大数据分析平台

制作地图及常见问题
地图在制作报表中很常见，主要功能是展示区域信息，如展示区域销售信息，用户区域分布情况等。这里介绍一下地图的制作步骤及常见的问题。
一、地图制作
地图制作的前提是数据中有区域字段或经纬度字段，区域字段和经纬度字段在制作地图时步骤基本一样。制作地图步骤如下：
、在制作报表处拖拉一个图标组件在编辑区必须

、匹配地图列
选中区域字段右击，转换为地图列

区域匹配
若是用户第一次编辑地图列会弹出提示对话框：地图列是全局属性，继续修改？若选择“是”并勾选“记住我的选择”则修改属性并且以后将不再弹出此提示，若选择“否”则不修改。如果不慎误选了“记住我的选择”，则需先退出产品再清除浏览器缓存，即可。
编辑地理位置：根据区域信息配备正确的地理位置，如下图的区域信息是美国的，在匹配时选择美国即可。注意：精确到省地理信息处选择世界省份国家中国；精确到市地理信息处选择世界城市；精确到区县地理信息处选择世界区县
__
地理数据匹配：下图中问号处，进入地理数据编辑界面，在该界面中显示已匹配数据如果匹配好了所有数据，点击确定即可，如果没有匹配完全，可以在界面上端进行搜索。


在图表中绑定地图列

地图显示形式：点渲染和区域渲染
地图分为两种数据类型，一种是区域数据，一种是点数据，具体名称请参考下表。其中‘自定义’是用户提供的地图数据。

用户可在已绑定字段的下拉列表中选择渲染类型；而点数据只能是点渲染。具体的显示如下图所示：


二、地图常见设置
、实时刷新地图数据
设置获取实时数据，页面空白处右击，属性，高级处勾选获取实时数据

设置刷新数据间隔，地图上右击，属性，设置刷新间隔


、设置地图颜色，地图颜色可以根据不同的数据字段来设置，如根据不同的销售额显示不同区域的颜色。设置方法是将判断字段绑定到标记组中的颜色框中，直接拖动即可。

、设置地图显示图案，地图图案可以根据不同的数据字段来设置，如根据不同产品显示不同区域的图案。设置方法是在标记组中的图案处修改图案，也可帮绑定字段到图案框中，直接拖动即可。

三、制作地图时常见问题
、在区域字段处右击没有转换为地图列选项
答：在转化为地图列之前，一定要先拖一个图表组件在报表编辑区中。
、地图显示不对，并且没有数据

答：出现这种问题，一般是地理数据配备不成功。如果是整个地图显示都有问题，那就是在地理位置编辑出了问题。如果是部分区域显示问题或数据不对，那就是在地理数据匹配处出了问题，定位问题后再排查具体是什么问题。最近年电商行业飞速发展，各种创业公司犹如雨后春笋大量涌现，商家通过各种活动形式的补贴来获取用户、培养用户的消费习惯。
但任何一件事情都具有两面性，高额的补贴、优惠同时了也催生了“羊毛党”。
“羊毛党”的行为距离欺诈只有一步之遥，他们的存在严重破环了活动的目的，侵占了活动的资源，使得正常的用户享受不到活动的直接好处。
今天主要分享下腾讯自己是如何通过大数据、用户画像、建模来防止被刷、恶意撞库的。
黑产现状介绍
“羊毛党”一般先利用自动机注册大量的目标网站的账号，当目标网站搞促销、优惠等活动的时候，利用这些账号参与活动刷取较多的优惠，最后通过淘宝等电商平台转卖获益。
一羊毛党分工
他们内部有着明确的分工，形成了几大团伙，全国在万人左右：

软件制作团伙：专门制作各种自动、半自动的黑产工具，比如注册自动机、刷单自动机等；他们主要靠出售各种黑产工具、提供升级服务等形式来获利。
短信代接平台：实现手机短信的自动收发，其实一些平台亦正亦邪，不但提供给正常的商家使用，一些黑产也会购买相关的服务。
账号出售团伙：他们主要是大量注册各种账号，通过转卖账号来获利；该团伙与刷单团伙往往属于同一团伙。
刷单团伙：到各种电商平台刷单，获取优惠，并且通过第三方的电商平台出售优惠，实现套现。

二“羊毛党”从业特点
这些黑产团队，有三个特点：

专业化：专业团队、人员、机器来做。
团伙化：黑产已经形成一定规模的团伙，而且分工明确；从刷单软件制作、短信代收发平台、电商刷单到变卖套现等环节，已经形成完整的刷单团伙。
地域化：黑产刷单团伙基本分布在沿海的一些经济发达城市，比如，北京、上海、广东等城市，这或许跟发达城市更加容易接触到新事物、新观念有关。

三对抗刷单的思路
对抗刷单，一般来讲主要从三个环节入手：

注册环节：识别虚假注册、减少“羊毛党”能够使用的账号量。在注册环节识别虚假注册的账号，并进行拦截和打击。
登录场景：提高虚假账号登录门槛，从而减少能够到达活动环节的虚假账号量。比如，登录环节通过验证码、短信验证码等手段来降低自动机的登录效率，从而达到减少虚假账号登录量、减轻活动现场安全压力的目的。
活动环节：这个是防刷单对抗的主战场，也是减少“羊毛党”获利的直接战场；这里的对抗措施，一般有两个方面：通过验证码短信、语音降低黑产刷单的效率。 大幅度降低异常账号的优惠力度。

腾讯内部防刷架构
一腾讯内部防刷的架构图

二模块详细介绍
风险学习引擎
风险学习引擎：效率问题。由于主要的工作都是线下进行，所以线上系统不存在学习的效率问题。线上采用的都是实现的等针对大数据的快速聚类算法，基本不用考虑性能问题。
风险学习引擎：采用了黑白双分类器风险判定机制。之所以采用黑白双分类器的原因就在于减少对正常用户的误伤。
例如，某个是恶意的，那么该上可能会有一些正常的用户，比如大网关。
再比如，黑产通过拨号上网，那么就会造成恶意与正常用户共用一个的情况。
黑分类器：根据特征、机器学习算法、规则经验模型，来判断本次请求异常的概率。
白分类器：判断属于正常请求的概率。
矩阵式逻辑框架
我们以黑分类器为例来剖析下分类器的整个逻辑框架。
总的来讲我们采用了矩阵式的逻辑框架，最开始的黑分类器我们也是一把抓，随意的建立一个个针对黑产的检测规则、模型。
结果发现不是这个逻辑漏过了，而是那个逻辑误伤量大，要对那一类的账号加强安全打击力度，改动起来也非常麻烦。
因此我们就设计了这个一个矩阵式的框架来解决上述问题。

矩阵的横向采用了方法，该方法是一种迭代算法，其核心思想是针对同一个训练集训练不同的弱分类器，然后把这些分类器集合起来，构成一个最终的分类器。
而我们这里每一个弱分类器都只能解决一种帐号类型的安全风险判断，集中起来才能解决所有账户的风险检测。
那么在工程实践上带来三个好处：

便于实现轻重分离，比如某平台虚假账号集中在邮箱账号，策略就可以加大对邮箱账号的打击力度，影响范围也局限在邮箱帐号，而不是该平台所有的账号。
减少模型训练的难度，模型训练最大的难度在于样本的均衡性问题，拆分成子问题，就不需要考虑不同账号类型之间的数据配比、均衡性问题，大大降低了模型训练时正负样本比率的问题。
逻辑的健壮性，某一个分类器的训练出现了问题，受影响的范围不至于扩展到全局。

矩阵纵向采用了方法，该方法是一种用来提高学习算法准确度的方法，该方法在同一个训练集合上构造预测函数系列，然后以一定的方法将他们组合成一个预测函数，从而来提高预测结果的准确性。
上面讲的部分东西，理解起来会比较艰涩，这里大家先理解框架，后续再理解实现细节。
腾讯大数据收集纬度
大数据一直在安全对抗领域发挥着重要的作用，从我们的对抗经验来看，大数据不仅仅是数据规模很大，而且还包括两个方面：

数据广度：要有丰富的数据类型。比如，不仅仅要有社交领域的数据、还要有游戏、支付、自媒体等领域的数据，这样就提供了一个广阔的视野让我们来看待黑产的行为特点。
数据深度：黑产的对抗。我们一直强调纵深防御，我们不仅仅要有注册数据，还要有登录，以及账号的使用的数据，这样我们才能更好的识别恶意。

所以想要做风控和大数据的团队，一定要注意在自己的产品上多埋点，拿到足够多的数据，先沉淀下来。
腾讯大数据处理平台－魔方
我们的团队研发了一个叫魔方的大数据处理和分析的平台，底层我们集成了、，、等技术，在用户层面我们只需要写一些简单的语句、完成一些配置就可以实现例行分析。
这里我们收集了社交、电商、支付、游戏等场景的数据，针对这些数据我们建立一些模型，发现哪些是恶意的数据，并且将数据沉淀下来。
沉淀下来的对安全有意义的数据，一方面就存储在魔方平台上，供线下审计做模型使用；另一方面会做成实时的服务，提供给线上的系统查询使用。
一腾讯用户画像沉淀方法
画像，本质上就是给账号、设备等打标签。
用户画像＝打标签
我们这里主要从安全的角度出发来打标签，比如画像，我们会标注是不是代理，这些对我们做策略是有帮助的。
以的画像为例，比如，一个只登录、不登录其他腾讯的业务、不聊天、频繁的加好友、被好友删除、空间要么没开通、要么开通了空间但是评论多但回复少，这种号码我们一般会标注养号色情、营销，类似的我们也会给打上其他标签。
标签的类别和明细，需要做风控的人自己去设定，比如：地理位置，按省份标记。性别，安男女标记。其他细致规则以此规律自己去设定。
我们看看腾讯的画像，沉淀的逻辑如下图：

一般的业务都有针对的频率、次数限制的策略，那么黑产为了对抗，必然会大量采用代理来绕过限制。
既然代理的识别如此重要，那我们就以代理为例来谈下腾讯识别代理的过程。
识别一个是不是代理，技术不外乎就是如下四种：

反向探测技术：扫描是不是开通了等代理服务器经常开通的端口，显然一个普通的用户不太可能开通如上的端口。
头部的__：开通了代理的可以通过此法来识别是不是代理；如果带有信息，该是代理无疑。
报文：如果带有的报文，该毫无疑问是代理。
查看上端口：如果一个有的端口大于，那么该大多也存在问题，普通的家庭开这么大的端口几乎是不可能的。

以上代理检测的方法几乎都是公开的，但是盲目去扫描全网的，被拦截不说，效率也是一个很大的问题。
因此，我们的除了利用网络爬虫爬取代理外，还利用如下办法来加快代理的收集：通过业务建模，收集恶意黑产使用代理的可能性比较大然后再通过协议扫描的方式来判断这些是不是代理。每天腾讯都能发现千万级别的恶意，其中大部分还是代理。
二腾讯用户画像类别概览

三防御逻辑

实时系统使用开发实现，所有的数据通过共享内存的方式进行存储，相比其他的系统，安全系统更有他自己特殊的情况，因此这里我们可以使用“有损”的思路来实现，大大降低了开发成本和难度。
数据一致性，多台机器，使用共享内存，如何保障数据一致性？
其实，安全策略不需要做到强数据一致性。
从安全本身的角度看，风险本身就是一个概率值，不确定，所以有一点数据不一致，不影响全局。
但是安全系统也有自己的特点，安全系统一般突发流量比较大，我们这里就需要设置各种应急开关，而且需要微信号、短信等方式方便快速切换，避免将影响扩散到后端系统。
四接入系统
适应的场景包括：

电商刷单、刷券、刷红包
防止虚假账号注册
防止用户名、密码被撞库
防止恶意登录


：风险学习引擎是自研的，还是使用的开源库？
风险学习引擎包括两个部分，线上和线下两部分：
线上：自己利用来实现。
线下：涉及利用开源库来做的，主要是一些通用算法的训练和调优。
：请问魔方平台中用到的是不是经过改造？因为一直不被看好，出现问题也比较多。
我们做了部分改造，主要是的引擎方面。
：请问黑分类器和白分类器有什么区别？
白分类器主要用来识别正常用户，黑分类器识别虚假用户。
：风险概率的权重指标是如何考虑的？
先通过正负样本进行训练，并且做参数显著性检查；然后，人工会抽查一些参数的权重，看看跟经验是否相符。
：安全跟风控职责如何区分呢？
相比安全，风控的外延更丰富，更注重宏观全局；针对一个公司来讲，风控是包括安全、法务、公关、媒体、客服等在内一整套应急处理预案。
：如果识别错了，误伤了正常用户会造成什么后果么？比如影响单次操作还是会一直失败。
如果识别错了正常用户不会被误伤，但是会导致体验多加了一个环节，如弹出验证码、或者人工客服核对等。

作者：颜国平，原腾讯云－天御系统研发负责人。一直负责腾讯自有验证码、业务安全、防刷、账号安全等研发工作。内部支持的产品游戏、电商、腾讯投资的企业非常广泛。在业务安全领域项目经验丰富，并且具备深度学习、大数据架构搭建等实战经验。


相关推荐
天御打击羊毛党方案
大数据解决方案在数据分析的过程中，我们经常需要对数据建模并做预测。是机器学习中一个长盛不衰的模型，其主要思想是利用弱分类器决策树迭代训练以得到最优模型，该模型具有训练效果好、不易过拟合等优点。在工业界应用广泛，通常被用于点击率预测，搜索排序等任务。也是各种数据挖掘竞赛的致命武器，据统计上的比赛有一半以上的冠军方案都是基于。
属于集成学习模型，它基本思想是把成百上千个分类准确率较低的树模型组合起来，成为一个准确率很高的模型。这个模型会不断地迭代，每次迭代就生成一颗新的树。然而分类器的速度实在是太慢了。为了解决这一问题，应运而生：最大的特点在于，它能够自动利用的多线程并行计算，同时在算法上加以改进提高了精度。因为计算速度快，精确度高，在和天池等数据挖掘竞赛中的逐渐成为大杀器。但是去年，迎来了一个重量级挑战者：。

去年年月，微软开源了，地址：。该项目刚开源就被受到热捧：三天之内上被了次，了次；知乎上有近千人关注“如何看待微软开源的？”。接下来简单介绍下这个号称“性能超越其他”的学习模型及其编译和安装方法，以及开启的支持。
全称：，是一个基于决策树算法的快速的、分布式的、高性能、、或框架，可被用于排行、分类以及其他许多机器学习任务中。
是一个梯度框架，使用基于学习算法的决策树。它是分布式的，具有以下优势：
更快的训练效率低内存使用更好的准确率支持并行学习可处理大规模数据
在实际使用的过程中，给我一个最直接的感觉就是的速度比快很多，下图是微软官网给出和其他学习模型之间的比较：

原理简介
现有的工具基本都是基于预排序的方法的决策树算法如，虽然是个强力的模型，但却有着一个致命的缺陷，不能用类似的方式来训练，需要对数据进行无数次的遍历。如果想要速度，就需要把数据都预加载在内存中，但这样数据就会受限于内存的大小；如果想要训练更多的数据，就要使用外存版本的决策树算法。虽然外存算法也有较多优化，也在普及，但在频繁的下，速度仍然比较慢。

是一个实现算法的框架，在算法之上，进行进一步的优化。首先它抛弃了大多数工具使用的按层生长的决策树生长策略，而使用了带有深度限制的按叶子生长算法。

除此之外，还对类别特征的支持进行了优化，可以直接输入类别特征，不需要额外的展开，并在决策树算法上增加了类别特征的决策规则。的单机版本还有很多其他细节上的优化，比如访问优化，多线程优化，稀疏特征优化等，这就让参赛者省去了调参和处理的麻烦。
安装教程：
准备：和。本教程假设你已经安装好和，然后克隆仓库到本地：

然后根据_教程编译文件和文件。注意配置选项一定选好，只有按照教程生成正确的和文件，才能成功安装包。
然后进入到目录，笔者的目录是：
\\\

然后打开窗口，直接执行命令：

此时在输入，然后，如果不报错，证明安装成功！

现在最新的包已经更新到了版本，支持的自动寻优调参，大家可以试下：


__
_

==_==_=

_={
_
_
_
}

_={_}
=__=__==
__


__
更多教程见：_问题
有位同学问我，在类似场景下，需要将两个表名对调，怎么才能确保万无一失呢？
分析
估计其他同学就笑了，表名对掉还不简单吗，相互一下嘛。
但是，我们想要的是同时完成表名对调，如果是先后的对掉，可能会导致有些数据写入失败，那怎么办？
回答
其实也不难，从手册里就能找到方法，那就是：同时锁定个表，不允许写入，然后对调表名。
我们通常只锁一个表，那么同时锁两个表应该怎么做呢，可以用下面的方法：





看到了吧，其实很简单，两个表同时加表级写锁，然后用语法改名就可以了。
废话挺多的，谢谢各位客官耐心看完：本文来自于深圳站的演讲《基于的微服务生态系统与工程实践》，时代公众号连续三篇文章详细解读与微服务的秘密。
作者简介：


王磊
华为中央软件院首席软件工程技术专家
国内首批认证讲师，《》中文译者。
并著有国内首本微服务架构相关书籍《微服务架构与实践》一书。

前言
从年开始，当我接触微服务之后，我发现在微服务的演进过程中，开发和测试、运维需要相亲相爱，紧密合作，才能取得理想的效果。
本系列文章主要包括三部分内容：

第一部分：微服务与；
第二部分：微服务生态系统；
第三部分：微服务架构的工程实践；

本文着重介绍第一部分：微服务与。后续内容请持续关注时代公众号。
我在年的时候接触到一个海外项目，当时客户希望用微服务架构、、持续架构来做数字化转型。
经过一年多的时间，我们将客户的核心业务拆分成几十个服务，并对持续交付、团队组成做了很多的改进，带来的效果是显著的，从原有的四个月的交付周期，提升到随时按需发布。
在年底的时候，我出版了国内第一本关于微服务架构相关的中文书籍，叫《微服务架构与实践》，同时我也是《》的中文译者之一。
一、什么是“微服务”
微服务这个词从年开始在社区兴起，这是去年的国外一个比较活跃的开发者社区，对多家企业包括北美的、欧洲、亚太的做的调研报告。

在这份报告里提到，已经接近的企业在使用微服务架构，而的企业目前正在试验开发和测试微服务架构。剩下的的企业正在积极学习和拥抱微服务架构。
从这个数据来看，随着应用系统变得越来越复杂，我们的交付周期变得越来越短，市场的不确定性越来越高，微服务架构正在成为帮助我们提升应用架构层面的核心竞争力。

这篇文章是在年在他的博客上定义的什么是微服务架构。
我们过去的软件都是单体应用，就是指虽然在架构设计上将应用分层。比如典型的三层架构。
对于这类应用，虽然从逻辑层面上划分成多层，但是在运行层次上只有一个进程在运行程序，这就是单体应用。
而微服务架构是将单体应用拆分成多个小的服务，每个服务能够独立开发、更新和部署，同时服务之间能够通过轻量级的协议去做协作。
轻量级协议是指跟语言无关、平台无关的协议，今天我们在业界里面用得最多的协议就是。每一个服务都能够被独立部署到类生产环境、生产环境或者其他我们定义的环境。
在这个定义出来之后，在社区引发了很大争论，什么叫“小的服务”？我们怎么理解“小的服务”？
记得在年推特专门有一场争论是关于如何定义小服务，当时提出的建议是通过代码行来定义小的服务。
但是在今天所面临的社区是一个非常多元化的社区，我们有各种语言，面向对象的、面向过程的，面向函数式编程的，每一种是不一样的，所以很难决定我们的服务是不是够小。
第二点，很多人提出如果我的服务在很短时间内被重写，是不是认为应该算一个比较小的合适的服务呢？对于重写这个事情也有比较大的场景化。比如说我们的工程师对业务的理解、工具的熟悉程度，都会影响到我们来如何定义这个“小”。对于“小”的定义，我们很难清晰的描述一个标准来决定什么是“小”，但是在演进过程中，尤其是服务化过程中，在一开始我不建议划分成很细的服务，因为它会为我们带来很多后续的瓶颈。
最后是独立的部署，这也是在社区被很多人误解。对于软件开发而言，很多年以前一直在讨论模块化编程，因为我们有等等，都是帮我们模块化软件的方式。但到了今天，随着业务变得越来越复杂，我们希望能够将需求实现尽快发布出去，让用户使用，所以就演变成能够把这些模块化再抽象一步，做成独立部署的单元。所以这是微服务架构跟过去很多软件开发里最大、最本质的区别之一。
除了以外，还有很多大师做了很多解释。
首先，也是很早定义微服务的人。他曾经就职于，还为金融、保险提供过咨询服务，在年的印度敏捷大会上，他第一次讲到，他们将一百多万行的银行程序，使用了非传统的方式构建，通过持续集成，将这个服务拆分成个，个，个，最后实现交付周期从一年变成一周或者几天，这是最早对微服务的介绍。
第二个是，他所在的公司是，做在线视频服务。在北美三分之一的网络视频流量是来自于这家公司，同时这家公司还制作了一部非常经典的美剧叫《纸牌屋》。在他过去的演进中提到从年到年，将原有的核心系统拆分成了多个服务，同时做了很多的创新，尤其是在开源社区做了很多创新。他的架构师对他们过程的定义，所谓微服务是指：。
最后一位是，他认为微服务架构其实是演进之后的一种新的架构模式。

对于现在很多社区的概念，我们没有办法去给出一个标准化的定义，所以经常会说「一千个读者心中可能会有一千个哈姆雷特」。这是过去我基于自己的理解，对微服务的关键所做的新的阐述所谓“微服务”是指以缩短交付周期为核心，基于所构建的演进式架构。

我们为什么要以持续缩短交付为核心？
这是在美国举办的架构师大会上的一段话，这是业界最先进的架构领域的大会，我们交付特性的速度已经落后于业务变化的速度，这成为阻碍发展和丧失核心竞争力的因素。
随着我们今天软件的世界变得越来越快，很多企业在面临如何去对用户做创新的过程中，交付的频率变得越来越高，我们如何提升我们的效率。
提到持续交付、缩短交付周期。从年《持续交付》这本书诞生以来，它已经开始改变我们对软件交付的理解。如果大家再去翻这本书的时候会发现，那时候这本书的作者已经提到，我们未来所交付软件的方式是希望能够：

第一，缩短我们的交付周期；第二，能够降低我们在交付过程中的成本；第三，能够将我们的质量内置在交付过程中的每一个环节。

如果我们打开软件交付的过程来看，其实发现过去很多方法论的提出，都与缩短交付周期有着密切的联系。从需求阶段最经常提的概念叫，所谓「」是指我们定义需求的时候，先来分析最小、最有价值的需求，将这部分需求尽快上线，来满足用户的期望或者做试验，获取反馈之后再来进行改进，所以是从整体上缩短交付周期的。
之前我们谈到敏捷是讲快速建立反馈闭环，通过我们的，能够让开发人员或者测试人员更好理解，在这个需求的阐述过程中，如何能够有效实现它的特性。
当我们实现了敏捷，当我们实现了持续集成，开发人员已经完成了这个包的构建之后，下一步所面临的，我们如何将它部署到生产环境上，这就是我们解决的最后一公里的问题，它包括我们今天所讲的，包括持续部署。

二、是什么？
「」这个词最早诞生的出发点是希望能够解决软件在交付过程中最后一公里的问题。当我们已经构建了这个发布包之后，如何能够高效尽快将它上线，再往后是监控运营，有很多监控运营方式帮助我们收集用户的体验，核心目的是为了能够更快验证我们的想法，提升我们的交付效率。
但是在持续交付里有一个重要的能力模型，它里面包括持续集成、持续部署、环境管理、数据管理以及松耦合架构。
在过去的四五年期间，我发现在社区上除了松耦合架构以外，对于其他很多模块都有非常多的解决方案。比如说对于持续集成，在年的时候，我们开始帮客户做持续集成的方案，对于持续部署也有一些方案能够解决，同样对于环境管理，我们今天所讨论的发布，大部分都会有开发、测试、类生产和生产环境。
你会发现在过去的很长一段时间里，社区一直在讨论我们如何去更好构建持续交付的能力，但是如果我们回过头来想，我们在之前的这几个模块里已经做了足够多的优化，但是当我们的架构如果无法解耦，还是百万行千万行，我们怎么快得起来。
最早我在接触两百万行代码的项目里，一开始我们没有办法对架构立刻解耦，所以我们曾经花了将近五台服务器去构建一个持续集成，从以前的个小时变成后来的分钟，这是我们解决提升交付周期的方式。我认为微服务架构其实是从松耦合架构的角度考虑如何以持续交付，缩短交付周期为核心的解决方案。
为什么基于？
开发人员的天性是希望能够用一些先进的语言，更高效的工具去实现我们的业务特性。但是对于运维人员，我们是保证生产环境能够准确无误的运行，所以这个协作过程中必然出现冲突。
我过去接触过一些项目，当开发人员完成代码的提交验证之后，这个包就放在代码仓库里，这时候开发人员需要做的很多事情是，我需要去定义一个清晰的部署步骤，交给运维同事用，再把这个步骤和当前运营的版本交给主管，主管会和运维主管协同协作，确定好之后再排期给真正部署运维的人员。

因为在一个企业里，运维团队都是稀缺资源，可能会负责公司很多产品的运维，所以这个过程中有大量的流程化手动的工作去完成部署，回到微服务架构我们想想，当我们把架构拆成多个可以被独立部署的单元的话，这个流程受到的冲击就非常大，所面临的挑战是很大的，所以对微服务与是相辅相成的。
在体系里，相信这两天大家听了很多关于的介绍，我再总结一下，对于，我认为它的最大几个核心点，就是右边的这四个英文单词。

自动化工具是我们重要的一环，有了工具可以使开发人员通过自服务方式完成部署。但是这过程中更重要的是，我们需要团队在开发运维之间更好的协作，让他们互相了解对方所做的事情。
比如说运维人员有丰富的运维经验，能够将这些经验传递给开发，开发人员可以根据他所理解的这些知识把这些脚本化或者工具自动化。同时对于部署过程而言，开发靠近分析，他更清楚我对这次部署的风险，能够跟部署人员做紧密协作，让部署提前考虑我部署过程中的风险。
同时通过一些监控度量和共享方式，促成的理念和实践的落地，这在整个微服务演进过程中是非常重要的。
什么是演进式架构？
在过去很多年里我们的概念一直认为，架构一旦被确定很难被改变，这是瀑布模型阶段性的影响。因为在瀑布模型里我们有很清晰的架构设计阶段、编码阶段和测试阶段，当我们的架构发生一点变化之后，对后面所带来的成本和反馈周期是非常大的，所以我们在前期对架构要做非常完美的设计，我们定义了一个方框，但是当开发团队在实现的时候，会做各种各样的妥协，因为我们所面临的很多需求在未来是不确定的。

对于过去，当我们只有一种技术栈，我们只需要定义企业的通用平台去满足各种各样的需求，但是对于市场变化莫测的时代，很难再去框这个框，这样对前期成本非常高，也不利于过程中的改进。
所以在社区里对于架构新的理念叫「演进式架构」，它所定义的是希望将敏捷的方式应用在架构层面，将增量式变更作为架构里面必要的一环。提到这个问题大家会想，对于架构而言，我怎么做增量式变更呢？
第一，我们一定要认为架构是对一个软件团队和成本的动态平衡，我们只有在演进过程中，和技术团队、成本、需求紧密结合，不断调整动态平衡。
第二，运维意识很关键。在过去演进过程中，通常是使用去画好架构图，但是在现代的架构快速演进的时代，当我们的服务超过一百个，两百个，三百个之后，是很难诠释微服务架构的。对于架构而言，更多的是对软件静态的抽象，是对当前软件运行的快照，所以对于架构师和我的团队而言，只有当我有了运维意识之后，我能够知道当前我的设计需要快速上线、如何上线，我才能保证我的架构是增量式的。
第三，延迟非重要决策点，也是得益于社区今天所面临的工具是百花齐放。
第四，痛苦的事情提前做，这是敏捷里面最提倡的一点。当我们演进过程中，需要把交付流程里所有手动的过程尽量自动化，帮助我们弱化在这过程中一些痛苦的事情，比如说持续集成、持续交付。

这幅图是在微服务架构领域里非常经典的几个例子，包括像，这是他们在三到五年之中对架构的结果，这张图需要多少架构师设计出来？所以我的架构更多的是通过监控、告警，能够把当前运行的状态快照出来，这是未来的架构演进的方式。所以这三点是我对微服务架构包括我们在架构层面演进的理解。
三、微服务架构的生态系统

微服务架构生态系统更多干货请关注后续文章
四、微服务架构的工程实践
最后是微服务架构的工程实践。这是从到年七年时间，把他的业务从数据中心迁到之后的架构图。对于我们的系统而言，是不是意味着当我们把架构拆分成个、个之后，也能获取到这样收益呢？
这是很多组织和团队在做微服务的时候考虑的第一个问题。如果我们把架构拆成个，个，是否能获得同样的收益？答案是否定的。首席云架构师说过，他们做了大量的关于流程工具和实践的演进。
微服务架构工程实践更多干货请关注后续文章
五、总结

最后推荐几本书，大部分是关于持续交付和的书籍，不管我们如何清晰定义概念的划分，但是实践过程中三者是密不可分的。


本文来自：时代社区业务层播放器架构演变
企鹅端的播放器架构经历过两次较大的调整
第一次是版本，首次引入了以为基础的腾讯视频，替换了之前一直使用的系统播放器，结束了不同机型上表现不一和调用其在不同版本上出现莫名其妙崩溃的历史，点播成功率最终优化到左右，直播的成功率优化到附近。
第二次是版本，使用了的开源播放器内核替换了腾讯视频，到目前最新的版本，点播成功率已经优化到，直播成功率优化到

最近半年包括更换的诸多努力，都是朝着这个方向去的。这个优化过程中，最艰辛的是具体问题的解决，不过回过头从架构上看，也是可以提炼出一些原则，来甄别到底什么样才是一个好的业务播放器。

一套统一的代码，这也是作为一个优秀的业务播放器的必备条件，否则假如建立在系统播放器基础上各个厂商都会修改系统播放器代码，同样的实现在不同的机型上几乎无法做到表现一致，更遑论成功率了常常是改动了调用方式后，在一个机型另一个机型不行，不同系统版本间也有此类问题，所以实现一个好的播放器，第一步就是先统一播放器内核。
完善的错误信息统计，播放是一个复杂的行为，牵扯到数据的预加载，加载，解码和最终给到系统播放，当支持了分片加载和缓存后这个模型就变得更加复杂，于是错误是不能避免的，但最重要的是，如何通过错误的统计上报，能够直指问题的根本，在此基础上，才有空间进一步优化成功率。
播放器内核和业务层足够解耦，只有设计上的解耦，才能给更换更好的播放器内核打下基础，否则如果每次切换都会带来巨大的业务逻辑调整，本身就会引入很多和播放器无关的问题，对成功率优化会适得其反。
和播放器内核对接的功能模块尽可能结构简单，这符合原则，要在可扩展性和模块的结构简单易维护上作出协调，当代码足够简单直白，问题往往会更容易暴露和得到解决。

横向对比中播放器内核：



播放器
代码统一错误统计
接入层复杂度




系统
否
不完善，播放错误码分散而且很多错误错误码相同
高


腾讯视频
是
不完善，过滤日志播放错误转化为业务层错误码
高


谷歌
除以外是
完善，所有错误都通过层异常抛出，直接转化成对应处理逻辑或者业务层错误码
中



注：这里的接入层指的是为了实现完整的业务逻辑，在播放器内核外围的逻辑层
换与奥卡姆剃刀
常做优化的同学肯定很清楚，越是小数点后面的，越来之不易，到再到，这其中的困难可以说是指数上升的。那么是什么东西去鼓动我们换掉已经维护的很成熟的腾讯视频而换用谷歌的呢，动力来自于寻求到个的突破，而思想来自于奥卡姆剃刀原则如无必要，勿增实体。
腾讯视频很完善，具备一切我们需要的功能，但是太过于庞杂最下层是，然后是实现的播放器逻辑，上层一个接口层和部分逻辑。因为发起请求的逻辑封装在播放器底层，所以为了实现分片下载和缓存的策略，增加了一层本地的代理。

这个架构可以完整的实现所有我们要的播放功能，可以处理播放请求，也可以分片下载和缓存，也可以添加音效和改变播放速度，但是问题也有不少：

层的逻辑过多，首先、这部分逻辑不易维护，产生的逻辑问题，主要通过日志来排查。其次、层的逻辑一旦出异常，堆栈极其难以定位到原因，而且就算定位到了，带来的问题也比较棘手。再次、处理数据就必须经过多次传递，这降低了效率。
本地代理带来的结构上的冗余。引入本地代理是因为腾讯视频的请求部分是写死的，无法在其中再加入我们自身的比如文件头压缩和分片下载缓存的逻辑。但是本地代理本身把一个请求的链路拖长了，而且本地同样有这各种各样的断开问题和连接超时问题，实质上增加了整个系统出错的概率。

于是当发现能够很完善解决这两个问题的时候，我们就进行了替换


得益于高度可扩展的特性，我们去除了本地代理模块，将分片加载和缓存以及音频的变速和特效处理模块直接集成进来，砍掉了很多冗余的通信
而且采用了以后去除了大部分的层逻辑，剩下的通信基本都属于系统组件，譬如和，对于实现者来说可以当做透明，目前日登陆百万的用户量来看，在各个机型上兼容性较好，投诉较少目前仅收到两例初始化失败的投诉
纯的实现，也帮助了我们尽可能收归各种错误信息，转换成业务错误码

总体来讲，剔除掉了不必要的逻辑后，代码更加的简洁，而且数据的路径也更加简短，这提升了可维护度和降低了出错概率。
其他的补充手段
仅仅靠换播放器内核和重新设计业务逻辑接入是没法做到极致的，这里还针对点播和广播做了一些额外的优化

是通过抛异常来上报各种播放错误的，起初我们把全部的异常都算在播放错误中，导致播放错误偏高，后来发现这里面很多异常其实是自己代码实现的逻辑问题，需要解决，所以播放错误仅仅应当统计播放下载过程中无法解决的问题，而不应该包括代码的逻辑缺陷，后者应当继续抛出，由上报解决。
和的方法都没有调用的方法，这里我们加上了这个调用，原因在于快速切换节目时，如果不关闭前一个正在进行的连接有可能导致大量连接堆积会耗尽或者是连接池中的资源
针对播放中的异常进行一定次数重试，该问题通常是资源问题或者连接太慢导致，可以通过重试恢复
针对免流带来的连接超时问题，版本加入了针对王卡优先直连联通王卡类支持腾讯免流的策略，也进一步提升了成功率

总结
只要保持代码架构的简洁和解耦，有着良好的错误信息反馈机制，加上长期的问题跟进，打造的成功率也不是难事，对吗。导语：工作中偶尔遇到需要对中文进行分词的情况，不要求非常高的精确度和语境符合度，仅是为了统计某些词出现的热度。本文提供了一种简单易行的中文分词方法。

工作中，偶尔会遇到需要进行中文分词统计的情况，但是并不需要做到高精度时，我们可以使用树，也就是前缀树来实现这个功能。
树，可以叫前缀树，有时也称字典树，是字符串算法中比较常用的一种结构。关于树的概念及其扩展的其他更高效的数据结构，自行百度，这里不再占篇幅。
如果使用树来实现英文单词的查找，那么最终形成的结构，如下图所示来自百度：

同样，如果我们要实现中文的分词，也是同样的原理，将词库中出现的字，依次形成如上图查询树的方式，下边附上实现的代码和搜集的词库，以供大家直接复制粘贴使用。
中文字符串切割：

函数名称_______
功能描述将字符串切分为一个个的字符汉字为一个字符
输入参数待切割的字符串支持编码
输出参数
返回值　字符列表
其他说明
作　　者
创建日期

对于标准编码可用
___
=



对于可能混杂有编码无法解析的字符的字符串可用
____
=
_=
=
_
字符


=

_

=

中文分词包装的类，加了详尽的注释，方便理解，文件用到的汉语词库、停用词库都是网络搜集，可在附件中下载，另外需用到上文的拆字接口。
=



_
_={}
初始化根据词库建立树需要配合词库文件
______=__=
=__
_=

_
_=____
_=


=_
__
_=___{}
=_
=
保存停用词
__=
__
__

分词函数不去停用词
__
_=____
_=
_
_=_
_=当前词
=
_=
__
_=_
___
词结束
___
__保存当前词
结束本次搜索
词未结束

_=__继续深搜
没有这个字开头的词或者这个字与前一个字不能组成词

__
_=__
__保存当前的字

遍历完毕未被则剩余的部分被当作一个词

__

第一个字退出表示没有以第一个字开头的词
==
_=_

如果不是第一个字且因为词语不包含这个字而中断则以这个字作为第一个字再搜索一次
___
_=_

如果不是因为上述原因则从下一个字符开始搜索
_
_=_

_

分词函数，去除停用词和单字
___
_=__
_=
_
=__
_
_

返回指定内容内的热词，为只取前多少个词，表示全部，默认为
_=

_=___
_
==
_=___

_=__
_=_==
_
_
如果需要对编码进行支持，只需要对词库编码进行转换，对拆字接口进行适配即可。
再次说明的是，本文的方法只能用以简单的分词，其中查找的规则为最长词匹配，类似于中华人民共和国这种王者级词语，若词库中有中华人民共和国，同时又有中华人民共和国，那么只会匹配到中华人民共和国，需要最短词匹配的话，可以在代码中更改。
另外，对树有了解的同学，以及对空间比较敏感的同学一定会发现，这种存储的方式，是比较浪费空间的，就比如文初的英文字典树结构图，每个字母都存储了很多份，针对该问题，已经有比较多的树变种来解决，有兴趣可以自行尝试。这是《使用腾讯云学习深度学习》系列文章的第四篇，主要举例介绍了深度学习计算过程中的一些数据预处理方法。本系列文章主要介绍如何使用腾讯云服务器进行深度学习运算，前面主要介绍原理部分，后期则以实践为主。
往期内容：使用腾讯云学习深度学习系列之一：传统机器学习的回顾
使用腾讯云学习深度学习系列之二：简明原理
使用腾讯云学习深度学习系列之三：搭建深度神经网络
上一节，我们基于设计了一个用于数据集的深度学习网络。我们的代码主要包括以下部分：

批量输入模块
各种深度学习零件搭建的深度神经网络
凸优化模块
模型的训练与评估

我们注意到，批量输入模块中，实际上就是运用了一个生成器，用来批量读取图片文件，保存成矩阵，直接用于深度神经网络的训练。由于在训练的过程中，图片的特征，是由卷积神经网络自动获取的，因此深度学习通常被认为是一种端对端的训练方式，期间不需要人为的过多干预。
但是，在实际的运用过程中，这一条并不总是成立。深度神经网络在某些特定的情况下，是需要使用某些特定方法，在批量输入模块之前，对输入数据进行预处理，并且处理结果会极大的改善。
本讲将主要介绍几种数据预处理方法，并且通过这些预处理方法，进行特征提取，提升模型的准确性。
结合传统数据处理方法的特征提取
这一部分我们举医学影像学的一个例子，以社区第三届数据科学杯比赛的肺部扫描结节数据为例，来说明如何进行数据的前处理。以下代码改编自该比赛的官方指导教程主要是特异性的提取影像图片在肺部的区域的扫描结果，屏蔽无关区域，进而对屏蔽其他区域后的结果，使用深度学习方法进行进一步分析。
屏蔽的程序本身其实并未用到深度学习相关内容，这里主要使用了库。下面我们详细介绍一下具体方法。
第一步，读取医学影像图像。这里以数据集中的这张影像数据为例，这张片子可以在这里下载，然后解压缩，用下面的代码分析。其他片子请在数据集下载：
_____





















=

_




=
=
=

=



_=
_=
_=__
_=__
_=__
_=__

_=__
_=__


_=
_=


__
__
_=_
_=_
__=
__=







_=
_=
=_
___=

_=_
__
_=__==_
_

_=_
_=_
_=_
=_
=_

___
_=_
_=_
_=_
=__

==
==
=___
_=
__
__
=__

=
=__
___
___

简单解释下，首先，影像是一个三维的图像，以三维矩阵的形式保存在这个文件中，文件则保存了影像文件的基本信息。具体而言，文件中，图像中结节的坐标是：








_













这里结节坐标的都是物理坐标，文件保存的，就是从这些物理坐标到文件中矩阵坐标的映射。于是上面整个函数，其实就是在从影像仪器的原始文件读取信息，转换物理坐标为矩阵坐标，并且将结节附近的切片存储成对应的矩阵，用来进行进一步的分析。
然后，我们看一下读取的结果。可见输入文件中标注的结节就在右下方。
_=__
__=_

==

=_
__
__


可见图中，除了中间亮度较低的肺部，还有亮度较高的脊柱、肋骨，以及肌肉、脂肪等组织。我们的一个思路，就是留下暗的区域，去掉亮的区域。当然这里，亮度多高才算亮？这个我们可以对一张图中所有像素点的亮度做概率密度分布，然后用算法，找出这个明暗分解的阈值下文图中左上角：
=
=__


=
=
=
=



=
=
=
=



===
===






=_=
=__
=
_=

然后使用工具包。是一种传统图像处理的工具，我们这里，主要使用这个工具包，增强图像的轮廓，去除图像的细节，进而根据图像的轮廓信息，进行图像的分割，得到目标区域。
对一张图中所有像素点的亮度做概率密度分布用竖线标注阈值所在
==
=_
=
===
_
_

展示阈值对图像切割的结果。小于阈值的点标注为，白色。大于阈值的点标注为，黑色。
=_
_
__
_

增大黑色部分非的区域，使之尽可能的连在一起
=_
=_

__
_\

增大白色部分的区域，尽可能的消除面积较小的黑色区域
=
=_

__
_\

上一张图中共有三片连续区域，即最外层的体外区域，内部的肺部区域，以及二者之间的身体轮廓区域。这里将其分别标出
=
=_

__
_\


提取信息，这张图片的的位置分别在
分别对应体外轮廓以及肺部区域的左上角、右下角坐标。
于是这里通过区域的宽度、高度
以及距离图片上下的距离
最终保留需要的区域。
=
_=

=

_

=_
_
===

=

=_

__
_


最后再看一下提取的效果如何：
==

=_
__
__
_

=_
__
__
_\


右图将进一步的放入深度学习模型，进行肺部结节的进一步检测。
结合深度学习技术的特征提取增强
除了通过传统手段进行数据预先处理，我们同样可以使用深度学习技术进行这一步骤。
可能大家对手写数字识别数据集非常熟悉，官网就有教程，指导如何搭建卷积神经网络，训练一个准确率高达的模型。

但实际运用过程中，我们会发现其实数据集其实书写的比较工整，于是我们就考虑到，对于比较潦草的书写，直接训练卷积神经网络，是否是最好的选择？是否可以将“草书”字体的数字，变得正规一点，然后放进卷积神经网络训练？于是我们利用一个“草书”版的数据集，来介绍一下_模块：
首先需要下载这个“草书”版的手写数字集：
___

画风如下，明显凌乱了许多，但其实人还是可以看懂，所以我们可以尝试使用深度神经网络来解决。
我们开始分析数据。首先读数据：


_

______

__


__

=
__=
_=


_=___

_=__
_=__
_=__
_=__
_=__
_=__

_=_____=
_=_____=
_=_____=

初始化参数，然后直接得到一批原始数据，放入：
=
_=

__=
_=
_=
=__
=
_=

_=___
_=

=
__
=__={_}

然后搭建一个_网络。网络结构如下图：

=
=

_=
__=_
__=_

__=_
=
=
=
__=_==__


__=____


_=
___=___


__=_______



_=
_=____

再得到一批经过变换后的数据，放入：
_=
_=_
_=_

=
__

=_
_={
_
_
_
}

展示两批数据。上面一行是原始数据，下面一行是变换后的数据。可见数字在局部被放大，有的数字写的歪的被自动正了过来：
==


=_
=_



__
__
__=
__=


也就是说，通过_层，对同一批输入数据的参数学习，我们最后实际上得到了一个坐标的映射_{\}，可以将一个倾斜的、“草书”书写的数字，变得更正一点。

接下来，我们构建一个卷积神经网络
=
=
_=

_=
_=
__=_
__=_

__=_
=
=
=
__=_==__


__=____


___=___

__=_______



_=
_=____


__
_=
__=
_=_____

_
_=___






_=
=_
=_
=
=
_

_=
=_
=_
=
=
_



__=
_=_______
_=___
_=
=_
=_
=
=
_


__=___


_=
_=____
_=__
_=____

__=__


_=__
_=_
_=____
_



__=
_=
_=

=__
=

首先训练一个未经过变换的：
__=_=
__=_____=__=
=
_=__
_=_____
__=__
_=___

=
__

__=
__
___
_=___
_=___
__={
___}

=_
_={
_
_
_
}
__
_==
_












可见这个神经网络对直接输入变形数据效果不好。我们再训练一个进过变换的：
_=_
_=_____=_=
=
=_
=____
_=_
=__

=
__

_=
__
___
_=___
_=___
_={
___}

=
_={
_
_
_
}
_
_==
_

发现变换后正确率还可以接受：











画图比较正确率与训练次数
_=
__=
=


可见确实可以提升分类的正确率。
最后，我们专门提出来直接分类分错、后分类正确的数字。上面一行是直接预测的结果错误，下面一行是转换后分类的结果：

通过，我们确实可以强化数据的特征，增加数据分类的准确性。
此外，除了可以识别“草书”字体的手写数字，同样在交通标志分类中表现优异，通过元件与网络的组合，团队实现了种交通标志分类准确性笔者直接用发现准确率只有左右，文章地址

目前腾讯云服务器已经在月日盛大公测，本章代码也可以用较小的数据量、较低的_在普通云服务器上尝试一下，但是随着处理运算量越来越大，必须租用云服务器才可以快速算出结果。服务器的租用方式、价格，详情请见腾讯云云服务器今日全量上线！背景
在做优化之前，腾讯云上使用的母机单队列，性能只有。
已有的多队列版本，在左右，不是很理想。
主要问题性能
单队列成为性能瓶颈
物理主机环境，使用多队列已经有多年。
而在公有云上，虚拟化的长期使用的多队列。
有如下原因：

早期的版本只支持单队列。

为了稳定性，友商如阿里云，的网卡到年底，仍然是单队列。


多队列性能并不理想
引入网卡多队列，目的是充分利用处理器的性能。
在物理母机上，多队列性能提升非常明显。
但是在虚拟机上，性能却没有得到明显提升。
已有的版本，当时是左右，单队列能到。
多队列原理

上图是多队列的示意图。
和物理机上的多队列类似。
一个的队列，对应一个虚拟。
这样，避免了多个虚拟使用同一个队列带来的竞争问题。
性能优化实践
云上网络的实现
腾讯云网络使用了网络技术。
在用户看来，每个用户都是一个独立的网络，相互隔离。
具体实现如下：

由上图可见，数据包的流程为

虚拟机向外发包，经过网卡驱动外发前端

实现的口内核态收到包后，交给网桥

网桥上数据包会被截获，实现网络功能

数据包经过处理后，交给口，进行封装

口调用物理口的发包函数进行发送。


进来虚拟机方向的数据包处理流程相应反转即可。
初步分析
从上图可以看出，数据包是经过了一条较长的路径，最终从物理口发送出去。
其中每一个流程都是可以成为瓶颈。
于是，我们做了第一步，让虚拟机支持多队列。
虚拟机多队列的选择
两个方案：

升级

在上移植母机多队列


最终，我们选择了移植的方案，理由如下：

腾讯云的物理服务器基本上都是版本，这个版本是不支持多队列的。

有版本，但多队列性能提升并不明显。

在上，我们已经做了大量的工作，也经过了长期运营的检验。


多队列功能的移植
移植涉及到了虚拟化的所有核心组件：，，内核。
移植过程的主要问题：

非常多，内核个，，相对少一点。

要兼容旧的和内核。三个组件存在混合部署的情况。

热迁移要实现兼容。


最终，和一起，通过谨慎小心的移植，这些目标都实现了。
还有单队列性能瓶颈
多队列移植后，理论上也只能达到的性能水平。实测也是如此，在左右。
当时业界的性能能达到。我们只有。
这其中存在着很大的提升空间。
基本不配置规则的情况下，性能损失约。不是主要矛盾。
通过内核工具和流程分析，发现耗在_的特别高。
主要是在__中加锁消耗的。
分析的代码，发现口实现，还是一个单队列网卡。
前面的并发处理，到了口变成了独木桥，性能损失明显。
还是并发瓶颈
将中的虚拟口实现改为多队列之后，性能仍然没有太大的提升。
通过采样发现，_占用的仍然很高，是最可疑的瓶颈点。
分析内核代码流程，最有可能的还是__中的队列锁。
这里存在这样一种情况，虚拟机选择队列后，经过一层层选择，最终到物理队列时，会有多个虚拟队列选中同一个物理网卡队列的情况。
问题基本定位清楚，需要做如下修改：

虚拟机后端的实现，要保持虚拟机选的队列。

中的口实现，不能修改队列映射关系

物理口发包时，要保持映射关系不变。

同时，多个虚拟机，要保证尽可能利用不同的物理队列，避免相互干扰。


以上修改做完后，性能有了明显提升，达到了业界第一梯队的水平。实现了本身的突破。
其他优化

自身队列长度限制位，修改为，在大流量下减少丢包。

后端网卡队列长度优化。


展望
的性能优化，按目前的框架下，潜力已经很小。
后续方向：

硬件方案

如智能网卡方案，将部分逻辑到服务器之外的设备上。

方案

提升母机发包引擎的性能，同时能减少虚拟机发包的负担。编码原理
以下简称为两个重要的优势在于高效的序列化反序列化和低空间占用，而这两大优势是以其高效的编码方式为基础的。底层以二进制形式存储，比方式更加紧凑，一般来讲空间利用率也比更高，是以的形式存储【图】。
示例结构如下：
示例结构

{
_=
_=
}


{
_=
_=
}


{
_=
_=
_=
_=
}

图示例结构内存布局
将常用类型按存储特性分为数种【图】不同，编码方式不同。根据占和生成。
计算方式如下，并以编码方式序列化【参考下面编码】，所以理论上范围内的编码后占用一个字节，，的编码后会占用一个字节以上，所以尽量避免在一个结构里面定义过多的。如果碰到需要定义这么多的情况，可以采用嵌套方式定义。

的计算方式
=_|_
















































图表
编码

{
={
=_|
=

}
=_

}

__
编码只用每个字节的低存储数据，最高位用做标识，清空：最后一个字节，置位：还有数据。以上述操作为例，设类型为，其序列化过程如下：

该字段的_=_=则=|=。那么在内存中，其序列为应该为，占。对比直接用存储会占；如果是用呢，将占，而占用内存仍是。
下表是数值范围与其字节数对应关系。实际应用中，我们用到的数大概率是比较小的，而且可能动态范围比较大有时需要用位存储，对比的内存占用，优势很明显。



数值范围
占用字节数





















编码
编码是对编码的补充与优化。负数在内存中以前补码形式存在，但不管是负数的原码还是补码，最高位都是；那么问题来了，如果以上述编码方式，所有负数序列化以后都会以最大化占用内存位占用位占用。所以，细心的同学会发现，对于有符号数的表示有两种类型，和。对，就是对这种负数序列化优化的变种。
{

_
}

























…
…











图编码映射表
对于类型的数据，在编码之前，会先进行编码，上图是其映射关系。编码后，较小的负数，可以映射为较小的正数，从而实现根据其信息量决定其序列化后占用的内存大小。
所以聪明的同学们已经知道该如何选择了，对于有符合数尽量选择而不是不管从空间和时间上，都是更优的选择
编码
编码方式比较简单，是建立在编码基础上的，主要是针对、、等类型，与格式类似。先以编码写入即，再以编码写入长度，最后把内容到内存中。
_

{
=___

}

{
__
=

}
编码
编码很简单，主要针对类型有、、、。由于长度固定，只需要即可。对于浮点型会先强制转换成相对应的整形，反序列化时则反之。
{
{}
=

}

{
{}
=

}


{

}


{

}
整个编码流程

解码过程
上面已经介绍了编码原理，那么解码的流程也就很简单了。解码是一个递归的过程，先通过解码过程读出取出_字段，如果不存在于中，就放到中。如果是认识的_，则根据_做具体的解析。对于普通类型如整形，类型等就直接写入中，如果是嵌套类型一般特指嵌套的，则递归调用整个解析过程。解析完一个继续解析下一个，直到结束。苹果宣布在支持纯的网络服务，并且要求年提交到的应用必须兼容纯的网络，要求适配的系统版本是以上包括。
一、背景介绍
、你了解吗？
是的缩写，简单的概括就是现行的互联网协议的下一代协议。由位二进制数组成，可提供庞大的地址资源，足以让地球上每个生物乃至每厘米都能被分配到一个或多个地址。将这位的地址按每位划分为一个段，将每个段转换成十六进制数字，并用冒号隔开。
地址示例：
地址示例：
、为什么要接入？
目前互联网广泛应用的技术，理论上是一个位的二进制数的地址，可编址万个网络、亿台主机。但在采用了、、三类编址方式后，可用的网络地址和主机地址数目大打折扣，欧美资本主义列强掌握着核心技术，留给我国的就更少了。
二、改造方案
要想使应用完全支持的环境要做的太多了，从协议到硬件，要做一次彻底的大调整。不但客户端要做的改造，服务器也要适配主要有一下四种对应关系，必须做好以下每一种。







要做到和完全兼容需要做很大的修改，最简单的协议上要兼容位的地址，路由器，服务器等相关硬件也要升级。应苹果公司的要求，本次改造我们只关注客户端从的网络环境访问的资源。那么问题来了，现在我们大部分后台服务器都是使用接入的，我们要如何做兼容？幸好，从一开始设计就考虑到了向后兼容的问题，运营商会提供一个中间节点，使用等技术，负责协议的转换，打通和之间的链路。和互通技术有很多，这里只讨论要求的技术方案我们要走的服务器必须支持的环境，搭建的环境本来就支持了，我们不改上层的，只改底层的是影响最小。
、与技术
是一种有状态的网络地址与协议转换技术，一般只支持通过网络侧用户发起连接访问侧网络资源。但也支持通过手工配置静态映射关系，实现网络主动发起连接访问网络。可实现、、协议下的与网络地址和协议转换。
则主要是配合工作，主要是将查询信息中的记录地址合成到记录地址中，返回合成的记录用户给侧用户。也解决了中的存在的缺陷。一般与协同工作，而不需要在客户端或服务器端做任何修改。解决了中的大部分缺陷，同时配合的协同工作，无需像中的等。
、举个栗子
这里大概描述一下的工作流程。
主机发起的域名解析到主机配置的地址是
触发到中查询
返回的信息到
然后触发的申请到中查询
返回的记录
合成地址，返回给主机
主机发起目的地址为的数据包由于在域内通告配置的，因此这个数据包转发到设备上
执行地址转换和协议转换，目的地址转换为，源地址根据地址状态转换在域内路由到
数据包返回，目的地址和端口为
根据已有记录进行转换，目的地址转换为源地址为加了前缀的地址，发送到主机

按照的规则，客户端如果没有做域名解析的话微信依赖的是自己实现的，客户端就需要完成的工作。这里的关键点是，发现网络是的网络的情况下，我们可以自己补充上前缀，然后进行正常的访问。然而这里客户端能获取的信息量一般都是很有限的。
注：记录是用来将域名解析到地址的记录。用户可以将一个域名解析到地址上，也可以将子域名解析到地址上。
、开发同学干了什么？
改造的要点主要有一下个：
换用兼容及的，例如同学在测试过程中发现，系统在的环境下，返回会的地址信息结构体中为，所以这里需要重新赋值端口号再进行联网。
判断当前客户端是处于、还是和并存的环境，然后分别使用不同的网络，可以参考编程。
这个方法最好使用探测域名的方式。如果参数填的是，苹果文档说明这返回的结果不保证能真正出外网。这样就需要其它辅助的手段尝试是否能出外网了。
使用及进行的联网操作。
三、客户端兼容性测试办法
、测试环境搭建
后台不用改，那客户端要改如何兼容。我们可以先用苹果给的测试工具，简单测试。整体原理如下：

其中，在客户端的改造叫做，需要连接机创建的的，就是传说中的的网络环境，再通过有线网络，路由器，访问到的资源。就做到→的连接。
下面讲解一下网络环境的搭建。
工具准备
体验网有线接口、以上的系统和包括以上设备
步骤
接好体验网的网线，然后打开系统设置找到图标，如下：

点击进入，然后按住按键同时用鼠标点击下图的“”。

这时可以看到下方出现了“”可选菜单，把这个选上，如下图：

之后用手机连上这个共享的热点，测试对应的网络功能即可。
测试重点：
、和网络环境判断是否正确
、和的切换是否正确
、数据线和音视频的基本功能
四、经典分享
【描述】移动下无法传文件。
在移动网络下无法查看电脑和进入，传文件，问题出现的初期我们马上切换到下，发现下是可以的，把卡换成联通的，也可以。唯独移动的网络下无法传文件。初步断定是对网络的兼容性问题。

【问题排查】
、查看日志，发现在一直失败。在建立连接阶段一直失败。我们做该需求的目的在于要增加的客户端能通过的网络访问到的资源。因此，在做的改造中我们做了一个判断逻辑，判断当前网络环境是。
、加日志验证，我们把绑定的地址类型打出来，果然：

在移动数据网络下走了的通道。可是各大运营商的网络应该走的是才对。
、代码。问题就很明显了，我们梳理了一下选择或者协议栈的判断逻辑，原来开发判断到网关是的网关之后就不再往下判断，直接建立连接。然而，我们连接上网络环境的时候，移动基站分发的网关是一个形式网关，它可以兼容和两种开发同学认为是移动公司兼容的策略，看来移动公司已经走在我们前面了。

【解决办法】
我们更改了和协议栈的判断逻辑：
、探测环境
我们的探测环境的方法是：先创建一个的去连的地址，如果当前网络不是的环境，返回路由不可达。关键点，因为是异步的需要三次握手，所以我们使用来完成这个过程。
、继续判断网关语法是否是格式，
、最后获取地址，以上都符合的语法，即为的网络，建立走

、如果当前网络是的环境，我们就对进行兼容性改造=。再通过改造后的地址建立连接。
、如果和都可以走通，我们优先建立的连接。
【结果检查】
打印出建立连接的日志：

从日志可以看出，手机连接之后得到的是的地址和格式的网关。
创建时，失败，走的网。
【经验总结】
逻辑和场景是测试的两个纬度，二者都要兼顾到。

【腾讯预审工具】
为了提高苹果审核通过率，腾讯专门成立了苹果审核测试团队，打造出预审工具这款产品。经过年半的内部运营，腾讯内部应用的审核通过率从平均提升到
现将腾讯内部产品的过审经验，以线上工具的形式共享给各位。在腾讯质量开放平台上可以在线使用。
点击腾讯预审即可立即体验！
如果使用当中有任何疑问，欢迎联系腾讯企业：

预审工具分四步进行预审服务
【一键扫描】只需提供包、审核图片、审核视频、应用描述，即可在小时内拿到一份完整的检测报告，定位问题的同时提供解决方案，助您成功通过审核。
【案例分享】集结审核失败常见原因，丰富案例为您提供参考依据。
【专家服务】腾讯专家团队为您分析各种疑难杂症，提出最优解决方案。
【优化】专业优化内关键字搜索结果，让产品离用户更近一步。希望手游在预审验收保证下，都可以快快乐乐过审，开开心心赚钱。作者：左明

首先，我们来看看在世界范围的热度趋势，下图是关键词“房价”和“”在上的搜索量对比，蓝色的是，红色的是房价，很明显，人类对的关注程度已经远远超过了对房价的关注。
从这些数据中，大家能看出什么？
可以很明显的看出，我在一本正经的扯淡。


从年到现在，、和的热度趋势对比，可以很明显的看到上图，在全球的热度趋势增长非常快。

上图是在国内的百度搜索指数，是拿和做了个对比，可以看出的关注度也已经逼近。
虽然在关注总量上还远不及和等等，但它的增长幅度超乎你想象，你知道这意味着什么吗？这意味着关注，你就比大多数人走在了业界的前沿！
那么到底是什么鬼？
引用官网的简介，“一个用来构建用户界面的库”。
起源于的内部项目，因为对市场上所有框架，都不满意，就决定自己写一套，用来架设的网站。做出来以后，发现这套东西很好用，就在年月开源了。
由于的设计思想极其独特，属于革命性创新，性能出众，代码逻辑却非常简单。所以，越来越多的人开始关注和使用，认为它可能是将来开发的主流工具。
和、等框架不一样，它只处理逻辑，它只处理逻辑，它只处理逻辑。所以如果你喜欢它，你可以很容易的将它接入到现有工程中，然后用重写部分即可，不用修改逻辑。
我们看看大牛们怎么说

大牛们对新技术的跟进速度总是非常快的，不过话说出来也已经年了，其实并不算什么新技术了。
这么火，那么它到底有什么牛逼的地方？
上图是年年初的数据

这是的好友动态页面，也是访问量最大的页面没有之一，通过插件可以看到这个页面确实是用实现的。
这些是使用了的一小部分站点，太多了放不下。
前面给大家来了一波前戏，相信大家已经有点迫不及待了，那么，进入正题：
首先，先跟大家描述下最特别的部分，听完这部分大家基本就能够在脑海里建立起一个的大致印象。然后是的核心内容，听完这部分大家待会回去就可以开始写代码然后今天晚上发布上线了。最后是能够给我们实际带来的价值，我们不作无意义的重构。首先，我们来看

我们先说说模板。模板有很多种编写方式，这是一种。
还有这种。
还有多年前流行的标签模板。
这种运行时编译的模板调试起来比较困难，尤其是出现错误时，很难定位，如果要定位，需要做很多额外的工作，麻烦。

近两年构建工具的流行，很多团队已经在使用等构建工具来预编译模板，从而简化模板开发，提高运行效率，减少维护成本。
使用的也是预编译模板，和前面看到的没什么差别，细心的同学会发现好像只是没有字符串引号了而已。提供了一个预编译工具，叫，可以通过命令安装，一般是在开发时期运行，运行后它会启动一个监听程序，实时监听源码的修改，然后自动编译为代码。大家留意下，里面的被编译成了，它这么做，目的就是为了实现虚拟。还支持运行时编译，但是为了推荐大家用预编译，所以我不打算告诉你们运行时编译怎么做。，祝贺大家已经精通了。
：导出图片以后没有价值块的特效了，凑合着看吧

接下来我们来了解最大的亮点虚拟。
传统和直接交互，由来控制的构建和渲染、元素属性的读写、事件的注册和销毁等等。当新产品刚上线的时候，这种做法看起来也挺好。但随着产品功能越来越丰富、代码量越来越多、开发团队人员越来越多
一年后
你的代码可能会变成这样。
当然，合理的代码规划能够避免这类问题，但团队里难免会有擅长屠宰式编程的同学，分分钟把你代码改成这样。
这时，的虚拟和单项数据流就能很好的解决这个问题。
虚拟则是在的基础上建立了一个抽象层，我们对数据和状态所做的任何改动，都会被自动且高效的同步到虚拟，最后再批量同步到中。
虚拟会使得只关心数据和组件的执行结果，中间产生的操作不需要干预，而且通过虚拟来生成，会有一项非常可观收益性能。
所有人都知道慢，渲染一个空的，浏览器需要为这个生成几百个属性，而虚拟只有个。
所以说减少不必要的重排重绘以及读写能够对页面渲染性能有大幅提升。那么我们来看看虚拟是怎么做的。会在内存中维护一个虚拟树，当我们对这个树进行读或写的时候，实际上是对虚拟进行的。当数据变化时，然后会自动更新虚拟，然后拿新的虚拟和旧的虚拟进行对比，找到有变更的部分，得出一个，然后将这个放到一个队列里，最终批量更新这些到中。这样的机制可以保证即便是根节点数据的变化，最终表现在上的修改也只是受这个数据影响的部分，这样可以保证非常高效的渲染。但也是有一定的缺陷的首次渲染大量时因为多了一层虚拟的计算，会比插入方式慢。
几个组件的渲染性能对比
一个最基本的组件由数据和两个主要部分构成，我们先来看看数据。
这是一个简单单完整的组件【类】，细节大家先不用太在意细节，了解机制就可以。
主要作用是提供数据来源，可以简单的理解为就是构造函数的参数。唯一的作用是控制组件的表现，用来存放会随着交互变化状态，比如开关状态等。
做的事情就是根据和中的值，结合一些视图层面的逻辑，输出对应的结构。
前面我们知道了一个简单的组件的构成，但单个的组件肯定不能满足实际需求，我们需要做的是将这些独立的组件进行组装，同时找出共性的部分进行复用。
我们拿大家熟悉首页来进行示例，大的模块有中心主体区域，左侧有吧列表、应用列表等，可以看出，里面的都是最细粒度的组件，是可以复用的。
首先，我们来看下的代码
这个就是我们分解出来的组件，它需要个属性，对象和。对象包含图片、地址、标题、描述信息，是一个布尔类型，用来判断是否需要显示成一个图片。
这个组件本身的实现可以很简单也可以很复杂，但使用者可不关心你的内部实现，使用者关心的是组件需要什么参数就可以了。
外国人的组件化思想比我们国内的普及程度高很多，不只局限于软件开发，包括实体行业的咖啡机、加油站、儿童摇摇车都有这种设计思想在里面。
希望大家在设计模块的时候，也尽可能将组件逻辑对外透明，来减少维护成本。
我们继续看的热点区域，大家留意一下标虚线的部分，这里复用了组件。这时的组件看起来就是一个普通的标签而已，简单吧。
这个是热问组件，也复用了组件。这就是如丝般顺滑的组件复合。

文章来源公众号小时光茶社


相关推荐深入理解二数据流和事件原理展示组件与容器组件某客户大数据测试场景为：类似画像的数据查出用户标签通过这些标签在查询详细信息。以上测试功能以及性能。
其中的数据量为，约。数据均需要从对方的集群人工迁移到我们自己搭建的集群。由于没有在我们集群中集成，优先开始做的数据迁移，以下总结了使用以及数据迁移遇到的各种问题以及解决方法。
一迁移过程遇到问题以及解决
客户版本：腾讯大数据套件版本：客户私有云系统版本测试：遇到的问题以及解决过程如下：
运行异常现象一和
运行偶发不正常，出现组件停止运行的情况，看日志有说时间的差异等信息，但查看完全一致，想到可能是硬件时间的差异问题，通过看，确实差异很大，通过调整后基本恢复。后确认初始化脚本中只对腾讯云环境的机器做了硬件时间同步，目前已优化。
运行异常现象二和
再次运行不正常，出现组件停止运行的情况。通过日志看如下错误==通过看所有机器均为内网，猜想可能是网络交互的时候查询什么表导致出现的不一致，查看解析信息如下






有的情况，猜测是虚拟机的异常行为，注释掉里相关信息，停掉服务后，重启，再未出现这个错误，运行完全正常。
需要支持的发现与修复过程：

迁移表的过程中计划使用官方的工具进行，第一步需要在目标集群建表，通过信息在目标集群建表完成后，可看到表，通过查询后，无法查询内容，查日志有如下错误：通过查询需要支持压缩算法，通过发现集群默认确实不支持算法虽然安装








通过手动建表的方法用以下信息建表后可以查看到表信息。无法查看表内容，日志发现如下错误信息：

{=__==_===_==
__==_==={__=}}
{=__==_===_=
=__==_==__=}
错误信息：


在增加属性为即可，在测试集群通过该方法，启动失败

后确认的集群上支持的方法：即需要在特定系统编译相关本地库库替换当前的库，然后的启动环境脚本增加主目录即可

目前下的的库有现网使用，同时需要保证这个的库可以引用到的一个文件直接替换下的目录，保证已经安装的包，在里添加_={安装主目录}。再后发现已支持。逐步全量重启。









集群数据表到集群数据表的迁移方法
暴力迁移参考找到源集群源表在上的目录位置，直接将该目录移动到目标集群的表在目标集群上的表根目录下
暴力迁移时信息是一个文件即。的版本这个文件位于表在上表目录的根目录下，而的这个文件位于表在上表目录的根目录下的目录下，需要手动创建这个目录并调整这个文件的位置
修改复制过来的表目录文件的属主信息
重启的所有组件
此时登录已经可以通过查看到迁移过来的表，但等操作会失败
通过修复信息；修复分区。这两个步骤的操作过程中注意观察日志是否有异常，实践中首次尝试此方法有大量错误，发现错误内容为相关，支持后，查看表信息，表内容正常，随机选取表内容对比也正常，可认为此种方法迁移成功。
通过的方法迁移时需要在目标集群手动创建目标表，查看源集群的表结构如下：参考地址
{=__==_===_==
__==_==={__=}}
{=__==_===_=
=__==_==__=}
通过该信息创建新表时出现如下错误：__手动测试只要加这个参数__去建表一定会出现这个错误，建表会成功，但表信息里没有这个字段了。经过查代码发现这个字段在新版本已经废弃，但客户的老集群是版本需要这个字段，通过的方法无法正常写入、通过步骤的暴力迁移成功后暴力迁移成功兼容了这个字段，查看表的信息如下：
{=__==_===_==
__==_==={__=}}
{=__==_===_=
=__==_==={__=}}
老集群表结构
{=__==_===_==
__==_==={__=}}
{=__==_===_=
=__==_==__=}
可以看到关于__字段在新老版本的定义方法有差异，故我们测试在新集群使用上面的信息建表后，再通过方法导入到。结果依然没有数据写入，可以断定这个参数__在中完全废弃，新版本采用了一个整字段来包裹这个信息。当老集群有参数时，官方方法在到直接迁移暂时不可用。
二后续
在集群上建表设置__=默认为，在上不带__建表，使用方法迁移测试研究其他数据跨集群版本差异，网络不通迁移方法。

相关推荐
集群高可用
网站整站数据迁移作者：
团队：腾讯移动品质中心

假如你是一个数据穷鬼，其他资源也捉襟见肘，可以来试试迁移学习。
迁移学习
所谓迁移学习，就是将一个问题上训练好的模型通过简单的调整，使其适用一个新的问题，可以认为是一种模型调优的“取巧”方法。可以类比人的举一反三能力。

迁移学习的特点
、需求数据量少
假设有两个领域，一个领域已经有很多的数据，能成功地建一个模型，有一个领域数据不多，但是和前面那个领域是关联的，就可以把那个模型给迁移过来。比如，我们想做一个化妆品推荐模型，但数据量较少，可以先用一个成型的较为稳定的饰品推荐模型进行调优。跨领域的在学术界也有尝试哦，比如网络搜索可以迁移到推荐，图象识别可以迁移到文本识别。
、训练时间少
在没有的普通台式机或者笔记本上，实现的模型迁移学习训练过程只需要大约五分钟框架。
、容易满足个性化需求
比如每个人都希望自己的手机能够记住一些习惯，这样不用每次都去设定它，怎么才能让手机记住这一点呢？
其实可以通过迁移学习把一个通用的用户使用手机的模型迁移到个性化的数据上面。不过，如果数据量足够的情况下，迁移学习的效果一般不如完全重新训练哦。迁移学习适合与快速小巧的工程化，解决所谓的冷启动问题，当数据收集得足够多了以后，我们再改用深度学习。
迁移学习四种实现方法

、样本迁移
一般就是对样本进行加权，给比较重要的样本较大的权重。
样本迁移即在数据集源领域中找到与目标领域相似的数据，把这个数据放大多倍，与目标领域的数据进行匹配。其特点是：需要对不同例子加权；需要用数据进行训练。比如下图，可以将一个动物识模型的源数据中的狗狗图片增多，达到专门针对狗的识别模型。

、特征迁移
在特征空间进行迁移，一般需要把源领域和目标领域的特征投影到同一个特征空间里进行。
如下图示例，特征迁移是通过观察源领域图像与目标域图像之间的共同特征，然后利用观察所得的共同特征在不同层级的特征间进行自动迁移。

、模型迁移
整个模型应用到目标领域去，比如目前常用的对预训练好的深度网络做微调，也可以叫做参数迁移。
模型迁移利用上千万的图象训练一个图象识别的系统，当我们遇到一个新的图象领域，就不用再去找几千万个图象来训练了，可以原来的图像识别系统迁移到新的领域，所以在新的领域只用几万张图片同样能够获取相同的效果。模型迁移的一个好处是我们可以区分，就是可以和深度学习结合起来，我们可以区分不同层次可迁移的度，相似度比较高的那些层次他们被迁移的可能性就大一些。

这里讲一个例子，比如我们想将训练好的简单调整，解决一个新的图像分类问题。根据论文中的结论，可以保留训练好的模型中所有卷积层的参数，只是替换最后一层全连阶层。在最后这一层全连阶层之前的网络层称之为瓶颈层。
将新的图像通过训练好的卷积神经网络直到瓶颈层的过程可以看成是对图像进行特征提取的过程。在训练好的模型中，因为将瓶颈层的输出再通过一个单层的全连接层神经网络可以很好的区分种类别的图像，所以有理由认为瓶颈层输出的借点向量可以作为任何图像的一个新的单层全连接神经网络处理新的分类问题。
、关系迁移
如社会网络，社交网络之间的迁移。

根据源和目标领域是否相同、源和目标任务是否相同、以及源和目标领域是否有标注数据，又可以把迁移学习分成如下图所示：

前沿的迁移学习方向
、
怎么迁移智能体学习到的知识：比如我学会了一个游戏，那么我在另一个相似的游戏里面也是可以应用一些类似的策略的。
、
传递性迁移学习，两个之间如果相隔得太远，那么我们就插入一些，一步步做迁移。
、
不知道是哪个源领域的情况下如何进行迁移学习。
二、假如你目前有了一些代表性数据集，进入了温饱阶段，恨不得压榨出每一滴数据的价值，又害怕用力过以偏概全俗称过拟合。那么我们可能需要如下技巧。
严防死守过拟合所谓尽人事，听……
深度学习由于超参数的个数比较多，训练样本数目相对超参数来说略显不足，一不小心就容易发生过拟合。从本质上来说，过拟合是因为模型的学习能力太强，除了学习到了样本空间的共有特性外，还学习到了训练样本集上的噪声。因为这些噪声的存在，导致了模型的泛化性能下降。
深度学习中有几种较为常用的改善过拟合方法：
、
即数据增强，数据增强其实是增加训练样本的一种方法。以人脸识别为例，对于人脸识别的数据增强，一般有随机裁剪，随机加光照，随机左右翻转等。
通过类似的手段，无论是图像处理，还是语音或者自然语言处理，我们都能有效地增加样本数量。更多的训练样本意味着模型能够学到更多的本质特征，具有对于噪声更好的鲁棒性，从而具有更好的泛化性能，能够有效地避免过拟合。
、
，顾名思义，就是在训练次数没有达到预先设定的最大训练次数时，我们就让网络停止训练。采用需要我们在训练集合上划分出一小部分大概吧作为验证集，验证集不参与训练，可以视为是我们知道结果的测试集。我们通过实时监控模型在验证集上的表现来实时监控并不意味着每次迭代都去监控，可以每次去观察一次，一旦模型在验证集上的表现呈现下降趋势，我们就停止训练，因为再训练下去模型的泛化性能只会更差。
而实际训练中，我们不可能一直坐在电脑旁观察验证集的准确率，更一般的做法是每隔一段时间比如每次迭代就保存一次模型，然后选择在验证集上效果最好的模型作为最终的模型。
、增加层

原理非常简单，的作用对象是，对于某一层中的每个节点，技术使得该节点以一定的概率不参与到训练的过程中即前向传导时不参与计算，计算时不参与梯度更新。
如上图所示，实验证明了，的效果非常爆炸，对于模型训练有非常好的效果。
为什么能起到这么大作用呢？
一个原因是通过，节点之间的耦合度降低了，节点对于其他节点不再那么敏感了，这样就可以促使模型学到更加鲁棒的特征；
第二个是层中的每个节点都没有得到充分的训练因为它们只有一半的出勤率，这样就避免了对于训练样本的过分学习；
第三个原因是在测试阶段，层的所有节点都用上了，这样就起到了的作用，能够有效地克服模型的过拟合。
在实际的模型训练中，在一般的框架中初始默认的概率的丢弃率是保守的选择，如果模型不是很复杂，设置为就够了。
不过也要注意到的缺点：
是一个正则化技术它减少了模型的有效容量。为了抵消这种影响我们必须增大模型规模。不出意外的话使用时最佳验证集的误差会低很多但这是以更大的模型和更多训练算法的迭代次数为代价换来的。对于非常大的数据集正则化带来的泛化误差减少得很小。
在这些情况下使用和更大模型的计算代价可能超过正则化带来的好处。
只有极少的训练样本可用时不会很有效。
、
第四种常用的办法就是通过和强制地让模型学习到比较小的权值。
这里有两个问题：
为什么和能够学习到比较小的权值？
为什么比较小的权值能够防止过拟合？
对于第一个问题：
首先看一下和的定义：
　　
其中为未加上惩罚项的代价函数。那么和形式的代价函数会如何影响的值呢？
未增加惩罚项的更新　

下的更新，其中为学习率

下的更新，其中为学习率

由上面的可以看出，加上惩罚项之后，明显减少得更多。是以减法形式影响，而则是以乘法形式影响，因此又称为。
对于第二个问题：
过拟合的本质是什么呢？无非就是对于非本质特征的噪声过于敏感，把训练样本里的噪声当作了特征，以至于在测试集上的表现非常稀烂。当权值比较小时，当输入有轻微的改动噪声时，结果所受到的影响也比较小，所以惩罚项能在一定程度上防止过拟合。
除了千方百计增加数据多样性，还要增加模型的多样性
、试试不断调整隐层单元和数量
调模型，要有点靠天吃饭的宽容心态，没事就调调隐层单元和数量，省的闲着，总有一款适合你。
一般来说，隐层单元数量多少决定了模型是否欠拟合或过拟合，两害相权取其轻，尽量选择更多的隐层单元，因为可以通过正则化的方法避免过拟合。与此类似的，尽可能的添加隐层数量，直到测试误差不再改变为止。
、试试两个模型或者多个模型
比如，两种不同分辨率的图像数据集，分别训练出网络模型和网络模型，那么将和的瓶颈层在一起，用一个全连接层或者随便你怎么连，试着玩玩没坏处连起来，，输入后的图片，训练结果可能比单个网络模型效果要好很多哦。
函数那些事儿
这里只从模型调优的角度来介绍下。
算是最常用的方法了，但是不会适用于所有问题。比如在数据量不足够大的情况下，训练出来的人脸模型性能差，有篇文章提出了权衡的解决方案。通过添加使得简单的就能够训练出拥有内聚性的特征。该特点在人脸识别上尤为重要，从而使得在很少的数据情况下训练出来的模型也能有很好的作用。此外，和也有其各自的好处，需要采样过程，有兴趣的可以多了解下。
花式调优
、设置
一般设定为的指数倍，如，，等，因为无论是多核还是加速，内存管理仍然以字节为基本单元做硬件优化，的倍数设置将有效提高矩阵分片、张量计算等操作的硬件处理效率。
不同的模型可能会带来意想不到的准确率提升，这个调节其实是有一定规律和技巧的。
、激励函数
激励函数为模型引入必要的非线性因素。函数由于其可微分的性质是传统神经网络的最佳选择，但在深层网络中会引入梯度消失和非零点中心问题。函数可避免非零点中心问题。激励函数很受欢迎，它更容易学习优化。因为其分段线性性质，导致其前传，后传，求导都是分段线性，而传统的函数，由于两端饱和，在传播过程中容易丢弃信息。激励函数缺点是不能用方法。同时如果了，容易无法再次。不过有办法解决，使用激励函数。
、权重初始化
权重初始化常采用随机生成方法以避免网络单元的对称性，但仍过于太过粗糙，根据目前最新的实验结果，权重的均匀分布初始化是一个最优的选择，同时均匀分布的函数范围由单元的连接数确定，即越多连接权重相对越小。的程序中初始化权重的例子，权重初始值从一个均匀分布中随机采样：

、学习速率
学习速率是重要的超参数之一，它是在收敛速度和是否收敛之间的权衡参数。选择或者伴随着迭代逐步减少都是合理的选择，最新的方法开始研究学习速率的自动调整变化，例如基于目标函数曲率的动量或自适应调参等。
、选择优化算法
传统的随机梯度下降算法虽然适用很广，但并不高效，最近出现很多更灵活的优化算法，例如、等，可在迭代优化的过程中自适应的调节学习速率等超参数，效果更佳。
获取更多测试干货，请搜索微信公众号：腾讯移动品质中心！一、屏幕尺寸
、规格：
的屏幕宽度同、、和的英寸屏幕宽度相同，即。屏幕垂直高度增加了，这意味着增加了的可视空间。￼
竖屏规格：××横屏规格：××
、状态栏
高度增加了像素￼
来电或者热点不会导致状态栏高度变化：
￼
、底部栏
高度增加了像素￼

=
高度不变，只是向上偏移了像素

=
二、设计原则
、所有设计的内容不包括滚动列表不要被屏幕圆角、上方传感器区域和下方键指示器区域遮挡。
￼
、提供全屏用户体验，这里主要是指列表要延展到屏幕底部。
￼
、避免将可交互控件放在屏幕底部或者屏幕圆角区域，防止视觉遮挡和系统边缘手势冲突。
￼
、不要刻意遮挡和和引导屏幕的关键位置，比如用纯黑色的和遮住上下区域，或者用闪亮的背景强调底部指示器区域。

上图为官方标准的黑色背景，注意不是纯黑色的，还能分辨传感器区域￼
三、安全区域
安全区域是指在屏幕顶部和底部区域之间能正常显示内容的区域。顶部区域包括导航栏、状态栏或者传感器区域，底部区域包含、工具栏或者键指示器区域。
、安全区域全屏状态


、普通安全区域包含所有状态：
￼
、安全区域布局



_

的布局为：


=
=


=使用
=
=
=
=

注意只适用于，如果是之前的版本则必须用和。

的布局为：
=
=
=
=

如果你的支持最低版本号是，可以使用锚点布局：
=
=
=
=

另外是的属性，而和是的属性。
如果想读取的，可以读取属性或者例如：

{}{{}{}}

注意需要在的或者的之后读取。
、
如果是低版本创建的可以在栏找到“”勾选即可。
修改前：￼
修改后：￼
备注：配置向下兼容，低版本也可以使用。
四、布局适配
、自定义导航栏
如果你的项目存在导航栏界面到全屏界面，或者手势滑动做很炫的过场动画，那么你可能会用到自定义导航栏，每个维护自身的实例。
=
=
=
={}
=
=


=

{
=
=
=
=

}{
=
=
=
=

}
￼
导航栏背景未扩展到状态栏，正常应该显示蓝色。
解决方案
设置的返回即可。
_{
=
=
=
=
}____
=


{

}
修改后正常显示了：

备注：扩展到的颜色为的值。如果失效，检查下是否将设置为，并且必须为添加到的一级。自定义导航栏后发现没有变化这样设置的时候会将遮挡。

{}

解决方案：设置



_
设置该值后也要相应调整下导航栏的布局，之前是在之内，现在要改为之外。
=
=
=
=
=

可以看到安全区域也更新了

{}

、自定义工具栏
可交互的固定组件是不能遮住键指示器，需要放置在安全区域底部内。

=
=


=

{
=
=
=
=

}{
=
=
=
=

}

放置在安全区域内导致键指示器区域背景留底了，怎么办？解决方案：系统的会自动扩展背景颜色到底部，可以让继承，或者直接放置一个的在底部当做背景也是可以的。注意高度不能超过，否则失效。
=
=
=
￼
同样，你也可以设置，让安全区域限制在工具栏上方。
、布局
如果底部区域不存在可交互的固定组件，那么需要延伸到屏幕底部。
{
=
=
=
=

}{
=
=
=
=

}

尽管最后一个会被键指示器遮挡，将向上滑动极限时，最后一个是显示在键指示器之上的。

、横屏交互适配
主要涉及到视频播放的边缘交互按钮。

内容内容只需放置在之内。同样底部如果没有固定可交互组件也要延伸到屏幕底部。￼

交互按钮屏幕角落边缘可交互按钮需要在内部，并且还需再限制在之内属性












___
效果如下：￼

{}{}

五、键指示器隐藏
一般情况只有视频全屏播放和游戏界面需要设置自动隐藏，如下：￼



__


__


__


打开自动隐藏功能

{

}
如果想手动控制隐藏功能，动态返回一个值，并且在更新的时候调用。

{
_
}

_=

六、屏幕边缘手势冲突
有时候你的需要控制从状态栏下拉或者底部栏上滑，这个会跟系统的下拉通知中心手势和上滑控制中心手势冲突。如果你要优先自己处理手势可以将系统手势延迟。




__


__


__


例如：

{

}
设置后下拉状态栏只会展示指示器，继续下拉才能将通知中心拉出来。如果返回则会直接下拉出来。
七、开源库更新支持
想必有不少开发受够了苹果繁琐的调用，的出现完美解决了这一大痛点。
比如原生代码调用：
=
=
=
=

使用后：
_{

}
代码简洁高下立判。
支持需要更新到版本

适配代码示例：

原生代码：{
=
=
=
=

}{
=
=
=
=

}
使用代码：_{
{
_
_
_
_
}{
_
_


}
}


参考教程：
、
、
、导语
现今的前端开发都讲究模块化组件化，即把公共的交互和功能封装到一个个的组件之中，在开发整体界面的时候就能像搭积木一样快速清晰高效。在使用开发我们的的组件库的过程中遇到了组件嵌套组件时需要传递的情况，官方的文档和教程目前还没有比较明确的指引，所以摸着石头过河，调通了想要的效果。记录下来方便大家和自己。
在中，为了让组件可以组合，我们使用来混合父组件的内容与子组件自己的模板。这样就实现了的内容分发。
作用域插槽是在引入的更进阶的功能，它是一种特殊类型的，用作使用一个能够传递数据到可重用模板替换已渲染元素。我的理解就是使用能在插槽里自定义模板并且使用组件传递过来的。这大大提高了组件开发的灵活性。
组件一期
在开发我们的组件时很自然就用上了这一特性。我们需要遍历数据中的选项数组，渲染成界面上的下拉选项列表。如果是比较复杂的允许自定义的，在组件里写死结构就行不通了，比如：

有了实现很轻松：

==
==

{{}} | {{}}{{}}
{{}}



很好，非常好，现在有一个新需求：这个列表有的时候想要脱离使用，比如就直接展示在页面上，不需要通过下拉弹出。
组件
这好办啊，作为组件开发的老司机们自然能想到把这个独立做成一个组件，页面可以直接调用，组件也可以在它之上再封装一层。
完美！
开干！
结构示意：
=
=__=
==
{{}}



结构示意：
=


=




然后问题来了，最里层的组件并没有接收到用户自定义的。通过查找官方文档以及谷歌，也没有找到使用方式传递的介绍和例子。
函数和
人总不能让尿给憋死，一条路走不通我们就看看有没有其他办法。在的官方文档上有这么一句话：

“推荐在绝大多数情况下使用来创建你的。然而在一些场景中，你真的需要的完全编程的能力，这就是函数，它比更接近编译器。”

查看文档，通过函数确实能够传递，以下图的方式

把作为方法的第二参数的一个属性传递到子组件中。
但是函数的缺点就是不灵活，特别是在定义你的组件的结构模板的时候，如果写很多函数，可能会觉得痛苦。它比较适用于外层组件仅仅是对内层组件的一次逻辑封装，而渲染的模板结构变化扩展不多的情况。
还好我们还有最后一把杀手锏。它可以让我们回到于更接近模板的语法上。具体关于的使用不是本文的主题，我们可以阅读使用文档，学习关于映射到的用法。
实现上文的嵌套例子
通过参阅文档及不断地摸索，最终实现了自己想要的功能。我们直接上关键代码的函数，看看有什么奥秘：
{
={


{}
}



={{}}

=
=
={}

=__
={}
={}
={}
={}
={{}}



=__
{{}}
{
==
{}
}

=__
=_




}
关键点：

在子组件的标签上通过属性可以向其传递自己的；

自身的可以通过对象获取，默认就是，具名就是它的名字。本例为“”；

如果不在标签上传递而是需要使用表达式传递，也可以通过对象。并且一个具体的对象其实就是一个函数，其内部的可以在参数中传入。比如本例中的


中对常用点的转换
上面的介绍涵盖了基本的用法，但是我们在组件中往往会用一些不基本但常用的特性。我们接下来一起看看。
细心地小伙伴可能发现了上面的代码中已经出现了这些用法

如果我们在组件中使用了，那么里就不能想之前在里那么自然的书写

而是需要

={{}}




上面的例子中就是用了方法二。

函数也是写在函数中中没有与相应的你必须自己来实现相应的逻辑。即通过属性传递值，并通过绑定事件来响应变化。
没有中的和
这意味着我们需要在函数或者的表达式中手写逻辑判断。或者如本例中使用三目表达式来实现。
这就是深入底层要付出的尽管麻烦了一些，但你可以更灵活地控制。
希望这边文章能让我们在开发组件的时候少走一些弯路，如果有大神有更好的办法或直接在中实现传递的功能，请多多指教！导语
在更新版本之后多了很多新功能，其中放出了很多用框架写的深度网络结构，大大降低了开发难度，利用现成的网络结构，无论还是重新训练方便了不少。最近笔者终于跑通的__模型，这里记录下如何完整跑通数据准备到模型使用的整个过程，相信对自己和一些同学能有所帮助。
提供了种网络结构的预训练的权重，全部是用数据集进行训练，这五种模型分别是、_、、、。各个模型的精度和计算所需时间如下。下面及介绍下如何使用去训练自己的模型。

这里的安装就不再说明了，网上的教程一大把，大家可以找到很详尽的安装的文档。
训练前准备：
使用来配置模型和训练参数，所以正常使用必须先编译库，这里可以下载直接编译好的库，解压压缩包后，把加入到环境变量中：


__=
我是把加到环境变量中，遇到找不到文件的报错，后来把放到_目录下，重新执行才可以
然后将和高级框架加入环境变量：
=
数据准备：
数据集需要转化成结构，提供了___，把结构数据集转换成格式。不过我们发现更简单的方式，提供一种更简单生产格式的方法。
首先需要先要标注图像相应标签，这里可以使用工具。每标注一张样本，即生成一个的标注文件。然后，把这些标注的文件，按训练集与验证集分别放置到两个目录下，在提供了__脚本。这里只要指定标注的目录名即可。接下来，然后需要我们把对应的格式转换成格式。


_=
_=\\\\\
_=___
____=

调用_，注意要指定_与_这两个参数。执行下面命令：
__=___=_
这样就生成了训练及验证用的与。接下来指定标签名称，仿照___，重新创建一个文件，指定标签名。
{


}
训练：
根据自己的需要，选择一款用数据集预训练的模型，把前缀放置在待训练的目录，这里文件保存了和，保存了网络的，这几个文件表示预训练模型的初始状态。
打开___文件，并做如下修改：

_修改为自己的



将所有___的地方修改为自己之前设置的路径共处


其他参数均保持默认参数。
准备好上述文件后就可以直接调用文件进行训练。
_\
\
__=___\
_=
监控：
通过工具，可以监控训练过程，输入西面指令后，在浏览器输入默认即可。
=



这里面有很多指标曲线，甚至有模型网络架构，笔者对于这里面很多指标含义还没有弄明白，不过感觉出这个工具应该是极其强大。不过我们可以通过_来看整体训练的情况。

从整体上看，曲线确实是收敛的，整体的训练效果还是满意的。另外，还提供了训练过程中利用验证集验证准确性的能力，但是笔者在调用时，仍有些问题，这里暂时就不详细说明了。
模型导出：
查看模型实际的效果前，我们需要把训练的过程文件导出，生产的模型文件。本来，_提供了的，但是需要提供输出的一般是之类的最后一层的激活函数命名，而提供提供了预训练好的网络，并不好找，所以_目录下还提供了__。
__\
__
_____\
_____\
_
导出完成后，在_下，会生成__、、、文件。
调用生成模型：
目录下本身有一个调用的例子，稍微改造如下：



___
___



____
__=\\\\_\\__
__=\\\\_\\__
_=
_=__
_=___

__
_=
__
__=
__
_=
___
____=
_

___
_=_____
=_______
__=_
__=
_=____
_


__
=_

__=_=
_=_____
=_____
=_____
=_____
_=_____

_=
_
_={___}

_______




_
__=
_=

_



____==____
=
=

下面是一些图片的识别效果：本文作者：

文件格式
以下的内容当设计接口的详细说明时，请移步的官方文档。文档的是用编写的，这玩意儿就是一个词汇表，相当于本体的实现，规范了对象、属性的表达方式而已。
言归正传。了解导出的数据格式的最好方法就是先制作一个简单得不能再简单的关键帧动画，看看它导出的是什么样的。
我们用制作了一个简单的动画，一个宽，高的长方形，在的正方形白色底的画布上，从位置移动到。动画的时间长度为为一秒帧。现在我们导出文件来看看
{
版本号
帧率，也就是，每秒帧数，这里是每秒帧数
开始帧
结束帧
画布宽度
画布高度
合成的名称。中将多个图层的层叠叫做“合成”
未知
引用资源列表
图层的信息，其元素是
}
再看属性：
{


{}

{}用于描述变换规则
，布尔值
{图层中的列表
这里是指
{}

属性的数量
未知
未知
在中对应的类型名称
}





}
是一个数组对象，本文的例子只有一个图层，所以中只有一个元素。在指明一些基本信息之余，关键看属性和属性。属性定义了该图层的变换规则。而属性定义了图层中各个形状。在本文的例子中，只包含一个图层，该图层包含一个形状：“”，即我们画的矩形。先看看属性中的内容：
{
{
布尔值，判断这个属性是否有动画

}
{


}
{
有动画
{如果有动画，那么这个值就是一个‘’
{


}
{


}
___





}{
{


}
{


}
___





}{

}
}
{变换的锚点

本例中动画的锚点在中心
}
{


}
}
属性描述关键帧信息。从上面的例子可以看到，矩形从第帧的位置，移动到了第帧的位置。很明显的关键帧表述。关于关键帧的表述第二小节详细讲述。
然后我们来看看属性中的内容。是一个数组，里面放着各种。每个由相关组件组成，例如本例中，一个圆角矩形的由四个部分组成






定义了外形，定义了边框，定义了填充，定义了变换。
{
=圆角矩形

{


}
{


}
{


}


}{

{


}
{


}
{


}
{}
{}



}{

{


}
{


}
文档中没有，应该是没用的


}{

{



}
{



}
{



}
{



}
{



}
{



}
{



}

}
化繁为简
如果你没时间完整读完整读完上面的文件接口分析。这里给出了一个简单介绍。是对文件的完全虽然很多高级功能不支持描述。文件中将一个合成描述为多个，每个上有很多，每个可以由多个组成。可以自定义变换，整个也可以自定义变换。
可以用下图来表示

再用一个简化的来表示就是：
={
{

{

{}
{}
{
{}
{}
{}
{}
}
}{

}
}{

}
}
看到\\属性，是不是感觉和的动画就很像了
源码分析
的源码其实很好看懂。如果略去复杂的矩阵运算和关键帧的运算过程。其实就三大块儿：





是接口的汇总。任何用播放的动画都会抽象成一个。渲染动画时，调用方法，将渲染过程移交给，后者根据的生成不同的动画单元，进行渲染工作。基本的构建见下图。

不同的的渲染方法，细化下来，都是一些基本的渲染方法。例如，以下是的方法：
={


==||==||==||=={绘制路径

}=={渲染

}=={渲染

}=={渲染子

}=={

}
}
二次开发
那么，基于上面的分析：
写好了复杂的类，等于向我们提供了一个强大的渲染引擎。在接口层和类中，我们可以添加自己的方法来最大程度的发挥的作用为己所用。
目前，已经为我们提供了方便的接口。
的减包实践
基本思路
同时支持、、的方式渲染。对于我们日常的动画需求，当遇到需要运用来实现的动画效果，势必都是难以用原生完成的，所以，让来支持的渲染没有必要。另外，涉及大量的操作，其效率比低。
所以，对于减包操作，我首先想到的是将和的渲染代码砍掉，这样应该能减少不少代码量。
减包后的我称作，压缩后代码从减小到。
实践
最近在写一些顶层接口，使得使用起来更加方便。

原文链接：从云计算布局和拓展看，新的“云计算热”和大数据、人工智能密不可分
前不久，万达网络科技集团与美国公司达成合作，借助的云计算技术，进入公有云业务，为国内企业提供云计算服务。著名的商业人工智能系统“沃森”也将被引入中国，最先应用于服务的将是“沃森”的自然语言交互功能。
类似的业内举动还有不少。腾讯日前宣布全面提速腾讯云的全球化布局，今年将新增大海外数据中心，目的是为走出去的中资企业和海外企业提供云服务；华为表示今年将强力投资打造公有云平台；神州控股旗下神州信息也把云服务列为年企业重点发展的战略支撑；在较早时候，百度正式将其云计算服务定名为“百度云”。从这些业内靠前的企业不约而同的举动看，云计算又火起来了，甚至有人专门提出了云计算时代的概念。
有这么一个比喻，提供云计算服务的公司就像自来水公司、电力公司或者银行，计算资源像水和电那样可随时获取，而企业和个人的数据信息可以像银行储蓄一样存在云计算的数据中心里。这个比喻虽然不完全准确，但形象反映了云计算作为基础资源服务和“神经中枢”的特点。其实，和这几年引人关注的人工智能相比，云计算也曾经这般火过。它在国内的兴起和热潮可以追溯到六七年前，在国外则更早，谷歌、、亚马逊、微软等科技公司很早就涉及云计算领域和提供云计算的服务，现在已实实在在地实现了盈利。
从提供云计算服务的都是业内巨头这一点可以看出，云计算是产业水到渠成的产物，是由于计算量越来越大，数据越来越多、越来越动态、越来越实时所催生出来的。这也可以解释为什么阿里巴巴这样一家电子商务公司，现在将满足它自身需求所建设的数据中心、业务的“阿里云”服务卖给其他中小企业乃至个人。与此同时，随着众多的企业拥抱“互联网”，积极转型，对云服务的需求越来越强烈和普遍，云计算早已从概念变成了实际的应用。最简单的例子是，如果你想做个动画设计，本来需要多台专业的计算机，现在只需要购买一份或一个时段的云服务，就能解决存储、计算等需求。
值得注意的是，从最新的云计算布局和拓展看，新的“云计算热”和大数据、人工智能密不可分。云计算是大数据和人工智能发展的基石，又不断在“进化”：除了基础资源和节省成本能力，它更加主动地提供更集约和更高效的计算方式，为“智能时代”提供核心驱动力量。
如果说百度、阿里和腾讯等互联网企业是由内而外地输送云计算服务能力，帮助其他企业结合自身业务用好“云”，那么像万达则是在已有广泛业务和产业资源的前提下，从外部“借来”云计算的技术和能力来打造云服务平台。一个是更懂互联网，一个是更懂实体业务，但两者都毫不犹豫地拥抱云计算，都说明了云计算火得有道理，在未来的产业发展中具有极其重要的支撑作用。
《人民日报》年月日版导语的出现，一方面对于整个手机行业的发展极具创新领头羊的作用，另一方面也对现有业务的页面适配带来了新的挑战。对于手中的各业务来说，受影响的页面挺多，应该采取什么快速有效的办法来应对呢？

目前的页面可以分为通栏页面和非通栏页面两种，每种页面都可能有底部操作栏，具体如下：
通栏页面
顶部通栏
某些业务的一级页面多数使用了顶部通栏的效果，由于在状态栏增加了的高度，对于现在通栏规范的内容区域会有遮挡情况。
解决方案：对于通栏页面在页面顶部增加一层高度的黑色适配层，整个页面往下挪。
这种做法虽然不符合苹果要求的设计规范，但由于短时间内更新全部的成本太高，可以先这样简单处理，后续再优化的设计展现。

底部栏操作栏
有些页面使用了底部栏操作栏，由于去掉了底部键，取而代之是高度的，对于目前的底部栏操作栏会造成一定的阻碍。
解决方案：在页面底部增加一层高度的适配层，将操作栏上移，颜色可以自定义。

非通栏页面
底部栏操作栏
原因同上，在底部有高度的，对于目前的底部栏操作栏会造成一定的阻碍操作。
解决方案：在页面底部增加一层高度的颜色块，将操作栏上移，颜色可以自定义。

关于安全区域
这里可能有人会有疑问，为什么非通栏下的页面内容是通到底部的，而按钮却是在安全区域上方呢？
这个问题涉及到安全区域，和先前版本的不同之处在于，比较重视安全区域了。这意味着，如果给页面元素设置它会渲染在屏幕顶部的之下，也就是状态栏下面。如果给页面元素设置它会渲染在屏幕底部的之上，也就是底部安全区域上面。
为了解决这个尴尬的情况，苹果公司给我们提供了一个设置的标签的解决方案。
可以设置的选项就是它有三个可选值：

可视窗口完全包含网页内容
网页内容完全覆盖可视窗口
同的作用

通过给页面设置=，可以将页面的布局区域延伸到页面顶部和底部。

对于通栏页面，设置了的属性，发现会不生效，经过跟同事查看手源码后发现，终端对于通栏的情况设置了属性，去除了上下安全区域的边距，使得安全区域的上下边距失效了。
另外提一点，经过个版本的测试，发现在渲染页面的时候，底部按钮在位置表现上不一致，可能是一个还未解决的：

使用方案：
根据以上的设计方案，可以这样处理：

修改页面属性
在页面链接一个来给访问的页面增加对应的适配层
在页面上给对应的结构加上适配的类名




{
增加头部适配层
{



{








}
}

增加底部适配层
{



{








}
}

导航操作栏上移
{

}
}

=

=
===
==
=====
==
==
===
==
游戏中心


==
=
=
=
=游戏

=
=
=直播

=
=
=赛事

=
=
=电竞圈

=



如上，这样做的问题是，要修改的页面非常多，而且给页面带来了额外的类名，对以后的样式移除也有一定的工作量。
既然使用的方式来解决这个问题不是很完美，是否可以通过终端的方式给增加适配层，从而解决这个问题呢？
使用终端方案：
经过跟终端同学的沟通，确定是可以通过终端的方式，针对机型，在原生界面初始化的时候可选择是否要增加适配层，这样页面就不需要样式处理了。
具体是通过链接中增加参数来进行适配

参数名_控制适配行为
参数名_控制顶部适配层颜色
参数名_控制底部适配层颜色




_
作用





增加顶部适配层，只对透明导航栏风格有效



增加底部适配层



顶部适配层颜色在主资源加载完成后填充颜色，只对透明导航栏风格有效



底部适配层颜色在主资源加载完成后填充颜色



对于顶部通栏的页面，通过加参数来增加顶部黑色适配层。_=_=

对于有底部操作栏包括通栏和非通栏，通过加参数来增加底部适配层以及设置颜色。_=_=_=
这里的=为和两个特性数字相加

这样，无需写一行代码，只需要给页面链接增加适配参数，就可以完美适配了
以后的头部优化之后，也可以通过参数配置去掉目前的顶部黑色适配层
更多具体技术实现可以查看这里：
、什么是模型
是在线性回归的基础上，套用了一个逻辑函数。而回归是一种及其简单的模型，我们一个普通的二元函数=，就属于回归的一种。它虽然简单，但是它有一个极其致命的缺点：线性回归的鲁棒性很差。这使回归模型在机器学习领域上表现很一般。但是套用了逻辑函数之后，逻辑回归模型在克服了线性回归鲁棒性差这个缺点，使得它在机器学习上面有了一席之地。像腾讯算法大赛这类二分类问题，就可以用逻辑回归来实现。
、模型的代码实现
首先导入必要的工具包：

接着用工具包里面的_函数把训练集和测试集导入：

分离出特征值和，在下面的代码中，_是特征值名字的列表，如‘’’’…：

从_里导入。在中提供了模型，我们直接引入相应的包就可以使用模型：

引入相应的模型后，我们就可以调用中的函数用来训练模型参数：

模型训练好了之后，接下来就是进行结果的预测了。

其中是_产生的一个预测概率，由此我们得到了腾讯算法大赛要求的概率将其输出既可得到所要的文件，具体实现在官方的中有相应的代码实现，在此不再赘述，附上官方的链接，有需要的同学可以参考：腾讯社交广告算法大赛
、模型对维度过大的特征值的处理
为了使得预测结果不会被某些维度过大的特征值而主导。中提供了标准化数据相应的函数，保证每个维度的特征数据方差为，均值为。由此让我们的模型对此次算法大赛中一些离散度较高的特征有了应对之策，例如下图的数据大小相差较大，会导致结果受到影响，使用标准化处理可以避免这个问题，使得我们可以得到一个更好的成绩。

以上即为模型结合本次腾讯算法大赛的简单使用教程，如有错误，欢迎大家指出！背景描述
由于刚进部门，部门基本每个项目都需要，以前自己对基本没怎么了解，但是有一定开发的基础。在学习的过程中，结合自己的经验，对遇到的几个问题刨根揪底，好好掰扯掰扯。
问题回顾
首先，借用腾讯云官网中的一个图片，来解释一下的基本流程和原理，这两张图对是什么解释的非常清楚。但是学习的过程中又会涉及到很多的概念，会让初学者很困惑。下面逐个掰扯掰扯。


最困惑的莫过于回源，回源怎么影响用户的访问和的行为。
源站，域名，回源又是什么关系。
如何进行基本的测试和信息查看。
思考过程
在介绍回源之前，根据自己的理解，来介绍一下用户通过域名访问或者下载基于协议的一段主要行为和动作：

如上图所示，用户在浏览器中敲入=以后，会发生哪些行为，涉及哪些动作，跟我们介绍的有什么关系，跟腾讯云上的服务又有哪些关系？
首先用户输入网址后，按下回车，浏览器经过内核处理后，会构建请求忽略前面的解析过程以如下请求为例，可以看到请求的，，，等参数。其中代表请求的资源真实所在的位置。在协议中是必带的，否则返回参见小节，参考

用户将请求发送到对应的远端服务器上，现在业界用的最常见的是，等，服务监听本机的端口可配置，接受请求，解析静态文件，包括，链接的，图片，动画等等。这里的静态文件，我理解加速类型中对应的静态加速是对他们的加速。举个简单的例子，取一个相对简单的网页源代码为例，在和甚至指定的有很多需要加载的静态资源。

同时用户的部分动态业务请求，例如的，等代码会到后台对应的模块去处理，以我有限的知识，以前我大学时间用的比较多的是。基于规范实现，会处理动态请求，例如数据库操作等等，然后将请求转发到后端的业务逻辑，甚至数据库，然后将结果返回以返回给服务器浏览器。
后面的几步不讨论了，与今天讨论的无关。
今天要讨论回源，源站，加速域名到底是什么，刚开始这个概念一直没搞清楚，看看腾讯云官网的文档介绍：
先看看回源是指什么：


回源是回源的时候，请求中字段指定的地址。那么字段又是干什么用的呢？在里面很多地方说的不清不楚，还是看看里面怎么给出官方的说法：

如上红框中的说明，是指请求到达一个服务器或者网关？后，用来区分内部的多个，例如在同一个地址根目录下代表多个名称的目录，具体是指哪一个。
上面说得可能也比较拗口，那我们拿一个具体的遵循规范的服务器实例来看看到底怎么回事，以为例，如下图所示，的配置，可以支持同一个地址下配置多个，每个都有对应的，以及对应的访问目录。例如如果为，那么请求会转发到下的路径。
配置，参见：

到这里，我们就能回源是什么了。
那源站又是什么呢？实际上从上图可以看出，如果回源，只是指定了在回源站点上最终访问的或者目录，那具体是哪个站点哪个下面的目录呢。这个时候，就需要通过源站的配置来获得了，如果直接是，那就是对应服务器。如果源站配置的是域名，那么会先将源站域名，通过解析，获得真实的地址，在到该地址的站点下面，寻找对应的目录。
顺便再来说一下自己对这个命令的理解吧，如下命令模仿请求，通过选项，强制将请求包头设置为指定的如下图所示，由于在进行的配置，前面的请求中的地址是一个的地址，结果返回为，表示在请求可以返回结果，已经成功缓存源站的数据。

既然节点中，已经存在缓存的资源，那么通过加速域名访问，真实的结果是什么：

网上对这几个字段解释如下，还待详细学习：
表示命中节点的内存
表示命中节点的磁盘
表示没有命中
注：如上仅是个人理解，如果有误，欢迎各位指正，谢谢导语本文用容易理解的语言和例子来解释了决策树三种常见的算法及其优劣、随机森林的含义，相信能帮助初学者真正地理解相关知识。

决策树
引言
决策树，是机器学习中一种非常常见的分类方法，也可以说是所有算法中最直观也最好理解的算法。先举个最简单的例子：
：你去不去吃饭？
：你去我就去。
“你去我就去”，这是典型的决策树思想。
再举个例子：

有人找我借钱当然不太可能。。。，借还是不借？我会结合根据我自己有没有钱、我自己用不用钱、对方信用好不好这三个特征来决定我的答案。
我们把转到更普遍一点的视角，对于一些有特征的数据，如果我们能够有这么一颗决策树，我们也就能非常容易地预测样本的结论。所以问题就转换成怎么求一颗合适的决策树，也就是怎么对这些特征进行排序。
在对特征排序前先设想一下，对某一个特征进行决策时，我们肯定希望分类后样本的纯度越高越好，也就是说分支结点的样本尽可能属于同一类别。
所以在选择根节点的时候，我们应该选择能够使得“分支结点纯度最高”的那个特征。在处理完根节点后，对于其分支节点，继续套用根节点的思想不断递归，这样就能形成一颗树。这其实也是贪心算法的基本思想。那怎么量化“纯度最高”呢？熵就当仁不让了，它是我们最常用的度量纯度的指标。其数学表达式如下：

其中表示结论有多少种可能取值，表示在取第个值的时候发生的概率，对于样本而言就是发生的频率总个数。
熵越小，说明样本越纯。
以一个两点分布样本=或的熵的函数图像来说明吧，横坐标表示样本值为的概率，纵坐标表示熵。

可以看到到当==时，也就是说所有的样本都为，此时熵为
当==时，也就是说所有的样本都为，熵也为
当==时，也就是样本中，各占一半，此时熵能取得最大值。
扩展一下，样本可能取值为种。。。。。可以证明，当都等于时，也就是样本绝对均匀，熵能达到最大。当有一个为，其他都为时，也就是样本取值都是，熵最小。
决策树算法

假设在样本集中，对于一个特征，它可能有，。。。这些取值，如果用特征对样本集进行划分把它当根节点，肯定会有个分支结点。刚才提了，我们希望划分后，分支结点的样本越纯越好，也就是分支结点的“总熵”越小越好。
因为每个分支结点的个数不一样，因此我们计算“总熵”时应该做一个加权，假设第个结点样本个数为，其在所有样本中的权值为。所以我们可以得到一个总熵：

这个公式代表含义一句话：加权后各个结点的熵的总和。这个值应该越小，纯度越高。
这时候，我们引入一个名词叫信息增益，，意思就是这个特征给样本带来的信息的提升。公式就是：，由于对一个样本而言，是一个固定值，因此信息增益应该越大越好。寻找使得信息增益最大的特征作为目标结点，并逐步递归构建树，这就是算法的思想，
好了以一个简单的例子来说明信息增益的计算：

上面的例子，我计算一下特征的信息增益
首先计算样本的熵

再计算总熵，可以看到特征有个结点、、，其分别为个、个、个
所以的权值为的权值为的为
因为我们希望划分后结点的纯度越高越好，因此还需要再分别计算结点、、的熵
特征=：个是、个否，其熵为

特征=：个是、个否，其熵为

特征=：个是、个否，其熵为

这样分支结点的总熵就等于：

特征的信息增益就等于=
类似地，我们也能算出其他的特征的信息增益，最终取信息增益最大的特征作为根节点。
以上计算也可以有经验条件熵来推导：=|，这部分有兴趣的同学可以了解一下。

在算法中其实有个很明显的问题。
如果有一个样本集，它有一个叫或者姓名之类的唯一的的特征，那就完蛋了。设想一下，如果有个样本，这个特征肯定会把这个样本也分成份，也就是有个结点，每个结点只有一个值，那每个结点的熵就为。就是说所有分支结点的总熵为，那么这个特征的信息增益一定会达到最大值。因此如果此时用作为决策树算法，根节点必然是这个特征。但是显然这是不合理的。。。
当然上面说的是极限情况，一般情况下，如果一个特征对样本划分的过于稀疏，这个也是不合理的换句话就是，偏向更多取值的特征。为了解决这个问题，算法采用了信息增益率来作为特征选取标准。
所谓信息增益率，是在信息增益基础上，除了一项来惩罚值更多的属性。

而这个其实就是特征个数的熵。
为什么这样可以减少呢，以上面的例子来理解一下。如果把个样本分成了份，那这个特征的取值的概率都是，文章引言已经说了，样本绝对均匀的时候，熵最大。
因此这种情况，以为特征，虽然信息增益最大，但是惩罚因子也最大，以此来拉低其增益率，这就是的思想。

决策树的目的最终还是寻找到区分样本的纯度的量化标准。在决策树中，采用的是基尼指数来作为其衡量标准。基尼系数直观的理解是，从集合中随机抽取两个样本，如果样本集合越纯，取到不同样本的概率越小。这个概率反应的就是基尼系数。
因此如果一个样本有个分类。假设样本的某一个特征有个取值的话，其某一个结点取到不同样本的概率为：
因此个分类的概率总和，我们称之为基尼系数：

而基尼指数，则是对所有结点的基尼系数进行加权处理

计算出来后，我们会选择基尼系数最小的那个特征作为最优划分特征。
剪枝
剪枝的目的其实就是防止过拟合，它是决策树防止过拟合的最主要手段。决策树中，为了尽可能争取的分类训练样本，所以我们的决策树也会一直生长。但是呢，有时候训练样本可能会学的太好，以至于把某些样本的特有属性当成一般属性。这时候就我们就需要主动去除一些分支，来降低过拟合的风险。
剪枝一般有两种方式：预剪枝和后剪枝。
预剪枝
一般情况下，只要结点样本已经纯了，树才会停止生长。但这个可能会产生过拟合，因此我们没有必要让它生长，所以在这之前，设定一些终止条件来提前终止它。这就叫预剪枝，这个过程发生在决策树生成之前。
一般我们预剪枝的手段有：
、限定树的深度
、节点的子节点数目小于阈值
、设定结点熵的阈值
等等。
后剪枝
顾名思义，这个剪枝是在决策树建立过程后。后剪枝算法的算法很多，有些也挺深奥，这里提一个简单的算法的思想，就不深究啦。

该剪枝方法考虑将树上的每个节点都作为修剪的候选对象，但是有一些条件决定是否修剪，通常有这几步：
、删除其所有的子树，使其成为叶节点。
、赋予该节点最关联的分类
、用验证数据验证其准确度与处理前比较
如果不比原来差，则真正删除其子树。然后反复从下往上对结点处理。这个处理方式其实是处理掉那些“有害”的节点。
随机森林
随机森林的理论其实和决策树本身不应该牵扯在一起，决策树只能作为其思想的一种算法。
为什么要引入随机森林呢。我们知道，同一批数据，我们只能产生一颗决策树，这个变化就比较单一了。还有要用多个算法的结合呢？
这就有了集成学习的概念。

图中可以看到，每个个体学习器弱学习器都可包含一种算法，算法可以相同也可以不同。如果相同，我们把它叫做同质集成，反之则为异质。
随机森林则是集成学习采用基于策略的一个特例。

从上图可以看出，的个体学习器的训练集是通过随机采样得到的。通过次的随机采样，我们就可以得到个样本集。对于这个样本集，我们可以分别独立的训练出个个体学习器，再对这个个体学习器通过集合策略来得到最终的输出，这个个体学习器之间是相互独立的，可以并行。
注：集成学习还有另一种方式叫，这种方式学习器之间存在强关联，有兴趣的可以了解下。
随机森林采用的采样方法一般是是，对于原始样本集，我们每次先随机采集一个样本放入采样集，然后放回，也就是说下次采样时该样本仍有可能被采集到，经过一定数量的采样后得到一个样本集。由于是随机采样，这样每次的采样集是和原始样本集不同的，和其他采样集也是不同的，这样得到的个体学习器也是不同的。
随机森林最主要的问题是有了个结果，怎么设定结合策略，主要方式也有这么几种：
加权平均法：
平均法常用于回归。做法就是，先对每个学习器都有一个事先设定的权值，

然后最终的输出就是：

当学习器的权值都为时，这个平均法叫简单平均法。
投票法：
投票法类似我们生活中的投票，如果每个学习器的权值都是一样的。
那么有绝对投票法，也就是票数过半。相对投票法，少数服从多数。
如果有加权，依然是少数服从多数，只不过这里面的数是加权后的。
例子
以一个简单的二次函数的代码来看看决策树怎么用吧。
训练数据是个随机的真实的平方数据，不同的深度将会得到不同的曲线
测试数据也是随机数据，但是不同深度的树的模型，产生的预测值也不太一样。如图

这幅图的代码如下：
我的是环境，需要安装、、这三个库，需要的话直接，大家可以跑跑看看，虽然简单但挺有趣。









____==____

准备训练数据
=
=

=
=

=
_=

决策树深度及其曲线颜色
=
=

实际值
=
===实际值

准备测试数据
_=

构建决策树
=
循环不同深度情况下决策树的模型，并用之测试数据的输出

设置最大深度预剪枝
__=
训练决策树

用训练数据得到的模型来验证测试数据
_=_
画出模型得到的曲线
__=====
一些画图的基本参数
==


===
二次函数决策树=
_

参考资料
机器学习周志华
机器学习课程邹博本文作者：黄翔

背景
腾讯是一个业务类型非常丰富的互联网公司，这些业务部署在全球不同地理位置的几十个数据中心里面，有一张专用的广域网将这些数据中心互联起来以提供长途带宽服务，我们称这张广域网为，本文将以技术视角简述腾讯广域网这些年的发展。

图一：广域网示意图
广域网以一个城市为一个网络节点，每个节点由若干网络设备路由器交换机组成，节点之间通过长途专线连接起来，上层是控制系统与监控平台。所以，由设备、链路、控制系统、监控平台这四大组件构成了完整的广域网系统，以承载跨地域数据中心间的流量。
第一代广域网起步阶段
十多年前，腾讯开始在多个城市建设数据中心，也开始搭建多数据中心间互通的广域网，称之为第一代广域网。当时的网络场景和架构都比较简单，只需要将几个地方的数据中心通过运营商提供的长途专线连接起来即可。我们使用最传统的商用路由器搭建了一张网络，通过协议传递路由，从而打通数据中心间的流量。
第一代广域网在网络技术应用上也非常简单，控制流量走向使用的最传统的最短路径优先的算法，我们把从运营商租赁来的不同的专线根据带宽、时延等因素设置不同的开销值，流量发起点根据对网络拓扑的掌控情况，把去往相同目的地的所有流量按照一样的规则统一发送到开销最小的链路上，并且没有任何，只做尽力而为的转发。
随着业务的发展，这张广域网的规模和流量快速增长，我们在运营这张网络的过程中，也遇到越来越大的挑战，主要集中在以下几个方面：
对网络拥塞显得无能为力，由于网络是一个特点的网络，面对部分链路拥塞，并没有能力通过技术手段来调度流量去减缓拥塞。
对所有业务一视同仁，没有精细化、差异化的服务，当故障和拥塞发生时，一损俱损，随机丢包。
网络整体利用率很难优化，经常出现某些链路长期高负载甚至拥塞，有些链路长期闲置。这个非常具有讽刺意味，明明有闲置的链路资源，却无法帮助那些繁忙的链路来承载部分流量压力。
随着网络节点越来越多，网络结构的规划难度越来越大，导致运营复杂度越来越高。面对这些挑战，我们意识到原来的老路已经很难走下去了，我们必须使用新的方法来解决这些问题。
第二代广域网分布式流量工程时代
在年前后，面对广域网运营中的诸多挑战和新型业务开放平台等的新诉求，我们开始构建腾讯的第二代广域网。在设计这张网络的时候，我们定下了三个关键目标：多业务承载能力：这张广域网需要具备同时承载不同类型业务的能力，在一张物理广域网上面可以虚拟出多张虚拟网络，给不同业务同时提供流量调度服务且完全隔离。在投入使用初期，该网络承载了自营业务、开放平台业务、企业业务等，而在共有云业务蓬勃发展的今天，也已经为越来越多的我们公有云上的客户提供等网络服务。差异化服务能力：这张广域网要有能力识别不同重要级别的流量，并针对这些流量提供差异化的服务，我们将流量分为金、银、铜三个等级，不同等级的流量会获得不同级别的服务，包括时延、质量、拥塞情况下的保障服务等，同时进行差异化的成本核算，协助业务根据自身应用逻辑上的特点更好的去使用广域网资源。流量自动化调度能力：这张广域网需要动态感知到每条广域链路上的流量负载情况，并根据提前设定好的调度策略实时调度流量路径，避免网络拥塞，即把所有广域链路当成一整个资源池，有能力让闲置链路去帮助繁忙链路承担部分压力。当然，往往闲置链路都是开销比较大的链路，哪些流量可以调度到这些链路上来承载，这跟流量等级和差异化服务是强相关的。我们需要制定严密的调度策略，保证高等级流量永远可以获取质量更好的服务。
为了到达上述业务目标，我们经过了较长时间的论证和测试，最终选定了这套技术体系。解决了传统网络的诸多问题和弊端，提供了更灵活与智能的流量调度能力，使其技术本身非常复杂。当时在国内是大规模广域网上的首例应用，勇敢的迈出这一步，也承担了非常大的压力，但回过头来看，可以称之为腾讯智能广域网的第一步，为后面的演进做了重要的积累。

图二：技术体系
技术体系一改上一代传统网络的“”与“”转发模式，采用“”与“”的模式，使网络可以实时感知到流量负载并自动调度，这其中的差异重点描述如下：“”与“”：传统网络转发数据包的时候，都是根据目的进行的转发，每一跳的网络节点都是自行决定数据包转发到哪条链路上，目的仅仅是保证可达性，当网络和流量模型复杂到一定程度的时候，整体上的流量组织是无序的，且较难管理。网络的“”的特点，使流量的起始端需求者根据网络的拓扑和资源占用情况一开始就决定流量路径需要经过哪些节点和链路，并通过信令协议沿着已经计算好路径建立转发隧道并沿途预留带宽资源，这个机制就把复杂网络中所有节点各自为政的转发模式，转变成由需求驱动的一组端到端转发路径隧道的集合，并且这些路径的管理性是非常便捷的。“”与“”：传统网络的每一跳网络节点，都会根据路由表尽力而为的转发流量，而从来不会考虑各个链路是否能够承受这么多的流量，所以当流量大小超过链路带宽时，只有丢包，所以称之为“”。网络，由于已经把所有转发需求抽象成端到端的一条条隧道，这些隧道的建立过程本身就是的建立过程。每条隧道都有自己的带宽需求，在创建的时候，都会考虑沿途的节点和链路的剩余资源是否能满足这个带宽需求，如果可以满足则路径创建成功，如果不能满足则会选择其他路径，所以这个“”机制就保证了全网所有用于承载流量的隧道最终都可以获得自己需要的带宽，而不再是甩锅式的把同一个目的地的流量一股脑的全部丢给最近的下一跳，也不考虑是否会发生拥塞。
的技术应用让广域网可以感知到流量需求和负载情况，很大程度提高的整网利用率，以及保证在故障场景下，将繁忙链路上的流量自动迁移到相对空闲的链路上。但是，广域链路永远都是昂贵且稀缺的资源，在流量爆发式增长的大背景下，扩容速度总是跟不上流量增长速度，使得很多链路长期处于热点的状态。面对这个挑战，我们采用了将流量分类，并提供差异化的服务，当网络故障导致拥塞的时候，可以保证重点流量仍然保留在最优的路径上转发，非重点流量被调整到绕行链路上。这个基于差异化服务的调度策略如下：

图三：差异化服务与流量调度我们将整网流量分为“金”、“银”、“铜”三个级别，并用报文头内的特殊字段进行标识，业务调用我们提供的在数据中心网络内给不同流量进行自动打标，以便当这些流量送到广域网上的时候，可以被识别出来是什么级别的流量。
在广域网，任意两个有通信需求的节点之间，都会创建种类型的隧道，即“金隧道”、“银隧道”、“铜隧道”，用于承载不同标记的流量，并且每种类型的隧道都创建了等价的条两点之间一共条隧道，金流量在条金隧道内做负载均衡的转发，即每条金隧道承载的金流量，银和铜流量也同理。
这任意两点间的条隧道的路径，都是由头端节点流量发起端来计算并且创建的，带宽充足的情况下，这条隧道都会走最短路径。当出现流量突发或部分链路故障等情况，原有路径的带宽不足以承载条隧道的全部流量的时候，头端节点可以感知到这个变化，并通过重新计算这条隧道的路径，将流量搬离热点链路，并且每种级别流量的搬迁颗粒度都是。
小节一下，第二代广域网于年前在国内首创采用大规模技术，提供了“多业务承载”、“差异化服务”、“精细化调度”等诸多核心能力，为公司这些年的高速增长在基础架构环节做出了重要贡献。我们几年前落地的这个广域网能力，放到几年后的今天，也是在国内同行位于领先位置的，这个主要源于大胆的创新和试错精神。应属当代网络界复杂度最高的技术体系，导致国内很少有大规模商用，网络设计者大都会认为这个技术体系太复杂，大规模部署会遇到很多问题，故很少会去尝试。所以，破除刻板印象显得尤为重要，我们用实践和历史证明了再复杂的技术都可能被处理的很好，从而迸发出惊人的能力。
第三代广域网集中控制的无人驾驶时代
虽然第二代广域网行业领先且给业务带来非凡的价值，但我们并没有停止思考后续的优化和演进策略。随着广域流量的持续大规模增长、网络行业技术趋势的发展、网络运营经验的积累，我们很快又找到了新的挑战和发力点。在年前后，我们开始着手第三代广域网的设计研发工作，需要解决的挑战点如下：全局最优：网络中所有隧道的路径，都是由头端节点根据自己的需求计算出来，然后通过协议去沿路抢占带宽资源，而不会关心其他节点发起的隧道是否有资源可用，整网的带宽资源遵循“先到先得”的规则进行分配。所以，针对每个头端节点，可以做到本地发起的隧道是在全网剩余资源条件下的最优，但站在全局的角度，很难达到全网整体利用率最优。如图四，头端节点分布式计算路径，计算的路径为，已经占用了沿途绝大部分带宽，导致与无法申请到带宽，只因没有全局视野；如果具备全局视野，可以将的路径调整到，这样可以满足所有需求。

图四：分布式路径计算的缺陷
成本与容量：第二代广域网使用技术体系来达到业务目标，这套复杂的技术体系无论在控制平面还是转发平面对商用大型路由器的依赖都非常高，而路由器无论是在每比特成本的控制和容量提升的演进方面，都很难满足我们流量增长的趋势。
面对以上两个挑战，我们引入了的思路来解决问题：
取消各个头端节点计算隧道路径的权限，全网的路径计算工作由一套上层系统来统一完成，将计算好的路径分布式的下发给各个头端节点，以达到全局最优。
取消信令协议抢占资源建立路径的机制，在转发平面采用的转发模式，控制器将路径信息转化成“”下发给头端节点，头端节点将“”封装在数据包外层发送出去，沿途各个节点仅根据“”做“傻瓜式”转发。
整体演进思路上，都是将原来路由器上复杂的协议栈和功能抽离出来，上收到上层软件平台，一方面降低对路由器的要求以控制成本和选择更简单更大容量的设备，另一方面以全局视角整体审视网络负载情况进行全局优化。
第三代广域网体系架构基本的工作原理，可通过下图中的例子进行说明，流程如下：

图五：广域网转发模式
通过网络节点路由器提供的将全网的拓扑信息上收，并通过预先设定好的规则，给全网的每一条链路都分配一个唯一的，并把这个的信配置在所有节点上。如图五，各条链路获得的值为。
同时从网络节点把整网的流量负载信息全量上收，根据核心算法和调度策略进行全网路径的集中计算，保证所有流量都有足够的带宽，并能达到全网整体利用率的最优。
计算出到的金、银、铜三种路径分别为、、，并且自动翻译成下发给节点。节点根据控制器下发的生成本地金、银、铜路径的转发表项以承载流量。
以到的铜牌流量转发为例：
流量送到上之后，识别出是铜流量，则会将报文头部封装一个、、，并发往；收到后，最外层，看到第二层，转发给；收到后，最外层，看到第三层，转发给；收到后，最外层，完成全路径的的转发，将最原始的报文转发给下游网络。
可以从上面的工作原来看出，这一整套技术体系大幅度简化了网络节点的复杂度，使网络节点不需要计算、不需要通过复杂的协议进行协商、不需要构建复杂的转发表项，尤其是中间节点完全不需要感知任何跟业务相关的内容，看到所有数据包都只做一个再根据下一层转发出去的简单动作。

图六：广域网体系结构
通过技术架构，我们开始将这些由路由器组成的网络节点慢慢替换成容量更大、成本更低、逻辑更简单的硬件设备，把控制平面全部上收到，在保证容量可持续性发展的同时，也能够更容易的对上的核心算法、新特性、调度策略进行快速迭代和演进。
总结
用汽车导航来做一个类比式的总结：

第一代广域网：最早的汽车导航或早期非智能导航时代，导航拥有本地静态地图，按照最短路径优先的原则，输出路径仅保证可达性，从不考虑交通拥堵、红绿灯、限行等情况。

第二代广域网：互联网导航时代，开始可以通过互联网的能力感知到交通流量负载情况，并可以综合考虑诸多因素高速优先、距离最短、时间最短、红绿灯最少等进行计算选路，极大的优化了人们的出行体验。但各大导航自行计算、人们也按照自己的意愿随意选择是否执行方案，最终也很难达到全局交通的最高效率。

第三代广域网：无人驾驶时代，全局统一的导航平台，根据与出行者签订的，集中计算所有路径，并将路径直接下发到所有交通工具，自动按照规划路径行驶并送达目的地，实现无人驾驶的同时，达到全局交通效率最优。


腾讯三代广域网经过了十多年演进，在支撑了公司业务飞速发展的同时，也一直在国内同行处于最领先的位置。可以预期的是，面对云计算、物联网、人工智能带来的业务革新，广域网会持续遇到新的挑战，我们也将满怀期待的迎接挑战，用科技的力量去支持我们的业务发展，持续打造我们的行业影响力。导语
对于服务，不管是上新，还是平时产品运营，节假日活动等，在这之前都需要评估现网压力承受能力，提前进行扩容，并做到防患于未然。所以对网站性能压力测试是必不可少的，这样才能充分了解自己部署的服务。只有让服务器处在高压情况下才能真正体现出各种设置所暴露的问题。中有个自带的，名为的程序，可以对或其它类型的服务器进行网站访问压力测试。
命令原理
命令会创建很多的并发访问线程，模拟多个访问者同时对某一地址进行访问。它的测试目标是基于的，因此，既可以用来测试的负载压力，也可以测试、、、等其它服务器的压力。
命令对发出负载的计算机要求很低，既不会占用很高，也不会占用很多内存，但却会给目标服务器造成巨大的负载，其原理类似攻击。自己测试使用也须注意，否则一次上太多的负载，可能造成目标服务器因资源耗完，严重时甚至导致死机。

参数说明

=




在测试会话中所执行的请求个数本次测试总共要访问页面的次数。默认时，仅执行一个请求。

一次产生的请求个数并发数。默认是一次一个。

测试所进行的最大秒数。其内部隐含值是。它可以使对服务器的测试限制在一个固定的总时间以内。默认时，没有时间限制。

包含了需要的数据的文件，文件格式如“==”使用方法是。配合

数据所使用的头信息，如“”。配合

设置显示信息的详细程度–或更大值会显示头信息，或更大值可以显示响应代码等或更大值可以显示警告和其他信息。显示版本号并退出。

以表的格式输出结果。默认时，它是白色背景的两列宽度的一张表。

执行请求，而不是。



“===”
=对请求附加一个行。其典型形式是=的一个参数对。此参数可以重复，用逗号分割。
提示：可以借助实现原理传递参数，实现保持会话的功能，如
”====″。
‘’




对一个中转代理提供认证信任。用户名和密码由一个隔开，并以编码形式发送。无论服务器是否需要即是否发送了认证需求代码，此字符串都会被发送。








设置属性的字符串缺陷程序中有各种静态声明的固定长度的缓冲区。另外，对命令行参数、服务器的响应头和其他外部输入的解析也很简单，这可能会有不良后果。它没有完整地实现仅接受某些’预想’的响应格式。的频繁使用可能会带来性能问题，即你可能是在测试而不是服务器的性能。
参数很多，常用的就两个，例如：

用法详解
在系统，一般安装好后可以直接执行；
___________==_=
如果是系统下，打开命令行窗口，到安装目录的目录下
上述命令的含义是：
在长连接状态下，模拟移动端，请求头带压缩，并且带登录态，一次个并发，总请求量为，向指定机器和页面的发送请求也可以是域名，本地配置指向要压测的机器也可以
稍等片刻，执行结果及分析如下：

















测试服务端类型
测试服务器
测试服务端端口号

_=






















整个场景中所有请求的响应情况。在场景中每个请求都有一个响应时间，其中％的用户响应时间小于毫秒，％的用户响应时间小于毫秒，最大的响应时间小于毫秒。对于并发请求，实际上并不是同时处理的，而是按照每个请求获得的时间片逐个轮转处理的，所以基本上第一个时间约等于第二个时间乘以并发请求数。










总结
一般我们在对服务器进行压力测试时，建议使用内网的另一台或者多台服务器通过内网进行测试，这样得出的数据，准确度会高很多。如果只有单独的一台服务器，可以直接本地测试，比远程测试效果要准确。
参考文档：
作者：

是推出一个用来构建用户界面的库。官方介绍的三大特性如下：

把只当作一个组件就好，等同于传统中的。

在编程模型和传统之间添加了一层，称之为虚拟。好处非常多，性能更好，可以在环境下完成渲染解决问题，可以更好的用于开发。

反应式的单向数据绑定，比传统数据绑定更简单，简单的使用事件触发改变组件状态也可以实现双向绑定的效果。
什么是
是推出的一个前端框架，面世已有几年时间，非常成熟，目前已经有非常多的第三方模块，基本上可以解决前端工程领域的各方面的问题。网上的资料也非常多，这里就不做过多介绍。
和

是非常纯粹的组件式开发，所有的页面元素均由各大小组件组合而成。再插上虚拟的翅膀，实现了一处代码多平台执行的效果，关键是这货性能还不错。但是呢，除了组件以外，这货其他什么功能也没有，你需要重新造出所有的缺失的轮子或者选择第三方的轮子。
则是一个完整的框架，意味着不需要太多的工作，就可以使用于大部分的业务场景。简单好用的和依赖注入系统，中定义的数据和事件，实现不同组件之间共享数据，处理筛选数据，支持表单和复杂的表单验证，简单的动画模块，强大的实现指令和指令的嵌套，可以很轻松的实现的组件及组件组合功能。组件有，路由有，还有模块，还有原生的模块直接支持标准的接口，集成的单元测试，等等，哇哇，功能好多的样子，又到但是的环节，话说很多初学者会被很多的名词折磨的晕头转向。。。
如果要拿来开发应用，你还需要做很多额外的工作。而如果使用的话，就可以直接开始工作了。
两者之间其实无法直接拿来比较，毕竟只是的解决方案，而是包含的完整框架。
抛开跨平台和性能因素，就功能而言，已经包含了的功能，只需要一个自定义加就可以轻松实现组件效果。
如果是一个大型项目，使用无疑更可靠。强大的功能带来一定的学习成本，但这一切都是值得的。而使用的话，你首先需要考虑一个问题，数据怎么管理？用哪个库？接下来还有一堆问题等着你。
如果只是一个小型项目，那就看心情吧。
再单独说下关于数据的问题，还搞出了一个叫做的概念。简单看了一下的模型，这不就是个观察者模式嘛。而至少支持了三种数据共享方式，包括，事件，直接添加一个，可以分别适应各种不同的场景。
我们来看看和实现组件的方式有什么不一样。。
组件实现

很多人包括我刚看到时会想一个问题，我靠，这货是什么玩意？
已经有了、等，以后还有，难道还要学一个这玩意？
还好，除了外，我们也可以直接用甚至来编写，虽然麻烦了点。
你只要记住，在的世界，的语法比写起来更方便更容易理解就好了，具体用什么取决于你自己。
注：为了便于没有基础的理解，本文所有示例均使用编译后的代码。

注：用写更爽。
第一个组件，系列，先看的实现
={
{

}
}


{}



看一看正常的方式：

{{}}


=
{
=
}

再看一看用式组件，使用
=
{
{
{
=

}
}
}


=

组件组合

的组件组合非常简单，使用方法即可。例如给上面定义的的外层添加一个，可以这样写：
={

{



{}

}
}

也很简单，直接写即可
=

对的封装都在命名空间下，而支持解构赋值语法，所以用的写法也可以媲美的语法，例如：
{}=












为什么用

虽然目前非常之火爆，但说实话，我也不知道在现在环境中用有什么意义。在使用开发几个项目之后，如果需要转向，只有以下几点可能会吸引我：

足够好的性能；
跨平台开发的统一体验。这个还得等出来后才知道；
兼容其他库，在现有项目中就可以使用。

而对于，我认为目前已经足够好用了，除了以下几个显著的问题：

性能问题，目前在移动端的性能确实不够，因为它实在太大了。这个问题是最致命的。
只能在的框架下开发，第三方库要兼容都需要做一些工作。

对于其他所谓的缺点，其实大多可以解决，只是难易程度不同，例如构建等都可以解决。上手难易程度来说，确实比难很多，但这和一个工具是否好用没有关系，例如正则。
网上看到大家都在鼓吹如何如何，又有很多人抛弃了投向的怀抱。说实话有点吹的太过了。只是让组件式开发和复用更加简单好用，外加逆天的性能，仅此而已。
最后，到底应该用什么，看你的心情吧，我要赶去改了。。

原文链接：


相关推荐展示组件与容器组件英译如何搭建高质量、高效率的前端工程体系页面结构继承导语

作者介绍：魏澄，来自广州的微信事业群，基础平台组高级工程师。

分享主要内容：

分布式协议、存储等功能；
微信账号存储等核心存储服务的架构实现；
系统的底层实现，以快速选型。



本演讲整理来自“腾讯大讲堂”。什么是
命令行界面是指在图形用户界面得到普及之前使用最为广泛的用户界面，它通常不支持鼠标，用户通过键盘输入指令，计算机接收到指令后，予以执行。也有人称之为字符用户界面。

典型的界面：


图形用户界面是指采用图形方式显示的计算机操作用户界面。

典型的界面：



？

自古软件设计这个武林有两大流派，其中有一个是”“另外一个是”“。它们一个为了普渡众生，一个为了提高内力，虽然在出现之前，独步武林。但是随着科技的发展，后发致人很快就一统江湖。但是现在谁是天下第一已经不重要了，重点是如何学会用这两种武术提高自己，在合适的情况下用合适的解决方法。下面是我的理解：
作为互联网深度沉迷患者，很多体验是离不开软件的，比如工作邮件，使用的界面，我可能只需要点几下鼠标敲几下键盘就可以完成一次工作汇报。
但是作为前端资深复制粘贴工程师，也同样离不开工具，在一个项目完成后，我用配置好的自动化软件比如，我只需要敲一个命令就可以完成上线前的准备。
到这里各位看官应该懂了，

更节省计算机资源，提高生产效率。因为不需要处理图形界面，所以开发成本低。适合面对各种向的码农。
用户学习成本更低，体验更好，生产效率相对较低。开发成本高。适合面对普通互联网用户。


在这里不得不提一下，之前做的基于的页面检查工具，虽然很厉害，但是启动太慢了加上界面交互浪费了太多精力没有抓住用户的“刚”，所以从效果来说并不是特别好：

到这里，如果你依旧对前端如何构建一个感兴趣，请跟我一起，分钟打造一个基于的工具吧。在完成一个命令行工具之后，这种浏览器语言，终于完成全产业链从浏览器到桌面软件再到工具的试练成为了武林之巅，也就是世界上最好的语言：


开始动手

配置环境

这次我们是基于来实现一个工具，环境根据官网的文档一步步说明就好，在公司内部需要配置代理。首先如需要设全局代理：
_=
需要设置：


初始化项目配置文件

进入开发目录，执行

将会创建和默认的配置。当然手动创建也没有问题。具体配置说明传送门

创建和配置主入口文件

在文件中，需要新增
{

}
其中是需要执行的命令名，是命令所调用的文件

调试到此，准备工作已经完成了，接下来我们在文件中写入



打开命令行工具，进入当前当前开发文件夹，输入

则会输出。
但是这样有些麻烦，我们如何像发布后一样，直接输命令就可以调用我们的主文件呢？我们需要在开发目录执行

就可在目前的全局环境中创建命令，成功以后，你就可以在本机任何目录执行。

一些包推荐在开发命令行过程中，我们会碰到各种问题，比如模块的化、用户命令的复杂交互、友好的版本升级提示等等。利用当中的成熟库会是一个好方法，推荐几个库

通用构建


看了这么多，也许有点迷糊？基于上面的步骤，有一个通用的项目目录，集成了几个推荐的包，在之后迅速开始一个工具的构建：
传送门

看个成品
前一段时间做了一个工具，大家在实现自己的工具时，可拿来参考。主要用来搭建互娱网站系统内的和移动专题，并根据用户输入配置页面内的基本元素，如注释、信息、上报代码，并根据配置自动配置，实现自动压缩、分离、补全信息等。
主要有这些功能：

用户自主配置参数
生成规范化目录结构
自动生成配置文件
命令包装
版本检查
…

使用预览：

传送门：

在实际编写过一个工具之后，我觉得除了让电脑爆炸的功能以外，什么都能实现
大家多多交流：导语：腾讯计算机视觉中心人脸团队专注于领域内国际前沿技术研究与应用，近期取得部分成果，这里和大家分享一下。

人脸检测研究进展
评测结果
是由香港中文大学维护的人脸检测国际权威评测平台，包含训练集、验证集和测试集，总共有万张图像，万个标注人脸，标注人脸有很大程度的尺寸、姿态和遮挡等变化，是目前国际上最大的也是最有挑战性的人脸检测的国际评测平台。数据集提供了三个子数据集、、用于性能评估，采用曲线评测算法性能。我们团队研发的人脸检测算法在的三个子数据集、、的验证集和测试集上均取得了第一的成绩如下图，该结果已于月初发表于的官网上_。相关技术文档也已发布在上。

图上的评测结果对比

图上的人脸检测结果样例绿框是我们检测到的人脸，红框是官方发布的人脸。
评测结果
是美国马萨诸塞大学维护的人脸检测国际评测平台。它是一个无约束自然场景的人脸检测数据集，该数据集总共包含不同自然场景下拍摄的张图像，个标注人脸，使用曲线评测算法性能。我们团队研发的算法在上也取得了国际领先的成果，我们在个误报样本的条件下取得了的召回率，排名第一。该结果也已于月初发表在的官网上。
相关链接：

图上我们的离散曲线和近期经典方法的对比。
表一上的离散得分性能对比误检数时


图上的人脸检测结果样例绿框是我们检测到的人脸，红圈是官方发布的人脸。
研究进展
是一个聚焦于领域技术研究的国际权威会议，设有多项竞赛，和公司业务接近的有互联网图片和自然场景图片中的文本提取的竞赛，每个竞赛包含定位、分割、识别和端到端四个任务。近来由于的出现，对于检测到的单词可以直接去做识别，所以分割这个任务已没有太大意义。我们团队针对的业务范围，目前聚焦在互联网图片上。

文本检测任务在网页图像构成的数据集上进行，训练集幅，测试集幅。在训练网络时，对训练集进行多种变形，扩充，实际训练集在幅左右。采用作为检测网络，在文本检测任务上取得了第一名的成绩。
相关链接：===
图文本检测任务上的排名

图部分检测结果及评价标准，更多的结果可在网站上查询。

单词识别任务在上述图像中抠出单词区域，四个边界向外扩展个像素点，构成数据集，训练集幅，测试集幅。在训练网络时，使用外部数据集约万幅。采用提取图像特征，采用学习序列关系，进行识别，在单词识别任务上取得了第一名的成绩。
相关链接：===
图单词识别任务上的排名

图部分识别结果及其评价标准，更多的结果可在网站上查询
团队秉承专业、服务、伙伴的理念，不断夯实基础，做有原创性的研究和坚实的工作，为伙伴部门提供高品质的技术支持，目前已承担多项部门内和跨部门的合作项目。引言
语言在游戏行业大受欢迎，因运行效率高相比于其他脚本语言，热更方便等原因被广泛应用。在，情况略有不同，大行其道。有的小伙伴包括本文作者想在现有系统中引入，被挑战的第一个问题往往是：“性能怎么样？”
一份测试结果显示，的性能是的倍，

我们自己也很容易粗略的构建这样的性能对比例子，比如笔者曾经做过的：

分别调用万次，的执行时间在代码执行时间的倍之间浮动，基本和慢倍的结论吻合。
问题来了，为什么这么慢，会不会有些使用不当的坑，踩了以后，连慢倍都是奢望？怎么使用，才能尽可能避开性能缺陷，发挥灵活的长处？
笔者研究了的代码，分析性能比慢的原因，对使用过程中可能碰到性能问题和解决方案也有部分阐述。
本文所有的测试都是在的环境下完成。
的基本类型
粗略的说，有种类型，


是空类型，表示什么都不是，
在内部实现中区分为整形和浮点型，
有三个子类：，和
有两个子类：和
就是中的协程
是中唯一的聚合类型，不像的那样，拥有、、等多种容器，在中，只有。
这种类型以的形式定义在中
{



_
_
_
}
_{
_具体的数值
_的类型
}
和_直接存储在中，占用至少个字节。
和这些可以被垃圾回收管理的类型，只是索引，具体数据存储在堆上，被指针索引。
下面重点介绍的实现和性能。
的实现
对外的表现是一个的容器，除了以外的任意基本类型都可以做，所有的基本类型都可以做。
是动态的，随着元素的添加或者回收增长或者缩小。在之前，是严格的按照的方式实现的，后续版本为了提升性能和节省空间，内部重构为数组部分和部分两块。

{
_
_包含
}
数组部分和部分的长度都是的指数次方，如果需要扩张，就会调用内存扩张一倍。部分闭散列发生冲突的时候会在数组中寻找一个空闲节点串起来。
数组部分的为，要求有至少一半的利用率。
={}
=
这上述示例代码中，表不会把放在数组部分，因为利用率太低了，而是把它放在部分，这个数字作为。如果后面表逐渐插入了到的元素，会在的时候被搬移到数组部分。
默认创建出来的的表，都是空的，在插入元素的过程，逐渐翻倍扩大，从到，到，到，都会触发，同时把旧元素拷贝到新申请的空间中，对于最终有成千上万个元素的，扩张的开销可以接受，但是对于大量生成小的的场景，会明显拖慢性能，可以通过的构造函数，让的编译器预分配空间，比如下面的代码：

部分的扩张也是同样的情形。
查找性能
位于数组部分的元素，直接用整数做下标到数组中去就可以拿到元素。部分的查找需要经过运算和判等运算，对于_和这都不是问题。对于，做了一点优化。

所有的短字符串字节以内，在内只存储了一份，提前算好了值，
内部增加一个，这是一个表，所有的短字符串都存储在这里，每次创建一个新的短字符串，都会先到这个表里面查找是否已经存在，如果存在就复用，如果不存在，就在这个表里添加新项。冲突的字符串用链表串起来。

如果数量超过桶的就把桶数量加倍，然后。
所以短字符串发生值一致时判等只需要比较指针是否相同，这优化了查找，但是增加了创建和回收字符串的成本。
空间占用对比
前面分析提到，中的基本类型，至少也要占用个字节。应用程序把从切换到，内存占用会如何呢？通过下面的比较，大概可以有个结论。
在程序中存储一个多边形的所有的顶点，假定这个多边形有万个顶点，用种的表达形式和做对比：

在上面的例子里，相比于，消耗的空间增加了倍也是很正常的事情。很多业务可能对内存增长不敏感，但是在设计时，需要考虑到这个变化。
的基本执行流程

虚拟机的初始化和编译源码一般发生在系统启动初期，对运行时的性能没有影响。本文把分析重点放在虚拟机的运行上。
包含条虚拟机指令，比如创建一个表_，执行一次循环_，从表中查找一个元素_。
可以看出，虚拟指令的功能粒度很粗，主要是为了降低编译器负担，把性能优化的工作交给虚拟机做。
虚拟机的主要构造

{



…
}
_把所有可以垃圾回收的对象都串在一个链表里面管理
用一个数据栈和一个调用双向链表实现了类似语言中的堆栈的功能。
数据栈是数组，会动态的增长和回收，不够的时候就，把栈空间扩大一倍。
函数调用会触发数据栈栈顶的增长和增加新节点，函数的时候执行相反的操作。那么函数调用的开销性能如何呢？
函数调用的性能
通过下面的测试代码，对比和函数调用的开销，可以看出函数调用开销是的倍。代码加优化后执行时间不足，编译器已经可以看出测试代码中的调用是没有意义的，自动优化掉了。编译器远达不到这么好的优化程度。

频繁函数调用一个典型例子就是网络包的编解码。有两种方案可以供对比：
方案中，不需要理解数据的描述信息，只提供解码基本类型的函数，由来调用调用会引起数据栈和的增长和回收。

是互娱研发部发布的数据描述组件，类似。
方案中，理解网络包的数据描述信息，然后调用不会引发堆栈的变化构造最终的解码结果。

两种方案的性能上本质差别在于调用和调用开销的差别。前面提到，调用性能开销是的倍。据某项目的实践，用方案实现的开销是方案的倍左右。
中的全局变量存取
了解了的全局变量存取过程的细节，就会明白为啥全局变量存取性能低下的原因了。
下面的表格对比了全局变量存取和变量存取的区别：

全局变量涉及的到表的查询和修改，所以性能要显著差于变量。简单的性能测试也可以看出来。

协程切换的性能
的协程是一个_，有自己的栈和，所以协程切换完全没有使用系统相关的调用，如或者，实际测试显示，协程的切换消耗和差不多。测试代码如下：
___
{
__
}
{
_
_
___=_
___=_
__=_
_
=
__
_
}
=



=


万次的协程切换，需要秒，需要秒，没有显著差异。
垃圾回收
垃圾回收一直默默在后台工作，一般情况下，对使用者是透明的。但是这不意味着垃圾回收的成本是完全可以忽略的。有时候垃圾回收也会严重干扰系统性能。
在版本中，垃圾回收采用的是双色标记清除算法，

新生成的可垃圾回收对象后面简称，都被标记为白色，垃圾回收启动后，会从全局表和栈出发，把所有可以到达的全部标记为黑色，标记完成后，把所有保持白色的释放掉，然后把黑色全部改成白色。
双色标记清除算法简单、高效，但是垃圾回收的过程必须一次性完成，回收时，业务代码必须等待，在一些实时性要求较高的应用场景，比如游戏，并不适用。所以以后的代码采用了三色标记清理算法。

新生成的都被标记为白色，垃圾收集阶段，先把根节点置成灰色，然后遍历灰色链表，如果灰色节点的所有级子节点都被放入了灰色链表，就把这个灰色节点置黑，反复遍历灰色链表，直到灰色链表为空。接下来就和双色算法类似了，清理白色节点，然后把黑色重新变白。
三色算法的优点在于，算法是可以分步慢慢执行的，不需要像二色算法那样一下子占用太多的时间。如果在垃圾回收的过程中，发生了白色节点加入到了黑色节点的操作，要么把白色节点变成灰色，要么把黑色节点变成灰色。
查阅代码可以看到，垃圾回收操作触发时机是在执行虚拟指令_、_、_的时候，简言之，就是系统分配内存的时候可能会触发垃圾回收
函数可以强制单次完成垃圾回收的全过程，通过下面的测试代码，可以窥视一下垃圾回收的消耗。假定个有个属性，个物品，每个物品有个属性，控制的数量，测试垃圾回收的消耗。
={}
=
===
===
===
={}
=
={}
===
===
====
=


垃圾回收的复杂度是，万个，约万个可垃圾回收对象，秒钟只能完成次全量垃圾回收。虚拟机内的数量越多，垃圾回收的性能负担越大。
关于垃圾回收优化，可以考虑以下几个方向：
根据应用特点，业务自己控制垃圾回收的启动和关闭
回收参数微调
每次回收的步长
再启动清理的间隔
降低垃圾生成速度，尽量复用对象，避免无谓的垃圾产生。
比如把循环中公用的临时变量提到循环体外。

总结
本文通过分析的源码，对笔者感兴趣的一些影响性能的知识点做了分析和评测，主要包括实现，函数调用，变量存取，协程和垃圾回收。
使用的时候，要小心的避开性能热点，比如频繁的调用和大量的垃圾回收，扬长避短，即使是比慢倍的也一样在游戏业界广泛使用，所以没有习惯了的程序员想的那么差。
如果对倍的性能落差还是觉得不舒服，可以考虑，一个比官方实现快了倍的第三方实现。只支持语言，而且现在已经不更新了。
参考资料




源码欣赏导语
自出现后，很多的架构及用法已改变，以往卻不支持，令不少开发者感得困扰，要解决这个及環境的切换问题，我们需要一个能夠把不同开发环境分开的工具。
简单搜索，我们发现了三个可以解决这个问题的工具，他们分别是：






在官方看到有关已经停止更新的讯息，并且鼓励用家使用，其实与基本上是同样的工具，这样我们便剩下两个选择了。


首先我们先说請先安裝該套件，运作原理如下：
在上安装不同的版本，比如说及。
创建以为解释器的环境：

创建以为解释器的环境：

用套件查看两个环境的目录：




当我们创建不同的环境时，会把系统内安装了的各版本的相关库及套件复制到我们的指定目录下，以目录来隔离各版本的，详细图示：

日后我们只要激活所需环境便可在不同环境进行开发：



顺利安装了后，查询可安装的版本。

我们可以看到不同的版本，因为列表很长，只列举当中几个：






安装的版本

切换的版本

在目录下便会看到：

当选择该版本安装时，会从云端下载有关套件并储存在目录下，环境切换则透过嵌入模组注入路径来决定使用什么版本的，详细图示：

比较



标题
标题
标题




文本
文本
文本






　　　
原理
优点





进入特定目录，在虚拟环境局域下运作。
版本一样，都可创建无限的局域环境，方便开发者在相同环境使用不同的。



利用进行全域切换的不同版本。
从云端下载及即时安装，不需预先在本地安装不同版本才使用。



参考
安装及使用方法：安装及使用方法：套件的安装及使用方法：、背景
在互联网信息爆炸式增长的当今，通过传统人工筛选运营方式提供服务时代已然过去，能通过用户历史行为精准推荐用户感兴趣内容成为必然趋势，主流个性化推荐系统流程包括用户行为采集、分类提取、离线用户建模、在线用户模型预测等。结合目前手机浏览器软件应用分发业务发展需求，历时半年多时间，从无到有搭建一套个性化推荐系统支撑专区分发业务。
、业务整体
目前推荐场景覆盖包括专区首页猜你喜欢模块推荐，打底推荐与内垂直搜索，对应效果如下图红框标识：

进过半年的优化打磨，关键阶段效果提升汇总如下：

、整体框架
在输出整体架构图前，先回归最初产品个性化推荐需求，技术方案选型最终都要服务于需求
【个性化推荐需求】
根据活跃用户的长期兴趣推荐用户最感兴趣的，效果评价指标是推荐的
【技术方案选型】
工程
在线模块：分粗排阶段和精排阶段
、粗排阶段根据用户长期兴趣画像召回相关度较高的，同时减轻精排阶段压力；
、精排阶段则根据粗排召回的，通过离线训练好的排序模型预测，最终下发作为推荐结果；
离线模块：
、用户长期兴趣：负责在线粗排召回，通过离线累计用户消费行为，映射成兴趣体系，最终积累成用户长期兴趣画像，最终将画像导入在线系统；
、排序模型：负责在线精排阶段排序模型的训练，训练阶段需要用户消费日志，同时收集用户特征和特征，最终整合成训练样本集，通过等分布式计算框架训练模型并导入在线系统；
算法
粗排召回：粗排的召回效果直接影响推荐的效果，不过项目初期的方案不太适合制定太复杂的策略，初期我们先敲定一个热度计算公式对备选进行全排序：=下载量评分，最后根据分类构建待召回反向索引结构
精排模型：产品制定推荐效果评价指标是按天，即排序模型是模型，结合业界成熟方案以及团队技术积累准备度，选用作为模型
【整体架构图】

、将用户在专区预推荐位的曝光和点击行为上报到离线集群
、用户实时拉取推荐结果，粗排备选池会预先对应架构图中的备选优化，策略参考上面算法的粗排召回，通过用户关联历史兴趣画像，根据画像获取关联度的，同时进行列表退避；然后用召回关联特征，用户关联用户特征，部分特征需要走特征工程处理，加载离线训练好的模型，预测每一个的，进行排序；产品策略会在兼顾用户体验维度对下发列表进行干预，比如多样性，游戏占比等；最终下发排序结果列表
、将用户交互行为与推荐结果等数据导入离线计算集群：根据按天用户行为计算按天兴趣画像，同时和历史画像进行合并构成用户兴趣长期画像；用用户对点击或曝光作为样本原，与特征、用户特征关联形成训练样本集，通过训练得到稳定的模型
、按天将用户累计长期兴趣画像和模型结果导出到路径
、用户兴趣画像定期刷入在线
、将模型按天导入在线，在线服务定时加载模型以及查询用户长期兴趣画像
、优化小结
将个性化推荐系统搭建上线后，目光就转移到推荐效果的优化，优化主要分三部分：
模型特征优化，主要包括常用特征工程方法以及引入新的业务特征；
训练工具训练性能提升加学习率曲线绘制；
粗排召回阶段引入基于的协同过滤；
【特征优化】
、特征工程
在当前项目中，我们主要采用的特征工程方案包括：

离散枚举：性别男性，女性，未知，单维特征扩展成三维，一条样本仅设置一维
连续等距：比如用户年龄，可观察在如下样本中用户年龄的分布图坐标表示年龄，坐标表示对应用户群累计占比，岁间隔用户群分布均匀且为相对有效年龄，且占整体用户群以上，这类特征可以对样本进行等值切分，间隔可根据模型效果调整

归一化：比如下载量，如下是样本中对应的下载量分布图坐标表示下载量，坐标表示对应用户群累计占比，对比年龄分布图，群占比以上比较均匀，但是前跨度较大，此时我们使用的方案是对整体下载量求，然后再进行等值

、引入新特征
项目初期使用的特征包括如下脑图中的蓝色与绿色特征，训练的样本量是按周，采样的正负比例是，最终的是；

在专注特征优化阶段，主要的方向是引入更多的特征，通过梳理，将脑图中的标黄和标灰特征纳入到引入阶段。在具体引入优先级的排期中，需要权衡特征收集的复杂度、特征的覆盖度等因素，最终在优化阶段确定引入脑图中的标黄特征，结果提升到

【训练优化】
详见文章实战笔记
【协同过滤】
分类粗排召回策略的优势是对主打用户长期兴趣方向定向，缺点是很难引入相关度较高但并非同类的，也就是较难发现用户隐含兴趣；协同过滤的目标就是对分类粗排召回策略缺点的一种补充。
常用的协同过滤包括与，对标两种模型有如下对比：

通过调研目前项目的推荐场景优选，接入流程上，回到整体架构图，采用离线训练相似度矩阵并离线根据用户历史安装进行预测，最终刷入在线，供在线服务在召回流程查询协同过滤推荐结果，进而统一精排下发
、项目展望
、模型引入更多新特征以及特征工程更多的尝试，可参考参考文献
、预测模型尝试
、分类互斥策略
感谢过程中的大力支持
参考文献
《》
《机器学习算法、源码及实战详解》
《技术内幕》
《机器学习实战》
特征工程作者：方坤丁

对于云计算行业来说，云服务的可用性和可扩展性是的检测其服务质量的重要标准，也是最受用户关注的两大难题。各云计算厂商针对容灾、升级等需求的解决方案，最能够体现其底层架构的实力。腾讯云基于基础架构的优势，为分期乐、微信红包等平台提供技术支持，可以完美满足如下三点需求：
高可用能力，容灾能力强，升级不停服
可扩展性强，功能丰富，性能超高
避免重复造轮子，性价比之王
近期，针对一些客户对腾讯云产品可用性的问询，腾讯云基础产品团队对负载均衡产品的原理做出详细阐述，并希望通过对腾讯负载均衡集群底层架构的实现的讲解分析，揭示其强劲性能、高可用性的根源所在。
一、什么是负载均衡
单台服务器如、往往受限于自身的可扩展硬件能力。在面对海量的请求时，需要引入将访问流量均匀的分发到后端的集群，实现接入层的水平扩展。
所有业务的负载均衡都是基于内部实现的，运行在标准服务器上，优点包括：自主研发、代码可控。对外的版本为，是多机部署的，通过发布、路由、同步信息等，实现集群负载通过路由将流量分发到不同的服务器上。
作为集群的出入口、咽喉要塞。开发商使用负载均衡器看中的无非是高可用能力、分发性能以及产品功能的丰富程度，咱先从高可用说起。
二、高可用能力
单集群容灾能力
集群容灾，简单来说就是一个集群中一台服务器倒掉不会影响整个集群的服务能力。是国内厂商常用的开源框架，常用完成主备模式的容灾。有个主要缺点：
、主备模式利用率低。一个集群同时只有一半的服务器在工作，另外一半的机器处于冷备状态，主节点不可用之后的切换速度相对较慢；
、横向平行扩展能力差。服务集群扩展后转发效率大幅下降；
、依赖的协议存在脑裂的风险，需引入第三方仲裁节点，在金融领域、跨园区容灾领域备受挑战。
在设计之初就考虑到这个问题，采用自研的动态路由协议来实现集群的容灾，若一台机器倒掉，协议可以保证在以内把机器从集群中剔除。
一个集群放在两个接入交换机下，并且保证跨机架的容灾，这样保证在即便有单边的交换机出故障或者单边机架掉电时，本集群的服务不受影响。同事实现了集群内连接定期同步。这样在别的服务器接管故障机器的包时，端的用户体验不受影响如未登录的账户，在电商购物车里的未付款商品不丢失
跨园区容灾能力
为了满足金融核心客户，小时核心业务持续服务的要求。腾讯云负载均衡已在各金融专区部署了多可用区容灾套件，从路由器、交换机和服务器以及布线是全冗余的，任意一个路由器、交换机或者服务器接口挂掉之后，流量会从冗余组件提供服务。
当端请求，经过代理，访问到后端时，负载均衡的源、目的、转发策略、会话保持机制，健康探测机制等业务配置。会实时的同步到另一个的集群。当主可用区的机房故障、不可用时，负载均衡仍然有能力在非常短的时间内小于切换到另外一个备可用区的机房恢复服务能力，而业界产品的切换时间一般在分钟级别。当主可用区恢复时，负载均衡同样会自动切换到主可用区的机房提供服务。目前包括、富途证券等金融开发商已启用跨园区容灾能力。

容灾演练实测：
、协议切换模拟交换机、集群任何一层故障导致整个机房外网不可用，切换时间丢包不超过秒，但长链接会瞬断，结果符合预期。
、在高可用机房的外网完全瘫痪发生切换，恢复后不主动回切，过程中瘫痪机房的任何操作不应影响另外一边，结果符合预期。
、模拟与开发商沟通好以后流量回切操作，流量回切时间丢包不超过秒，但长链接发生瞬断，结果符合预期。


升级不停服
内核升级、内核缺陷、安全漏洞等原因，免不了要做后端集群的重启升级，如果服务器每年由于维护等原因重启一次，小时的恢复时间就已经达不到的可用性了。
目前已能做到客户无感知的，完成服务器升级。升级时会选取集群一半负载均衡器，停掉协议，实行“温暖关机”。将其权重设置为，从而保证数据包不会在经过这几台。另一半集群会接管预备关机的流量，集群内连接同步，负责接管的上具有全量的连接信息，连接不会中断。升级完成后的将重新启动，加入集群，正常服务。
三、高可扩展性
性能强劲
流量分发
腾讯云负载均衡内部实现，利用了提供的高性能多核开发框架、内存管理及共享队列方案，团队将常见的逻辑设计框架与结合。极大提升了流量分发的效率。

年月日，微信公布了用户在除夕当天收发微信红包的数量：亿个，而其收发峰值也已达到万每秒。面对亿级的用户数及百亿级的红包，系统的性能至关重要。而承载新年红包的手机和微信都接入了腾讯云负载均衡集群，得到了有效的性能保障。单集群可承受的最大并发连接数超过亿，处理峰值的流量，每秒处理包量可达万。为广大用户提供了流畅、愉快的抢红包体验，实现了除夕夜系统零故障。

加速
性能上最大的一个难题是如何提升的效率。同样的物理设备下满负载，完全握手的性能不到普通性能的，如果说的性能是万，可能只有几百。为什么会这么低呢？
、主要是算法，它对性能的影响占了左右；
、椭圆曲线如果使用最常用的算法，这部分约占整体计算量的；
、对称加解密和计算，它们对性能影响比较小，是微秒级别的。
有了这些分析结论，优化的方向就很明确了：
、减少完全握手采用分布式、全局、自定义
、异步代理计算
、对称加密优化


经过以上努力团队通过异步代理、减少完全握手等方式，释放了负载，。经过优化后，请求的访问时延与请求相差无几。单集群的单台云服务器完全握手性能可达到，长连接时单台服务器性能可以达到。完美的支撑了红包业务对卸载的性能要求
均衡能力丰富
我们来看看另一个。分期乐一家专注于大学生分期购物的在线商城及金融服务提供商，提供分期贷款和还款服务。原分期乐的电商门户，有三十多个业务模块，通过多个二级域名、公网来分隔业务模块。门户的日超过亿次，峰值带宽超过。
随着访问量的增多，其自建的负载均衡集群已无法承载海量的请求，频繁出现丢包、卸载慢等额问题。为了保证其业务在九月开学大促、双十一大促中平稳运行，分期乐引导部分流量到云端架构中，通过负载均衡进行业务整合：

的流量转发
为了实现业务分离，分期乐使用七层负载均衡获取头部信息，并根据企业业务的实际需要，将请求路由到不同的后端服务器集群，从而让负载均衡基于内容进行路由转发。此外，采用了细致到转发组级别的健康检查，具有更强灵活性，满足更多业务场景。
分期乐业务架构中，通过自定义域名，实现了基于内容的路由转发。根据业务类型，分期乐配置了和两个路径。通过识别请求内容，将后缀带有的请求转发到后端服务器群组，并将后缀带有的请求转发到后端服务器群组，从而保证了流量分发到不同的服务器群组中，减轻单个节点的负载。原来以上配置都需要在自建的中配置完成，转发请求时消耗大量的资源，现在交给就好了。
同时提供多元化的重定向能力，可以满足电商的两种场景：浏览器发起的请求，强制转换为请求，加密更可靠。电商中商品更替、库存售罄、后端某服务器负载过高限制连接数、请求等场景，常见的做法是直接拉黑页面，给端返回、。但这种体验太差了，支持智能重定向，将超负载的请求，转发到其它页面，如门户首页。
专线接入
迁移上云从不是一蹴而就的，腾讯云强大的专线互联能力，满足客户逐步从自建将业务迁移上云的能力：
分期乐首先逐步将业务迁移到云端，例如这个域名会同时部署在自建及腾讯云负载均衡集群中。首先通过权重的配比，将的流量迁移到腾讯云，的流量回。在稳定运营后，再逐步增加腾讯云端的权重，替换原有数据中心的服务。
当业务流量增大时，负载均衡无性能瓶颈，需要注意的时候后端的、接入层需要做到无状态，并借用能力实现弹性伸缩。
大促当天，支持了海量的并发访问，分期乐门户的日超过亿次，峰值带宽超过，支持了过亿的交易额。
四、性价比之王
传统的硬件负载均衡，以为例，其缺点非常明显，从商业角度来说，硬件负载均衡产品过于昂贵，高端产品动辄五十万甚至数百万的价格对于用户是几乎不可承受的负担，如下图所示：

从使用角度来说，硬件负载均衡是黑盒，有需要联系厂商等待解决，时间不可控、新特性迭代缓慢且需资深人员维护升级，也是变相增加昂贵的人力成本。
腾讯云在年起，将内部的负载均衡服务，正式对外商业化服务，单实例个月的开销为元费用节省达以上。您还有什么理由购买硬件负载均衡，或使用开源方案造轮子呢？快来试用吧：

相关推荐腾讯云负载均衡的使用腾讯云容器服务的滚动升级使用简介全世界没有任何的一个系统可一步到位的就达到微服务核心概念中所谈及的架构上的要求。我们真正应该要做的事是找出将既有架构迁移到微服务的策略、方法、实践与技术。本篇文章便是先来探讨下将既有架构迁移到微服务的策略。
前言
在微服务的核心概念中最重要的核心概念便是
边界上下文每一个微服务拥有各自的某一端到端业务场景功能与数据数据库。
微服务基于边界上下文的核心概念最主要的目的便是使得每一个微服务均可拥有各自的资源而可独立的发布、部署、运作进而可使产品的架构可更容易的随著外部的使用者、业务量而扩展。
然而很明显的全世界没有任何的一个系统可一步到位的就达到微服务核心概念中所谈及的架构上的要求。
我们真正应该要做的事是找出将既有架构迁移到微服务的策略、方法、实践与技术。
本篇文章便是先来探讨下将既有架构迁移到微服务的策略。
本文
当将既有的架构迁移到微服务时常见的作法便是
只将既有架构的功能模块拆解成粒度较小的功能模块
这样的作法其实实质上的意义是不大的。因为即使拆解成粒度较小的功能模块并且拆解后的各功能模块能互相的解藕但拆解后的各功能模块也许仍需共用数据库。所以当数据库即使只是修改某个数据表结构的某几个字段时也需同时修改多个功能模块。毫无疑问的这不仅会使产品开发的效率低落。拆解后的各功能模块在执行持续部署时将会有极大的概率会在某个阶段中断。同时也会为产品的架构引入新的风险甚至是致命的伤害。
将既有架构的功能模块拆解成粒度较小的功能模块的同时也将既有数据库拆解使拆解后的各功能模块在拆解后便可拥有各自的数据库
这样的作法所会带来的最大的问题是日后不论是发现拆解后的各功能模块粒度是过小或过大而需合并或再拆解功能模块时都将会有极大的概率会花费相当大的工作量在数据库的迁移上。
在将既有的架构迁移到微服务时架构师必需要考虑下列两个因素
我们其实是没法在一开始的时候、一步到位就能设计出正确、适当的微服务粒度的正确、适当的微服务粒度绝对是要经由不断的演进与学习而获得的。
数据库的迁移风险极大一定要谋定而后动。
从既有的架构迁移到微服务的策略是：
先以产品架构的性能、可靠性与安全性为首要的考量先拆解出粒度大的功能模块。
再考量持续部署的独立性与对业务应变的能力而将必要的功能模块再拆解成粒度较小的功能模块。
确定了所拆解的功能模块是正确、适当的微服务粒度后同时兼顾了性能、可靠性、安全性、持续部署的独立性与对业务应变的能力再进行数据库的拆解与迁移使各功能模块微服务真正拥有各自的数据库。最终使各功能模块微服务真正拥有正确、适当的边界上下文。
结论
架构师应该一直铭记在心
微服务正确、适当的边界上下文绝对是要经由不断的演进与学习而获得的没有标准答案没有一步到位的。

图一微服务经由容器如拥有各自的资源。各微服务便可独立的发布、部署到各个的节点上并在各节点上能独立的运行

图二微服务的边界上下文经由单一的容器如构建完成。也就是说单一的容器内包含著微服务所需的所有资源如操作系统、应用伺服器、数据库、应用系统

图三为使微服务的数据库的架构有更好的扩展性、可靠性而将微服务的数据库独立在另一个容器里如复杂吗？比、复杂多了。那么他为什么复杂呢，是不是仅仅因为我们经常见到，而不常接触？接下来简单介绍下的基本情况，实践测试辅助分析，希望看完后能够对有基本的认识。
一、是什么

从资料了解是一个实时消息通讯协议，主要的变种功能如下：
工作在之上，默认使用端口，这个是基本形态；
在的基础上增加了加密功能；
封装在请求之上，可穿透防火墙；
类似，增加了的安全功能；
使用进行传输的；
虽然有很多变种，但实际在我们的直播应用中，常见的是原始的。协议中基本的数据单元称为消息。当协议在互联网中传输数据的时候，消息会被拆分成更小的单元，称为消息块。的交互过程可以理解成独有的握手过程、控制命令传输、音视频数据传输。
二、握手过程
一个连接以握手开始。的握手不同于其他协议；握手由三个固定长度的块组成，而不是像其他协议一样的带有报头的可变长度的块。客户端发起连接请求的终端和服务器端各自发送相同的三块。便于演示，当发送自客户端时这些块被指定为、和；当发送自服务器端时这些块分别被指定为、和。以下是握手过程中传递的包格式介绍：

握手以客户端发送和块开始，客户端必须接收到才能发送，客户端必须接收到才能发送任何其他数据，服务器端必须接收到才能发送和，也可以等待接收到再发送和，服务器端必须接收到才能发送，服务器端必须接收到才能发送任何其他数据。以下为的握手过程图介绍：

规范要求需要一个一个的发送握手包，但是实际上客户端发送，服务端发送，再客户端在发送结束握手。

三、数据包格式
协议中基本的数据单元称为消息。当协议在互联网中传输数据的时候，消息会被拆分成更小的单元，称为消息块。

消息格式
消息头包含以下信息：
消息类型，占用个字节。
有效负载的字节数，占用个字节。该字段是用大字节序表示的。
时间戳，占用个字节，用大字节序表示。
消息流，标识消息所使用的流，用大字节序表示。
以下是消息类型的取值介绍，没有描述的取值说明未使用：

以下是消息类型中的命令消息的类型介绍：

分块格式
握手之后，连接开始对一个或多个块流进行合并。创建的每个块都有一个唯一对其进行关联，这个叫做块流。这些块通过网络进行传输。传递时，每个块必须被完全发送才可以发送下一块。在接收端，这些块被根据块流被组装成消息。
分块允许上层协议将大的消息分解为更小的消息，例如，防止体积大的但优先级小的消息比如视频阻碍体积较小但优先级高的消息比如音频或者控制命令。分块还能降低消息发送的开销，它在块头中包含了压缩的原本需要在消息中所包含的信息。
块由块头和数据组成，块头包含部分：基本头、消息头和扩展时间戳，以下是各部分的介绍：

块的基本头包含块流和块类型下面的字段。块类型代表了编码过的消息头的格式。此字段根据块流的不同，长度可能为或字节。在实现协议时，此字段应该使用可以容纳的最小长度。此协议支持最多个流，从到。这三个为保留。当块的基本头长度为字节时，第比特取值为。当长度为字节时，第比特取值为。块流为时保留作为低级协议的控制消息和命令消息。以下是基本头的每个占位介绍：

分块例子

四、交互过程
推流

拉流

五、实践观察
推拉流环境搭建
参考视频协议学习的环境部署
推拉流抓包
主要的推流包介绍





主要的拉流包介绍


拉流的其他流程与推流类似：

六、总结展望
的粗略整理基本完毕，对自己来说的有了一定的认识，再细一点的研究需要真正做个可能会有深的理解。
七、参考资料
专题报告：协议
揭开播放流畅的神秘面纱
官方公布的规范
中文版
协议笔记
服务端实现作者：马卓导语本研究由和共同完成。这篇文章源自我们的一个检测项目，项目中我们需要对设备的固件进行分析，在整个固件分析的过程中我们克服了很多困难，最后完整解密了设备固件的内容，这里将相关的内容做个记录。

设备介绍
设备采用系列的作为主控芯片。该芯片基于内核，支持、等总线。支持外部设备。同时该芯片内置基于硬件的算法加速器，支持、等哈希算法，支持，等对称加密算法。
获取固件
设备主板如下。通过观察主板，我们并没有在主板上发现常见的，等调试接口，这使得我们无法动态观察设备固件的运行方式。随后我们发现设备组主板上发现一个芯片，型号是，这个的大小是。通过阅读主控芯片的手册，我们发现，这个款芯片内部容量有限，多采用外置的方式存储代码，因此我们推测这个中应该包含设备的主要代码，接着我们使用编程器我们完整读取了芯片的内容。

分析固件
获得设备固件后，我们着手开始对固件文件进行分析。初步观察发现，固件大致分为几个区域：
这个部分是设备的启动的代码
第一个加密块
第二个加密块
配置数据保存快
中一共有两个加密的区域，推测这两个区域应该是整个固件的真正的代码，硬件厂商为了保护代码而对这部分代码进行了加密。下面就来探讨一下如何解密这两块加密的代码。
每个加密块的结构如下，其中有两个字段比较关键，一个是加密块的大小和加密后的数据。
_{




}
加密块的结构中不存在密钥字段，因此我们需要弄清楚这部分数据是什么算法加密的，以及密钥在哪里。的开头部分包含部分代码，这部分代码是设备的启动代码，从逻辑上应该存在这部分加密块的解密算法和密钥，因此我们尝试对这部分代码进行逆向分析。
设备启动代码是设备启动阶段执行的代码，这部分代码通常不具备文件格式，代码也是在一个预先设定好的绝对物理地址上执行的。因此在对这部分代码进行逆向分析之前，首先我们需要确定这部分代码的基址，通过阅读芯片手册和对代码进行检查，我们确定这部分代码执行的基址是。加载到中，我们在入口看到了这样的代码：

入口处有几个跳转指令，第一条是跳转到启动代码的真实入口，其他是跳转是跳转到相应的中断处理函数上。
通过定位特征数据和跟踪代码执行流，我们定位到了解密函数，下面就这部分代码的流程进行分析：

首先程序会读取第一个加密块的头部四个字节，比较是否是检查合法性。然后程序会读取加密块的大小，并检查大小是否大于，同时检查数据块大小是否是的倍数。

经过上面的检查后，程序会加密的内容以大小为单位复制到绝对地址。

经过上面的操作后，程序会将加密的数据分成两部分，分别用两个密钥和，使用算法进行解密。解密到物理地址。至此，解密过程就算完成了。但是对于解密算法的相关的细节我们还没完全弄清楚。下面我们来逐一对解密的细节进行分析。首先我们先看看是如何确定加密算法的。通过逆向分析，我们发现程序调用了下面这样一段代码：

从代码上看，这个地址已经超过当前固件的地址范围了，那这个操作的含义是什么呢？通过查找芯片手册，我们这个地址其实是芯片内部的寄存器，名称为_

上面代码的含义就是重置硬件加密引擎。
在知道了加密算法是，我们需要确定该算法的两个要素，一个是初始化向量，一个是密钥。我们先看看是从哪里来的。
通过分析，我们发现被保存在这个地址。而对这个地址的赋值代码如下：

上面代码告诉我们，的长度是字节，分成四个部分，分别保存在和中，=\\\\\\\\\\\\\\\\。
最后我们来分析一下解密密钥的来源。解密过程中共需要两个密钥和。这两个密钥来自同一个来源，因此我们这里对的来源着重进行分析。
生成密钥的时候首先调用了下面的函数：

函数中的同样是一个芯片内部寄存器，这个地址和分别保存了个字节芯片序列号，共计个字节，这个字节的序列号是唯一的，对每个芯片都不一样。这个函数就是获取当前芯片的序列号，这里我们把得到的数据记作。
在读取到芯片序列号后，程序会调用一个函数生成字节的，然后再对序列号进行换位，再次用同样的函数生成字节的。那么这个函数到底是什么怎样把序列号计算成密钥的呢？经过初步分析，我们在函数中发现了算法中使用的到常量，但是这个函数的代码并未采用标准库的代码，因此确定这个函数是否是标准的算法需要对代码进行详细的比对，这个过程会很耗时，因此我们想到了另一种方法来验证代码是否为标准。
我们可以肯定这部分代码是个纯算法的代码，因此不涉及到任何与硬件交互和操作的代码。因此我们将这段代码在模拟执行环境中执行并检查结果，如果得到的结果与我们使用标准算法计算的结果一致则表明这段代码就是标准的算法。
我们选择的模拟执行环境是，一个基于修改的模拟器，支持各种语言的开发，下面是我们用编写的模拟执行的代码。

通过上面代码的输出结果，我们确定了上面的算法输出的结果与标准算法一致。
至此，我们就分析清楚了固件的解密算法以及密钥来源，但是还有一个遗留的问题，就是如何的获取生成密钥芯片序列号。
前面提到，芯片序列号是唯一的，我们无法使用一个设备的密钥解密另一个设备的固件。因此我们需要的获得当前设备主控芯片的序列号。
由于设备不存在可用的输出接口，因此我们能想到的唯一能获取芯片序列号的方法就是固件，同时我们还需要将获取到序列号输出到能够放访问到的地方，这里我们采用了写的方法。下面是我们写的对固件的代码。

我们将修改过的固件烧入中，并重新焊接回去，在设备上电执行一段时间以后，再取下，读取其中的内容，这样我们就获得了当前芯片的序列号。
获取序列号以后，我们就可以按照之前的分析的算法对固件内容进行解密了。
最后我们还遗留一个问题，就是如何解密其他设备的固件。其实这个问题很好解决，因为芯片生产厂商在为每个芯片设置序列号时并不是采用全随机的方式，序列号之间存在一定联系和规律，因此我们可以假设序列号中的前面四个字节是固定的，而后面四个字节是不同的，然后暴力穷举这四个字节的内容。实践中我们使用这个方法成功解密了另外两台设备的固件。
结论
在本文中我们逆向了一款设备固件的加密算法，同时采用了模拟执行的方式确认了固件中的算法。最后我们发现整个设备固件的安全体系只依赖于四个字节的数据，在了解了相关的算法后，这种加密保护方式很容易被攻破。安装好护卫神镜像后，可以在你自己的电脑上输入对应的地址，打开主机管理系统面板。
首先在安装好护卫神镜像后，登录服务器打开桌面上的“使用说明”，可以查看到相关的管理信息

护卫神镜像上主机管理系统密码及的密码为随机生成，保证了密码的唯一性及复杂度安全性，可放心使用。
当然你也可以自行打开镜像系统桌面中的“快捷工具”进行更改密码操作。
比如你所购买的腾讯云主机的公网为，那么可以通过在浏览器中输入

打开主机管理系统面板后台，输入“使用说明”中的管理员帐户及密码就可登录

如需要打开管理地址，可以输入打开访问

说明：一般护卫神镜像服务器需要在腾讯云服务器安全组中开放如下端口：，，，，如还有其它的特殊性要求，可根据你的的需求开放其它端口月日，腾讯云技术社区继续推出了【跟鹅厂老司机学技术】系列分享的第一期：“遇见”，邀请到的嘉宾是腾讯工程师霍丙乾。

本期分享大纲：

是什么

给我们带来什么

都有谁在用

你该不该用

学习资料

实例展示




本期视频回放：

　
　
嘉宾文章推荐：
快速上手招用写，难道只有环境搭建这么简单？详细体验，你想要的都在这儿
​作者介绍：熊训德腾讯云工程师

本文档从源码角度分析了，作为写入的文件最终刷盘落地的过程。
之前在《线程模型源码分析》中描述的写过程时说过会写入文件，为了保证数据的安全性，一般都是写入同为生态的中。的最终结果是使用写入，而则是使用刷盘。
这时其实并未真正的结束，为了保障数据安全性，可会根据用户的配置写到多个节点中，不管是还是都不仅仅是简单的写入或刷入了真正的存储节点中，其中涉及到数据流如何安全有序且高效地写到文件中，而又是具体如何做的，这个文档就将从源码上分析的“写”操作到了和后具体发生了什么，如何落地的。
下图是《权威指南》中描述底层存储结构的顶层结构图。可以看到将处理文件生成和文件生成这两种文件都将有管理，当真正存储到中时，会使用作为的客户端把大批量的这两种数据流写到多个节点中。

在文档《线程模型源码分析》中为了突出重点说明线程模型，并未具体说明和中实例是什么，在中被关键字修饰声明为一个类型的接口：

其实它的实现类是，这个类也在包中，在包中是作为向的，它在是使用工厂模式实例化，然后调用方法初始化：


从源码中可以看到真正写实例是，它用于向新生成的文件中写入数据，就像前面叙述的，在的方法中被初始化：

在这里我们仅仅讨论使用作为的文件系统，也即是参数中是的实例。在其的实现的参数除了参数指明需要在创建的文件路径比较重要以外，还有一个参数也很重要，这个参数说明了备份数量也即是写份数。中是的实例引用，也即最开始那张架构图中所指的。使用的方法通过调用向的创建一个文件并构造了输出流实例，这个方法另外一个重点就启动了一个，具体调用是，这个是向的多个管道写的实现。虽然这里分析的是的写入过程，但是其实写到，再写到后也是采用这种方式管道写的方式实现。




通过调用的函数，调用函数，其又调用函数，它创建一个新的文件，状态为，没有任何与之对应。于此同时创建成功后会返回一个类型的实例，在中被称作，该对象负责处理和之间的通讯。


的文件结构，一个文件由多个默认构成。这里通过注释可以看到在进行读写的时候是以默认每个为为单位进行的。每一个由若干个默认组成。是进行数据校验的基本单位，对每一个生成一个校验和默认并将校验和进行存储。
分析到这，已经可以看出文件写入的过程并没有特别，就把当做的然后封装成再组装成，再向批量写数据。为了保证数据有序的传输，使用了数据发送队列和待确认队列，并使用两个线程和在中分别来发送数据到对应和确认数据是否到达。
还有另外一个重点就是是如何把数据到的磁盘的。
在此，我们又要回到类中因为最终调用的就是的方法，它的源码如下：

其中，在就是之前分析过的的实例，在方法中调用了的和，其实什么都没做，源码中也说明了，则会调用也是前面提过的类的方法，方法将缓存的所有数据立即发送给，并阻塞直到它们写入成功为止。之后，可以确保端故障不会导致数据丢失，但如果失效仍有丢失数据的可能，当关闭时也会额外的执行一次操作：

就像注释中所解释的一样，是同步的只能保证能让新能看到，但是并不能保证其真正的持久化到了每个中，也即没真的调用中的系统调用。它只是将端写入的数据刷到每个的缓存中，如果每个副本所在的同时时例如机房断电将会导致数据丢失。
给客户端还提供了另外一种语义端所有的数据都发送到副本的每个上，并且上的每个副本都完成了中的调用，也就是说操作系统已经把数据刷到磁盘上当然磁盘也可能缓冲数据；需要注意的是当调用时只有当前的会刷到磁盘中，要想每个都刷到磁盘，必须在创建流时传入标示。
当前选择的是语义。这两种语义都调用的方法，其中调用的传入而传入的是。

这个方法的主要作用就是把还在缓存中的数据刷到中，
其中最终要的几个方法就是，和，调用将当前放到发送队列中等待发送的确认包，而其原理和写数据一样，就是把数据封装成在把一个个填充到，再以的方式一个个写到再根据是否有标识刷盘。


就是用于等待中的回来，并被唤醒。

相关推荐线程模型源码分析跨版本数据迁移总结的在基本调用过程前言
首先需要说明，这里所说的数字识别不是手写数字识别！
但凡对机器学习有所了解的人，相信看到数字识别的第一反应就是。是可以进行数字识别，但是那是手写数字。我们现在要做的是要识别从九宫格图片中提取出来的印刷体的数字。手写数字集训练出来的模型用来识别印刷体数字，显然不太专业。而且手写体跟印刷体相差不小，我们最看重的正确率问题不能保证。
本文从零开始做一遍数字识别，展示了数字识别的完整流程。从收集数据开始，到数据预处理，再到训练，最后进行数字识别。
我们一步一步来说。
数据收集
为了便于处理，我百度找到了张下面这样按照顺序排列的图片，作为我们的初始数据集。

有的图片可能本来除数字区域外，周围空白部分比较多。为了便于处理，首先用自带的画图软件把图片裁剪成上面这样只包含数字区域的样子。
这十张数据集基本涵盖了印刷数字体的不同样式、字体，而且颜色、背景甚至渐变方式都各不相同。
数据处理
显然，我们第一步要做的就是上一节的内容，那就是把图片中的数字分别提取出来。
训练，还有其他任何有监督的机器学习模型，不光要有样本数据，还要有知道每一个样本对应的标签。这也是为什么我要选择上面这样按顺序排列的数字图片。
提取数字之后，我们可以对每一个数字的位置进行排序，然后根据位置信息可以知道每一个数字是几。标签也就由此生成了。
这一部分的内容可以分两部分来说，第一部分就是提取数字，第二部分是提取数字之后的数据预处理。
提取数字
提取数字的处理流程与上一篇内容差不多：
遍历文件夹下的原始数字图片；
对每一张图片进行轮廓提取操作，只提取外围轮廓参考上一节讲解；
_=\\

=
=
=

_
=
=_
=
=
=___

求轮廓外包矩形，并根据矩形大小信息筛选出所有的数字轮廓；
然后根据位置信息对数字框排序，显然第一排依次是，第二排依次是；
=
=
_=
=
=


=






_==
_==

提取出每一个数字所在的矩形框，作为取出。

=_
=_
_=
_=

数据预处理
为了加快训练速度，我们不用原图作为输入，而是对每一个数字原图做一定的处理。此处可选方案很多，提取特征有很多经典特征可选，也可以是自己设计的特征。
这里我用比较简单的方法，把每一张数字图片转换为二值图像。大致流程是这样的：
把每一张大小统一变换为。
阈值分割。
_=_
=_

_=_
=_

把二值图像转换为二值图像。
把处理完的数字图片保存到对应数字的文件夹中。此为中间过程，可注释掉
_=\\\\
=
==
=
_=\\\\
=

_=
_=
_
_

处理完之后保存的文件夹如下：

每一个文件夹里面类似这样，可以看到背景有黑有白，数字也是有黑有白：

把处理完的二值图像展开成一行。
最后把展开成的一行行样本保存起来作为训练用的数据。
对应的，把数字标签按照数字的保存顺序对应保存成训练用的数据。
=_



=_




=
=
=



训练识别数字
这里用自带的算法实现。我同时尝试了自带的神经网络和，发现还是的效果最好。有兴趣的可以自己去尝试一下。也可能是我参数没调好。
这里的流程是：
加载上面保存的样本和标签数据；
分别用个作为训练数据，个作为测试数据；
用自带的训练模型；
用训练好的模型识别测试数据中的数字；
输出预测值和实际标签值。



=
=

=
_=
_=
_=
_=

=_
___

_=_
=

__


下面是输出结果：

可以看到，预测值和实际值简直一模一样！
注意
中的只能训练模型，不能保存和加载模型。所以只能用的时候训练，训练好直接用。
此次训练样本只有不到一百，暂时只能保证对于本系列文章自带的九宫格图片进行完美的数字识别。其他图片的数字识别准确率不敢保证。如果想要得到更好的效果，请按照机器学习的方法进行优化，或进行更好的数据与处理，或加大数据集等。
整个项目代码会在下一篇，也就是最终篇之后放出。

相关推荐：
玩九宫格数独一：九宫格图片中提取数字检测篇一猫脸检测检测篇二笑脸检测是多进程架构，去除了进程间资源共享来达到更高的性能，但还是有部分控制信息需要在进程间同步，使用_让多个进程间的通信变得十分简单。
_在中主要用于
各个进程间包的广播
的转发
与工具等进行通信。
_是一个用实现的无锁环形队列，支持多消费者生产者同时出入队列，常用于多线程多进程之间的通信。具体原理可以查看官方文档或者阅读源码，本文主要是介绍如何使用_来进行多进程间通信。
_需要与_配合使用，通过_来共享内存。
首先进程创建和，进程在进程启动后，通过__和__来获取和的地址。

标识是单消费者生产者或者多消费者生产者
_=___
___
__=__
__
__

__

_=___
__=__
_
使用时，__从中获取一个对象，然后使用__入队列，另一个进程通过__来出队列使用完成后需要__将对象放回。

=

___


_
__{
___
}

{


___{


}

\

___
}
实际代码可以参考__或者__和，非常简单易用。如果要写一部黑客入侵史，发生在去年月份的“方程式”组织被入侵事件一定会被载入史册。而就在前几天，这起泄漏事件又有了余波……故事，且让我们从头讲起。
史上最强黑客组织被入侵了？
年月，一个叫做“”影子经纪人的黑客组织横空出世，宣称他们入侵了“方程式”组织时，大部分吃瓜群众都表示难以置信。
原因无他，这个“方程式”组织可是传说中的“史上最强黑客组织”。他们有多强？从卡巴斯基实验室年发布的一份研究报告里可以窥见端倪：感染者覆盖全球，各行各业都有他们的受害者，拥有几乎无死角、全平台化攻击能力，而且和美国国安局有千丝万缕的联系……

这样一个存在于传说中的组织，居然自己被入侵了？安全研究专家们对公布出来的数据和黑客工具进行了分析测试，然后表示这件事虽然听上去不可思议，但是真的发生了。
公布价值五亿美元资料，只为和总统叫板？
这个入侵了“方程式”的黑客组织一战成名后，非常淡定的表示，其实我们的目的，只是想赚钱。
他们先公布了一部分文件，然后把手上剩下的文件拿来竞拍，标价一百万个比特币约亿美元，这个高到离谱的价格让大部分买家止步不前。去年月他们转换了策略，把黑客工具分类拆散出售，但销售效果貌似还是不如人意。

然后就在前几天，忽然宣布，这些曾经天价的资料免费了！同时，他们发布了一封致美国总统川普的公开信，对美国政府轰炸叙利亚等行为进行了抨击。很多人推测他们选择此时公开文件，就是为了制造噱头引发对这次政治炒作的围观。
中国是重点关照对象？
虽然这些工具很多已经失效，但还是可以推断出四五年前的已经具有惊人的黑客攻击能力。而通过这些公开资料的回溯，我们会发现很多针对中国的入侵痕迹。
公开的被入侵的各国服务器名单里，包含了涉及个国家的个域名和个地址，中国大量组织机构的服务器在列。

受害者包括政府和外交机构、军工行业、能源行业、金融机构、教育机构等各类重要企业机构，中国的清华大学、联通、移动、电信等运营商都出现在受威胁名单里。

最新一次披露的受威胁，也包含大量中国在内。
再强大的组织也不能保证安全？
从所有公开的信息里，我们能看到“方程式”组织曾经拥有的超强的入侵能力。想到强大如方程式，也逃不过被入侵数据泄漏的命运，不由令人心惊。只能说安全的攻防对战，从来是强中更有强中手，谁也不能保证自己永远是安全的。简怀兵，腾讯云数据库高级工程师，负责腾讯云内核及基础设施建设，从事内核开发工作年，具有丰富的优化经验；在分布式存储等领域有丰富经验。

，是腾讯云云数据库的内核，由开源的数据库分支发展而来。
本文会从四个方面来对腾讯云内核进行解读，分别是：

的发展历程
的特性功能
的深度优化
的演进计划

一、的发展历程
最早是用于腾讯的内部业务，像腾讯游戏当中使用的数据库。
然后受业务驱动，被用于互联网金融支付业务。支付业务对数据库提出了更高的要求，尤其是在性能和稳定性方面。
再后来，运营推动其发展，针对外部需求加上更多功能。大家比较熟悉的可能就是腾讯云。
所以基本上的发展历程就是首先从内部业务到互联网金融，再到现在上蓬勃发展的趋势。这三个业务的维护慢慢驱动形成了一个腾讯内部自己维护的数据库分支。

二、的特性功能
的特性功能有很多，在此仅列出一些大家可能比较感兴趣或者是对开发者及其他公司来说会有一些借鉴性的功能。
①分布式锁服务
这个内核分支当中有提供一个分布式的锁服务。这个锁服务是用来做什么的呢？
首先它提供了一个和连接无关的锁服务，可以通过完整的和兼容的协议来使用这个锁服务。它和现在的一些分布式锁服务不一样，比如说。不一样的地方在于：
第一是它可以实现让你的锁和你的数据在一起；第二是可以用原生的完全兼容的协议来使用这个锁服务。所以它提供的其实是两个不一样的东西。
比如说有时要部署一个，需要一个比较高可用的集群，同时还要去做一些后期的维护，有了分布式的锁服务以后，不需要做额外的应用，只需要在里面操作，后面所用的高可用、运维等一些东西都已经包含在这个运维的体系当中了。
②超级账号
这个功能比较有意思。拿来说，在公有云上申请了实例时，后端会负责做主从复制、备份，但是做这些工作都需要有一个账号。假如现在已经申请了一个数据库实例，但有时候由于误操作或其它原因，会把一个不属于自己的业务帐号删掉，由此会影响网站后端做备份这些功能。
提供的这个账号，其实是的虚拟账号。即便把的系统表以后，也不会有任何影响，后端的业务还是可以连接上来，继续运营、运维。
③
所谓，就是。用过数据库的人都知道，尤其是互联网业务，变化很泛，业务需求在变，产品形态也在变。此时就有对数据库的表结构、规范结构进行增加、删除和字段类型修改的操作的需求。如果在原生中实行这样的操作，会比较麻烦而且有风险。这个功能可以通过改变内部的表结构来与原生的进行支持，并且可以在线修改。
④带租约的工作模式
在一些对移植性要求比较高的数据库的应用场景下，为了防止在同一个拓扑结构下会有多个或者是有多个读写的情况，可以通过带租约的工作模式，把每一个的实例定位到一个具体的当中，就是说现在是只读、可读写还是说查询类似这样的一些区分。
带租约的工作模式，即是可以通过外围的一些空让租约在整个拓扑范围内，让每一个节点达到一个唯一确定的状态。
⑤限速插件
在的主从之间，一般原生的是通过获取来访问主从复制，但这样就会有一个问题，就是在主从之间也就是和之间新建了一个实例，如果中断时间比较长，而你的网络刚开始恢复的时候，它会瞬间把你主从之间的带宽给打满，这可能会影响到其他一些正常的业务逻辑。
为了避免类似这样的问题，提供了一个限速插件。这个插件在主从同步的时候，可以设置阈值。因此即便在这种情况下，也可以保证为业务应用预留一定的带宽。
⑥
第六个就是。在发布之前，也有这样的一个功能，但为了保证访问数据严格的一致性，又开发了的功能，不管是账号还是其他的普通用户账号，通过开启这个功能都可以保证数据在预期的时候去写，不会出现不预期的写。
⑦预留连接
这里指的是预留连接的权限。比方说，当你开发了一个，可这个有，它会一直去连接，但是每一个实例都是有连接次数限制的，所以有可能会因为这个程序的，导致设置的连接数被占满了。这种情况下，无论是还是运维，都没办法连接上来做一些其他的应急措施。
因此，提供了这样的一个功能，会为预留的账号提供一些额外的连接，这些连接不可以配置，因此即便是你的有或是其他紧急情况下，也可以保证这个运维的连接是始终都可以连上的。
⑧安全
在通常情况下，比如主从复制正在进行时，外面也正在进行一个的操作，这可能会导致有些会被删除，下次再来建主从的时候就会导致有一些还没同步过去就已经被删除，因此会出现建不上主从复制的情况。
会在前，确保现在是没有主从连接。如果一定要做这个动作，而现在又有主从连接，会先把主从复制上的拓扑停掉。
⑨数据强同步
数据强同步的封装最早是在上，之前都是通过异步的方式。所谓的异步就是指和之间不主从复制，比方说现在有一个已经在上，你提交了一个事务或一条数据，这时候把的大小切到上，你会发现刚才提交的事务有可能已经查询不到。
为了防止这种情况，在和已经提供了半同步的功能，半同步和强同步的差别就是半同步第一次在某些比较特殊的场景还是保护不了数据同步的一致性，第二就是它会设置一个的值，第三个就是性能方面的问题，原生的话可能性能不足。
针对一些应用对数据的一致性要求非常高，在原生半同步的基础上进行了深度优化，确保一个事务在主库上提交之前一定已经复制到至少一个备库上，确保主库宕机时数据的一致性。
⑩在线升级
已经提供了这样的一些特性，但是这个版本中从非的版本到版本是没有办法比较简单在线升级的。所以为了确保可以在线平滑升级，有做一些工作。
最后还有两个特性功能，第一个是需要在某些场景下过滤其中一些功能，这就需要把一些的表转换成的表，第二个是把系统库里面的一些需求隐藏掉。
功能这部分就讲完了，这里列的个特性功能，都是在最常见的使用场景当中对大家比较有意义的一些功能。


三、的深度优化
①主从复制全链路优化
这个会在后面作为一个点单独来讲，比如说在主从复制中、优化过程中，还有很多其他环节中做了哪些优化，有什么效果。
②优化
第二个是的优化，在最新的版本中，官方已经有这个优化。
③锁拆分
简单讲就是以前会有一把大锁去共享这个、去读写字段，然后都会频繁竞争这把锁，这就会导致在大并发的量下产生较大的性能开销。
④
，就是。传统的官方版本是去回放，同步过来的时候，都是单线程的模式，到以后就变成了并行。
上做了一些正式的优化，按临界事务提交的这个区间，只有不同的事务没有的情况下去竞争或者在同一个资源上的时候竞争，相当于把它的粒度拆分到最细。
⑤
有关的功能，在中，一般情况下是产生一个连接就会去建一个线程，该线程用连接，这个可能跟早期的一样。
⑥
，简单的理解就是因为是密集型的服务器，对于服务器，最致命的东西就是、磁盘，使用传统的机械硬盘又需要转磁头以定位到扇区，而这些东西的开销都很大，因此这个功能就是为了减少磁盘寻道和寻址的开销。


接下来从三个维度去介绍所做的改进，分别是高性能、强一致和工程化。
主要改进高性能

在内核复制的个主要环节优化：

读写锁拆分
网络传输串行变并行
写合并和解锁
事务回放串行变并行

高性能读写锁拆分
存在的问题：

对的读写都要互斥，高并发尤其是有多个时，是影响性能的关键之一；

的优化：

将读写分离开来，多个写入的线程还是在锁保护下串行执行，每一个写入线程写入完成后更新当前的长度信息，多个线程以文件的长度信息为读取边界，多个线程之间并行执行。以这种方式来让复制拓扑中的线程发送得更快！


高性能传输串行变并行
存在的问题：

未收到上一个的之前，不能发送下一个；
每个事务需要一个，不能有效利用主从之间的带宽，尤其是跨园区条件下；

的优化：

将发送和回应的接收独立到不同的线程中，由于发送和接收都是基于流的传输，所以时序性是有保障的；这样发送线程可以在未收之前继续发送，接受线程收到后唤醒等待的线程执行相应的任务。


高性能写时合并和解锁
存在的问题：

线程和线程竞争的锁
以为单位写文件，产生大量小
写文件产生额外文件
频繁动态内存分配和释放

的优化：

使用读写边界解除线程和线程之间的锁竞争
合并小到事务级别
使用规避文件写
内存复用


高性能事务回放串行变并行
存在的问题：

事务按级别并行，并发粒度大，效率低

的优化：

在上提交无冲突的事务，都可以并行回放


主要改进强一致

优化内核半同步复制为强同步：

提交事务前保证至少有一个已经收到日志
单独处理临界事务

存在问题：

在本地完成事务提交后再同步，导致幻读


强一致事务不丢失和消除幻读
存在的问题：

主先提交事务再发送给在发送过程中时，主可见的事务在从不可见

的优化：

强一致临界事务处理
存在的问题：

写成功，但同步时进程；
进程恢复时，会产生多余的事务

的优化：

临界事务的信息


主要改进工程化
工程化低侵入

业务痛点：老应用迁移成本高、风险大、无法享受新技术红利
的方案：完全兼容的复制中间件


工程化健康诊断和审计
业务痛点：

访问安全：、帐号、对象、越权操作记录、不活跃帐号
安全：注入、宽松条件的修改\删除、低效

的方案：

对访问和相关安全事件进行记录
对异常事件进行拦截或者预警
提供级别耗时统计


工程化兼容
业务痛点：

不同业务使用不同分支的，迁移难
不同业务使用不同版本的，升级难

的方案：

支持主流分支
支持在线升级
支持业务的持续集成


四、的演进计划
首先是实现用户使用的基本功能，然后在此基础上进行深度优化，也就是上面提到的那些。将来，会针对架构进行优化。

：开源中国作者：孙勇福，腾讯云高级工程师，负责腾讯云产品研发，毕业至今一直从事数据存储系统运维和研发工作，在数据库领域以及领域具有丰富的运维和开发经验。

开源数据库往往不具备商业数据库一样的高端能力，但是却因简单易用，无需费用等深得大家喜欢，但在云服务时代，打造一款同时具备了开源数据库的性价比和商业数据库的安全性的数据库，几乎是所有使用者心中的梦想。腾讯云数据库基于这样的考虑，实现了云化的审计能力，下面就让我们一起来看看具体的技术细节。
产品架构

各模块特点


三个无差别，保证一个或者两个故障时，剩余正常工作用户无感知。

旁路信息进入时，对数据进行压缩上传同时必须半数节点响应成功后才算正确上传。

每个用户实例都有自己单独的，在数据上传是不同实例消息并发上传到的保证每个用户信息及时进入审计消息队列。




是一种分布式的，基于发布订阅的消息系统。主要设计目标如下：

以时间复杂度为的方式提供消息持久化能力，即使对级以上数据也能保证常数时间的访问性能

高吞吐率。即使在非常廉价的商用机器上也能做到单机支持每秒条消息的传输

支持间的消息分区，及分布式消费，同时保证每个内的消息顺序传输

同时支持离线数据处理和实时数据处理

解析


：集群包含一个或多个服务器，这种服务器被称为。

：每条发布到集群的消息都有一个类别，这个类别被称为。物理上不同的消息分开存储，逻辑上一个的消息虽然保存于一个或多个上但用户只需指定消息的即可生产或消费数据而不必关心数据存于何处。

：是物理上的概念，每个包含一个或多个，创建时可指定数量。每个对应于一个文件夹，该文件夹下存储该的数据和索引文件。

：负责发布消息到

：消费消息。每个属于一个特定的可为每个指定，若不指定则属于默认的。使用时，同一的一条消息只能被同一个内的一个消费，但多个可同时消费这一消息。


框架

如上图所示，一个典型的集群中包含若干可以是前端产生的，或者是服务器日志，系统、等，若干支持水平扩展，一般数量越多，集群吞吐率越高，若干，以及一个集群。通过管理集群配置，选举，以及在发生变化时进行。使用模式将消息发布到，使用模式从订阅并消费消息。


是分布式服务，采用一致性算法进行路由。

多协程并发处理模式保证数据秒级别消费。


一致性
在分布式集群中，对于机器的添加和删除已经故障机器自动脱离集群不影响服务是分布式集群的最基本的功能。本次审计服务采用一致性完成这种基本功能。
具体描述如下：按照常用的算法来将对应的哈希到一个具有次方个桶的空间中，即的数字空间中，也就是将，四个假设有四个实例对象实例对象通过散列到环上。如图来自于网络

同时将三个服务节点假设三个服务节点，通过也散列到环上。如图来自于网络，通过找出距离自己最近的节点，即可找到服务节点。

在服务节点添加删除或故障时实例对象都会自动的调整找到距离自己最近的服务节点进行审计服务。
同时，在引入路由时，我们发现服务节点分布越均匀，每个服务节点的负载也就越均匀。这里引用了虚拟节点来解决这一问题。

审计策略

独立规则加载协程：在规则加载时，不影响审计规则功能区性能

优先级：策略支持用户自定义优先级，在策略匹配时，优先匹配到优先级较高的策略。

规则设置丰富支持规则==，==以及正则匹配。

权限：支持二次认证，保证数据安全性。


多并发协程

协程，不需要抢占式调度，可以有效提高线程的任务并发性，而避免多线程的缺点原生支持

故障优化

耦合关系：保证一个子系统发生故障时，不会影响其他系统的正常运行。

审计服务故障时保障数据不丢：消息消费时会动态的记录匹配到规则的或者超过一定阈值消息的，保证服务被分配到其他节点或者故障服务修复启动时都会从正确的位置消费消息。

数据旁路数据不丢：在数据传入到是必须保证半数以上的节点响应此消息时，才进行下面的数据传输。

告警及时感知：或者不可用时会秒级别感知，发送告警信息给系统负责人，及时恢复服务。

自动扩容：匹配规则消息存储采用腾讯云，通过后台打通，在存储空间不够时支持自动扩容。

数据顺序性：每个消息在旁路时都会被打上一个时间戳同时消息也是按顺序进入消息队列，在数据读取时按照时间戳顺序读取。


腾讯云

腾讯云特点：
设计服务数据存储采用，腾讯云自有的服务，该产品具备以下特点：

云存储服务，是腾讯云平台提供的面向互联网应用的数据存储服务。

提供了高性能、高可靠、易用、便捷的集群服务，每一个实例都是至少一主一从的副本集或者包含多个副本集的分片集群。

整合了备份、扩容等功能，尽可能的保证用户数据安全以及动态伸缩能力


当然，为了用户的安全考虑，我们所有的数据，都是需要用户主动开启审计的前提下，才会记录流水数据，并对数据进行过滤和存储。
使用云数据库服务的好处：

安全：提供在线的至少两份数据存储，确保线上数据安全。同时通过备份机制保存多天的备份数据以便于在灾难情况进行数据恢复。

高性能：集中安装专用高性能存储服务器高内存全机型来支持海量访问。省心：提供×小时的专业服务，扩容和迁移对用户透明且不影响服务。提供全面监控，可随时掌控服务质量。



相关推荐错误码加密特性及使用方法导语：已经火了很长一段时间了。最近我们项目决定引入，替换我们播放器现在的事件总线框架，以解决我们存在的一些问题。

自研事件机制介绍
腾讯视频的播放器架构是基于总线设计的，不同的功能模块被抽象成一个个插件管理器，挂载在总线上，收听、发布事件，完成业务逻辑处理。

图
上图是播放器的总线示意图，每个节点表示一个逻辑插件，红色的线条代表总线。插件可以有子插件，父插件要负责将事件派发给它的子插件。

图
上面三个类图中，是描述事件的类，不同的事件通过不同的值来区分。即是播放器的总线，方法负责将事件抛到总线上。即是插件的抽象类，当总线上有新事件到达时，插件的方法会被调用，方法内部根具事件的值辨识不同的事件，做相应的业务逻辑处理。拥有子插件的插件，还需要循环调用的方法，将事件传递给子插件处理。
下面是典型的插件方法代码片段：

{
{
_
=

_


_




}
{

}
}
一个插件将事件发布到总线上的代码示例：

{
____
}
自研总线的缺陷
通过之前对播放器架构的介绍，我们可以发现，我们的事件机制还是比较简陋。主要存在以下几点缺陷：、插件代码结构不够松散，所有事件响应处理都在方法中处理。、事件过度广播。当一个事件发生时，所有插件的方法都会被调用执行，浪费了时间片，程序执行效率不高。、事件类型不安全。每个事件只能携带一个的对象，事件收听者如果要解析，收听者只能靠“猜”，是否猜中取决于发布该事件的人是否按照收听者的意愿携带指定类型的。如果没有通过校验而直接强转，极有可能发生强转失败。、事件参数不可拓展。事件只能携带一个的。一旦某事件携带某种类型的，该事件携带的类型不能再变更，一旦变更，所有收听该事件的插件也必须要修改代码。
基于此，我们决定引入开源库来重构我们的事件机制。
介绍
了解过的同学都知道，的核心是使用反射。不同的事件用不同的类型来表示，插件类要收听某一事件，就要声明一个相应的方法来接收事件。例如，已知有，，三种事件，有、、三个插件，假设插件收听，插件收听，插件收听，则、、三个插件类中需如下声明：
：
{

{

}
}

：
{

{

}
}

：
{

{

}
}
当我们需要发布某时，需要调用的方法：

更多如何使用及原理的知识，这篇文章不作讲解，您可以搜索其它文章或者在上了解。
工作量评估
通过以上分析，我们这次重构的主要工作内容就明确了：
、将类中所有预定义的事件全部映射成具体的类，即有多少就有多少类的原则。比如，我们需要将_转换成。
、将插件的方法中语句中的每一条语句映射为一个方法声明，即有多少就有多少方法原则。例如在上述代码示例中的_：

{
=
}
、将所有使用发布事件的地方，全部修改为使用的方法。比如有：
_
要替换为：

如果耐心把这篇文章看到这里的话，大家可能会觉得，你要做的工作很简单嘛，无压力，。
开始工作之前，老大都要求我们先把工作量评估出来。由于代码中有多少事件，有多少个插件，每个插件具体收听处理了多少种事件，这是很难统计出来的，特别是最后一点。不过，工作量肯定和插件的个数，以及插件的代码规模肯定是成正比的，我只需要把这两点统计出来，估计一个大概的工作量还是可以的。于是，有下面的统计表：

图
横坐标是代码行数，纵坐标是在插件个数。插件总个数有个，总代码行数多行。按照每行代码个小时的工作速度，每天小时不停写代码，一个人也要整整个工作日，还不包括自测，代码审核等等其它工作量。我拿着这个表就去找老大说，两个人需要三周的工作量。结果老大直接跟我说，帮手没有，你一个人先搞，看看进度咋样好吧，其实老大是对这个评估不满意。
就这样，两眼一抹黑，踏上了重构之路。
第一天，我先入手了几个插件类。遇到需要映射的事件，就手动创建其对应于的文件，此操作大概需要近一分钟。将中的语句写成对应的方法，然后把中的语句复制到方法体中，此操作视语句长度及分支的多少，耗时不等。最后将方法删除。就这样一天工作下来，不断重复着这样的工作，一个八百多行的插件竟耗费了我半天工作时间，极其烦躁，而且人工修改还特别容易出错，比如拼写错误，漏掉分支等等，带来的后果直接表现在代码运行不正确，而后续却难以排查。
于是，我有一个大胆的想法。程序员是脑力劳动者，任何时候，都不应该成为搬运工。是否能够编写脚本或者自动化工具，自动化的完成重构工作。
实施方案
使用注解解析自动生成文件
我们都知道，是通过注解来实现的。通过注解解析，在编译阶段生成了一个文件，这个文件被称作，其硬编码了每个使用了注解的类的信息。
受到的启发，我们的事件类是否也能通过注解解析的方式生成呢？答案是肯定的。关于注解解析相关的知识可参看我的另一篇《与自动生成代码》，由于篇幅限制，这里不做讲解。
首先，自定义一个注解：


{

}
属性指明该类对应生成的新文件的包路径。
然后在中使用该注解：

图

图
注：和是中定义的内部类，事件定义在内部类中。除此之外，还有、等。编写注解解析器，注解解析器的逻辑也比较简单：

图
例如，对应生成的文件如下：

图
语法解析修改代码
现在，我们剩下的工作是如何完成代码自动替换，将替换为，将替换为方法。
我首先想到的是使用正则表达式，通过对源文件进行扫描，将匹配的代码行替换为指定代码。比如，我们使用正则表达式\\\\\\\\\\\来匹配代码中的方法调用，然后将其替换为相应的。但是，我们仅仅通过正则匹配，没有办法确定匹配到的就是类中的方法调用。例如，完全有可能有一个类，它内部也声明了一个方法，我们的正则也会匹配，导致错误替换。另外，语句的替换也是更加的困难。首先，哪些类中的方法的需要被替换？只有那些继承自的类才需要替换，如何判断一个类是否继承自也是很难判断的不但有直接继承，还有间接的继承。
因此，正则匹配这条路是走不通了，有太多语法、语义上的信息我们需要知道后才能处理。
那么，如何去做语法解析呢？写一个语法解析器吧。但是我最多只有一个月的时间，好像不太现实。
不能自己写就只能搜索下是否有现成的语法解析库，还真有！
介绍
是一个用于语法语义解析的库，其实现基础是库。比如，有下面代码：

=

{
{
=
=
}
}
对于表达式中的，只能告诉我们是一个变量，而则能识别出这里的是一个变量，其类型是。
又例如，有如下、两个类：

｛


{
=
}
}

{
=
}
能够识别出，表达式中的即是类中的，而且其初始值为。
的这些强大的符号解析能力要基于的语法解析。接受一个文件或者代码片段，然后输出一个叫的对象，叫编译单元，其内部结构是一个树形结构，被称作抽象语法树。将源代码中的一个类定义、一个方法声明、一句方法调用语句，甚至一个语句，都抽象为上的一个节点，而则是树的根节点，完整的描述了一个文件。

图
例如，有如下代码：


{
{

}
}
通过处理后，输出如下语法树：

图
上图中展示了输出的中包含了三个子节点，一个申明，一个申明，一个类定义。上图并没有完整的描述整个语法数，绿色三角形的部分被省略了，下图展示了省略的部分：

图
通过其四个节点，我们可看出其返回类型是，方法名是，方法参数是，以及其方法体：

图
可以看到，即使是这么一句代码，也可以完整的描述成一颗树。
有了后，我们如何遍历这棵树呢？已经为我们把遍历树的代码封装好了，并且提供了类，基于访问者模式，你只需要实现不同的类来处理具体的节点，而不是将精力放在编写如何遍历树的代码上。
前面我们已经说过，是建立在上的，借助的树，便可实现其符号解析。比如，当判断一个是否是对的调用时，提供的方法，不断回溯当前节点的父节点，以找到这个方法调用声明的原型，记录了方法声明的全限定名，通过将全限定名与比较是否相等，我们便可得出结果。
使用进行重构
一开始，我是通过新建工程，然后在工程文件中，引入库的：
{
}
在开发过程中，我发现这个库现在还很不稳定，有许多。例如，使用模式解析的，根本没有办法解析，会直接，所以导致我只能使用模式解析文件。有一些内部接口，也不能正确解析，比如，有如下代码：
{
{

}
}

{

}

{
{

}
}
遗憾的无法解析出的类型，因为无法解析出来，因为没有定义在中，但是，我们都知道，从语法的角度，这么写是完全正确的！
由于目前存在一些气人，所以我不得不下载他的源码，以修复这些阻碍我的，希望尽快修复这些。
下面两张图是我用将处理后的文件和处理之前的文件进行的对比，左边是处理后的文件，右边是原始文件。第一张图可以看出整个被删除了，第二张图可以看到处理后的文件末尾添加了很多注解的方法，第三张图看到原始文件中的方法已经被替换成了对应的。

图

图

图
总结
本文主要记述了我如何通过编写工具自动生成代码的方式，提高代码重构的效率。原本计划需要共计人日的工作量，实际一个人只用了不到三周的时间便完成了任务。另外，本文还对注解解析，及的基础知识进行了讲解。
由于文章已经比较长了，篇幅限制，本文并未对实现自动化工具的代码实现细节进行过多的讲解，这部分内容待到以后来分享了。李光，任职于腾讯社交网络运营部织云产品团队，负责织云监控告警平台规划与运维新产品开发工作，多年业务运维、运营规划经验。

概述
读完关于前世今生的《凤凰项目：一个运维的传奇故事》，书中传达了若干理念，其中一点也是老生常谈的的价值体现在帮助业务与用户的价值提升，当时看到这里的时候，想起团队进行过的一个挽救用户的项目。
价值交付链从对象层次上可分为公司、产品、用户，这三个对象是紧密不可分且相互影响的关系。社交网络事业群拥有众多海量规模的业务，在海量的运营压力下，服务器设备的数量也突破了大关，并有序的分布在全国不同的中。这些有些投入运营的年代久远，已经不能较好支撑现在业务的发展了，我们经常遇到的问题如机架不够用、出口带宽不足、机房规划老旧、硬件设施老化等。
一般迁移服务是有两种因素合力而成的：

业务优化服务质量主动迁移
业务因的升级与裁撤从而被动迁移

在业务的实际迁移中，经常会遇见长尾业务迁移成本高、迁移难度大的挑战。
本文主要从三个部分介绍了笔者所服务的手机运维团队在一次业务被动迁移过程中遇到的挑战，在面对挑战的时候团队是如何坚守“一切以用户价值为依归”的价值观。

用户即将停止服务
挑战与选择
乾坤大挪移

用户即将停止服务
先给各位看官们唠叨一下整体的背景，在去年的时候我们要开始因硬件设施老化需要被整体裁撤掉而带来的业务被动迁移，此次迁移机器数涉及业务模块数量涉及，其中手机运维团队所负责的部分，无论是机器量还是业务量都是，而且裁撤时间进度比较紧张将最后会在运营一段时间后，断电断网。
搞过大规模业务迁移的看官们都知道，这是一个费时、费力、费心，会产生大量的沟通、评估、实施成本的事情，并且在过程中还伴随着有损业务服务质量的风险。工欲善事必先利器，虽然运维团队有经过多年持续打磨最佳实践平台织云，可以高效地提升我们迁移部署、扩容、缩容等事务性操作的效率。但却依然改变不了大规模迁移业务是一个很苦逼事情的本质………此处省略字，避免传播负能量的嫌疑。
可能有的看官还不太熟悉腾讯织云是什么东东？这里再唠叨几句，概要介绍下织云。
织云是团队初开始规划并上线的，上线后也获得了集团内卓越运营奖这项殊荣，至今织云已经持续打磨了四年。织云的运维理念是“业务价值导向”，这也吻合了运维这个岗位最朴素的目的“为业务创造价值”。

持续交付原则中，有两个基准原则：

为软件的发布创建一个重复且可靠的过程
将几乎所有事情自动化

重复且可靠与自动化是相辅相成的，二者公共的基础是标准化。回到业务裁撤这个具体的场景中来说，设备的上架、业务的部署、设备的下线等操作就是高频的重复动作，织云将这些具体的运维场景全部封装成标准化操作。

通过众多的一键式的标准操作，可以极大地提高运维同学的效率。笔者在业务裁撤中，经常就会通过这些一键式的标准化操作同时启动若干个版本部署、设备下线等操作流程。
互联网时代逐步的结束到全面进入移动互联网时代的过程中，也带给了运维团队很多全新的挑战与压力如：

早期版本的多样性，需要适配”百花齐放”的手机机型，不同架构的可维护性差异较大
移动互联网网络环境更加复杂、就近接入的粒度需要更细
对业务架构的容错、容灾、服务质量、用户调度的策略都有更高的要求
…………

手机运维团队在此次的业务迁移过程中也面临了上述几点问题，待迁移的业务列表中，有手机非智能机的业务。在年年智能机还没有普及流行与平台统一，那个时候用户所使用的非智能机大部分是、、这三大平台，涉及不同的机型终端有几十种之多，不同机型上所运行的版本也是各式各样。
非智能机上的各版本之前都是由不同的异地开发团队开发完成，如果一定要说版本之间有共性的话，那就是都具备不可调度的特性，不可调度的特性，不可调度的特性重要事情说三遍，如若支持调度，那么这用户，团队也只需小手一抖分钟内就可以调度到新的数据中心的服务集群上即可。也就是说这批不支持调度的用户，是没有办法做常规业务迁移，将会面临因断电后停止服务的情景。
挑战与选择
手机用户的概要服务流程是用户通过客户端到的接入我们的后台服务，后台服务返回请求结果于用户。

我们面临的关键挑战

在年年的非智能机时代众多的版本中，有些版本因为平台框架与当时大的网络环境的限制只能将用于提供用户接入服务的到版本中，且不同机型、运营商、厂商的也不尽相同。同时支撑这批的后台接入服务是和所部署网络环境强耦合。非智能机版本的是不支持动态下发与测速动态更新接入列表的，我们同样也不能通过调度系统干预用户的接入地址。

客户端版本停止迭代、、这三大类客户端是年年间是由不同的异地团队开发完成，至今已经有年多没有版本迭代了。随着人员流动，对于这种长尾业务已经找不到当时主要负责开发的同学了。

版本覆盖率假定我们不计人力与时间成本去重构三大类非智能机的众多版本，但因为的升级行为依然是依赖用户主动发起的行为并不能透过厂商的渠道强制更新，所以新版本覆盖到全量用户也是一个极其漫长的时间。

迫在眉睫业务迁移的最终结束时间点也都是既定好且不能更改，因为到期后就会断电断网，停止提供基础服务。


面对这些挑战，我们似乎陷入了一个僵局，既不能调度用户、也不能推送新版本，而且还要让原本负责用户接入服务的能一直稳定的工作，否则用户就会停止服务。
用户大盘数据
用户对于所服务的海量用户中占比有多少呢？从两个运营指标来衡量。日活跃用户数量，现在的是亿，占比有，日最大同时在线数量，大盘日同时在线亿，而非智能机用户同时在线，占比不到。从上面两个数据来看，平均不到的占比基本是对大盘不会有影响。
我们的选择
从挑战与数据来评估，其实是给运维团队带来个很大的难题如何成功的解决这个难题？又或者放弃这用户？
客观说不是没有想过放弃这用户，因为这是对于团队成本最低甚至可以说是一劳永逸的做法，业界也有类似强行挂公告停止服务的先例尊敬的用户因原因在年月即将停止对版本用户的服务。再说，用户换置一台智能机的成本也很低，换置后还能享用到更好的服务质量！备注：非智能机版本的用户因为受限于机型硬件配置与网络的限制，客户端一般只提供消息类的基础服务
放弃用户的方案在初始讨论的时候就被否决，原因其实也很简单，这和团队一贯所坚持的价值观不符合：运维的价值在于运用技术方案保障服务的质量，让用户能获得优质体验。运营过程中的每个难题、每次故障，都促使我们多想一点，多做一点，不断的深耕细作锻炼运维能力来服务用户。倘若就这样放弃这用户，不仅放弃了运维自我成长的机会，更会伤害了一直信赖这个产品用户的感情。
既然已经决定了要挽救这用户，那我们该如何去做呢？
乾坤大挪移
浮出水面
如前所述我们遇到的核心问题：

与待裁撤的网络环境强耦合
客户端，且不支持云端更新接入

问题的关键点就是用于用户接入的要能持续提供服务，并且不能随关闭而停止服务，且是与网络环境强耦合的，此时一个大胆的方案再被拿出来重新评估，为什么会说在被重新评估，是因为这套方案在初期就拿出来概要评估过，就是因为涉及到外部三大运营商与太多的不可控因素，团队认为是很难执行下去的。
这套方案是什么呢？是网络平移概要介绍就是我们将待裁撤的中，所依托的网络环境整体：的迁移到新的中，也只有将网络环境全部迁移过去才能保证用于接入的服务不会中断掉。夸张点说这个方案的整体执行难度可以借鉴下图表达。

这个方案有哪些可预见的关键难度呢？

新建和待关闭的因年代差距较大，基础架构和网络规划差异非常之大，需要将所在的个网段整体迁移到新。
要分别于三大运营商沟通并极力争取运营商侧都同意配合测试与迁移。
网络安全与负载均衡策略也均要平移到新。
内部牵扯较多的跨事业群部门联合协作。

持续推进
概要方案确定后，我们就卷入不同部门的同学来评估细节与落地，并也积极与商务同学一起与运营商沟通寻求支持。经过多次沟通，所幸的是运营商侧愿意支持与配合我们做网络平移。这个项目当中有大量的沟通协调工作。
获得运营商的支持后，整体项目也就进行的比较顺利了，我们依次又确定了具体方案关键节点

在新中部署全套非智能机的后台接入服务，用于切换使用
确定了运营商切换方案与切换时间点
制定应急方案
给用户推送了相关信息，告知用户

在某个月黑风高的凌晨点钟，开始了网络地址切换方案，切换前的心情是这样的。

因为运营商此次切换是不能灰度的，只能一刀切的全量切换，这里面也牵扯大量的修改网络层面配置，如果切换失败，在切换到之前的环境费时费力不说，也可能引起其它问题。整体的切换过程不是百分百有把握的，关键的操作都是在运营商处完成，并且这些操作对于腾讯的团队都是黑盒的。
幸运的是，当晚网络切换很顺利，平移后，用户自动重新登录与消息收发均成功，服务一切正常，三个月的努力成功了，用户在无停止服务的风险了！

这个项目成功的落地执行，挽救了用户正常使用手服务。虽然运维团队顺利平安的度过了这次难关，但长尾业务的迁移的困难也成为运维不得不面对的难题。就长尾业务的迁移过程中，哪些技术点与流程点能被优化的呢？笔者这里抛砖引玉的抛出几点粗浅的想法：
非功能性规范的重要性。历史问题导致了长尾业务迁移的痛，假如运维能够在业务开始之初就规范好业务的非功能管理规范，提出能被执行的运维标准化要求如无等要求，有望极大的降低了历史问题的发生。
云技术的运营。长尾业务因为多数都是运行在物理服务器上的，通常的迁移步骤都是梳理当前环境在重新部署，如果能用镜像的方式，更好的自动转换，会极大的提高迁移效率。
更前瞻的规划。运维不但要维护业务，还要对业务的分布进行全局的规划。此案例中，假如运维能提前规划好未来年的业务分布，所有的紧急任务都会变得有条不紊。
总结
挽救用户这个项目与腾讯的业务形态密不可分，未必所有的运维都有遇到这种难题的机会，但是笔者相信有一点所有运维人都是共通的，那便是在面对困难时的态度。而上文中保证了项目顺利完成的关键因素，就是腾讯运维坚持”一切以用户价值为依归”的决心和态度。
欢迎关注「腾讯织云」公众号，获取织云最新技术资讯。导语：最近开始看，很多疑问。微积分什么的早丢了，边看边查，记录备忘。本篇主要是针对最基本的网络模型，解释反向传播原理。

整个神经网络可以理解成变量是所有、的损失函数，。
为求的极小值，使用梯度下降的方法，
对每个变量求偏导，算出Δ、Δ，
更新=Δ，=Δ，其中是步长。
激活函数、损失函数、网络结构、训练方法、连接方式、填充方式，都有很多选择，每个选择都会影响最终结果，要达到最优需要逐步积累经验。
先从最简单的开始。
需要复习的知识点，导数和偏导数、链式法则、梯度下降。
导数：二维几何场景下，可以理解为曲线上某点的斜率，在求函数极小值的时候，可以根据斜率确定下一步该增大还是减小。
偏导数：存在多个变量的情况下，的偏导就是假设其他变量都是常数，然后对求导。
链式法则：借一张图

梯度下降：求导或偏导得到斜率确定变化值，更新变量得到新的值，重复上面的操作，直到斜率为或小于设置的某个阈值比如
=Δ，=Δ，其中是步长
网络举个栗子：
神经元：

激活函数、损失函数：

网络结构：

根据上面的网络结构以及定义，可以得到：

为了更新、，需要求关于、的偏导：




计算偏导比较麻烦一些

根据上面的结果，总结下面的公式：

不同的激活函数和损失函数，求导的方程不一样。上面的例子使用函数和最小方差。下一步打算根据上面的公式，用写个小程序动手跑一遍，加深理解，尝试解决简单问题，然后熟悉成熟框架。当前浏览器不能支持视频播放，请采用或以上浏览器

今天我们来学习的两种上传模式。通过了解不同的上传模式，我们可以选择一个适合我们的上传模式，不同的上传模式可以带来不同的效果。如果开发能力足够，我建议你选用直传模式。

首先，我们来说服务端上传：服务端上传是最常用的上传方式，也是使用最简单的上传方式。用户只需要将提供的接入程序，就可以实现存储能力的对接。
在服务端的上传模式下，文件是从用户的电脑，流向用户自己的云主机，再由云主机流向对象存储。

如果想要在你的系统内接入对象存储，你要明白如何接入其中：
在这种模式下，我们用户将文件上传到云主机，云主机上的应用程序会将我们的上传的文件进行暂存，作为临时文件。应用程序再通过特定的算法来生成文件的签名，借助签名，将文件上传到当中。

这种上传模式由于只有服务端和进行通信，结构较为简单，学习成本较低。但是由于通过服务端进行了文件的中转，会占用主机的资源，同时由于用户是和云主机进行通信，而云主机和用户的距离有远有近，容易受到网络限制。

和服务端上传模式对应的是客户端上传模式，客户端上传模式用户直接将文件上传到云端。不再经过云主机来中转。

相对的，客户端上传的优势是不占用主机的资源，也不会受到云主机网络限制，对于用户来说，可以体验到更快的上传速度，但是对应的，其存在实现的难度。可能会出现开发进度缓慢的情况。

在客户端上传模式下，用户需要先向云主机请求一个的签名，云主机在借助生成了签名后，向用户发送签名。用户端获取到签名信息后，将文件直接上传至中。
在这种模式下，用户对云主机的依赖降低，可以借助遍布全国的上传节点，来达到一个非常好的上传效果。
拓展阅读：
常见问题：说明：说明：业务流程：

相关推荐
【腾讯云的种玩法】十分钟搞定云架构·什么是、什么是【腾讯云的种玩法】十分钟轻松搞定云架构之三：更大的存储本文作者：

导语
在一个项目的初始化阶段我们一般会做什么呢？如果有一个可参考的项目，是不是会复制这个项目，然后修改成新项目？如果是要在项目中增加一个新页面或是新组件，在开始的时候是不是会复制粘贴先前已存在的页面、组件代码。这些初始化时复制粘贴的操作意味着我们即将着手的项目有大量的结构代码比如构建脚本，开发脚手架是存在共性的，在开发过程中，新建一个页面，新开发一个组件，甚至新写一个路由都可能利用一个相同结构的代码来往里面填写新的内容。那么一个能帮助开发者生成自定制结构文件的小工具就会在这中使用场景下派上用场，它能让开发者的工作焦点回到真正的业务逻辑开发上，同时也能为团队开发体统一份统一的代码规范。

简介
是一个可以帮助开发者快速开启一个新项目的工具集。提出一个工作流的概念，通过脚手架工具，构建工具等和包管理器等的配合使用让开发者专注于业务的解决上而不是其他小事情。在的官网中可以搜索到很多用于初始化项目的，可以用于快速开启项目。同时也提供给开发者如何定义自己的，所有我们自己开发的都作为一个插件可以通过工具创建出我们需要的结构。
自己创建的可以是很简单的创建几个模板页面，也可以通过和用户交互构建一套量身定制的项目，取决于项目初始化的策略。可以利用的工具来开始构建自己的。
从一个简单的例子开始
先从一个简单的模板页面入手，创建简单的。假设我们的需要的项目目录结构是这样的：
├───
|───
|└───
├───
└───
之前提到，我们的是一个插件，所以首先需要创建成一个包，在中这个包的名字应该是开头的，那么我们这个就叫做。每一个包的中必须包含。属性要指向项目的模板目录。
第一步是通过或是自己手动创建的项目依赖。也可以利用来初始化。
{










{

}
}
我们的项目目录：
├───
└───
└───
└───
└───
├───
├───
│└───
└───
└───
第二步就是往中填充内容，也就是项目的三个基本文件的内容。这里简单提供一个例子：

=_


==


=
=


采用模板语法，可以在模板文件中传入参数。
{


}



={

}
到这一步后就是扩展。提供了一个基础的，它有自己的生命周期和事件，功能强大。可以通过扩展这个基础来实现我们项目的初始化需求。于是第三步就是编辑来扩展它：
=
=
=
=
=
=

={
{


={


}
}

{
{}=
={
{}
}

={
{
{





}{




}
}
}
}

{

}
}
第四步就是运行。的是一个全局，我们在本地开发的可以通过软连接的方式生成它的全局包。在的根目录下运行它会在本地的全局目录下安装我们新建的。
在确定本地已经安装工具后，在你需要初始化项目的地方运行，等命令执行完毕，就可以看到新建的项目了。

在扩展基础时，我们可以给实例添加自定义的方法，每一个添加进去的方法都会在调用的时候被调用，而且通常来讲，这些方法是按照顺序调用的。除非是已下划线_开头的私有方法，或是定义在实例上的方法。
={
{


=={

}
}

{

}

{

}

_{

}
}

输出：


每一个方法在中都被认为是一个任务，这些任务都会被调用。的是一个有优先级的队列系统。采用来维护的事件队列。除了自定义的方法外，有很多特殊的事件方法，按照优先级排序：

初始化开始
调用与用户产生交互
创建配置文件，等
方法都不匹配这些优先级时，就会是优先级自定义方法会被划入
创建项目文件
文件创建中产生冲突的处理
调用包
结束项目初始化其他自定义方法在和按顺序优先级调用。
更复杂的交互
现在我们来给增加用户交互和让它能构建出一个更复杂的项目。还是修改，首先增加：
{
{


请输入项目名字

}{


需要文件

}{


请输入你的名字

}={


=
}
}
增加：
{
{}=
={




{}



{}
{}
}


}
可以直接创建也可以利用模板文件创建或是将其中的属性抽象到配置文件中，这样方便修改。
总结
的功能远不只本文演示的这些，它还支持异步事件本身就返回一个对象、依赖包等等。一个也不只是创建一个模板，它同时支持多种模板的需要，比如我们有个复杂的项目，里面可以添加多个，主负责初始化项目的时候创建项目的主要文件并安装好各种依赖，在项目的开发中，我们需要增加一个或是的话，调用对应的即可，生成的模板可以将注意力放在内容上，提高开发效率。



原文出处：社区前言
在去年月，谷歌发表了一篇论文讲述了他们推出的一项新技术，利用机器学习将低分辨率图像转化为高分辨率图像。这项技术能够在节省带宽的情况下分辨率效果达到甚至超过原图，同时速度能够提升大约到倍。于是很快成为该领域的行业标杆。
近日腾讯空间联合优图实验室也推出的他们在此领域的最新技术。本项目采用深度神经网络来识别图片内容并进行图片内容的细节重构，能够通过机器学习来识别图片的内容与纹理，从而能够将图片进行高清重建达到业界领先水平，使用本技术可以极大的提高用户体验。本技术能够在图片只有原来的情况下将图片还原到与原图的同等效果，在空间的应用可以节省用户的流量。本项目业界首创实现了一种多核异构加速技术，能够使用深度学习模型摆脱昂贵的设备，可以在普通的用户手机端运行。
、创新特性名如产品名：
：基于深度学习的超分辨率技术及应用
、主创团队名
社交平台部优图实验室
、创意点的产品功能使用场景介绍
是一种采用深度神经网络来进行图片超分辨率的技术。在深度神经网络的算法处理下，能够通过识别图片的内容与轮廓高清重建图片的细节与局部特征，把一张模糊的图片变得非常清晰，从而达到很好的视觉效果。目前已经应用到空间图片高清放大查看。
同时能够保证图片大小只有原来的情况下，完全重构图片的纹理与色彩，在节省带宽的情况下通过智能算法重构达到与原来图片一样的清晰度。目前应用到空间大图浏览。
是业界首次实现移动端使用深度神经网络进行超分辨率，并保证图片能够实时进行处理。即使在用户的普通手机，也可以使用这项技术。
在空间的应用效果如下图：

、创新点的创新之处的具体描述评审创新性
本项目是业界首次将深度学习的超分辨率技术实现落地应用地项目。在这之前，超分辨率技术的研究一直停留在学术界与实验室。本项目是业界首创实现在移动端进行深度神经网络学习学习即使在普通机器上也可以运行本模型。
是目前业界领先的超分辨率技术，不管是在处理速度与处理效果上都超过之前行业的标杆的超分辨率技术ＲＡＩＳＲ。在处理速度在ＲＡＩＳＲ的基础上提升４０％。处理效果上的提升也很明显。
ＴＳＲ与ＲＡＩＳＲ的效果性能对比：

对于图片细节与纹理的处理来看，ＴＳＲ对比在细节还原上有着更出色的表现：

其次，ＴＳＲ是目前业界首创并且也是唯一能够将基于深度学习的超分分辨率技术落地并应用到移动端的技术。在用户的普通的手机上，也可以很好的运行ＴＳＲ并取得不错的效果。

最后，基于ＴＳＲ衍生出来的深度学习框架Ｒ是目前业界最优的移动端深度学习框架，对比ＣＡＦＦＥ２与ＴＥＮＳＯＲＦＬＯＷ框架，性能提升平均达到２０倍。能够把深度学习落地到普通手机。
已经提交三项核心专利技术。相关研究结果已经投递。
、创意如何产生的创新点相关小故事
空间相册作为用户主数据的主要战场与社交场合，我们一直在关注这里的图片质量与流量优化。如何较大节省用户流量的情况下，提高用户的体验与图片质量，特别是部分历史老照片怎么样高清还原提供给用户，一直是我们追求的目标。
随着深度学习在图片内容识别，分类中的应用，我们关注到学习界结合深度学习的超分辨率技术能够达到较好的效果。同时去年月，也发表了论文推出了超分辨率技术，怎么样把超分辨率技术应用到我们实际项目中来，成为我们的驱动力。
随着等一批学术大牛的加入，基于腾讯自己的超分辨率技术项目在等支持下正式立项。我们的目标是打造业界领先的超分辨率技术，并创造性的把超分辨率技术迁移到用户普通的手机终端。使用用户普通的手机也可以进行深度学习算法处理，从而实际节省用户流量和提高用户体验。同时推动深度学习从后台向移动端演进。
经过半年的研究突破，项目落地。不但对标学习界有较好的效果，而且创新性的把超分辨率技术在实际项目中落地，能够节省用户的流量，也是业界进行移动端跑深度神经网络并达到实时效果的首创。
、怎么实现的评审创新点的复杂度
首先，我们训练并实现了一个层的深度卷积神经网络，对比目前学术界研究的神经网络，本网络能够很好的解决和对于部分图片处理文理不清晰问题。通过神经网络能够抽象出图片的整体特殊，识别图片的纹理与内容，根据图片的纹理与内容进行图片的高清细节重建，从而达到远超过原图的视觉效果。
通过控制卷积神经网络的层数与每层的数，在简化整体计算量的情况下，能够很好的解决图片过于平滑，纹理不清晰的问题。通过精简化设计，能够保证模型在只有。的基础上有不错的处理效果。
神经网络结构图如下：

采用了二次插值对图片进行预处理，这样能够对比较模糊的图片也能取得较好的效果。针对人眼对于颜色与亮度的敏感程度，对图片采用与通道分离，只对通道数据进行超分处理的方法提高处理速度。
针对个模型采用作为激活函数以得到更快的收敛速度与更好的网络表达能力。采用基于的梯度下降法求解神经网络模型的具体参数。

具体的模型训练上，我们先采用张用户真实图片通过调整图片颜色高度对比度施转左右反转等操作构造上百个用户训练样本集。采用压缩的方法将训练样本图片宽高各压缩到原来的，这部分图片经过超分处理后再与原来的图片的效果进行比较，根据对比效果进行调整模型参数。
与业界的训练该方法不同，除了对比图片的损失外，我们同时引入了可视化评测系统，使用用户的真实图片进行可视化评测。已达到最佳的超分效果。

经评测，我们的模型在图片处理的两项关键指标与处理速度上均达到业界领先水平。在处理速度上，领先于目前主流的超分辨率技术。同时，对摄像效果不那么好的图片，也能取得不错的效果。
与学术界前沿超分辨率技术对比如下图数据，放大到＊，硬件环境：。可以看到在处理速度与图片效果来看，都处于业界领先水平。

同时，是业务首创的将超分辨率技术应用到移动端的技术。目前主流的深度神经网络模型一般在后台的高性能机器上运行，对机器性能要求比较高。基于对超分技术与移动端手机架构的深入研究，提出基于手机端深度学习架构，能够充分使用移动端的和资源，使用异构并行计算技术与数据并行处理技术进行加速。对比业务的主流框架如与，性能提高倍以上，内存消耗降低。是目前唯一能够在普通的手机上也可以运行的技术。

深度学习从后台迁移到后台手机端，主要首创了如下关键技术。
独创分块加速技术，把图片分成很多小块通过神经网络进行处理。分块加速技术充分使用的多核特性，使用进行多核并行计算。使用算法对图片的纹理复杂度进行识别和智能处理，大大提高图片的处理速率。

如下图示，通过智能识别可以加速蓝框中图块的处理过程。

其次，是业界首次采用异构多核加速技术。能够根据用户手机的与能力进行任务的智能划分，联合进行处理以达到较好的处理效果。

第三，打造了统一移动端并行加速框架。深度融合了基于平台的并行计算加速技术与基于平台的加速技术。对于基于结构的，充分利用技术和线程池技术。对比业界主流的机器学习平台，速度提高倍以上。
架构如下图所示：

对比业界的处理效果：

第四，采用了动态探测与模型动态加载技术，保证了手机端全覆盖。会动态探测手机的处理能力，针对不同手机实时加载不同的模型，从而能够保证所有性能的手机客户端都可以使用这种技术，保证了手机端的全覆盖。

通过超分辨率技术在空间的项目实施，可以达到节省空间的图片流量，同时预计可以节省存储。
、产品的意义对未来的展望
可以应用到业界所有的图片处理，使用本技术能够给用户节省流量，大大降低图片传输的带宽。目前已经应用的用户普通的图片浏览，达到节省流量的情况下达到同等视觉效果。
同时，在如，微信，天天图，动漫业务都是的目标使用场景。

本技术可用于所有对图片质量要求较高的场景，通过基于的超分辨率技术可以智能修复用户的老照片，模糊的图片，能够把普通图片变成清晰图像。目前已在最新版上使用，用户进行放大查看图片细节时可以达到“无限”缩放的高清效果
同时本技术带来的另一个收益是打开了移动端进行相关的深度机器模型学习的大门。在此之前需要采购昂贵设备才可以运行的深度神经网络，现在在用户的普通手机上也可以运行，这项技术可以极大的推动手机端进行神经网络处理的进程，对于像人脸识别，识别，背景识别，人物美妆等实时应用可以达到同等效果。
、处理效果样例：
用户原图与经处理后的图片对比左边是原图，右边是超分辨率处理的图片

细节对比：

处理后效果对比

细节对比：

处理后效果对比：

细节对比：

处理后效果对比：

细节对比：

处理后效果对比：

细节对比：

用户普通图片压缩再进行处理后跟原图进行对比效果左边是原图，右边是压缩到后使用进行还原的图片效果：年月日，由腾讯云联合社区主办的深圳站成功落幕，现场的粉丝们对于容器技术的分享交流也是热情似火。

腾讯云容器服务团队高级工程师王天夫在沙龙上进行了以《腾讯云多的多维度监控实践》为主题的精彩演讲，现将现场演讲分享出来供大家交流。
也欢迎更多对感兴趣的朋友们继续加入交流。入交流群可加底部小助手腾小云，回复关键词“”拉您入群。
本次分享内容主要包括以下三部分：、腾讯云容器服务的顶层整体设计；、腾讯云容器服务集群化部署的整体方案；、腾讯云容器服务监控。前言
或许我们都知道构建会经历资源合并打包、源码编译、生成及打包签名等步骤，可是不是每个人对这些过程中发生的事情都了然于心呢？或许不然，于是带着好奇心开始了对的学习，现简要整理一下。
资源合并
如果项目引入了包，又或许依赖于其它第三方库，那构建前会将解压并与本地资源合并，这里的资源主要包括目录，目录及。
当第三方依赖中的或文件与本地文件有冲突时，会优先选用本地文件。但略有不同，此目录下的、、等文件会被整合到一个叫的文件中去，后与各第三方依赖中的进行内容上的合并，不会像其它子目录文件一样直接舍弃第三方冲突文件。
的合并相比来说则要复杂一些，除了第三方依赖中的，项目还可以在不同目录下分别拥有文件。构建过程中，会根据中元素、属性及赋值来生成一个文件，并应用于后续的打包过程。为不同的赋予了不同的优先级，其顺序如下：

设置设置

元素及属性的冲突会根据以下规则进行解决：

当然也会有一些例外的：

与默认为，根据规则合并；
如未指定，跟将被设置为。而冲突时会使用高优化级的设置；
若的高于的设置，则会引发，但可通过解决。若未指定，则其值与一致；
若的低于的设置，需要添加一些额外的权限保证能正常运行；
元素只与子元素合并；
元素在合并中不会被改变，只会被添加到其父节点中去；

冲突发生时，可通过合并冲突标记进行解决，需要引入命名空间，详情请参阅官方文档。另外，在对文件进行合并后，还会根据的设置覆盖相关属性。
打包
资源合并后，即进入到编译阶段，先会把项目资源中的编译成二进制并生成及资源索引表，其流程如下：

由图可见，是不需要做任何处理的，只需分配后与一起直接打包到应用程序中；基于下述原因，其它文件则会被编译成二进制。

编译过程中，会把中的字符串进行收集去重，形成字符串资源池，元素中用到字符串的地方将被替换成相应的索引。另外，标签属性値都会转换为资源，进一步减少文件大小；
二进制格式的把标签属性値转换为资源后，避免了字符串解析，从而提高了解析速度；经过处理后，会输出个文件：一个，为项目各资源分配了不同的，将和源码一起参与到后续的编译过程，为字节无符号整数，最高字节表示，次高字节表示，后字节表示资源在当前类型中出现的序号，如=中的代表当前正在编译的资源包，代表类型，代表_在类型中出现的序号；另一个为，实际上为一个压缩包，包含了、、与

资源索引表记录了从资源到文件路径的转换关系，当应用通过类获取文件资源时，会先从中拿到文件路径，然后通过进行访问。



从上述流程中可以看到，若要进行资源的混淆，可在分析格式后，修改内容中文件路径的指向并对资源文件进行相应的重命名即可。
另外，还可对图进行优化、指定文件以还是模式添加到压缩包中等操作。
源码编译
当项目中包含时，会先调用工具生成代码；亦然，需要先调用，只是它不仅会自动生成文件，还会产生相应的文件，文件将打包到中

至此，代码都已准备完毕。下一步要进行的是通过命令将源码编译成字节码，用以编译的包含以下内容：

，具体版本由指定；
中添加的第三方依赖；

编译后可对代码进行混淆处理，主要包括删除无用类、字节码优化、重命名等操作，只需在中配置混淆规则即可
{
{



}
}
生成
如果项目涉及分，那在调用命令前，需要做一些准备的工作，把编译后的文件打包成包，然后生成主中必须包含的文件列表。主要包括、及个步骤。

首先会通过过滤出项目中使用到的四大组件、、、、及，并写入_文件，这些都是会默认添加到主的，无须手动设置。除此之外，默认添加的还有继承于及的类。若有额外的类需要被加入到主中，可以新建一个文件并以的语法指定，然后在中把此文件配置到中去。此过程关键代码如下：
{
=
={

{}
{}
={
_
}
}{

}
}
这个时候，会执行一个叫为名称的任务。实际上是调用了，只是要比常规的简单一些，不执行混淆、优化跟预检几个步骤，只需要即可，以为输入、_为混淆配置文件，把指定内容及其引用标记起来，然后添加到中去。
{


方法未完，略过}
到了，会调用命令，传入、，分析后者依赖，把它直接引用的类也添加到主中，并生成新的配置文件，至此，准备工作完成。
经过上一阶段编译的处理，已经生成了标准的字节码，可在标准的虚拟机上运行。但使用了它特有的虚拟机，这就需要我们为它提供另一不同的格式。工具为此而出现，可将文件转换添加到可执行文件中去。当项目发展到一定规模，需要进行分处理时，可通过上述步骤生成的指定该如何拆分。
遗憾的是，以上关于分的内容都是理想的情况，现实却很残酷。如果项目中开启了，那它会在分的处理前完成，导致是混淆处理后的代码，而_却未曾混淆，后续生成及的过程也就都不再可靠了。要解决这个问题，在前通过混淆输出的符号表对_进行修正是个不错的选择。
打包签名
此时万事俱备，只要把资源包_、可执行文件及项目包含第三方依赖中的非源码文件一起添加到压缩包中去，我们的安装包文件也就生成了。
另外，需要经过签名才可以发布。可通过工具完成。

文件对齐并非构建的必要步骤，但对齐处理后可提高系统访问安装包资源的效率。即使执行了，也只有以模式添加到中的文件是需要对齐的。如若对图片等资源进行了极限压缩或在打包时选择了，那可对齐的文件也就没多少了
通过中的工具以下命令可对压缩包进行对齐



以下命令则起到了检验压缩包有没有对齐的作用：



总结
本文主要介绍了构建的各个主要步骤，并重点讲述了资源合并打包与生成的过程。最后，用一张图概括下构建的总体流程：

以上内容皆基于，新版本插件实现略有差异。若有错漏，望不吝赐教年月日以后，所有需要访问网页的都要面临一个问题：。由于要求访问，换句话来说，还有天，苹果就要对开发者们关闭的大门了。

、什么是？
全称，是引入的一套安全机制，默认行为会强制保证所有的网络请求都使用。
、绕过？
由于这样的要求影响非常广，苹果也是考虑到开发者的过渡问题，预留了一些绕过的方法。比如，可以通过在中添加字典并且将设置为来禁用。

但是到了后，苹果对的推进力度加大，要求从年月日起，所有的新提交默认是不允许使用来绕过限制的。
虽然还有其他的一些方法，但是紧随苹果的脚步，采用传输显然是更好、更安全的一个选择。绕过协议并不是一个好的方案，苹果强推的目的，也是在于防止意外泄露个人信息，并为应用程序提供默认安全行为。
、启用
在的服务器上启用协议其实并没有想象的那么复杂，只需要通过一些简单的步骤部署证书即可完成。

，是指超文本传输安全协议，是一种在协议基础上进行传输加密的安全协议，能够有效保障数据传输安全。

证书方面，可以选择免费版的，也可以购买权威机构颁发的证书。后者是一个更加可靠、安全的选择，许多云厂商也提供有类似的证书服务，并且可以部署到上。
由于笔者个人使用腾讯云的服务比较多，下面以腾讯云为例介绍如何申请、部署证书。腾讯云的证书是由颁发的，可免费使用一年。如果你是阿里云或其他云厂商的用户，可以查看各自对应的证书产品。
、申请证书
登录腾讯云之后，前往证书管理控制台，点击申请证书，会弹出证书选择框。目前只能选择颁布的证书，后续似乎会开放更多证书厂商的产品。

接下来，需要填写一些申请信息，最重要的是绑定域名。假如你的域名的，需要填写的必须是类似这样非顶级域名。

下一步，会要求手动进行验证。具体的步骤可参考产品文档：域名验证指引。
一般配置正确的话，很快就可以拿到属于自己的免费证书了。据笔者个人的情况来看，大概一刷新就可以通过审核。
、服务器安装证书
审核通过后，可以在证书管理控制台看到证书下载链接。先将证书下载到本地，并上传到的服务器，为服务器上安装证书做好准备。
这里，我们以较为常用为例介绍具体安装过程。如果使用的是或等其他服务器，请参考官方文档。
获取证书
文件夹内获得证书文件__和私钥文件_：

__文件包括两段证书代码“”和“”
_文件包括一段私钥代码“”和“”。

证书安装
将域名的证书文件__、私钥文件_保存到同一个目录，例如目录下。
更新根目录下文件如下：
{

_填写绑定证书的域名

___
___
__
_按照这个协议配置
_按照这个套件配置
___
{
站点目录

}
}

配置完成后，先用–来测试下配置是否有误。正确无误的话，重启，就可以使来访问了。
上部署
很多网站都会使用服务，因为云厂商一般有提供一些免费的流量额度，比如腾讯云就有的免费流量。
对于使用了的或网站，还可以将部署在全网节点，实现全网数据加密传输功能。
配置的条件：

域名管理页面，域名的状态为部署中或已启动。
域名不是由同步而来的后缀域名。
域名的接入方式为自有源或者源、源。

登录控制台，进入【域名管理】页面，点击域名右侧管理按钮，进入管理页面：

在【高级配置】中找到配置模块

证书类型
腾讯云目前支持两种方式部署证书：

自有证书：将自有证书、私钥内容上传至进行部署，全程加密传输，证书不落地，保障您的证书安全。
腾讯云托管证书：也就是上面咱们已经申请成功的证书。


证书配置
前往高级工具证书管理界面，

根据情况选择希望配置证书的域名、证书类型和回源方式即可。这里需要满足前面提到的这个条件：域名的状态为部署中或已启动。
勾选“腾讯托管证书”后，可以在证书列表下拉菜单中找到刚才申请到的证书。回源方式选择为，之后提交即可。
证书配置成功后，会出现强制跳转开关，开启后，即使用户发起请求，也会强制跳转为进行访问。

检测部署效果
完成上面一系列的操作之后，还需要最后确认部署的证书是否符合要求。否则，折腾了那么久，最终却是做了无用功的话，那是非常痛苦的一件事。
对此，云厂商也是提供了较为方便的检测方式，只需要输入目标域名即可一键检测。

至此，就完成了服务器的证书部署，并满足了苹果协议的严格要求。

相关推荐
来了，网页访问怎么办？
浅析与原理
腾讯云实现全站方案导语：语言的三个核心设计、、



是一门面向接口编程的语言，的设计自然是重中之重。中对于设计的巧妙之处就在于空的可以被当作“”类型使用，它使得这样的静态语言拥有了一定的动态性，却又不损失静态语言在类型安全方面拥有的编译时检查的优势。

从底层实现来看，实际上是一个结构体，包含两个成员。其中一个成员指针指向了包含类型信息的区域，可以理解为虚表指针，而另一个则指向具体数据，也就是该实际引用的数据。

其中包含了一些关于本身的信息，_表示具体实现类型，在下文中会有详细描述，是一个状态变量，是一个长度为的指针数组，在的地址后面依次保存对应的函数指针。包里面有一个表，通过这个表可以取得，跟则是为了保存表中对应的位置并设置标识。主要代码如下：
的结构如下：

其中包含了一些关于本身的信息，_表示具体实现类型，在下文中会有详细描述，是一个状态变量，是一个长度为的指针数组，在的地址后面依次保存对应的函数指针。包里面有一个表，通过这个表可以取得，跟则是为了保存表中对应的位置并设置标识。主要代码如下：

空接口的实现略有不同。中任何对象都可以表示为{}，类似于中的，而且{}中存有类型信息。

的结构如下：

_
关于的应用，下面举个简单的例子，是关于与数据库交互的。
首先在库中创建一张任务信息表：

数据库交互最基本的四个操作：增删改查，这里以查询为例：
来实现查询这张表里面的所有数据

其中

这段代码可以实现查表这个简单的逻辑，但是有一个小小的问题就是，我们这张表结构比较简单只有个字段，如果换一张有个字段甚至更多的表来查询的话，这段代码就显得太过于低效，这个时候我们便可以引入{}来进行优化。优化后的代码如下：

由于{}可以保存任何类型的数据，所以通过构造、两个数组，其中的每个值指向相应值的地址，来对数据进行批量的读取及后续操作，值得注意的是是一门强类型的语言，而且不同的{}是存有不同的类型信息的，在进行赋值等相关操作时需要进行类型转换。
对于事务处理也提供了比较好的支持。一般的操作使用的是对象的方法，事务则是使用对象。使用的方法可以创建对象。对象也有数据库交互的和方法，与的操作类似。查询或修改的操作完毕之后，需要调用对象的提交或者回滚。
例如，现在需要利用事务对之前创建的表进行操作，代码如下

注意：“=“跟“=“两个操作符不要弄混淆
如果不需要进行事务处理的话，对应的代码如下

可以与上面增加事务操作的代码进行对比，因为操作比较简单所以也就增加了几行代码，以及将对象换成了对象。

并发：同一时间内处理不同的事情并行：同一时间内做不同的事情
从语言层面就支持了并行，而则是并行设计的核心。本质上，就是协程，拥有独立的可以自行管理的调用栈，可以把理解为轻量级的。但是是操作系统调度的，抢占式的。是通过自己的调度器来调度的。

的调度器实现了调度模型，其中有三个重要的结构：，，

底层的数据结构长这样：



、和之间的交互可以通过下面这几张来自的图来展现

上图中看，有个物理线程，每一个都拥有一个上下文，也都有一个正在运行的。图中灰色的那些并没有运行，而是出于的就绪态，正在等待被调度。由来维护着这个队列。

图中的可能是被新建出来的，也可能是从线程缓存中取出来的。当返回时，它必须尝试获取来运行，通常情况下，它会尝试从其他的那里””一个过来，失败的话，它就把放在一个里，然后自己会被放入线程缓存里。所有的会周期性的检查，否则上的永远无法执行。

另一种情况是所分配的任务很快就执行完了因为分配不均，这就导致了某些处于空闲状态而系统却依然在运行态。但如果没有任务了，那么就不得不从其他的那里拿一些来执行。通常情况下，如果从其他的那里要偷一个任务的话，一般就‘’的一半，这就确保了每个都能充分的使用。
如何从其他维护的队列中””到呢？这就涉及到算法，关于该算法的更多信息可以参考这篇文章。
_
举个简单的例子来演示下是如何运行的

这段代码非常简单，两个不同的异步运行
运行结果如下：

然后做个小小的改动，只是将中的两个函数的位置互换，其余代码变：

会出现一件有意思的事情：

原因也很简单，因为返回时，并不会等待其他非主结束。对上面的例子，主函数执行完第一个后，创建了一个新的没来得及执行程序就结束了，所以会出现上面的运行结果。

在相同的地址空间中运行，因此必须同步对共享内存的访问。语言提供了一个很好的通信机制，来满足之间数据的通信。与中的双向管道有些类似：可以通过它发送或者接收值。


其中的结构如下

可以看到其实就是一个队列加一个锁。其中和可以看做生产者跟消费者队列，分别保存的是等待在上进行读操作的和等待在上进行写操作的，如下图所示。

写的具体实现如下只选取了核心代码：
具体可以分为三种情况：

有阻塞在上，而且为空，直接将数据发送给该上。
有空间可用：将数据放到里面。
没有空间可用：阻塞当前。


读和发送的操作类似，就不帖代码展示了。
_
关于跟进行通信的一个简单的例子逻辑很简单

这里我们定义了两个带缓存的和，如果把这两个都换成不带缓存的，就会报错，不过可以这样进行处理就可以了：

比较常见的操作还有，存在多个的时候，可以通过可以监听上的数据流动。

因为和都为空，所以和都不会读取成功。则执行语句。全球化在整个互联网领域仍是大势所趋，而在红海时代来临的游戏行业，“游戏全球化”已成为近年来的热点。
游戏全球化运营，对节点分布、网络稳定、网络加速、安全防护等云端基础能力提出了很高要求。腾讯云作为国内游戏行业领先的公有云，腾讯云的全球化布局一直走在快车道，更好地助力游戏厂商实现全球化运营。
本期腾讯云沙龙北京站，与来宾聚焦探讨腾讯云在全球化方面的技术布局，并邀请到了游戏全球化先行者的代表分享实践与洞察。
演讲主题：
一带一路，我们是认真的腾讯云海外务实践行
嘉宾简介：

李宇明腾讯云海外资深工程师在腾讯任职年，负责腾讯全球的规划布局及建设、前线的属地化运营管理、生态建设和供应商服务管理。着眼于全球生态及战略、致力于互联网行业的全球覆盖和打造极致体验的海外基础架构及运营体系。入职腾讯前在亚太区工作四年。
演讲概要：
和腾讯的互联网产品一样，腾讯云的拥有项核心能力竞争优势，以给客户优越的体验。在一带一路的国家政策下，腾讯云海外的更是背负着带领行业使命。演讲者讲将分享，面临文化及国情差异，复杂的各国生态，腾讯云如何务实地打造开放我们的本地能力，精细化整合属地化能力，打造面向出海客户的灵活、极致、强大的海外平台。
视频回放：

下载：
关于：
系列沙龙由腾讯云主办，旨在为游戏开发者提供一个自由的交流分享平台。沙龙将围绕游戏行业趋势、研发技术、运维和推广等热点进行探讨。每期沙龙将邀请国内外游戏领域专家，分享游戏开发及运营过程中的思考和实践。
访问沙龙官网，了解最新沙龙资讯和更多往期回顾。全称：，是以安全为目标的通道，简单讲是的安全版。即下加入层，的安全基础是，因此加密的详细内容就需要。它是一个抽象标识符体系，句法类同体系。用于安全的数据传输。
哪些网站必须启用加密
在越来越重视信息安全的今天协议站点无疑将成为主流。那么就目前形势而言哪些网站必须启用加密呢
电商平台及其相关支付系统
银行系统、金融机构等高私密性网站
政府、高校、科研机构及其相关网站
以搜索引擎为主要流量来源的网站
以邮箱为主的企业交流平台
从长远看已是必然趋势。做好是当下网站建设的关键要点不要局限于上述的网站类型
是过去很长一段时间我们经常用到的一种传输协议。协议传输的数据都是未加密的这就意味着用户填写的密码、帐号、交易记录等机密信息都是明文随时可能被泄露、窃取、篡改被黑客加以利用因此使协议传输隐私信息非常不安全。
是一种基于协议的网站加密传输协议网站安装证书后使用加密协议访问可激活客户端浏览器到网站服务器之间的加密通道协议实现高强度双向加密传输防止传输数据被泄露或篡改。简单讲=是的安全版。
沃通
、沃通是国内一家提供证书服务的网站，其免费的证书申请比较简单，在线开通，一个证书只能对应一个域名，支持证书状态在线查询协议。
、由于沃通是一家国内的服务商，所以证书申请和管理都比较简单，并且网站使用的是中文有问题还可以联系客服。不过，受“正式提议将停止信任和签发的新证书”的影响，请观察后再决定是否使用。
阿里云证书安装方法
阿里云与国内证书颁发机构天威诚信推出了基于的免费证书，有需要免费证书产品的可以前往阿里云进行申请。
腾讯云证书
腾讯云域名型证书由赛门铁克提供自动审核认证，快速签发，支持自动生成、域名身份自动验证，一步提交申请，审核签发流程全自动。可以一键部署到腾讯云资源，轻松获得数据安全。问题导读：
怎样自动的从文本中找出新的词
怎样在处理数据时自动分割大文件
怎样利用进行抽词
开始之前，先看一下从人人网中发现的后用户爱用的词

是不是很好玩，哈哈。写这篇文章就是让你简单的自动的从文本中找出新的词，这样就知道现在的年轻人喜欢什么了对于博主这种上了年纪的人来说，真的是很有用，呜呜
项目结构

当然，和这两个文件你可以随意替换，注意中的数据一定要够份量，否则没啥效果
原理么，看下大牛的文章你就懂了
互联网时代的社会语言学：基于的文本数据挖掘
处理数据下载
下边开始上代码

这个里边包含以下几个类，主要是定义数据结构


定义一个计数来进行数据操作和持久化






{

=

{
=
=={

}{

}
}

{
=
{
=
}

}

{
=
==
}
}

定义语法树的节点






{






{
=
}

{
=={
=
}
=



}

{

}

{

}

{
=
}

{
=={

}{
{

}
}
}

{
=



}

{
=
=
{

=
}=


}

{
={

}
|

\
={
{

}
}
}

{
=


}

{

}
}

读取处理数据









{


{
=
=

=
=

=


}


{
=
{

}
}

=


{
=
||{
指定文件不存在！
}

=
={
=
}

==


=

=

=
=


=={

=

=

=
=

{

}

=
第个子文件生成……

}

}



}

用来做文本处理，如判断是否为空、匹配字符等



{

{
==
}

{
==
}

{
==||==
}

{
=
=
={
={

}
={

}
}

}

{
==||||
}
}

语法树



{

{

}

}

里边包含类


词典处理











{

___=


___=

=

=





{
=={
{
=
}{

}
}

}

{


}

{
=___
=

={
=
{

}
}
=

}

{

=___
=
=

={
=

\==||\==||=={
{

}
=
}{
=
}
=={

}
}
}

{

}

{

}

{

}
}



计算熵值







{




__=


__=


_=

{
=
}

{
=

__{

}

=

_{

}

}

{
=
=
=
=
=

==

{
=

=
{

}
=
{

}

}

{
=
=
}
{
=
=
}



}


{

=

{

}

=
=

__{

}

={
=
}


}

{
=
}

}

抽词程序












{




__=


__=

=

={我你您他她谁
哪那这的了着也是有不在与呢
啊呀吧嗯哦哈呐}

{
{

}
}

{
=
}


{

=
=
=__
__
=

{
=
{

}

||
{

}

||{

}{

}
}

}
}


这几个类用于给词创建索引，方便从词典中找出









{

__=





{
=

}

{
=

=__






=__

={
=
{

}
=
=={
=

}

}
}


{

{

}

=

=={

}

=={

}

=
=

={
{

}
}


}


{
=



{

}

=

=={

}

=
=

={
{


=

}
}


}


{

}


{
||={

}

}


{
||={

}

}
}




{





=




=

=

{
=
}

{

}

{

}

{

}

{
=
}

{
=
}
}




{



{
=
}


{
=
=
=
={

=
}

}


{
=
=
=

=



={


}

}


{

}


{

}


{
||={

}

}
}




{































}


分词处理，具体看实现








{



=

=

=

{
=

}

{

{
=
}
=

{
=
}
=
}

{

}

{

}

{

}

{
==||{

}

}

{
{

}{

}

}


{

={

}

=
={

}

=
={

}

=

==
{
=={
=
}
}
{
=={
=
}
}

}

{

}
}












{






__=






_=

=

{
=

=
=
{

}



}


{
=__
__

_{
{

}

=
{
{

}

}{

}

}
}
}








{

{
=
=
=

=
=

{
=
||{
=

}{
{

=
}
=
{

=
}
}{
{

=
}






{}


}
}
{

}


}
}


文本选择器，筛选出可能为新词的词汇






{

{

}

{
{

}
={
{
=
{


}

}
}

=
}
}




{



=

=

=






{
=
=
=
=

}

{
=

}

{
=
}

{
{


}

=={

}{



}
}

{
=
}


{

}
}




{








}
测试代码















{
{

{
=
{

}
=
=



}{

}
}


{

=


=
请输入您要处理的文件名称\
=
=
||{
指定文件不存在！
}
=
=
=
={
=
}

==

={
文件大小超出，是否开始进行文件切割？是否\

=
=={

切割完成\
结果保存在当前目录下的文件夹中\

}


=={
=
开始提取第个文件……

}

}{
开始提取文件……

}
}

{
=
=
=
=

新词个数
发现的新词\
{
\
\
}
}
}
抽词测试，结果如下








{

=我是中国人

{
=
=

}
}
分词测试，结果如下

怎么样，很酷吧，你还可以试着用《天龙八部》数据集玩下，看看主角是不是乔帮主。如果发现了什么新鲜词，请告诉博主，咱也不落后哈！
独享天龙八部新词，如果想看结果请心里默夸博主一百次

执行以上步骤后再送您一份哈利波特版的当互联网时代来临之时，云作为互联网的基础设施第一要素，已经带来数字经济的全面发展，目前我们已经可以预测到，未来云将成为无论是科技企业，还是传统企业业务创新和发展的基石。
腾讯做云服务的目的，最重要是把积累多年的核心技术与数据服务开放出来。尤其是机器学习、图片与自然语言相关的人工智能技术。企业通过腾讯云，可以将最领先的云端技术应用到企业自身的优势业务中，为业务创新带来机会。
据悉，年，腾讯云已服务数万款游戏。在基础安全方面，腾讯云提供了一整套成熟的网络安全架构，包括防火墙、分布式防护、入侵防御、应用防护等多重防护机制，并针对直播、电商、金融、游戏四大行业发布行业安全解决方案。在海外服务方面，年月，腾讯云宣布再次开放个海外服务节点，成为云服务基础设施部署最为完善的中国互联网云服务商。腾讯云还为出海企业提供一套生态系统完善的平台服务，率先推出的全球直播解决方案，将国内市场的全面领先优势扩散到国外。
生态构建、完善的行业解决方案
腾讯云在各领域的产业转型升级中已经发挥了驱动器的作用。基于强大的技术研发实力，腾讯通过腾讯云不断输出核心能力，致力于打造最佳的云生态圈，在过去短短的一年时间里，腾讯云合作伙伴数量增长了倍。
腾讯云相继与金蝶集团、中软国际、戴尔、软通动力、等知名企业达成战略合作，也有上海国经网络、云屋科技、元鼎科技、等上下游产业链合作伙伴加入到腾讯云合作伙伴生态。在今后更为复杂的市场环境下，腾讯云将继续加大投入，与各种合作伙伴携手并进，为系统集成、软件开发、渠道代理、运维服务等细分领域的合作伙伴提供更多的发展空间和机遇。

腾讯云致力于向用户提供完善的腾讯云解决方案，目前已经推出了不同垂直领域的云服务，为政务、警务、医疗、金融、制造等领域提供坚实的云服务技术支撑。目前已经取得一系列的资质认证和成果。

腾讯做云服务的目的，不只是提供服务器、存储和带宽，更重要是把积累多年的核心技术与数据服务开放出来。包括腾讯内部社交、支付、、安全在内的平台资源和能力，还包括、音视频处理能力、大数据能力，尤其是机器学习、图片与自然语言相关的人工智能技术。企业通过腾讯云，可以将最领先的云端技术应用到企业自身的优势业务中，为业务创新带来机会。比如，在金融行业上，我们通过腾讯云开放了优图人脸识别的技术，结合大数据分析，金融企业可以远程视频，来判断一个人真实的身份，大大减低成本和风险。
云将成为企业业务创新和发展的基石
我们看到，社会的分工将会越来越精细化，行业发展趋势越来越生态化。未来，企业的发展都会在自身最擅长的领域去发挥优势，然后上下游去通力合作。那么，随着云计算服务能力的不断提升，服务模块不断丰富，企业可以更聚焦到自身业务上，大家只要按需调用云服务进行有机的匹配，比如一个传统企业布局云端之后，调用大数据分析、人工智能等新技术，就可以更好的进行业务创新和发展。这里，相信后面的企业嘉宾可以为我们进一步分享这里的经验。
目前我国云计算产业规模已超过亿元，权威机构预计，到年，全球云计算市场规模将达到亿美元。但行业仍存在市场需求尚未完全释放、产业供给能力有待加强、低水平重复建设现象凸现等问题。中国云计算市场的潜力仍然非常巨大，但对大数据服务、平台运维、生态构建等能力的要求，云计算将会向着生态聚合发展，形成连接金融、视频、电商等行业生态圈。
计算能力的云化，让各家企业分散的数据孤岛能够更好地互相打通，让不同领域的数据能够汇聚在同一个平台进行高效率的整合，带来的是更多新的机会。未来，很多的企业服务将云端化，加上新技术能力的升级，互联网将更加深入到各行各业，数字经济由此全面发展。
腾讯云未来聚焦六大领域
腾讯云开放腾讯十余年来在、微信、空间等业务的互联网服务能力，为企业提供公有云、混合云、专有云、金融专区等云服务，包含、、，并提供万象优图、人脸识别、大数据分析、机器学习、音视频技术、安全防护等全球领先的互联网技术；同时向不同垂直行业的客户涵盖政务、电子商务、服务、游戏、视频直播以及互联网金融等提供优质的行业解决方案。
今后，腾讯云将业务重点分布在、生态建设、核心技术能力、助力互联网传统企业、政务方面的布局以及布局全球云服务市场这六个方面：
腾讯云未来业务重心将放在开放平台以及云计算智能创新领域的最新研究成果的发布上。在年，腾讯云已向全球企业提供项服务，包括人脸检测、五官定位、人脸比对与验证、人脸检索、图片标签、身份证识别、名片识别；
生态建设，腾讯云在生态构建方面的布局，包括战略签约，合作伙伴体系建设，在金融、政府、教育、医疗、大数据、安全、视频等领域的拓展。
核心技术能力，云计算、大数据、人工智能等核心技术能力方面有哪些产品，这些产品和解决方案最终指向腾讯云整个技术实力。
助力互联网传统企业，通过三一重工，中外运、申能集团、中广核，人民日报、万达征信等优秀案例，展现出腾讯云在传统企业转型升级方面提供的支持和在整个数字经济市场中的动作。
政务，近些年来腾讯云在政务方面的布局，与个地方签约挂牌，建立培训班，和“云计算”孵化基地等。
出海，腾讯云早在年初就开始布局全球云服务市场，并提出了完整的腾讯云出海计划。目前开设了个全球服务节点，成为全球云计算基础设施最完善的中国互联网云服务商，为出海企业提供完善的行业解决方案和云计算服务。
：财经网导语
最近在协助做迁移的过程中，发现在追增量数据时报主键冲突错误。手工用备份与还原，在追增量数据的时候依旧报错。后与确认，内核有改动，不保证工具不出问题，具体不便告知，建议使用。
第一步：连接源实例通过备份数据
________==
第二步：通过导出的文件，获取_信息即与源实例建立同步时开始的位置点。


_=





__=
_
\
说明：、此步骤可不用等第一步完成，因为备份导出时，就可以在文件头部获取_的信息；、此步骤需要在目标实例及目标实例对应的备库和读库执行；、此步骤的作用：用于拉取源实例的，避免在备份数据或还原数据时源实例的的被删除。用于恢复目标实例及对应备、读库的复制关系，还原时只用在目标实例导入数据即可。
第三步：导入备份并启用_
、过滤掉不记的选项{_{{}}{}}||____、导入备份___=_、启用__作者：黎懋靓

引言
腾讯测试工程师小新一是一名资深的安卓客户端测试工程师，对于安卓客户端的功能测试、自动化测试和性能测试方面都有着非常丰富的经验。最近小新一被通知负责某二手交易的功能测试，在初步了解了该后，小新一皱起了眉头。
该虽然看起来功能简单，只是提供了一个买家和卖家的交易沟通平台，但是其中涉及到了多个实体的状态变迁，如果只是对于需求进行测试用例设计的话，很难保证所有的功能路径都被覆盖了，而且测试用例对于路径的覆盖无法区分优先级。这样的测试用例是远远不能保证到产品的质量的。针对这个情况，小新一和测试分析小组负责人锅仔进行了一次深入的沟通，在听完小新一对于测试任务的描述后，锅仔提出了使用基于状态的测试方法来完成对于该的测试。
那么什么是状态机呢？什么又是基于状态的测试呢？怎么使用基于状态的测试呢？基于状态的测试适用于什么情况呢？在使用状态机的时候需要注意哪些事项呢？如果你对这些问题还存有疑问，那么请看官继续往下看，和小新一一起，学习基于状态的测试方法。
基于状态的测试
定义
基于状态的测试是一种基于模型的测试方法，作为黑盒测试设计技术中的一种，常被用于事件驱动的系统中。基于状态的测试核心思路是通过遍历系统所有的状态转换迁移，来保证整个系统功能的正常。
状态机
顾名思义，基于状态机的测试，其核心模型就是状态机，也叫状态图。状态机的组成其实比较简单，要素大致有三个：输入，输出，还有状态。输入和输出比较容易理解，那么什么叫做状态呢？状态就是对象生命期中的条件或情况，在这种状态中，对象满足某种条件，执行某种活动，或者等待某种事件。
在基于状态的测试中，状态机的准确度直接决定了测试效果，所以状态机的绘制是非常重要的一环，我们可以通过以下三步来分析如何绘制状态机：

步骤一：列出研究对象拥有的各种状态通过启发式的探索来发现系统的状态：
通过三个简单问题发现状态：有没有什么事情是我现在可以做但之前不可以做的？有没有什么事情是我现在不可以做但之前可以做的？我现在所采取的行动是否产生了和之前不同的结果？
留意用于描述正在发生事情的言辞，如“当……的时候”、“当系统正在导入数据的时候……”、“当账户被冻结的时候……”
每个状态都由事件所触发，认出状态可回过头找出触发事件，反之亦然
步骤二：列出状态之间的转换，确定引起各个转换的事件在步骤一的基础上，考虑状态之间的事件。从测试的视角来看，引起状态转换的事件可以分为三种类型：外部产生事件：来自于软件之外的任何事件，如用户操作系统产生事件：软件自己产生的任何事件，如系统完成了某些后台活动而产生的结果时间流逝：超时、计时事件如
步骤三：分析各个转换过程中发生的事情转换代表了从一种状态到另一种状态的改变，当然也可以是自身到自身的。每个状态都可以指定三种可选的信息：触发器：触发器对应事件守卫：守卫是一个布尔表达示，事件发生时，守卫必须为真，转换才会执行效果：效果是在转换过程中执行的行为活动或交互
步骤四：状态机在上面三步做完之后，就形成了一个状态机。但是，状态机的正确性，完整性是否可以得到保证呢？状态机的绘制是否符合规范呢？这些都需要通过人工或者工具的方式进行。

以腾讯地图的收藏夹模块为例，我们尝试对其进行状态机建模。
、列举研究对象的各种状态。收藏夹功能模块包含的对象比较简单，就是收藏夹页，这个页面包含了以下六个状态：
未登录无数据态
未登录有数据态
微信登录同步态
微信登录未同步态
登录同步态
登录未同步态
、列举各个状态之间的转换，确定各个转换的事件。
从收藏夹需求中，我们不难得出收藏夹六个状态之间的转换关系如下：
在状态添加数据，进入状态
在状态修改数据，保持状态；
在状态将数据全部删除，进入状态
在状态进行微信登录，进入状态
在状态进行登录，进入状态
在状态进行微信登录，进入状态
在状态进行登录，进入状态
……
、在列举完所有状态转换事件之后，对各个事件以触发器守卫效果三个维度进行分析。
对于事件，触发器为添加了收藏点或者常用地址，守卫为网络畅通，效果为在收藏夹页面添加了相应的收藏夹数据。
在上面三个步骤执行玩之后，我们可以得到收藏夹模块的状态图，如下所示：图腾讯地图收藏夹功能状态机
适用范围及注意事项
基于状态的测试适用于下面的情况：
需求或者设计中使用了状态机功能中包含了实体的增删查改功能属于事件驱动型，并且系统状态容易识别在需要对关键模块业务进入深入的测试的时候使用
状态机绘制的注意事项：
保证每个状态的单一性，但是也要谨慎选择状态集合，避免状态空间爆炸选择合适的分析实体，使用层次化方法以管理复杂性
要关注可观察的行为而不是实现细节
借助工具思考，基于整数规划的覆盖方法，后面会讲到
状态机绘制实例
功能需求描述
是一款提供二手物品交易的，交易模块是该的重点功能。交易过程中，卖家可以发布自己的闲置物品，买家可以根据分类来搜索自己想要购买的物品，当看到自己心仪的物品后可以拍下，当然也可以直接和买家联系，当买家拍下后，卖家可以收到系统发来的消息通知，从而处理发货等流程，当然在买卖过程中如果发生退款退货等情况的时候，双方可以自行处理，如果一方不满意的话，可以发起申请，平台介入后会根据双方提交的证据在进行仲裁，仲裁的结束后，会将处理结果告知双方。
模块选择过程
一开始，我们认为在买卖过程中，我们只需要以“买家”和“卖家”作为两个元素来进行建模，就可以覆盖到所有的状态，因此我便画出了如下的状态转化图：图卖家的订单状态图
图买家的订单状态图
然而发现，这其中有一个问题，就是根据这样的状态图去设计测试用例，设计出的都是针对一方的，而在实际的买卖过程中，只有一方的操作时无法完成整个交易的。另外还会有一个问题就是，有些异常的情况是无法覆盖到的。举个例子：比如买家从待付款到代收货这个过程中，如果卖家关闭了订单，会发生什么呢？
因此我觉得应该将买家和卖家放到一起，将他们的操作流程给串起来，于是我又画出了如下的状态图：图初步融合起来的状态图
然而这个图还是存在问题，当然这个问题在于我对一开始分析对象划分的不够细，其实这里面，应该划分为“订单”，“物品”，“操作者”，这里操作者又分为“买家”“卖家”“系统”“管理员”，这里应该订单这个元素状态较多，并且贯穿于整个的交易流程中，因此我们就选择“订单”作为此次测试建模的一个对象。
状态机绘制
基于上面的分析，我们最终确定了状态机的对象是订单，于是我们对订单的状态进行了一个列举从后台的代码中列举出所有订单的状态码，然后画出状态转化图：图订单的状态图
从状态机到测试用例
在针对所测功能模块绘制完状态机后，下一步便是在状态机的基础上生成测试用例。由于状态机描述了系统状态的所有转换，所以在构造测试用例的时候，只要保证状态机中的状态转换均被覆盖了，就能保证功能的测试完整了。比较通用的方法是通过单一状态转换表和转换对，构造几条覆盖全部状态的路径，以这几条路径为基础，生成基础测试用例。
简单状态转换覆盖
对一个状态机进行全覆盖，最简单的方法就是取出所有状态转换的状态对，对其进行逐一覆盖，我们称这种测试用例生成方法为简单状态覆盖方法。
首先，我们根据已经生成的状态机，将所有状态两两组合，形成一个状态转换表。如下表所示：
如上表所示，根据转换表第一条，我们需要覆盖从订单初始化到待发货的状态转换，因此我们构造一条用例为：
订单创建成功后，买家付款，在卖家发货前，买家发起退款，卖家同意退款后，订单关闭
上面这个用例不仅覆盖了初始化订单到待发货的状态转换，同时也覆盖了到、到的转换，因此我们在辅助转换表中，将其标识，如下：
按照这种方法，我们依次对辅助状态转换表中的所有转换进行覆盖用例设计，最终形成全量的测试用例集合。
手工状态机路径覆盖生成方法
简单状态转换覆盖方法的原理不复杂，但是在具体生成测试用例的时候比较困难，而且容易产生很多冗余的测试用例。在简单状态转换覆盖方法的基础上，我们结合状态机的路径覆盖方法，将生成的覆盖路径转换成测试用例。在表的基础上，我们将所有的状态抽取出来生成转化对，也就是列出每一个状态的输入流和输出流，然后将输入流和输出流进行排列组合作为状态流，如下表：
表辅助转化表
这时候“状态流”开始，然后每个终点的字母可以看它是否还是其他“状态流”的起点，如果是那么就继续往下，直到把所有的路径都覆盖完。这里举一个例子：
这样我们就可以在图中将覆盖掉的路径颜色进行一个标识，这样直到我们将图中所有的路径都覆盖掉
这里我手动执行完成后，得到的所有路径为：
扩充用例
在上述过程中，我们对订单正常状态的覆盖已经达到了。但是在实际的使用过程中，仍然存在这样的问题：卖家操作导致订单状态改变，而此时买家还停留在之前的界面，没有刷新，此时操作的。因此针对这类的，又延伸出如下一些用例：
基于的状态机测试用例转换方法
不管是简单状态转换覆盖，还是手工状态机路径覆盖方法，在对复杂的状态机进行测试用例转换的时候，都会遇到不小的困难。这个事情并不需要人工的分析过程，能不能让机器帮我们完成呢？答案是肯定的。
官方地址：是基础状态测试中常用的一个工具，它可以在我们列出对象的状态和执行的动作之后，自动帮我们构建状态图，并且还可以生成用例。其模型创建的原理是：
程序是用来处理数据的，数据也可以称作状态；
用户通过程序提供的操作界面来处理数据，操作界面也可以称作动作；
数据的更动又反过来影响一些动作是否可以执行。首先第一步需要抽象状态，在代码中我们用类型来表示：
{}
{初始状态代发货发货前退款代收货发货后退款发货后拒绝退款确认收货支付前关闭支付后关闭完成评价平台介入}
接着是模拟一个动作

下单后买家关闭
{

}
下单后买家关闭
{
==
}
标注了的函数，就是抽象出来的程序所支持的动作，例如；而在动作函数名后面加上的函数，是用来判定指定的动作是否可以执行。
当我们列出所有的动作之后，可以使用如下命令来生成状态图：\
查看模型没有问题后，我们就可以运行如下命令来生成用例了：
\


买家支付
发货前卖家关闭订单


买家支付
发货前买家发起退款
卖家拒绝发货前退款
买家确认收货


买家支付
卖家发货
发货后买家发起退款
卖家拒绝了发货后退款
买家修改发货后申请内容
卖家超时未处理发货后退款申请


买家支付
发货前买家发起退款
卖家同意发货前退款申请


买家支付
发货前买家发起退款
买家撤销发货前退款申请
发货前买家发起退款
买家编辑发货前申请退款
卖家超时未处理发货前退款申请


下单后卖家超时未处理订单关闭


买家支付
卖家发货
发货后买家发起退款
卖家申诉
仲裁结束


下单后卖家关闭


买家支付
卖家发货
发货后买家发起退款
卖家拒绝了发货后退款
拒绝退款后买家撤销申请
发货后买家发起退款
买家编辑发货后退款申请
买家撤销发货后退款申请
发货后买家发起退款
卖家拒绝了发货后退款
买家超时未处理拒绝退款
发货后买家发起退款
卖家拒绝了发货后退款
卖家又同意退款申请


下单后买家关闭


买家支付
卖家发货
发货后买家发起退款
卖家拒绝了发货后退款
买家申诉


买家支付
卖家发货
发货后买家发起退款
卖家同意发货后退款申请


买家支付
卖家发货
买家超时未处理收货
买家完成评价





相关推荐【腾讯】测试分析？就这么简单！深度了解，你准备好了吗？项目最近遇到一个需求：

给定一组文本文件，每个文本包含若干行，每一行是一条数据记录；
每一行各字段按照如下方式排布，首先是个字段，紧接着是最多个字段，然后是个字段，每个字段用|分隔，从哪个字段开始以及有几个字段已知_|_||_|_||_|_|_||_


任务是对这组文件按_除重

除开业务细节，这个任务本质是：

遍历每个文件的每一行；
然后截取出字段集合；
然后对其进行重复判断；
最后按照判断结果决定本行是否插入新文件中。

很适合完成这种文本处理任务，字符串重复判断这种任务可以使用来完成，本文中不做深入探讨。本文想探讨的是在给定了字段在字段列表中开始下标和字段个数后，如何在整行字符串中定位到字符串的起始位置。简而言之，就是确定_前一个和_后一个“|”字符的位置。
解决这个问题，我想到了三种思路：

将整个字符串用|分割，并根据字段的下标计算首尾两个|的位置；
使用函数，通过设置搜索起始位置，按顺序逐个查找|字符的位置，直到找到目标“|”位置
先通过正则表达式或字符串遍历的方式查找出所有|的位置生成，然后根据字段下标找到目标“|”位置

有同学会说方法既然每个字段都已经分割开了，将其按照顺序组合就能得到_，为何还要查找“|”字符的位置，我想说在这里只是比较在字符串中查找子串的各种方法。
针对以上三个思路，我一共有七种实现，后面会对比其效率：
字符串分割思路

___
=
__=|
_
=__

=__


逐个查找子串位置思路
这个思路我写了三种方法，分别用来实现，需要注意的是，函数在未找到子串的情况下会抛出错误，需要用处理，而在找不到子串的情况下返回，两者效率基本一致。并且在查找下一个子串的方式上有少许不同，一种是当找到当前子串位置后，记录下该位置，然后下一次从本次找到的位置开始查找，另一种是每找到一个子串，就去掉前缀部分，然后下一次在剩下的字符串中查找。

使用查找，记录查找位置，下一次从本次找到的位置开始查找
___
_==

=|
=_
=|
_=
==


使用查找，记录查找位置，下一次从本次找到的位置开始查找
___
=
_

=|


==


使用查找，每次找到第一个子串后，就去掉前缀部分，拷贝后缀部分，后续不断在后缀部分查找
____
_=
=
_

=_|
_=__|




定位所有子串思路
针对这个思路，分别使用正则表达式模块，列表推导式以及、、组合方式实现。

正则表达式方法会返回字符串中所有子串位置的迭代器
列表推倒式将遍历整个字符串并输出子串位置的列表
组合复杂函数的方法，首先用扫描字符串中所有匹配子串的位置，不匹配的输出，再通过与函数结合的方式在刚才的结果中过滤掉元素


通过正则表达式模块查找匹配所有子串位置
___
_=\|
_==___=_


通过列表推导式实现
___
_===|
_==___=_


通过、、组合实现
___
_
==|
_==_
_==___=_

测试对比

首先，测试在相同单条记录，不同的记录条数条件下，各种方法的耗时，结果如上图所示。

然后，测试在记录条数一定，不同记录长度条件下，各种方法耗时，结果如上图所示。

第三，测试在相同单条记录，相同记录条数情况下取不同位置的字段各种方法耗时，结果如上图所示。
结论
通过测试对比可以看到，字符串分割和逐个查找子串位置的思路在总体上都比定位所有子串位置的思路效率更高。
逐个查找子串位置思路中通过和定位子串位置的效率最高，拆分子串的方式次之。影响性能的因素是单条记录长度以及所需要查找的字段位置。
字符串分割，影响性能的因素是单条记录长度以及所需要查找的字段位置。
定位所有子串因为要定位到每个字段的位置，相当于扫描全数据，所以效率最低。在这个思路的三种方法中，正则表达式的实现效率最高，其他两种效率都很差。最近，据港媒报道，中国内地成年单身人口已超过两亿，相当于俄罗斯与英国全部人口总和，单身独居群体正随着中国第四次单身潮的到来而日益庞大。

今天咱们就从数据角度来解读单身贵族的那些事儿
、单身男女比一个腐女一对基
诶，好像有哪里不对？

小编只想说，看到这张图我就放心了。
妈，找不到老婆这真不怪我呀！

单身男女比例严重失调，不少单身男士可谓一妻难求。
从女生的角度看，貌似占有比较多的选择权，但现实也不是那么乐观。对她们来说，受教育程度的提高势必带来了婚恋年龄的推迟，据《中国统计年鉴》的数据，年新入学的研究生中女性已超过男性。
而经济能力的持续增长导致她们对另一半的要求也更高，珍爱网的报告显示，的单身女性要求男性收入在元，的单身女性要求男性收入过万元。
总结一句话就是，理想的月光难以照进现实，摆脱单身没那么容易。

、西北的汉子，我威武雄壮！南方的姑娘，你身在何方？
哪些省份脱单比较容易呢？
我们十分贴心地为大家准备了中国单身男女比例最不均衡的和最均衡的。

上图可以看到，西藏、新疆和青海三个西部省份囊括男女比最不均衡的前三，其中西藏的单身男女比达到了不可思议的，也就是说大概的西藏单身汉子可能会遥遥无妻。
西北的汉子，这一杯我敬你！

除此之外，北京和浙江也闯进了狼多肉少的前五名。
单身男女比例最协调的五个省份是：山西、湖南、黑龙江、香港和台湾，但比值最低的台湾也达到了，真可谓世道艰难。
小编偷偷看了一眼，广东省的男女比例是，看来我只需要再打败一个情敌，就能找到我的姑娘啦！

哇咔咔咔都是错觉
、单身菇凉，你怎么还在家看剧情缘，我觉得这个可以有！
宅宅宅，还是浪浪浪？

注：指数表征不同特征用户关注问题的差异情况，其中指数等于表示平均水平，高于，代表该类用户对某类问题的关注程度高于整体水平。
哇果然单身男女对娱乐项目的兴趣远高于平均水平。毕竟一个人，让自己开心起来最重要嘛。
女生比较倾向于看综艺和电视剧，相对来说男生更喜欢看电影。
小编还发现了一个惊天大秘密，单身男女都对和动漫表现出了非同一般的关注度！看来这周末要多约几个异性朋友组局唱，下次可能就不再独唱单身情歌了哟

、球场耍帅没人看？下次试试健身房！

运动项目兴趣，从单身女性的数据只读出了三个字：不、喜、欢。除了在健身健美和跑步骑行达到了平均水平外，其余几个项目都偏低。
而男生对球场的喜爱实在是划破天际，可能没有什么事是打一场球不能解决的，如果有，那就是认识女神。但如果下次再约女神的话，要不要考虑下健身房呢？
、勤俭持家品质高，结婚不如养条狗

单身男女对二手物品的关注都比较高，看来一个人过日子，也是要精打细算的；
另外，单身男女对宠物的关注度可是比对婚恋交友高很多啊！其实并没有大家想象中的那么焦虑单身状态。小编觉得单身人士的父母…可能对“婚恋交友”的兴趣更大一点哈哈。
其实一个人过久了也没这么着急和焦虑，毕竟还有很多兴趣爱好，和小宠物呀！真应了《奇葩说》里马薇薇的金句：如果选择婚姻只是因为缺少陪伴，那就养条狗啊，还不分财产。
、一人我饮酒醉，醉把佳人成双对

单身女性对吃还是比较在乎的，去餐馆吃点好吃的或者自己动手做一顿健康餐都是很好的选择；
而单身男性就没这么多讲究啦，几乎不愿意自己动手，也没必要去餐馆，但酒水饮料却是不能少的。小编必须要说，少喝酒照顾好自己，毕竟举杯销愁愁更愁啊

、女朋友是什么…还不如拿五杀！

最后，我们来看看单身男女都偏爱什么类型的：首先，单身女性喜爱摄影类、健康类的，对教育类的也比较关注，看来妹子们在单身的日子里面也想要美美的，并且不断提升自我；
而单身男性喜爱的，除了功能类的比如导航、理财、通讯等，就是游戏和娱乐了。有的时候不得不说，光打游戏和看直播一整天就过去了，哪有时间谈恋爱？
好啦，今天的报告就到这里了小编最后想说，不管你是单身还是结婚，只要是听从于内心而不是屈服外界，就是一个贵族的选择。
最后，来一个强行硬广：众所周知，系统使用工具连接后是黑色的页面，许多新手搞不明白还以为是服务器出现了问题，那么今天给大家带来的是安装桌面环境。
系统为安装准备
为了避免在安装过程中出现源下载的问题，请先执行一下升级。


主机上安装
先安装客户端，执行下列命令。


再安装服务器，执行下列命令。


主机上安装桌面
安装，执行下列命令。


主机上安装和
直接执行下列命令即可完成和安装。


_____
_____



开启服务本机远程连接主机
执行下列命令后开启服务。第一次开启会要你设置一个密码。输入二次。


、执行下列代码，打开配置。


在最后添加以下代码，保存。
=
=

执行以下命名重启。


然后打开你自己的，输入主机的后面加上“”，如下图：

连接过程要输入密码，连接成功后你会看到一个没有内容的桌面。

勾选这里，然后点击。
启动主机的桌面远程管理
上面你看到了是一个没有内容的界面，关闭它，然后执行下列命令：


将里面的命令全部删除，复制粘贴进入下面的代码，并保存。


_









再次重启你的，必要时请重启主机，再次用连接你的主机，你就可以顺利进入桌面了。


至此，我们的桌面环境安装完成了，大家可以像操作一样使用桌面环境来进行操作啦

相关推荐
【腾讯云的种玩法】部署实践
安装配置
后台系统搭建记录作者：薛阳，腾讯专项技术测试工程师商业转载请联系腾讯获得授权，非商业转载请注明出处。原文链接：

导读
俗话说：用户体验不谈性能就是耍流氓。在游戏上的性能问题并没有那么明显，加个内存换个或者刷个主频就能轻松搞定；到了手游时代后情况则显得比较严峻，捉襟见肘的内存使得资源加载时就像如履薄冰，加上高中低不同配置的机型更加让性能问题显得很突出，一个低端机型上的卡顿就可能造成一大批用户的流失，这当然无法被忽视。
一、项目背景
《穿越火线枪战王者》简称：腾讯游戏在移动领域的重要布局。团队秉承多年来在射击游戏领域的积累，着力打造高品质的手游，“手机端最爽快的射击体验”被广大玩家认可，树立了在移动领域的品质标杆，在公司自有平台和外部渠道，都成功占领领域最大市场份额，其中低端机玩家占比很大，研发团队为了保障用户的体验，需要持续优化客户端性能。
二、技术难点
手游客户端性能与传统有很大区别，并且游戏玩法、技术实现的不同，游戏引擎的差别，游戏的可能出现性能问题的场景以及性能表现差别会很大。另外很大一部分玩家使用的是较低配置的手机，因此性能优化显得尤为重要和艰巨。采用了引擎，作为官方的性能采集工具在引擎层面采集数据，数据全面、可靠，但是不能对数据保存，无法进行二次分析。
三、实现方案
一测试的目标
根据手游性能测试团队对腾讯游戏多年的测试经验，测试团队针对手游设定了以下性能指标，来检验的客户端性能状况。测试工具则采用公司内部运营年的客户端性能测试工具。
二主要测试场景
依据的玩法，性能瓶颈主要会在多人场景，选取游戏中不同模式下，外网玩家较多的场景进行专项测试。
①竞技模式团队战运输船
②竞技模式爆破战新年广场
③休闲模式救世主生化酒店
④休闲模式跳跳乐天空之城
⑤挑战模式楼兰古墓困难
三发现问题情况
、内存峰值超标
在低配置的手机上，内存峰值超过警示线：
、动画剪辑资源超标
动画剪辑资源超过的警示线，查看动画剪辑资源大小，以及每个资源的生命周期发现，__资源出生纹理从加载到场景结束一直未释放，并且资源达到了，建议项目组进行优化。
、楼兰古墓流量达到以上
楼兰古墓场景，平均每秒的流量消耗达到了，观察网络流量趋势图在标记区域中，流量持续很高，建议采取有损服务和降低不必要开销。
、抖动严重
测试过程发现，部分低配置机型波动比较剧烈，图中可以看出疑似卡顿点数量也明显上升，点击曲线上的点发现，大部分卡顿点处都出现了同一个函数，沟通后发现该函数主要功能为采集的丢包数、错误包数以及收发包量，建议去除该函数。
、组件侧问题导致在部分机型下降帧
目前大部分游戏内集合了登录、支付、加速等一些组件，这些组件常常会成为影响游戏性能的凶手。
四解决方案
、去掉不合理的缓存，使用降低的内存消耗，优化后的内存趋势如下，整体下降了。
、释放不需要使用的动画剪辑资源，并且对资源进行压缩，将该场景的动画剪辑资源峰值降为。
、减少不必要的通信，服务器限帧，楼兰古墓降低到。
、修改后去掉采集的丢包数、错误包数以及收发包量函数，回复正常
、组件修复后做了对比验证，回归正常
四、最终效果
项目上线前的测试阶段，手游性能测试团队累计为《穿越火线：枪战王者》审核了超过个版本，在上线前持续优化，确保客户端性能始终如一，保障用户稳定体验。优化效果如下：
均值→
占比率→
纹理资源峰值→
内存→

针对手游的性能优化，腾讯平台的工具提供了基本所有相关指标的检测，为手游进行最高效和准确的测试服务，不断改善玩家的体验。
目前功能还在免费开放中。，欢迎点击链接：使用。
如果对使用当中有任何疑问，欢迎联系腾讯企业：导语
现在新技术日新月异，行业的工作也变得赤手可热。刚毕业的大学生也蜂拥而至，但是在校的学习经验并没有一定的专业领域的实操经验，而被企业拒之门外。那么，刚毕业的大学生该如何敲开「程序员世界」的大门呢？因此我们从腾讯云技术社区梳理了各个技术领域的入门级干货文章，帮助你们快速开启「程序员世界」的大门。
机器学习
机器学习是一个很酷很新潮的字眼，几乎每天都出现在科技媒体中，但或许刚接触机器学习的初学者都不知该如何上手机器学习，本系列文章适合所有对机器学习感到好奇，却不知从何下手的初学者。
机器学习入门书籍简介机器学习从入门到出家【机器学习入门系列】简介【机器学习入门系列】回归：案例研究【机器学习入门系列】的来源：偏差和方差【机器学习入门系列】梯度下降法【机器学习入门系列】分类、概率生成模型入门：求元一次方程入门：使用分类器对数据进行分类入门：使用神经网络拟合元一次方程
点击查看更多机器学习技术干货
深度学习
相信众多开发者，乃至普通大众都对深度学习这个话题产生了强烈的兴趣。因此我们从腾讯云社区的优质文章库中，梳理了一些深度学习的入门干货，帮助你快速入门深度学习。
人人都可以做深度学习应用：入门篇上人人都可以做深度学习应用：入门篇下深度学习入门实战一：像一样算法生成梵高风格画像深度学习入门实战二：用训练线性回归深度学习入门实战三：图片分类中的逻辑回归深度学习简易入门深度学习基础概念笔记
点击查看更多深度学习技术干货
数据库
是全球最受欢迎的开源数据库之一，广泛应用于各类应用场景。本系列为大家整理一些入门常用命令大全以及笔者针对数据库基础知识的笔记，进一步帮助同学们快速上手。
入门常用命令大全上入门常用命令大全下分钟入门关系型数据库一：三范式分钟梳理关系数据库基础知识二：存储结构分钟梳理关系数据库基础知识三：树分钟梳理关系数据库基础知识四：两阶段多路归并排序分钟梳理关系数据库基础知识五：查询优化与连接算法
点击查看更多数据库技术干货

在众多技术中，绝对是当红炸子鸡。这年头，如果你不懂一点容器，不学一些，还怎么出去跟人炫耀技术？也是云计算技术中较为热门的一种，以下分享的入门知识系列文章。
什么是？快速入门以及安装使用使用指南一基本操作使用指南二：搭建本地仓库使用指南三网络配置使用指南四数据卷的使用使用指南五详解使用指南六使用部署容器栈使用腾讯云容器服务来构建简单一个基于的负载均衡实例腾讯云上的安装方式
点击查看更多数据库技术干货
前端篇
随着互联网的飞速发展，各种上网设备的普及，将大大拉升市场对前端开发人才的需求。而作为想从事前端开发的工程师，面对众多学习资料，怎样挑选出合适的路进行入门学习，而不必浪费大量时间去摸索，希望该系列文章能帮助到小伙伴们。
入门实战一入门学习包学会之浅入浅出：开学篇前端入门神经网络一基本入门快速入门基础及示例零基础：开发环境文件自动重载
点击查看更多数据库技术干货
开发
作为移动智能终端的主力军，作为移动开发工程师，非常有必要了解和学习。以下从腾讯云技术社区挑选了几篇开发入门的文章，贯穿在本系列中，涉及到的框架、特性、工具等多方面知识，力求让大家快速掌握。
开发入门的正确姿势分钟教你打造一个秒开的开发：小工具，大效率新一代多渠道打包神器开发者必看｜新特性及开发指南深度了解，你准备好了吗？
点击查看更多开发技术干货
数据可视化
如今，数据可视化已经成为了各个行业竞相追逐的一个词汇，并且被广泛的应用甚至渗透到我们生活的方方面面。通过以下几篇文章的具体案例，可以更深入的理解和使用大数据可视化。让我们开始学习数据可视化技术应用到生活中吧！
遇见大数据可视化：基础研究遇见大数据可视化：未来已来，变革中的数据可视化遇见大数据可视化：来做一个数据可视化报表遇见大数据可视化图表的视觉系统感知遇见大数据可视化：人人都能做数据可视化遇见大数据可视化：可视化系统搭建
点击查看更多数据可视化技术干货
结束语
我们从腾讯云技术社区整理了七个不同领域的入门级的系列文章，希望对你在进入「程序员世界」有所帮助。如果你也是善于分享技术干货的开发者，欢迎入驻腾讯云技术社区成为作者，分享技术干货，同时也欢迎大家在社区一起交流！是一种容器技术，它可以将应用和环境等进行打包，形成一个独立的，类似于的形式的「应用」，这个应用可以直接被分发到任意一个支持的环境中，通过简单的命令即可启动运行。是一种最流行的容器化实现方案。和虚拟化技术类似，它极大的方便了应用服务的部署；又与虚拟化技术不同，它以一种更轻量的方式实现了应用服务的打包。使用可以让每个应用彼此相互隔离，在同一台机器上同时运行多个应用，不过他们彼此之间共享同一个操作系统。的优势在于，它可以在更细的粒度上进行资源的管理，也比虚拟化技术更加节约资源。
本段参考：官方文档
本节来介绍一下腾讯云上主机和主机以及平台下的安装方式。

如果你是位系统，那么推荐使用，直接从官方网站下载最新的安装包即可，
如果不是位系统，则可以下载，__。
安装包下载之后直接双击安装即可，安装详细过程可以参考文档说明，安装完成之后，进入命令行。
运行命令测试：

运行结果如下：

如果出现类似上述输出就证明安装成功了。

详细的分步骤的安装说明可以参见官方文档，。
在官方文档中详细说明了不同系统的安装方法，安装流程根据文档一步步执行即可安装成功。
但是为了使得安装更加方便，官方还提供了一键安装脚本，使用它会使得安装更加便捷，不用再去一步步执行命令安装了，在此介绍一下一键脚本安装方式。
首先是官方提供的安装脚本，相比其他脚本，官方提供的一定更靠谱，安装命令如下：
|
只要执行如上一条命令，等待一会儿便会安装完成，非常方便。
但是官方脚本安装有一个缺点，那就是慢，也可能下载超时，所以为了加快下载速度，我们可以使用国内的镜像来安装，所以在这里还有的安装脚本。
安装脚本：
|
等待脚本执行完毕之后，就可以使用相关命令了，如运行测试镜像：

运行结果：







如果出现上文类似提示内容则证明可以正常使用了。

平台同样有两种选择，和。
要求系统为或更新，至少内存，如果你的系统满足此要求，则强烈建议安装。
可以使用安装，安装命令如下：

另外也可以手动下载安装包安装，安装包下载地址为：
下载完成之后直接双击安装包，然后将程序拖动到应用程序中即可。
点击程序图标运行，会发现在菜单栏中出现了的图标，如图中的第三个小鲸鱼图标。

点击图标展开菜单之后，再点击按钮即可启动，启动成功便会提示。

随后我们就可以在命令行下使用命令了。
可以使用如下命令测试运行：

运行结果如图所示：

如果出现类似输出则证明已经成功安装。
如果系统不满足要求，可以下载，其安装说明为。
关于和的区别，可以参见。
镜像加速
安装好之后，在运行测试命令时，我们会发现它首先会下载一个的镜像，然后将其运行，但是下载速度有时候会非常慢，这是因为它默认还是从国外的下载的，所以为了提高镜像的下载速度，我们还可以使用国内镜像来加速下载，所以这就有了加速器一说。
推荐的加速器有。
：
不同平台的镜像加速方法配置可以参考的官方文档：。
配置完成之后，可以发现镜像的下载速度会快非常多。
以上便是的安装方式说明。导语
在分布式微服务的架构下架构师往往面临著可靠性与性能间的抉择。提供了一个可同时兼顾可靠性与性能的解决方案。
前言
在分布式微服务的架构下架构师往往面临著可靠性与性能间的抉择。
当来自某个微服务外部的远程调用要求微服务处理一购买张股票的订单时。
架构师假如只是根据来决定此笔交易的成功与失败则整体的微服务的整体架构便会很难能同时兼顾性能与可靠性。
本文
当来自某个微服务外部的远程调用要求微服务处理一购买张股票的订单时。
当微服务的整体架构有一较好的性能却会为可靠性带来风险：
架构师所设计的微服务外部远程调用的时间是。
但此次微服务外部远程调用、微服务成功处理这张股票的订单并送回一确认成功的信息到微服务外部时共花费了。
所以微服务外部会误认为先前所发送的请求已因错误而。
微服务外部便又重发了一次张股票的订单。
这样的场景便使得微服务陷入一极为复杂的逻辑判断微服务需判断此张股票的订单为重发或新购
这例子主要是说明了当架构师希望微服务的整体架构有一较好的性能时而将微服务外部远程调用的设计得无法体现出
微服务远程调用、微服务处理服务与微服务送回一确认成功的信息到微服务外部所需的总体时间时便会为整体微服务架构的可靠性带来风险。
当微服务的整体架构有一较好的性能却会为可靠性带来风险
微服务远程调用所需的时间微服务处理服务的时间微服务送回一确认成功的信息到微服务外部的时间。
当微服务的整体架构有一较好的可靠性而使得整体微服务的性能不佳
架构师所设计的微服务外部远程调用的时间是
微服务远程调用、微服务处理服与微服务送回一确认成功的信息到微服务外部所需最长的总体时间的两倍。
举例
微服务远程调用、微服务处理服与微服务送回一确认成功的信息到微服务外部所需的平均总体时间为。
微服务远程调用、微服务处理服与微服务送回一确认成功的信息到微服务外部所需的最长总体时间为。
微服务外部远程调用的时间便是。
架构师所设计的微服务外部远程调用的时间是微服务有更充裕的时间处理服务因而可靠性获得较好的保障但也许太长了而使得整体微服务的性能不佳。
所以在分布式微服务的架构下光设计“”是不够的。
这也是为什么必需要在的架构下置入了。
同时能兼顾可靠性与性能
当架构师在微服务的与微服务间置入后将负责监控微服务的状态而使得微服务不致于一直还调用微服务当微服务已经无法运作时。
另一方面当在微服务的与微服务间置入后微服务外部远程调用的时间便是
微服务远程调用的时间送回信息到微服务外部的时间。
而这所需的时间便相当的短也许只需。
结论
所以在整体微服务架构下扮演著相当重要的角色不仅保障了微服务整体的可靠性更不至于因保障了微服务整体的可靠性而牺掉牲了微服务整体的性能。
在上有许多关于的实现。
我将在讨论到时再来讨论的作法与实现。

图一作者介绍：渠宏伟，腾讯高级工程师，从事前端开发年，先后负责企鹅电竞、腾讯视频、腾讯开发框架、腾讯微信助手等项目。对前端架构、架构有丰富的经验。

微信小程序的公测掀起了学习小程序开发的浪潮，天生跨平台，即用即走、媲美原生体验、完善的文档、高效的开发框架，小程序给开发者带来了很多惊喜。通过这篇文章和大家一起分析小程序的架构，分享开发经验。
一、小程序介绍
、小程序特点

、小程序演示
视频地址：
、小程序为什么那么快


预先额外加载一个
当打开指定页面时，用默认数据直接渲染，请求数据回来时局部更新
返回显示历史
退出小程序，状态不销毁
、小程序入口

扫码进入小程序
搜索小程序
小程序发送到桌面
发送给朋友
二、小程序架构
微信小程序的框架包含两部分视图层、逻辑层，层用来渲染页面结构，层用来逻辑处理、数据请求、接口调用，它们在两个线程里运行。
视图层使用渲染，逻辑层使用运行。
视图层和逻辑层通过系统层的进行通信，逻辑层把数据变化通知到视图层，触发视图层页面更新，视图层把触发的事件通知到逻辑层进行业务处理。

小程序启动时会从下载小程序的完整包

三、页面视图
视图层由与编写，由组件来进行展示。
将逻辑层的数据反应成视图，同时将视图层的事件发送给逻辑层。
、

支持数据绑定
支持逻辑算术、运算
支持模板、引用
支持添加事件

编译器：把文件转为执行方式：
、

支持大部分特性
添加尺寸单位，可根据屏幕宽度自适应
使用语句可以导入外联样式表
不支持多层选择器避免被组件内结构破坏

编译器：把文件转化为执行方式：
、–
目前支持如下选择器：

、
小程序提供了一系列组件用于开发业务功能，按照功能与的标签进行对比如下：

小程序的组件基于标准
使用框架实现

、
目前实现的组件有：组件层在层之上

四、逻辑层
逻辑层将数据进行处理后发送给视图层，同时接受视图层的事件反馈
、小程序的入口；页面的入口
、提供丰富的，如微信用户数据，扫一扫，支付等微信特有能力。
、每个页面有独立的作用域，并提供模块化能力。
、数据绑定、事件分发、生命周期管理、路由管理
运行环境

解析器
内核
、
数据绑定使用语法双大括号将变量包起来，动态数据均来自对应的，可以通过方法修改数据。
事件绑定的写法同组件的属性，以、的形式，以或开头，然后跟上事件的类型，如，是一个字符串，需要在对应的中定义同名的函数。


、

、
通过和进行通信

、

保留当前页面，跳转到应用内的某个页面，使用可以返回到原页面。页面路径只能是五层

关闭当前页面，跳转到应用内的某个页面。

关闭当前页面，返回上一页面或多级页面。可通过获取当前的页面栈，决定需要返回几层。
五、小程序开发经验
、小程序存在的问题
小程序仍然使用渲染，并非原生渲染。
需要独立开发，不能在非微信环境运行。
开发者不可以扩展新组件。
服务端接口返回的头无法执行，比如：。
依赖浏览器环境的库不能使用，因为是执行的，没有、对象。
中无法使用本地图片、字体等。
转化成而不是，为了兼容。
不支持级联选择器。
小程序无法打开页面，无法拉起。
小程序不能和公众号重名，于是小程序的名字就成了：自选股、滴滴出行。
、小程序可以借鉴的优点
提前新建，准备新页面渲染。
层和逻辑层分离，通过数据驱动，不直接操作。
使用，进行局部更新。
全部使用，确保传输中安全。
使用离线能力。
前端组件化开发。
加入单位，隔离设备尺寸，方便开发。
、脱离微信的“小程序”：渐进式应用
全称是，译成中文就是渐进式应用，是在年月日提出的概念。是结合了和原生应用中最好功能的一种体验。对于首次访问的用户它是非常有利的用户可以直接在浏览器中进行访问，不需要安装应用。随着时间的推移当用户渐渐地和应用建立了联系，它将变得越来越强大。它能够快速地加载，即使在弱网络环境下，能够推送相关消息也可以像原生应用那样添加至主屏，能够有全屏浏览的体验。

具有如下特点：
渐进增强支持的新特性的浏览器获得更好的体验，不支持的保持原来的体验。
离线访问通过可以在离线或者网速差的环境下工作。
类原生应用使用做到原生应用般的体验。
可安装允许用户保留对他们有用的应用在主屏幕上，不需要通过应用商店。
容易分享通过可以轻松分享应用。
持续更新受益于的更新进程，应用能够始终保持更新。
安全通过来提供服务来防止网络窥探，保证内容不被篡改。
可搜索得益于元数据和的登记，让搜索引擎能够找到应用。再次访问通过消息推送等特性让用户再次访问变得容易。
使更像
以的格式定义应用的相关配置应用名称、图标或图像连接、启动、自定义特性、启动默认配置、全屏设置等。

增强能力
通过实现资源离线缓存和更新

提升显示效率
应用外壳是应用的用户界面所需的最基本的、和，首次加载后立刻被缓存下来，不需要每次使用时都被下载，而是只异步加载需要的数据，以达到保持本地化。

了解更多资料：
感谢、提供的帮助。
文章来源公众号：小时光茶社

相关推荐简约而不简单：大众点评小程序开发经验谈微信小程序的编程模式初始化的时候会初始化两个与相关的线程它们分别是和。其中用于周期性地检查当前是否有请求，实现类是检查周期由参数控制，默认值是，也可以在参数中配置。

另一个成员变量负责该上的请求具体执行。


其包含了四个线程池分别用于，和。

的大体步骤是：周期性地检查是否有请求，如果出现了请求，那么将请求以及请求的周边信息一起包装成，将交付给的，会根据的类型为它分配合适的线程池，并包装成内部类交给对应线程池，线程池调度，执行它的方法，完成操作。
实现类是其继承了，在之前已经分析过，这个类通过实现方法而实现周期性的调用，其初始化是在中：

我们直接看其方法：

这个方法比较简单，取出所有在线的，遍历上的所有判断是否需要，这里判断是



可以看到最终条件为：中的个数–正在执行的文件个数。
我们都知道分成了两种和，其区别在官方文档中有说明：

操作只用来做部分文件的合并操作以及包括=并且设置的过期版本清理，不做任何删除数据、多版本数据的清理工作。也即是说选取一些小的、相邻的将他们合并成一个更大的，在这个过程中不会处理已经或的。一次的结果是更少并且更大的。
操作是对下的下的所有执行合并操作，最终的结果是整理合并出一个文件。这个过程还会清理三类无意义数据：被删除的数据、过期数据、版本号超过设定版本号的数据。另外，一般情况下，时间会持续比较长，整个过程会消耗大量系统资源，对上层业务有比较大的影响。因此线上业务都会将关闭自动触发功能，改为手动在业务低峰期触发。
方法中判断的是是否需要执行。从方法中可以直观的看到是通过方法判断的这是很多判断条件的合成，其中最为重要的一个是设置的值，也就是判断上次进行到当前的时间间隔，如果超过设置值，则满足一个条件，同时另外一个条件是。
因此，通过设置=可以关闭触发的，但是无法关闭用户调用级别的。最终实现的判断是来自的方法：作者：陈灿，年新加坡国立大学毕业后，年加入腾讯手机浏览器资讯团队。目前在团队中主要从事文本分类、内容质量识别相关方面的算法工作。

前言
本文介绍本人在学习数学以及接触机器学习以来的一些感悟和书单。从大学到研究生，把自己对线性代数和矩阵论一点点感悟和心得发在这里，大家一起进步学习。该专栏主要介绍一些机器学习和编程相关的内容，同时也记录下工作的心得和体会，来提高自己的总结提炼能力。
你随机问一个学计算机专业的同学，现在哪个领域最火？十之八九会告诉是机器学习。相信不少码农们都已经在这个“风口”或多或少部署过，的框架，写过不少代码了。，开源了许多优秀的机器学习库，将许多机器学习算法进行了封装，这让我们直接调用一个接口就行，只需要关心性能的优化，程序并行的实现。于是有一种说法戏称搞深度学习的码农就是调参侠，算法的具体实现就是个黑盒子，码农们在外面调调模型的参数就好。可是，人类的天性就是对不可知的事情有强烈的恐惧感，至少如果让我天天对着一个黑盒子调调参数就得到比较不错的结果，然后给人演示的话，我会感到很慌张，因为你不知道突然哪一天它就抽风了。这种恐惧感驱使我去了解黑盒子里面的基本原理是什么，去繁就简，去体会算法背后最基本的数学，去了解整个框架是如何实现的，这样才能算是找到了迷宫的出口吧。
机器学习本质上无非是应用统计学。通俗来讲，就是机器从大数据中借助数学工具去习得其中的规律。既然是应用统计学，那就是数学的范畴。上一辈人经常会跟我们讲“学好数理化，走遍天下都不怕”。到如今，学好数学，英语，掌握编程这门手艺，不少做技术的同学奉为圭臬。王国维曾有著名的读书三境界鄙人不才，在学习数学和机器学习中也有一点感悟和大家先分享下。
“昨夜西风凋碧树，独上高楼，望尽天涯路”。刚开始看到满天的公式不知所云，觉得很神奇，怎么会有人得到那么复杂的式子，有一种崇拜的感觉，也有一种恐惧的感觉。
“衣带渐宽终不悔，为伊消得人憔悴”。跨过了第一个阶段，就开始自学做研究所需要用到的数学知识。可是那么多工程方面的数学书，我应该去翻哪一些呢？所幸在国外得到导师悉心栽培和指点，现在依然还记得在导师办公室，他对一个问题的深刻见解和直接在白板上进行数学建模的过程，突然让我想到，工程研究和理论研究不一样，很多时候我们只需要把我们本科学过的数学分析、线性代数、概率论和统计再上升一点到矩阵论，随机过程，凸优化那么对于工程应用而已，这些底子修炼好，问题不是那么大了。这一个阶段经历过后，就明白哪些书可以花很多时间去读，哪些书可以走个大概即可。
众里寻他千百度，蓦然回首，那人却在灯火阑珊处。单纯看数学书是没有什么用的，因为你根本不知道你有没有消化和深刻理解公式背后的深刻意义：比如说方阵的特征值分解，只是看一遍书的话保证过不了三个月，肯定就忘记这个分解具体形式呢。想要能达到看穿本质的效果，这个阶段必须要有一定习题量的保证以及最好上是工程上的实现。
说了这么多，很多同学还是希望能给点干货入门机器学习的数学，告诉他们什么样的书值得一读，既通俗易通，又是经典之作。只可惜我也没有找到这样的书。现在市场上出现的无外乎天搞定派，“实战派”，教导我们多少天搞定的源码，在机器学习上的实战。这一类书并不能说它不好，至少满足了一部分读者的需求。但要想获得至上武功，内功的修炼必不可少。在此，我把所学过的，个人认为是把握机器学习深刻本质内容的好书和大家分享一下，感谢他们对我的无私帮助和深刻影响。
基本的数学方面的书籍有：

基本的科普性质有趣的书可以看看《》。

大牛的《》这是最基础的一本。在此之外，来自俄罗斯的的《》，这本书把线性代数的几何本质描述地非常清晰。

概率论和统计方面：国内陈希儒老先生的《概率论与数理统计》。

优化和数值计算方面的书：斯坦福大牛的《》主要讲解的是凸优化方面的技巧。国内的话大家可以看一下张贤达的《矩阵分析与应用》。数值计算方面可参考的《》。

随机过程方面：自然语言处理这一个细分领域很多都涉及到基础的随机过程知识，比如说马尔科夫链等等。由于随机过程通常和概率分不开，所以大家可以看看写的《》，这本书也是我在国大上课用的教材。写的还算是不错的。


数学的书籍，大家可以很多当做茶余饭后的“甜点”看一看，翻一翻。实在读不进去，可以去上找找录的视频，科普的效果还是很不错的。在机器学习领域，也有几本不错的书籍和资料与大家一起分享。

机器学习两本圣经的《》，这本书在网上有翻译过的中文版，但我感觉翻译后很多东西都没有表达出来，还是能看原版尽量看原版就好了。同样来自斯坦福的统计大牛的《》，这本书对统计的功底有一定的要求，大家觉得难度太大的话可以看它的简化版《》，这本书结合语言进行讲解，对于喜欢结合编程来理解知识的同学可以看一看。

现在业界在深度学习方面慢慢有了很多应用，来自深度学习的三大牛人之一的的《》对深度学习进行了比较深入的讲解。我初步看了前面数学的介绍部分，深度比较适合有一定基础的同学。

在深度学习领域，同样也要求至少对概率图模型有一定的了解。最基础的讲述概率图模型的经典我认为是神经网络的鼻祖之一的《》，这本书在讲解概率图模型之前会对贝叶斯理论和图方面进行详细的说明。当然，大家熟知的写的《》，但说句实话，这本书真不太适合没一点基础的同学入门来看。除此以外，我认为的邢老师的课是非常适合大家看的，具体网址如下：

在更加细分的领域，比如神经网络在计算机视觉方面的应用，斯坦福的李飞飞教授的课件讲的很不错，大家可以通过做实际的项目来加深对卷积神经网络的理解。具体地址为：


第一篇先写这么多，后续慢慢继续加油。热点事件
微信上线一款小程序：在家就能打官司微信上线了一款名为“数字越法远程视频平台”的小程序，可以实现证人远程作证。最近，在广州市越秀法院的开庭审理现场，这个小程序直接派上了用场，上演了证人远程作证的场面，证人没有到达庭审现场，通过视频就能完成个人的全部证词陈述。据悉，这是全国范围内率先推出微信作证小程序的首次应用。使用时，证人只需要通过小程序，完成身份认证环节，通过面部识别和语音识别校验身份后，即可进入作证视频通道。法院通过后台操作将法庭画面和声音传输到证人、鉴定人的手机等电子设备，同时将证人、鉴定人的头像和声音传输到法庭，就实现微信庭审了。快科技
特斯拉拟升级客户行车电脑，以满足自动驾驶要求特斯拉宣布，旗下全新车辆所有硬件设备已经就绪，而且都满足了他们去年要求的全自动驾驶需要。此外，特斯拉会让客户购买车辆升级选项，通过软件更新来实现自动驾驶功能。不过，监管要求特斯拉还需要对硬件即行车电脑进行升级，否则将无法上路。马斯克表示，他仍然坚信特斯拉使用当前的硬件就可以满足全自动驾驶需要，但同时他也提醒说，现在的问题主要是特斯拉的自动驾驶必须要满足监管者的要求，以及如何在道路上合法合规地行驶。
微软正在研发芯片，首先将用于下一代微软设备部门的全球副总裁帕诺斯·帕奈本周二在接受媒体采访时表示，微软正在研发一款能在下一代头戴显示器上使用的芯片。除了之外，微软或许还会将它应用到自己旗下的其它硬件产品上。
亚马逊应用中增加功能：可看商品摆放效果亚马逊今天推出了一项名为的新功能，让用户可以借助智能手机摄像头把网上的商品虚拟放置在自己的家中。这项功能已经嵌入在版亚马逊应用中，用户可以借此看到成千上万件商品在自己家中或办公室里的摆放效果，包括家具、电子产品、玩具、游戏等。亚马逊之前也曾在其应用中整合过增强现实技术，但只提供了一些增强现实贴纸，并没有实际用处，适用范围也很窄。
爱奇艺用算法预测节目流量，中国有嘻哈请吴亦凡由定爱奇艺龚宇月在上海举办的营销会上介绍，目前爱奇艺引入的人工智能算法已经可以较为精准地预测节目和影视剧的收视情况。爱奇艺的智能算法数据显示，当前爱奇艺基于深度学习的多时间窗口流量票房预测，天模型在部电影上预测准确率为；电影票房预测准确率已经高达；电视剧流量预测方面，提前年与半年的数据准确率均高达。爱奇艺首席内容官王晓晖透露，《中国有嘻哈》选吴亦凡是算出来的。爱奇艺不仅运用智能算法预测流量，并且也将其作为节目制作前的参考指标，反过来指导节目的策划。澎湃
美的碧桂园拟联手打造智慧家居无人工厂美的和碧桂园今日上午签署全面战略合作协议，双方将在产城融合、科技小镇、智能家电、智慧家居、海外项目等细分领域进行多维度的合作。此外，双方还将在广东佛山联手打造世界级的智能化无人工厂。美的集团董事长兼总裁方洪波透露，双方未来将共同探索消费机器人、智能机器人项目。第一财经
科大讯飞评测夺冠刷新世界记录科大讯飞官方公众号消息，近日，科大讯飞在国际自动驾驶领域权威评测集获得平均的精度，取得了该项评测的第一名，并刷新了世界记录。评测数据集在年由奔驰公司推动发布，是目前公认的自动驾驶领域内最具权威性和专业性的图像语义分割评测集之一，其关注真实场景下的城区道路环境理解，任务难度更高且更贴近于自动驾驶等热门需求。
沈南鹏：年的核心投资主题将是取代智能手机红杉资本中国基金的联合创始人沈南鹏认为，寻找下一个大平台将是投资者年关注的重点。风投公司和科技企业明年的首要任务是，找到并发展有助于开创后智能手机时代的新平台。他补充道，智能数字助理、无人驾驶汽车、虚拟现实或物联网设备等领域将引起兴趣。沈南鹏说，人们正在寻找的是从移动互联网转向下一个大平台，任何人现在都无法指出来，成为所谓的预言家。彭博
北京飞搜科技闪耀视觉目标跟踪获全球挑战赛第二名计算机视觉顶级会议在意大利威尼斯落幕，其中％的投稿来自中国。在比赛中，以商汤，旷世为首的中国团队斩获多项冠军。而作为视觉跟踪领域的最高峰，竞赛，吸引了来自全世界的个队伍参加，总共有个追踪器的结果。在公开的个队伍、个序列的排名中，大连理工大学的卢湖川教授队伍夺得第一名。由北京邮电大学董远教授指导，北京飞搜科技何智群、樊应若、庄骏飞、白洪亮组队提交的结果获得第二名。全称是，是物体追踪学术界最著名的竞赛。
首汽约车将在本月底对自动驾驶网约车进行测试，在有条件的地方上线自动驾驶网约车。首汽约车将在本月底对自动驾驶网约车进行测试，在有条件的地方上线自动驾驶网约车。在今年月日，百度与首汽集团旗下首汽约车达成合作，将一同推动自动驾驶、车载系统、车联网等技术的商业落地，双方未来目标是推出无人驾驶的网约车队，让用户在手机上点一下就能召唤到一辆无人车前来接驾。百度将向首汽约车提供包括及平台在内的成套解决方案，首汽约车将在自己的平台中进行自动驾驶的商业化运营。
投资事件
专注深度服务企业的公司追一科技完成万美元轮融资追一科技专注深度服务企业的公司今日宣布，已经完成万美元规模轮融资。本轮投资由创新工场领投，及追一科技原始股东晨兴资本、高榕资本跟投。追一科技主攻深度学习和自然语言处理，通过将人工智能与企业场景深度结合，帮助企业构建人企交互智能化解决方案。目前，追一科技研发的智能服务系统，可以满足企业在人机协同、大数据分析、个性化服务等多个领域的应用需求。氪
机器视觉方案商爱华盈通完成数千万人民币轮融资爱华盈通机器视觉方案提供商于近期完成数千万人民币的轮融资。此次融资完成后，资金将主要用于完善产品线、扩充客户支持团队并就品牌做市场推广。爱华盈通成立于今年月，是一家专注为端客户提供图像识别方案的科技公司。其核心方案包含与类同的“活体人脸解锁”、能实现相册内图片的物体与人脸识别的“每忆相册”、毫秒级相应的关键词搜索系统应用、文件名、文件内字节“盈搜”与能实现全系统文件的管理工具“文管王”。
医疗诊断高科技公司科宝医疗获千万元级股权投资科宝医疗诊断高科技公司获得毅达基金领投、奋毅资本跟投的数千万元股权投资。科宝智慧医疗科技上海有限公司年成立于张江核心园，成立之初就致力于医的跨界创新，是业界率先将人工智能、机器视觉技术、互联网技术和传统的医学诊断技术相结合的创新型公司。经过年发展，科宝自主研发的尿有形成份分析仪取得了认证，并获得了质量认证，同时，科宝创立的智医网平台已经成为行业的大数据和远程诊断支持与培训平台。公众号：张江发布
零号元素获得千万元轮融资零号元素是一个无人便利店加盟商，顾客可利用人脸识别技术进入便利店，商品标记则采用了技术，在模式上并不开设自营店，而是纯加盟模式，近日，零号元素已经拿到天使轮和轮融资共多万元。
抉择获得万元天使轮融资，星会网络投资抉择是一家虚拟现实体验游戏开发商，开发了鬼屋游戏，采用沉浸式虚拟现实技术为用户提供游戏体验服务，并通过空间定位和环境交互系统打造真实的游戏互动体验，近日，抉择获得万元天使轮融资，投资方为星会网络。
艾拉物联得获万美元轮融资，润良泰参投艾拉物联是一个主打智能家居的物联网创业公司。目前主要服务的客户在智能家居、智能穿戴、智能楼宇等领域，企业用户不仅可以利用的技术将自己的产品接入物联网，同时还可通过的平台提取有价值的终端数据信息，近日，艾拉物联得获万美元轮融资，润良泰基金和深圳日海通讯技术股份有限公司投资，艾拉物联表示，资金将主要用于加速利用数据创造商业价值，进一步构建合作伙伴生态系统。
获得万美元轮融资，西门子领投是一家多材料打印机制造商，可以向客户提供广泛打印材料的打印机，并研发出了全新的打印技术，可以利用传感器部署来构建打印场平台，近日，获得万美元轮融资，领投方为西门子旗下的风投，参投方包括微软风投、保时捷，以及和。
获得万美元轮融资，领投是一家企业服务人工智能公司，致力于使用机器学习算法和自然语言处理技术自动化和分析欺诈费用报告，近日，获得万美元轮融资，领投，参投方为。
获得万美元天使轮融资，参投是一家为穆斯林提供投融资对接服务的企业，公司采用机器人顾问这种金融服务模式，专门为穆斯林用户提供服务，帮助他们找到理想的符合宗教信仰的“清真”投资对象，近日，获得万美元天使轮融资，、投资，据悉，资金将用于用户拓展，为更多的穆斯林教众提供符合伊斯兰教法的投资项目。
获得万美元轮融资，投资是美国的一家农业公司，能利用照相机、传感器和软件来精确定位农场里的那些作物需要除草、除虫或灌溉，近日，获得万美元轮融资，投资，本轮融资将主要帮助公司进军中东市场。

本文来源于腾讯加速器微信公众号网址思路简介
现有的耗电性能测试，除了高端深入带着原理去测试的方法，大多数都是读取系统文件或采用工具获取整体手机电流值，这样的方法受影响的因素多，数据波动大，可信度不高，同时从开发角度说，告诉他一个简单的电流值，对他们定位问题的帮助，也不够。

图一源码中计算耗电的逻辑
先简单看下源码，无需过于深入理解逻辑。在类中可以发现，某个的耗电量值，来源于方法，其中包含、、移动网络、、蓝牙、传感器、摄像头、闪光灯等细分耗电量。通过以上分析：
“这个版本，管家耗电量高。”
就可以变成：
“这个版本，管家占用时间片过高。”
“这个版本，管家单位时间收发网络流量过高。”
“……”
与此同时，、、移动网络耗电量等细分指标，则都可以成为测试人员关注的专项测试项。同时测试人员也可以根据自己业务团队重点关注的方向，设计对应的专项测试。
数据源
在中，使用获取数据，其中第、位数据代表、。如下，这两个值代表进程从进程存活以来，在用户态运行的时间为：，在内核态运行的时间。
=该任务在用户态运行的时间，单位为
=该任务在核心态运行的时间，单位为
本方案，主要以这两个值为依托，输出耗电各场景下的耗电性能。
数据采集
首先设计一个基类，用于各类性能测试，包括本篇的耗电，以及内存性能、流畅度等其他专项。主要用于统一化测试执行逻辑_、_中的调用逻辑都为和。

图二性能测试基类
的收集方案，在_调用实例的方法时，创建定时器后开始执行__。同样，在__中同样适用定时器每隔收集一次中的、数据，同时计算这过程中，进程耗用的时间=_–_。同时每收集一次数据，使用___向文本中将本次计算结果写入文件。

图三性能数据收集具体逻辑
数据使用
获得单一进程的数据后，使用如下表的平均值即可评估出一个特定自动化用例场景下，对应的每秒、是否有优化或者达标。

图四平均值评估耗电
但如上，获得这个不符合预期的之后，如何驱动开发去修改问题，似乎更加重要。开发复现测试的场景，相当于重走了测试同学的执行路径。所以如果测试多走一步，开发就可以少走两步。借助工具ààà，我们可以获取到详细的数据。界面可以全选，复制到做排序

图五分析线程占用
在黑盒性能自动化发现有进程有耗电异常之后，使用分析包，一般可以找出几个耗电大头线程。同时使用功能，又可以大致查看到该线程到底是运行在哪些方法上。
通过以上的分析，基本上可以为业务开发找到耗电元凶。其实如果没有前述的黑盒自动化框架，测试在黑盒测试中如果感觉到应用总是会导致手机发烫，也可以去用关注下各个线程的占用时间，找出元凶给开发修改。

文章来源于：腾讯移动品质中心本文作者于潇宇

、背景
随着以数据中心为核心的云计算的兴起，传统计算领域不断被蚕食。各大公司纷纷出手，构成形如战国七雄的乱战格局：、、、、阿里、腾讯、百度。

在吃瓜群众眼中，云计算体大量足，实力强劲，于是，以机器学习、物联网、视频、科学计算、金融分析等大数据制造者为首的大量任务在云端构成了长长的计算队列。思科云指数报告指出，预计到年，全球的数据流量将来自云计算，将从年的每年增长倍，到年达到，=，如下图所示。多样化、复杂化的大量应用使云端的负荷不断增加，在计算能力、带宽瓶颈、响应延迟等方面提出了更大的挑战。


、大数据计算带来的问题
计算能力：随着以深度学习、金融分析、科学计算等为代表的大数据业务的兴起，数据中心的业务逐渐从密集型向计算密集型转变。按照传统的性能扩容方式，单纯的增加计算节点的数量已不再适用，大规模计算任务中，更大范围、更多计算节点、更长路径下的数据传递与交互，带来了一系列问题。首先，节点交互的增加导致数据转发和数据重发机制占用了通信链路的大量带宽，增加了通信成本和路由的负担；其次，更多计算节点的参与增加了延迟并降低稳定性，极大影响了服务质量；再次，更多的服务器和更大的集群规模使数据中心的建设成本和运营成本线性增加，尤其在电力需求的倍增成为现有方案的挑战。
带宽瓶颈对计算效率的制约：计算能力不是狭义的性能，而是云端每台服务器视为一个计算粒度的处理能力。除了，计算能力还受到多级带宽的制约，如网络带宽、缓存带宽、内存带宽、硬盘带宽，也就是所谓的冯诺依曼体系下的，如图所示。从年开始，和带宽的增长速度就开始出现不一致，出现了每年以速度的增长，而只有。不同的应用场景对带宽的需求不同，导致了计算效率的极大差异。尤其当的内核数量不断增加时，如至强处理器多至核，在带宽的限制下平均计算效率可想而知。

响应延迟：响应延迟取决于任务数量。为了提高的计算效率，经常让一台服务器跑多个应用，把服务器的利用率成倍提升，但也增大了延时。例如，若把利用率从％提升到，响应时间增加倍。而在大部分的场景中，更多的用户对延时更敏感，将响应速度的优先级设定在吞吐量之上。在某些大量用户访问场景中，请求排队的长度太长，导致内存耗尽、带宽占满等空间问题，也会增加延迟。值得注意的是，当某个计算任务规模较大从而需要集群计算时，服务器之间的通信会进一步增加延时。尤其在计算模型的关键路径上，无法用并行换取更短的执行时间，每一个节点的延迟会造成整个进程的延时积累，响应速度将进一步恶化。
大数据的价值固然可爱，而在兼顾性能、带宽和延时的前提下，规模不断增大的任务也成为迫使云计算进步的新动力。
、与，小鲜肉与老司机
当陷入瓶颈，以、和专用为代表的异构计算平台异军突起。其中成就了深度学习而成为学术界加速构架性能对比的标杆，黄教主和深度学习的专用团队的口水仗，从互相伤害走向相互攀比，也成了业界喜闻乐见的谈资。期间，低调的也渐渐走向前台，以期三分天下。
可视为具备可编程能力的资源池，其中的逻辑、存储、和计算单元的组织方式可根据具体应用设计不同的架构，实现深度定制。随着技术的进步，突出的计算能力和能耗优势使其成为的一个选择。例如在项目中将部署于搜索业务，以功耗增加，获得性能提升的收益；的提供了加速的云服务，并将其集成在中。同时，新一代服务器也纷纷增加对的支持，如的平台，将和处理器集成在同一个芯片封装上；也在上提供了接口实现与等协处理器的高速通讯。那么，到底有何魅力，而在云计算的大势下崭露头角呢？
深度定制与算力革命：相比于增加服务器数量和集群规模，另一种增加计算能力的方式是提升每台服务器的性能，于是，异构的计算方式成为提升算力的利器。当前处理器可根据通用性和定制性的差异总结为下图。

在相同的晶体管规模下，越是通用的处理器计算效率越低，能耗比也越差；定制性越高，应用的范围越窄，但越“精通”某一类型的计算。当某一类型的计算形成一定规模，高算力、低功耗为代表的专用便成为一种极致下的选择，如：的。然而却是一种例外。一方面，针对每一种具体应用，都可以根据其算法结构进行深度定制，甚至为算法的每个步骤设计专门的执行逻辑，避免了通用处理器的取指和译码过程，从而达到较高的计算效率和能效；另一方面，的可编程特性可以加载不同的运算架构，实现器件本身的通用性，不但可以设计针对图像图像的计算结构，也可实现并不擅长的搜索、加密解密等计算结构，因此成为的黄金搭档，为每个计算节点实现算力的全面升级。
优化带宽：带宽问题始终是计算机体系结构中制约计算能力的瓶颈之一。当采用提升算力时，的计算数据需要分享服务器的网络带宽、带宽、内存带宽等，影响计算效率的同时反而加剧了服务器的带宽瓶颈。只有在具备极高数据复用率的场景中，如等，才有望跑满计算资源。第一代也遭遇了同样的尴尬，按业务场景比例加权平均后的性能仅为峰值性能的，如同买了一辆最高时速的豪车，上路后发现平均限速，一脸懵逼。对于，可以通过编程能力采用另一种加速方式智能网卡，如图所示，其中右图×为中的硬件加速逻辑。

智能网卡的方式将置于服务器网口输入之外，使数据经预处理后再到达网卡，进入服务器。其带宽优势主要体现为：
、计算所需的数据不需要进入服务器，将硬件加速过程与服务器的带宽瓶颈解耦，避免与的带宽竞争。
、可承担部分原属于的计算任务，减少进入服务器的数据量和计算复杂度，从而缓解带宽压力。
延迟控制与稳定性：在低延迟和稳定性上具备天然的优势。一方面，其片上集成了大量缓存和外部接口，降低计算过程中与的交互，使硬件加速过程避免了操作系统层面的资源调度和进程间干扰，从而保证了确定性的延迟。另一方面，可实现基于定制流水线并行指令和并行数据设计，实现流式处理。中间数据在流水线之间传递和交互，降低对缓存的依赖，进一步降低延迟。例如：在针对相册、微信等应用的图片转码业务中，我们实现倍性能的同时，延迟降为；在基于的搜索和推荐业务中，实现倍性能，延迟降为。同样，在微软部署的数据中心中，应答排名服务中的延迟和稳定性对比如下图所示。

计算资源虚拟化后，云的性能依赖于数据中心的实体计算能力，而后者又受到计算节点性能、多节点规模、调度方式等因素的影响。的加入提升每个计算节点的处理能力，有利于缩小规模和简化调度，成为云计算的新助力。同时，更低的延迟和更高的稳定性，让提供的定制化服务在延迟、吞吐量等参数上具备更大的调整范围，兼容一些原本云计算无法满足或需要极大代价的苛刻应用场景，进一步促进了云的拓展和服务质量的提升。
、结语
工欲善其事必先利其器。特定领域需求的多样性和对算力需求的增加，使异构化的云服务成为一种趋势，因其灵活性和对众多非标准计算构架的支持，受到了越来越多的公司的关注，学术界关于对虚拟化资源的高效利用也走进人们的视野。同时，亚马逊、腾讯、阿里纷纷推出的云服务，无不彰显着业界大佬对小鲜肉的认可和期待。与此同时，的开发门槛正在降低，高层次综合工具不断涌现。一方面在某些垂直领域，如深度学习等，更高层次的算法到逻辑的端到端综合工具正在形成；另一方面，计算终端的异构化带来计算粒度、构架、带宽、延迟、存储上的变革，也将继续推进云、分布式、集群计算部署框架的更新，异构云的生态正在形成。老骥伏枥，大器晚成。经历的余年的沉淀，是否能在云端实现的升华，这一切尽在。
包云岗《云计算与标签化冯诺依曼体系结构》。
年月正式发表
–

作者|张镇圳编辑|京露

张镇圳，腾讯前端高级工程师，对内部系统前端建设有多年经验，喜欢钻研捣鼓各种前端组件和框架。

最近一直在想一个问题，如何能让代码写起来更语义化和更具有可读性。
上周末的时候突发奇想，当代码在运行的时候，其实跟我们做事情是类似的，都是做完一步接着下一步，并且这些事情有些是可规划的，有些是需要做完该步才知道下一步该做什么。想到这里一个框架雏形在我大脑中慢慢形成，暂且命名为。
接着说说这个框架应该有哪些？
、可以预先规划好流程的每一步，如步骤步骤……
、可以在任何一步决定下一步做什么，如步骤，其实这里的和上面的一样，只是调用的地方不一样而已。
、在任何一步中，可以知道当前步是在做什么，前面一步做了什么、下一步准备要做什么，如、、。
、当前步做完后，能将结果告诉下一步仅仅是下一步能获取到当前步传递的结果，也就是为了保护变量污染，每一步都只能获取到前一步的结果，如给下一步传值{……}、获取上一步传来的值或。
、可以设置或获取整个流程的全局变量，这样所有的步骤都能共享该变量，如设置全局变量值{……}，获取全局变量值或。
、上一步可以知道当前步的执行结果，成功失败，如在上一步中设置步骤、当前步中通过、来告诉上一步。
、当前步可以随时通知下一步开始执行，如。
、有些步骤能并行执行，并且要都执行完才能执行下一步，如步骤步骤步骤步骤步骤。
、可以在任何时候知道当前代码流程运行过的轨迹，如，这对于了解页面的执行过程会比较有帮助。

、可以预先规划好流程的每一步，如步骤步骤……


、可以在任何一步决定下一步做什么，如步骤，其实这里的和上面的一样，只是调用的地方不一样而已。


、在任何一步中，可以知道当前步是在做什么，前面一步做了什么、下一步准备要做什么，如、、。


、当前步做完后，能将结果告诉下一步仅仅是下一步能获取到当前步传递的结果，也就是为了保护变量污染，每一步都只能获取到前一步的结果，如给下一步传值{……}、获取上一步传来的值或。


、可以设置或获取整个流程的全局变量，这样所有的步骤都能共享该变量，如设置全局变量值{……}，获取全局变量值或。


、上一步可以知道当前步的执行结果，成功失败，如在上一步中设置步骤、当前步中通过、来告诉上一步。


、当前步可以随时通知下一步开始执行，如。


、有些步骤能并行执行，并且要都执行完才能执行下一步，如步骤步骤步骤步骤步骤。


、可以在任何时候知道当前代码流程运行过的轨迹，如，这对于了解页面的执行过程会比较有帮助。


其实的用法并不限于上面列出的方式，比如你可以试着在某一步中连续调用几次，你会发现下一步会被触发多次。想要知道更多用法，可以把我们平时看到的流程图信息套用到里面去实现。
可能有人会用来跟对比，其实更多的是为了解决异步回调的问题，而不仅也能解决异步回调问题，还能让代码看起来更加语义化和流程化，使得代码更具可读性。
特别是在处理那种比如提交一个数据前，需要做一连串的校验和接口调用的时候，会更加适合，如果哪天需要在中间穿插一个校验或接口调用，只需要往流程中添加一步就可以了，完全做到松耦合。
不仅能用于页面开发，同样在横行的时代，必须也是支持在服务端的来使用的，无任何第三方依赖！
好了，安利了那么多，现在来看看这个只有行代码的框架的真面目↓
我真的没有压缩代码，它真的只有行！
最后提示：框架源码和各在附件中可下载！



相关推荐
腾讯云从零部署站点简介
是一款开源的免费网络监视工具，能有效监控、和的主机状态，交换机路由器等网络设备，打印机等。在系统或服务状态异常时发出邮件或短信报警第一时间通知网站运维人员，在状态恢复后发出正常的邮件或短信通知。
能监视所指定的本地或远程主机以及服务，同时提供异常通知功能等。
监控的功能

本机私有资源
负载，内存占用情况，进程数，磁盘利用率等

监控网络服务
，，，，等

当服务或主机问题产生与解决时将告警发送给联系人通过、短信、用户定义方式

服务依赖监控
比如搭建平台后，当其中的数据库服务器宕机后，服务器无法访问。

让服务运行时调用自定义监控脚本做监控


监控服务器的搭建
安装软件包以及依赖包
需要的软件包如下

依赖包及环境如下：

创建进程所需用户：


安装软件包：

解包

====
配置
安装







部署服务的运行环境：
静态网页主页
动态网页主页



安装软件包：

==


启用及访问平台：
平台添加管理用户：
根据提示输入两次密码
重启和服务


客户端访问平台如下：

配置文件详解

文件安装目录

默认安装目录为：程序命令监控插件以及工具脚本网页目录运行数据

配置文件详解

配置文件目录为程序配置服务主配置文件变量配置

监控对象及模版配置：


监控命令配置监控本机对象设置报警收件邮箱设置监控时间模版监控方式模版
使用监控插件
监控的过程以及原理：
服务启动时自动调用监控插件，调用插件时，管理者可以设置监控插件的警告值和错误值，监控插件把获取到的数据和管理者定义的警告和错误值比较，根据比较结果返回监控状态：
若获取到的数据警告值返回监控状态若获取到的数据警告值并且错误值返回监控状态若获取到的数据错误值返回监控状态
使用插件帮助信息：_

_监控本机登陆用户，个报警个报错
_监控本机服务
_监控本机数据库服务端口协议
监控实战
监控本地
要求：监控本机的服务运行状态，监控本机引导分区的使用量，不再对本机的交换分区做监控，监控本机登录系统用户数量时把警告值修改为错误值修改为。
配置监控重点：
修改增加监控命令
修改添加监控对象
操作如下：

添加增加命令

{
___
__
}
{
___
__
}

添加监控对象



{

_
_
___
}
{

_
_
___
}
客户端访问如下：

监控远程主机公有数据
要求：配置远程主机服务器运行状态

配置远程主机服务器




在监控服务器主配置文件里加载监控远程主机的配置文件

_=

在监控服务器上创建监控远程主机的配置文件

{

_

}

{

_
_
___
}

在监控命令文件里添加监控远程主机的监控命令
{
___
__
}

检查语法错误：

重启服务



监控远程主机私有数据
要求：监控远程主机使用量，登陆用户数，进程数
配置远程主机

安装插件监控本地私有数据




安装软件
加密传输








修改服务的配置文件
__=_
__=_
___=_

启动服务：默认端口为
|


配置监控服务器

安装服务的_插件






把插件定义监控命令

{
___
____
}

{
___
____
}

{
___
_____
}

在中调用定义好的监控命令

{

_
_
_____
}

{

_
_
_____
}
{

_
_
______
}

检查配置文件是否有语法错误

重启服务


客户端测试监控服务配置结果

总结

优点：侧重于监控应用状态，故障分析，报警机制相对比较灵活。
缺点：预先设置好报警值和错误值。当监控结果越来越接近该值时，也不会报告。
安装软件包注意事项
安装软件包的依赖包
配置时创建并指定包安装位置以及进程属主和属组


配置注意需要使用的配置文件：


自定义的远程监控主机的配置文件
若是监控远程主机，则需要在服务的主配置文件将远程主机配置文件添加进去：_=配置文件名导读
目前，很多站都开始实现了，而且其中的大部分强迫症站长还会开启强制机制，对于网站的请求全部跳转到，从而实现全站。这明显是一个粗暴的做法，下面张戈博客就分享一下目前正在使用的柔性做法，告别粗暴。

一、协议
这里我们要借助一个新的安全协议：
国际互联网工程组织正在推行一种新的安全协议，作用是强制客户端如浏览器使用与服务器创建连接。
主要目的是为了解决网站首次请求时使用的是未加密的协议，也就说用户一般访问我们的网站都是直接在浏览器输入域名，比如，然后我们的服务器检测到是请求，就跳转到页面。那么前半程采用的就是未加密的请求，同样存在被劫持的可能，那么说好的安全性也就大打折扣了！
在我看来，还有另外一层好处：增强网站的兼容性。
以往分享的全站都是采用强制性跳转，而且还会区分下低版本、不支持的搜索引擎来忽略跳转，很明显这样做无法照顾到所有情况。那么如果是用呢？
采用后，支持这个协议的浏览器会自动跳转到页面，返回码为：
而不支持的浏览器访问我们的网站，则不会产生跳转，从而提高了兼容性。这个机制对于不支持的搜索引擎来说是非常友好的做法了！
当然，这里也特别说明下，一旦开启并提交到清单详见后文，那浏览器使用访问该域名下的所有子域名都将跳转到，所以启用前，务必慎重考虑。
二、开启
开启很简单，只要在我们网站的响应头里面新增即可，下面简单说下
①、服务器
只需要在站点模块内插入如下配置并重启：
{

_
直接在插入测试居然不生效，最后发现要在内插入：
\|{
_=
以下略
②、服务器
如下配置并重启：
先在加载_库，一般位于文件，自行搜索_并取消注释
__

然后在站点里面插入响应头信息，比如：

=

③、
将下述配置增加到你的配置文件一般是并重启：
=_
=={
===
}
④、通用方法
如果你用的虚拟主机，或者不会折腾软件，那么可以采用更简单的通用方法。原理很简单，通过代码来新增响应头即可，这里只分享一下的做法，其他语言自行参考：
将如下代码插入到网站根目录的即可：
=
三、相对链接
当然，为了兼容不支持的客户端，我们还需要将网站的所有超链接都改成相对模式：
比如，正常的页面链接如下所示：
==_描文本
改成相对模式：
==_描文本
好处就是，不管是还是请求，页面中的地址都是和请求协议保持一致，避免出现页面是，而页面中的链接却是的情况，那么前面的做法也就没了意义。
如何修改为相对模式，估计有同学又玩不转了。万变不离其宗，和以前纯代码启用七牛一样！直接粗暴替换前台输出的代码即可：
将所有超链接改为相对模式
_{
__
}
_{
=_|\|\\\____

}
将以上代码新增到主题的中即可。以上代码只会替换和网站主域名有关系的超链接，八竿子打不着的外部超链接就不管了，有需求自行参考解决。
四、提交
上文已介绍了，主要是为了解决请求跳转到这个过程被劫持问题，而实际上就算加上响应头，用户请求的前半程依然是，并没有什么用。
提出这个协议的砖家们就想出了一个解决办法：将支持的网站全部加入一个的清单，支持协议的浏览器请求网站前会查询当前网站是否在清单中，如果是那么直接转换为请求！从而解决前半程为的问题不专业，但说人话。。。。
那么，如果我们的网站启用了，还得将网站提交到这个清单才行，提交地址：需要科学上网才能访问
提交直到批准，我们的网站必须强制跳转到，否则无法通过，完成审核后再取消即可。
当然，提交后会显示正在提交到，快的话两三天，慢的话一两个月都是有可能的：
好了，罗里吧嗦分享了一大堆，自行参考吧！
最新补充：经过漫长的等待，偶然查询发现已经是状态了，可真不容易：导语
最近有个需求，需要对业务管理后台的操作记录进行上报。一般这种上报需求都是又后台同学来做比较合适的。但是因为后台人力的原因。这个工作落到了我这个小前端的头上。这里记录下做这个需求踩的一些坑。
一、实现反向代理
做为一个前端工程师，写代理脚本第一选择肯定是。不过在此之前，要把请求代理到机器上面的服务上面。这里使用了。在文件里面添加以下配置并重启。把域名下的请求，代理到机器上面的端口服务。
{

_
____
{
_
___
______
___
}
}
然后使用的模块，起一个代理，就像这样。
=
=
{
{}
}
本机使用代理域名到测试机器的，刷新一下，成功访问到内容。注意机器是没有解析服务的，这里需要在文件上面添加相关域名的地址
二、获取请求的相关数据
成功实现请求代理是一个好的开始。现在，需要开始搞点事情了。首先，我们需要获取请求的参数，这些参数可能是在里面，也可能是在实体里面。里面的参数很容易拿到，只需要读取对象的就能获取。实体里面的数据获取比较麻烦，因为请求的种类比较多，手动解析比较麻烦。这里使用了模块来解析。然后把解析完成的结果挂载在对象上面，方便后面获取。
{
=
=={}
巴拉巴拉，解析出参数，挂载在对象上面
}
除了请求的参数，我们还需要获取回包的数据，这样才能判断这个请求是不是有效的。获取回包数据，可以在对象上面监听事件，拼接回包数据。类似这样封装一个方法
{
=
{
=
}
{
{
=

}{

}
}
{

}
}
比较坑一点的是，回包可能会被压缩，这样我们上面代码得到的会是乱码。因此处理回包的时候，要判断回包的是不是，如果是的话，需要使用的模块进行解压。
三、进行数据上报
获取了请求的参数和回包内容，我们就可以进行数据上报了，上报的时机应该是在代理请求回包之后。模块提供了事件给我们监听，我们可以在这个事件的回调函数里面，获取回包的内容，并调用上报方法，使用的模块进行数据上报。类似这样
=
{
获取回包内容
{
发起请求上报
{

}
}
}
四、划分路由模块
系统的可能不只是一个命令，可能不只是一种回包格式。所以我们需要添加一个路由模块，把不同请求，映射到对应的处理器上面。可以比较简单的根据正则匹配，返回不同的模块字符串，然后在代理请求回包后，根据模块字符串这些模块去处理对应的请求。类似这样
{
=根据请求，返回对应的模块字符串
根据请求，获取处理请求的模块
=||
{

}{
注入配置到对象里面，后面会用到
=
{}
}
}

{
获取回包内容
{
根据路由配置，加载对应的处理器去处理请求
{
=

}
}
}
附：系统设计流程图

五、小结
有了之后，前端有了更大的舞台，可以帮助解决一些后台的工作。这次的需求只是一个小小的应该例子，后续我们还可以在这个的基础上，添加白名单做权限限制，限制某些用户只能操作固定的。导语
这个系列其实是写给自己的云计算知识学习笔记作为一个没有专业背景的小白，从零开始理解云计算的过程。王良明的《云计算通俗讲义》是一本入门的好书，本文根据书中的内容进行了思考提炼，尝试从通俗易懂的角度理解云计算的分类。
云计算从字面上可以拆成“云”和“计算”两个部分，要理解它的概念，需要从的传统技术讲起，了解什么“软件”、什么是“网络”。
一、什么是软件
软件也叫程序，要理解软件的概念，不妨先看下面这个例子老李想画一个三角形并计算出面积，他找了小李帮忙，交给他一张纸，上面写着这些步骤：

小李收到了这张纸后，询问了老李三角形三个顶点的坐标，然后在书桌上摊开纸开始工作，他画出三角形并计算面积后把纸交给了老李，任务完成。
如果我们将老李比喻成程序员，小李比喻成计算机的中央处理器，那么书桌就是内存，三角形三个顶点的坐标是三条输入语句，绘制三角形并计算面积的步骤就是软件，一个步骤就是一条指令也叫语句，画了三角形并标注了面积的纸就相当于软件的输出，“画一个三角形并计算面积”就如软件要完成的任务也叫程序要处理的数据。

通俗地来说，软件就是由程序员写的需要让来完成某项任务的步骤，只不过这些步骤是用计算机语言来描述的常见的计算机语言有、、、、等。
为了能够更加直观地理解软件的运行原理，我们用下面这张图表示一个软件：

一个软件以文件的形式保存在硬盘上，当我们用鼠标双击它时，这个软件就被读到内存，此后按照里面的步骤一步步执行。执行到输入步骤时需要从输入设备上获取信息键盘和鼠标是最常见的输入设备，然后执行一些计算步骤、内存和硬盘一起组成计算设备，最后执行输出步骤，把计算的结果通过输出设备输出显示器和音箱是最常见的输出设备。对于一些较大的软件，在软件执行的过程中，随时可能要输入，也随时可能会输出，计算步骤也可能安排在任何时候。
计算设备和输入输出设备的分离是云计算的核心特征。要明白他们是如何分离的，我们需要了解下一个概念网络。
二、什么是网络
我们平常使用发信息的时候，为什么发的信息能准确无误的发给特定的对象，而不会错发给别人呢？如何把一台计算机发出的信息准确无误地送到另外一台计算机，这就是计算机网络所要解决的问题。
写过信的人都知道，如果要把信送到对方手中，我们需要在信封上写上收件人的详细地址，且保证收信地址是唯一的。计算机也是一样，与外界通信的计算机也必须拥有一个唯一的地址。计算机的地址称为地址，格式是“”的范围为。

如果我在深圳，想把信息发送给北京的朋友，在我点击发送按钮后，消息、我的计算机的地址、朋友的计算机的地址被打包在一起通过宽带发送给深圳电信，然后电信内部传递，最后到达北京海淀区电信局后由海淀区电信局通过对方的宽带发给对方的计算机。消息的打包和传递都是由计算机网络自动完成的，以电或光的速度传播，非常快。
计算机网络的两个重要指标分别是带宽和时延。
带宽定义为每秒钟能传递的数据量，带宽越大则每秒钟传递的数据量就越大。如果把计算机网络比喻成一条高速公路，带宽就好比是车道数，车道数越多，每秒能通行的车辆越多。
网络路径上转发机构的多少决定了一条信息到达对方计算机所消耗的时间，术语称时延。如果再将计算机网络比喻成一条高速公路，时延就好比是路途经过的所有收费站交钱所耗时间的总和。一个云计算中心的时延半径通常为毫秒，即一个数据包从云中心出发，毫秒所能到达的范围返回也要毫秒，时延和地理位置上的远近无关，只和网络路径上的转发机构和数目有关，比如在深圳的超算中心毫秒的时延半径可能包括了美国的洛杉矶，但没有包括广东省的梅州市，因为深圳与梅州之间要经过很多性能低下的转发设备，而到达美国洛杉矶只经过几台高速路由器。实时输入输出的软件对计算机网络的时延要求高，尤其是实时强交互软件，比如我们日常使用的。
带宽和时延是部署云计算时不可忽视的两大重要因素。了解了软件和网络的概念后，理解云计算的本质就不远了。
三、什么是云计算
我们已经知道软件就是程序员写的需要执行以完成某项任务的步骤，这些步骤包括输入输出步骤和计算步骤，在执行输入输出步骤时需要使用输入输出设备，在执行计算步骤时需要使用计算设备。对于普通的计算机而言，计算设备指的是、内存和硬盘，输入输出设备指键盘、鼠标、显示器、话筒和音箱
对于传统的个人计算机，计算设备和输入输出设备通过主板连接在一起，计算设备和输入输出设备通过主板这个纽带实现协同工作。
然而，主板并不是可以连接计算设备和输入输出设备的唯一纽带。当一个软件在执行的时候，用到的输入输出设备和计算设备是被计算机网络连接在一起的，那么这样的软件执行过程就叫云计算。

“云计算”中的“云”指的就是计算机网络。位于计算机网络中的设备通常称为云端，位于人们身边的输入输出设备通常称为终端。就像我们不关心信是经历了哪些机构送出的，只关心信寄出之后对方什么时候能够收到一样；我们并不关心计算机网络具体是由什么组成的，我们只关心申请的宽带带宽是多少，时延大不大。对于我们不关心也不了解的网络组成部分，通常人们喜欢画一朵像云一样的东西来代替，这就是云计算名称的来历。
云计算也可简述为“输入输出设备和计算机设备分离的软件执行过程”，执行与计算表达的含义相同，因此云计算也可以称为云执行。它是针对软件执行而言的，跟计算机的具体结构无关，也和软件本身关系不大。比如我运行自己计算机上的计算器，就不是云计算；但如果我的朋友从北京登录到我的计算机并运行里面的计算器，这时就是云计算。
由上可知，云计算其实并不是什么高大上不可触及的概念，我们的生活各个方面都充满了云计算的应用：我们在用百度搜索关键词时，搜索软件运行在百度的计算机上，通过在亿万个网页中查找，把搜索结果反馈到用户的计算机屏幕上，同理还有在视频网站上看电影、使用邮箱、网盘等等。
云计算为用户提供了足够的计算资源、海量数据和几乎无限的存储空间，为物联网、大数据、人工智能等新兴产业奠定了基础，为我们的未来打开了无限的想象空间。越来越多的企业开始从传统的架构开始向云计算架构转型。
这个系列的下一篇将从传统架构开始进行整理，进一步说明云计算的分类和优势。

相关推荐
从零开始理解云计算：云计算的分类从零开始理解云计算：云计算的优势月日，腾讯公布截至年月日未经审核的第一季度综合业绩。数据显示腾讯第一季度总收入为人民币亿元亿美元，比去年同期增长。其中，“其他”业务的收入同比增长达到亿元。“该项增长主要受来自腾讯的支付相关服务及云服务收入的增加所推动。”整体来看，腾讯云产品及技术能力、全球化进程、拥抱开源等方面，均取得了长足进展。
聚焦人工智能，打造云服务产品矩阵
今年一季度以来，腾讯云聚焦人工智能方向，不断夯实人工智能云服务能力，率先打造完善的云服务产品矩阵，从基础设施、平台服务、基础服务、应用服务，到垂直行业解决方案，均有完善的产品及服务覆盖，成为行业内由底层发力，系统建设人工智能的成功范例。
年初，腾讯云推出国内首款高性能异构计算基础设施云服务器，以云服务方式将大型公司才能长期支付使用的推广到更多企业。
与此同时，腾讯云正式开放国内首款产品无服务器云函数，用户只需要上传代码即可使用腾讯云全球基础设施，为初创期的产品提供了很好的解决方案。
在私有网络方面，腾讯云独家推出了弹性网卡、广播组播、专线网关三大功能。弹性网卡旨在助力金融政企客户实现内网、外网和传输网络的三网隔离；而广播组播极大提升了私有网络中的多点投递效率；专线网关则重点解决了服务专线互联中的冲突、内网屏蔽等问题。
此外，腾讯云还正式发布深度学习平台，该平台集数据开发、训练、预测和部署于一体，适用于图像识别、语音识别、自然语言处理、机器视觉等领域，帮助企业迅速获得最强“云端大脑”，快速切入的快车道。
全球化布局全面提速，深度参与全球开源生态
今年，腾讯云在全球化进程方面开始全面提速。继香港、多伦多、新加坡后，腾讯云正式开放硅谷数据中心，并宣布将于年内陆续新增德国法兰克福、韩国首尔、印度孟买、俄罗斯莫斯科等大海外数据中心，同时还将完成美国硅谷和香港数据中心的扩建，以进一步满足区内客户对云计算服务的增长需求。
目前，腾讯云开放的全球服务节点数已达个，成为全球云计算基础设施分布最广泛的中国互联网云服务商之一。
与此同时，针对需求强烈的混合云市场，腾讯云新增个黑石专属数据中心。至此，腾讯云黑石专属数据中心已达个，完成了北京、上海、广州等全国核心节点的覆盖。黑石已拓展为兼具托管独享型物理服务器和云计算弹性双重优势的混合云服务。
此外，腾讯云官网域名也由正式更名为，以更具云标识的方式，向全球客户提供云服务。
腾讯云还以金牌会员身份加入正式加入和基金会，这意味着腾讯云在容器服务、虚拟化等重大开源项目的实力获得全球核心开源组织和业界认可。
技术释放成本红利，降低整体云服务成本
得益于平台优势和技术积累，腾讯云进一步降低云服务成本，促进产业更好地实现云化转型。
腾讯云举办“腾讯云采购节”大促活动期间，旗下云服务器、云数据库、域名等多款核心产品大幅降价，最低折扣达折。
这不仅表明了腾讯云释放多年积累的技术红利、反哺行业和消费者的决心，更是显示了腾讯云进军云计算中长尾市场的战略意图，成为了引导形成良好云生态的关键力量。
五星云主机荣耀加持，优图再度刷新世界记录
在可信云公布的首批云主机分级评估结果中，腾讯云云主机获“五星”最高标准评级，这意味着腾讯云云主机在规模、运营时长、资源调配能力、安全及运维能力等方面均达到行业最高规格标准。至此，腾讯云共计通过可信云云主机、对象存储、数据库、云缓存、本地负载均衡、数据中心件等大云服务认证，成为在基础产品能力上国内可信云认证最全最多的云厂商。
今年，腾讯云正式获得了工信部业务经营许可证。腾讯云有全国顶尖的精准库、部署了加速节点，同时背靠腾讯的大数据平台，可以从海量的业务上报信息中快速感知网络波动。
此外，腾讯优图实验室还在海量人脸识别数据库测试中以的成绩刷新了世界纪录。标志着腾讯云在图像理解与识别等领域已经积累了完整的解决方案和世界级的技术储备，这些能力也将持续通过腾讯云输送给各行业，助力行业场景业务创新。
腾讯公司副总裁、腾讯云总裁邱跃鹏表示，未来，腾讯云还将持续加强在人工智能云服务领域的布局，以云计算、大数据、人工智能等新兴技术，更加智能地连接和赋能各行各业。
▼一张图看懂腾讯云成绩单▼本文简介：本文从硬件的角度引申出内存屏障，这不是内存屏障的详尽手册，但是相关知识对于理解有所帮助。这不是一篇单独的文章，这是《谢宝友：深入理解》系列的第篇，前序文章：《谢宝友：深入理解从硬件说起之内存屏障》
作者简介谢宝友，在编程一线工作已经有年时间，其中接近年时间工作于操作系统。在中兴通讯操作系统产品部工作期间，他作为技术总工参与的电信级嵌入式实时操作系统，获得了行业最高奖中国工业大奖。
同时，他也是《深入理解并行编程》一书的译者。该书作者是中心领导者，。《深入理解》系列文章整理了的相关著作，希望能帮助读者更深刻的理解内核中非常难于理解的模块。
联系方式：微信：

一、内存还有哪些不足？
上一篇文章我们谈到了内存，并且描述了典型的一致性协议。的根本目的，是解决内存与速度多达两个数量级的性能差异。一个包含的计算机系统，其结构可以简单的表示为下图：

仅仅只有的计算机系统，它还存在如下问题：、的速度，虽然比内存有了极大的提升，但是仍然比慢几倍。、在发生“”、“”、“”时，必须等待从内存中读取数据，此时会处于一种的状态。其等待时间可能达到几百个指令周期。
显然，这是现代计算机不能承受之重：
二、是为了解决什么问题？
如果仅仅是执行=这样的语句，它其实无须从内存或者缓存中读取现在的值。因为无论当前的值是什么，它都会被覆盖。在仅仅只有的系统中，=这样的操作也会形成写停顿。自然而然的，设计者应当会想到在和之间再添加一级缓存。由于这样的缓存主要是应对写操作引起的，并且缓存的数据与写操作相关，因此设计者将它命名为“”。调整后的结构示意图如下图中的即为：

通过增加这些，可以简单的将要保存的数据放到中，并且继续运行，而不会真正去等待从内存中读取数据并返回。
对于特定来说，这些是属于本地的。或者在硬件多线程系统中，它对于特定核来说，是属于本地的。无论哪一种情况，一个特定仅仅允许访问分配给它的。例如，在上图中，不能访问的存储缓冲，反之亦然。
进一步提升了系统性能，但是它也会为硬件设计者带来一些困扰：第一个困扰：违反了自身一致性。
考虑如下代码：变量“”和“”都初始化为，包含变量“”缓存行，最初被所拥有，而包含变量“”的缓存行最初被所拥有：
=
=
==
没有哪一位软件工程师希望断言被触发！
然而，如果采用上图中的简单系统结构，断言确实会被触发。理解这一点的关键在于：最初被所拥有，而在执行=时，将的新值存储在的中。在这个简单系统中，触发断言的事件顺序可能如下：．开始执行=。．在缓存中查找“”，并且发现缓存缺失。．因此，发送一个“读使无效”消息，以获得包含“”的独享缓存行。．将“”记录到存储缓冲区。．接收到“读使无效”消息，它通过发送缓存行数据，并从它的缓存行中移除数据来响应这个消息。．开始执行=。．从接收到缓存行，它仍然拥有一个为“”的“”值。．从它的缓存中读取到“”的值，发现其值为。．将存储队列中的条目应用到最近到达的缓存行，设置缓存行中的“”的值为。．将前面加载的“”值加，并存储该值到包含“”的缓存行中假设已经被所拥有。．执行==，并引起错误。针对这种情况，硬件设计者对软件工程师还是给予了必要的同情。他们会对系统进行稍许的改进，如下图：

在调整后的架构中，每个在执行加载操作时，将考虑或者嗅探它的。这样，在前面执行顺序的第步，将在存储缓冲区中为“”找到正确的值，因此最终的“”值将是，这正是我们期望的。带来的第二个困扰，是违反了全局内存序。考虑如下的代码顺序，其中变量“”、“”的初始值是。

{
=
=
}


{
==
==
}
假设执行，执行，再进一步假设包含“”的缓存行仅仅位于的缓存中，包含“”的缓存行被所拥有。那么操作顺序可能如下：．执行=。缓存行不在的缓存中，因此将“”的新值放到，并发送一个“读使无效”消息。．执行==，但是包含“”的缓存行不在它的缓存中，因此它发送一个“读”消息。．执行=，它已经拥有了该缓存行换句话说，缓存行要么已经处于“”，要么处于“”状态，因此它存储新的“”值到它的缓存行中。．接收到“读”消息，并且发送缓存行中的最近更新的“”的值到，同时将缓存行设置为“”状态。．接收到包含“”值的缓存行，并将其值写到它的缓存行中。．现在结束执行==，因为它发现“”的值是，它开始处理下一条语句。．执行==，并且，由于工作在旧的“”的值，因此断言验证失败。．接收到“读使无效”消息，并且发送包含“”的缓存行到，同时在它的缓存中，将该缓存行变成无效。但是已经太迟了。．接收到包含“”的缓存行，并且及时将存储缓冲区的数据保存到缓存行中，的断言失败受害于该缓存行。请注意，“内存屏障”已经在这里隐隐约约露出了它锋利的爪子！！！！
三、使无效队列又是为了解决什么问题？
一波未平，另一波再起。
问题的复杂性还不仅仅在于，因为仅仅有，硬件还会形成严重的性能瓶颈。
问题在于，每一个核的相对而言都比较小，这意味着执行一段较小的存储操作序列的，很快就会填满它的。此时，在能够继续执行前，必须等待刷新操作完成，以清空它的。
清空是一个耗时的操作，因为必须要在所在之间广播消息使无效消息，并等待对这些消息的响应。为了加快消息响应速度，设计者增加了使无效队列。也就是说，将接收到的使无效消息暂存起来，在发送使无效消息应答时，并不真正将中的值无效。而是等待在合适的时候，延迟使无效操作。
下图是增加了使无效队列的系统结构：

将一个条目放进使无效队列，实际上是由承诺：在发送任何与该缓存行相关的协议消息前，处理该条目。在竞争不太剧烈的情况下，会很出色地完成此事。
使无效队列带来的问题是：在没有真正将无效之前，就告诉其他已经使无效了。这多少有一点欺骗的意思。然而现代确实是这样设计的。
这个事实带来了额外的内存乱序的机会，看看如下示例：假设“”和“”被初始化为，“”是只读的“”状态，“”被拥有“”或者“”状态。然后假设执行而执行，代码片段如下：

{
=
_
=
}


{
==
==
}
操作顺序可能如下：．执行=。在中，相应的缓存行是只读的，因此将“”的新值放入存储缓冲区，并发送一个“使无效”消息，这是为了使的缓存中相应的缓存行失效。．执行==，但是包含“”的缓存行不在它的缓存中，因此它发送一个“读”消息。．接收到的“使无效”消息，将它排队，并立即响应该消息。．接收到来自于的响应消息，因此它放心的通过第行的_，从存储缓冲区移动“”的值到缓存行。．执行=。它已经拥有这个缓存行也就是说，缓存行已经处于“”或者“”状态，因此它将“”的新值存储到缓存行中。．接收到“读”消息，并且发送包含“”的新值的缓存行到，同时在自己的缓存中，标记缓存行为“”状态。．接收到包含“”的缓存行并且将其应用到本地缓存。．现在可以完成==，因为它发现“”的值为，接着处理下一条语句。．执行==，并且，由于旧的“”值还在的缓存中，因此陷入错误。．虽然陷入错误，处理已经排队的“使无效”消息，并且迟到在自己的缓存中刷新包含“”值的缓存行。
四、内存屏障
既然硬件设计者通过和使无效队列引入了额外的内存乱序问题，那么就应当为软件工程师提供某种方法来解决这个问题。即使相应的解决方法会折磨软件工程师。
答案就是内存屏障。对于内核资深工程师来说，这个答案也显得比较沉重，它太折磨人了：
我们先看看一节中，触发断言的例子，应该怎么修改。在那个例子中，硬件设计者不能直接帮助我们，因为没有办法识别那些相关联的变量例子中的和，更不用说它们如何关联。因此，硬件设计者提供内存屏障指令，以允许软件告诉这些关系的存在。程序必须修改，以包含内存屏障：

{
=
_
=
}


{
==
==
}
内存屏障_将导致在刷新后续的缓存行包含的缓存行之前，前面的被先刷新。在继续处理之前，可能采取的动作是：
、简单的停顿下来，直到存储缓冲区变成空；、也可能是使用存储缓冲区来持有后续的存储操作，直到前面所有的存储缓冲区已经被保存到缓存行中。理解其中第点，能够帮助我们理解“内存屏障”这个单词的来历！！后一种情况下，操作序列可能如下所示：．执行=。缓存行不在的缓存中，因此将“”的新值放到存储缓冲中，并发送一个“读使无效”消息。．执行==，但是包含“”的缓存行不在它的缓存中，因此它发送一个“读”消息。．执行_，并标记当前所有存储缓冲区的条目。也就是说=这个条目。．执行=。它已经拥有这个缓存行了。也就是说缓存行已经处于“”或者“”状态，但是在存储缓冲区中存在一个标记条目。因此，它不将“”的新值存放到缓存行，而是存放到存储缓冲区中。但是“”不是一个标记条目。．接收“读”消息，随后发送包含原始“”值的缓存行给。它也标记该缓存行的复制为“”状态。．读取到包含“”的缓存行，并将它复制到本地缓存中。．现在可以装载“”的值了，但是，由于它发现其值仍然为“”，因此它重复执行语句。“”的新值被安全的隐藏在的存储缓冲区中。．接收到“读使无效”消息，发送包含“”的缓存行给，并且使它的缓存行无效。．接收到包含“”的缓存行，使用存储缓冲区的值替换缓存行，将这一行设置为“”状态。．由于被存储的“”是存储缓冲区中唯一被_标记的条目，因此能够存储“”的新值到缓存行中，除非包含“”的缓存行当前处于“”状态。．发送一个“使无效”消息给。．接收到“使无效”消息，使包含“”的缓存行无效，并且发送一个“使无效应答”消息给。．执行==，但是包含“”的缓存行不在它的缓存中，因此它发送一个“读”消息给。．接收到“使无效应答”消息，将包含“”的缓存行设置成“”状态。现在存储新的“”值到缓存行。．接收到“读”消息，同时发送包含新的“”值的缓存行给。它也标记该缓存行的复制为“”状态。．接收到包含“”的缓存行，并将它复制到本地缓存中。．现在能够装载“”的值了，由于它发现“”的值为，它退出循环并执行下一条语句。．执行==，但是包含“”的缓存行不在它的缓存中。一旦它从获得这个缓存行，它将使用最新的“”的值，因此断言语句将通过。
正如你看到的那样，这个过程涉及不少工作。即使某些事情从直觉上看是简单的操作，就像“加载的值”这样的操作，都会包含大量复杂的步骤。
前面提到的，其实是写端的屏障，它解决引入的内存乱序。接下来我们看看读端的屏障，它解决使无效队列引入的内存乱序。
要避免使无效队列例子中的错误，应当再使用读端内存屏障：读端内存屏障指令能够与使无效队列交互，这样，当一个特定的执行一个内存屏障时，它标记无效队列中的所有条目，并强制所有后续的装载操作进行等待，直到所有标记的条目都保存到的中。因此，我们可以在函数中添加一个内存屏障，如下：

{
=
_
=
}


{
==
_
==
}
有了这个变化后，操作顺序可能如下：
．执行=。相应的缓存行在的缓存中是只读的，因此将“”的新值放入它的存储缓冲区，并且发送一个“使无效”消息以刷新相应的缓存行。．执行==，但是包含“”的缓存行不在它的缓存中，因此它发送一个“读”消息。．接收到的“使无效”消息，将它排队，并立即响应它。．接收到的响应，因此它放心的通过第行的_语句，将“”从它的存储缓冲区移到缓存行。．执行=。它已经拥有该缓存行换句话说缓存行已经处于“”或者“”状态，因此它存储“”的新值到缓存行。．接收到“读”消息，并且发送包含新的“”值的缓存行给，同时在自己的缓存中，标记缓存行为“”状态。．接收到包含“”的缓存行并更新到它的缓存中。．现在结束执行==，因为它发现“”的值为，它处理下一条语句，这是一条内存屏障指令。．必须停顿，直到它处理完使无效队列中的所有消息。．处理已经入队的“使无效”消息，从它的缓存中使无效包含“”的缓存行。．执行==，由于包含“”的缓存行已经不在它的缓存中，它发送一个“读”消息。．以包含新的“”值的缓存行响应该“读”消息。．接收到该缓存行，它包含新的“”的值，因此断言不会被触发。
即使有很多消息传递，最终都会正确的应答。这一节阐述了设计者为什么必须格外小心地处理它们的缓存一致性优化操作。
但是，这里真的需要一个读端内存屏障么？在之前，不是有个循环么？
难道在循环结束之前，会执行==？
对此有疑问的读者，您需要补充一点关于猜测冒险执行的背景知识！可以找参考手册看看。简单的说，在循环的时候，==这个比较条件，有可能会被预先加载的值到流水线中。临时结果不会被保存到或者中，而是在流水线中的临时结果寄存器中暂存起来。
这是不是非常的反直觉？然而事实就是如此。
对世界中反直觉的东西有兴趣的朋友，甚至可以看看量子力学方面的书，量子计算机真的需要懂量子力学。让《深入理解并行编程》一书中提到的“薛定谔的猫”来烧一下脑，这只猫已经折磨了无数天才的大脑。除了霍金，还有爱因斯坦的大脑！
五、关于内存屏障进一步的思考
本文仅仅从硬件的角度，引申出内存屏障。其目的是为了后续文章中，更好的讲解。因此，并不会对内存屏障进行深入的剖析。但是，对于理解来说，本文中的内存屏障知识已经可以了。
更深入的思考包括：
、读屏障、写屏障、读依赖屏障的概念、各个体系架构中，屏障的实现、及其微妙的差别、深入思考内存屏障是否是必须的，有没有可能通过修改硬件，让屏障不再有用？、内存屏障的传递性，这是系统中比较微妙而难于理解的概念。、单核架构中的屏障，是为了解决什么问题？怎么使用？、屏障在内核同步原语中的使用，满足了什么样的同步原语语义？
感兴趣的读者，可以参考如下资料：
、我在大会上关于内存屏障的演讲、《深入理解并行编程》中文版本：

文章来源于微信公众号作者：龙伟炜，腾讯手机管家移动端开发商业转载请联系腾讯获得授权，非商业转载请注明出处。原文链接：
导读
随着苹果发布会的结束，的版也上线了，也意味着适配之旅的开始。
一、设计关注篇
注意设计的基本原则：苹果呼吁的

规格原帖
__最终说明见上面的官方说明
二、让充满屏幕
刚升级完版，兴奋地了一下手机管家
我们的_依旧是使用作为的，那问题出在哪呢？关于我们用的敲黑板，划重点看的官方说明：
上文的说明当中，意思大概可以通俗地理解为，我们所用的的初始化是根据我们进入的第一个页面去进行参数化的，也就是说，我们的启动图补上的图要换了。

如果你也跟我一样一下子没找到新建的入口那就粗暴地删掉重新新建了一个

像此类多张尺寸图的文件夹，我们往往还会进行一个操作，就是修改，令部分相同比例的尺寸共用同一个资源图直接拖进会直接创建一个新文件的。


补充一些官方必备要领的传送门：
官方说明
__
主要提及的概念以及横屏情况下的区域如何设计，还有的适配

三、整理一下发型
将旧版本塞满屏幕后，来到我们最关心的“刘海”问题了

见图可知，我们默认的在中也有了相对的调整，对于开发和布局设计标注也需要去注意这个问题。
另外，比较关注的是新交互方式下，底部的一些屏幕适配问题：
能想到的比较多的场景，就是底部的一些按钮与“键”重合了，直接上调按钮位置，按钮底部拉长亦可以解决这问题。
其中一个可能会有坑的点，的宽度与是一样的，但使用的是图。所以在处理比例和插图时，需要注意。这就意味着，我们用的一些通过比例对其切图和布局的方法将会出现问题。

俨然，这时候需要手动适配的地方，也可以这样操作掉。
避免影响原本的各机型代码，通常这样：

设计师也需要注意的是，若要保持某种图片的比例一致，图造成的变形也要进行对应比例的新切图
当然，基于推荐使用的设计思路，这里引入了的概念以更好地补充完善此类适配问题。注意使用接口需要系统，方法前请务必进行系统判断

帮助我们将设置在整个屏幕的可视化部分，即使把设置为透明的，系统也认为是从的开始的。
可以确保可视区域不被系统的状态栏、或俯视图提供的如导航栏覆盖。此外还可以使用去扩展，包括自定义的在你的界面，同理，如下图：

文档中具体示例代码

关于的原文
四、提一下关于测试的事
由于目前还没有的设备，只能通过模拟器去测试，就涉及到模拟器安装包的问题了。
第步，修改你的架构兼容设置
第步，重新编译
第步，取出文件，塞进文件夹，打包||直接拖去模拟器
其实这里打不打都可以，基于程序员的仪式感我才打的包
第步，测试同学手上有这个文件，输入命令安装到模拟器上请开着再去跑这命令
由于手机管家的适应力有点强，没有横屏和一些布局的情况，所以很快地就完成了适配工作，剩下的调整就交给设计师完成了

腾讯兼容性测试团队积累了年的手游测试经验，旨在通过制定针对性的测试方案，精准选取目标机型，执行专业、完整的测试用例，来提前发现游戏版本的兼容性问题，针对性地做出修正和优化，来保障手游产品的质量。目前该团队已经支持所有腾讯在研和运营的手游项目。
新机即将同步上线，欢迎进入：使用专家兼容测试服务。兼容性测试团队期待与您交流！，！
如果对使用当中有任何疑问，欢迎联系腾讯企业：导语运维可以说是世界上最紧张且强度最大的工作之一，每个杂乱无章的问题背后都需要我们的深入的抽丝剥茧。尤其是当你面对的问题直接与收入业务、海量服务运营挂钩时，可谓是肾上腺素瞬间飙升。压力的存在可能诱发我们犯下低级错误。要克服这种白痴般的本能，就需要强迫自己以有条不紊的方式逐一开展尝试。其实做运维练就的是一种心态，足够淡定遇事不乱，从容应对才是真。

从入行到现在，遇到过各式各样千奇百怪的问题，每个业务形态和系统均不一样，排查出问题并找到根本原因加以解决，其实是一件很成就感的事情。曾经有人问过我：“你是怎么想到问题出现在的？又是怎么确认根本原因是的？”，我只能轻描淡写的回答：“靠经验”，然后感觉这个逼装得还可以。其实这里说的“靠经验”是很模糊的，一直以来大家可能都觉得排查问题要靠经验，但是又说不出具体通过什么样的经验排查出了问题，最后让排查问题逐渐变成了一门玄学。其实问题排查工作往往遵循一些通用且不成文的实践规则，并不是一门所谓的玄说。在此，我将结合自身经历、总结，说关于“问题排查”的方法论，希望能与您产生更多的共鸣。
排查问题犹如破案
运维排查线上问题犹如警察破案一样，是一个不停分析线索，推理的过程，但在准备排查问题之前，我们应该明白三个认知：认知，几乎是人和人之间唯一的本质差别。傅盛《认知升级三部曲》
系统出现异常是正常
时至今日计算机系统已经变得异常复杂，一次用户请求可能要经过发送请求，解析，运营商网络，负载均衡，服务器，虚拟机容器，视业务逻辑的复杂程度可能还要调用组件，缓存，存储和数据库等。每个环节都可能出现问题，有的组件又是分布式的，大大增加的排查问题的难度，所以出现问题后不要慌，保持好的心态。
首要任务是恢复系统
飞机在发生紧急情况下，飞行员的首要任务是保持飞机飞行，相比保证乘客与飞机安全着陆，故障定位和排除是次要目标”，所以恢复线上系统是首要任务，而不是立马找到它发生的原因。
真相永远只有一个
计算机是一门科学，而且计算机的世界里都是由或组成，在这个世界里只有是或否，没有中间地带，所以在计算机世界凡事都有根本原因，没有偶然发生，一切都是必然。
了解案情，评估大小
先评估出这个问题的影响范围，是全网，某些地区，还是某条链路不可用的问题，还是很多业务线都出现问题，评估出案情的大小，到底是普通的民事案件，还是刑事案件。
理清线索，整理分析
理清手头已得到的信息或线索，比如监控上有网络报警，有用户反馈无法访问，有开发人员反馈服务器有问题，同时间段有做变更等等，尽量不要漏掉这些看似无关紧要的线索，把这些线索先整理下来，后面一并分析。推理的过程，就是根据已知线索，通过合理的想象、推断得出一个唯一的结果。线索是整个推理过程的起点，线索给出的好有不好、是否有错误，直接会影响推理的质量，因此是最基础、也是最重要的一环。线索的梳理，最常犯错误就是信息不足，主观臆断。
扩大你的信息量
主动扩大信息的接收面，比如问询一下开发或算法同学，今天有没有做线上改动，网络组有无重大调整。从中获取到有价值的信息点，对于排查问题至关重要。查看监控，细看某个监控项的变化，追踪日志和调试信息都是扩大信息量的手段。拓展知识面，闲暇时间多些了解相关联系统，比如架构，部署，逻辑等。一旦故障发生，讨论中也可提供你解决办法的思路，举一反三，推进问题的排查与解决。
分析证词，甄别对错
如果是外部提出的问题，比如业务投诉，用户反馈等信息，有时候是可信的，有时候人却是不可信的，举个例子之前有开发反馈效果有问题，有些广告位异常，有些正常，让我们帮查查系统的问题，但是最后是代码调用一处动态配置造成的。有些时候反馈的信息，是经过描述者过滤加工过的信息，他的排查和分析有可能把你带偏了，在收集信息同时需要以审视、怀疑的态度，分析每个人的证词。每个人的学习能力其实都很强的，随着经验的积累，甄别证词能力也会逐渐提升。
看清问题本质
“听到马蹄声时，猜马，不要猜斑马”看到一件现象或一件事情，要看实质而不只是表面的东西，听到马蹄声时候猜是什么马，是什么人的马，是来干什么的而不是猜它是斑马还是白马还是黑马。排查问题也一样切忌先入为主，有时候看似不可能发生、极其简单的事情可能就是最终原因，不要轻易的排除掉某项原因，比如“宇宙射线引发数据错误”。很早之前碰到过一个某耗时高问题，查了很久也做了一些调优依然不见效，最后发现其实是网卡跑满了。
确定方向，开展定位
确定侦查方向，如从大到小，从上到下排查步骤，从大到小先看比如网络，机房状态等比较宏观的地方是否有问题，逐一排除，逐步缩小问题范围。从上到下先从现象发生的顶端调用链逐一排查，逐步向下深入。并不是所有问题都从大到小从上到下，宏观问题只有达到一定量级才会引发”质变”，从而引起的注意，在通往质变过程中，你的业务可能已经收到某中影响而表现的很明确，此时需要微观分析，然后再逐渐到宏观来诊断。
卷宗记录，破案归档
好记性不如烂笔头，然而在一片混乱问题分析当中，让运维心平气和地记录下问题与判断确实有点不切实际。但即使如此，我们仍然可以在事情结束后为保留一份分析资料，总结并记录处理过程中的执行步骤以及解决途径，则能帮助自己和团队积累宝贵的处理经验。以上方法流程翻译成运维术语：

吃一堑长一智出了问题并不可怕，怕的是我们从问题中学不到什么，怕的是类似的问题重现，提高问题定位的效率，有哪些值得去做，比如：、建立长效错误码机制，使用具统计、可视意义的数字来简短描述错误含义和范畴，正所谓浓缩就是精华，这一点在错误码屡试不爽。、正常程序中打错误日志主要是为了更好地排查问题和解决问题，提供重要线索和指导。但是在实际中打的错误日志内容和格式变化多样，错误提示上可能残缺不全、没有相关背景、不明其义，使得排查解决问题成为非常不方便或者耗时的操作。而实际上只要开发稍加用心，也需就会减少排查问题的很多无用功。如何编写有效的错误日志，建立日志标准，也是非常有利于问题分析的。、定位问题避免二次损害，当某个看似难以捉摸的难题出现时，本能可能是重启，尽快让系统恢复正常。虽然这样的方式经常能够解决问题而且起效神速，但同时也很可能把情况推向令人难以置信的恶化深渊。问题排查手段包括重新启动不稳定系统、尝试自动记录数据库、文件系统修复等等，这些方式往往确实能搞定难题并让系统重回生产轨道，但同时也没准导致数据恢复努力付之东流，毁掉确定问题根本原因的机会甚至大大延长关键性系统的停机时间。保留现场也非常重要，跟破案现场要要求现场勘察、样本采集、排查、锁定如出一辙，对于难以重现问题，尽量创造条件保留了可以用于故障重现的数据或现场。线上环境复杂多变，虽然这一点并不能马上解决问题起到直接作用，但坚持这种处理思路，为开发和测试创造条件，降低因难以重现的疑难故障的挂起率，最终有助于业务的长期稳定。、建立集中的数据可视平台，不至于遇到问题才开始着手分析，若是对业务没有足够的了解又没有数据依赖，就很可能在解决问题时雪上加霜。、建立沙箱影子系统，模拟复杂多变的现网环境，规避线上影响，重现或压测问题，如、等。、搭建开源的日志可视方案，协助我们去解决最后”一公里”的问题，常见如、等。、善其事必先利其器，常见系统排查工具、、、、、、、，、、等。
结语
运维专家或许是每个运维人追寻的梦想，他们敏锐的嗅觉似乎总能揪出系统故障的根本原因。这种快速反应、准确定位的能力源自多年来处理复杂系统难题的经验积累与个人知识储备，而且其成功很难被复制。虽然没有哪家机构愿意为其颁发认证资质，尽管如此，这仍然是大家所乐于追寻的一种“超自然”的本领。最后，总结了下这几年处理问题的一些思路和经验，如下几行“打油诗”，送给大家，欢迎感兴趣的同事交流指正！
收集信息，随时记录协调资源，把控影响冷静判断，沉着分析大胆假设，谨慎尝试积极总结，以备后用参考文献
李航，统计学习方法一、改造背景
业务运营中经常碰到劫持问题，许多网站选择支持以应对。像百度、淘宝、均已支持，而微信、也在推广，正在成为一种趋势。
年月份我们启动了腾讯视频站的改造，由于历史原因，站改造涉及了多个域名、多个静态资源域名；而牵扯的人员也十分广，视频相关的很多前端后台开发、运维运营以及、、企业部等相关同学均参与其中。
二、改造范围
据不完全统计，用到了多个域名，而且流媒体业务使用的是调度，全站改造的成本非常高且时间不可控，所以我们第一期只针对播放页、首页、搜索页、列表页等核心功能进行改造。这些功能覆盖绝大部分用户使用场景，整体占比约。
三、改造效果
目前，视频站的播放页、首页、搜索页入口均已切换完成，防劫持效果比较明显，但性能损耗不明显，整体表现符合预期。
劫持数量：
防劫持效果比较明显，劫持数量从灰度前的约天降至约天截止年月：约天

页面测速：
和的耗时区别不大，性能损耗不明显
站整页耗时分布图测速：、耗时分布区间基本相同

站整页耗时趋势图测速：、的耗时区别不大

测试耗时图：
多次抽样测试发现首次加载时间比还低

测试结果：
__
__
四、改造内容

解决性能问题
虽然让信息传输变得更加安全，但同时会带来巨大的性能损耗，使得用户体验变得比较差，这也是一直制约着普及的重要原因之一。我们主要从优化单个连接性能、减少连接数量两方面进行优化。
优化单个连接性能
比较极端情况下的请求如图所示：有的访问可能还会多一个步骤②

相对于来说，很可能会额外增加②到⑧的开销。而其中完全握手阶段的性能消耗占整体性能消耗的以上，所以这块也是需要重点优化的地方，我们使用的是提供的优化方案。

会话复用策略

会话复用策略通过对已经建立会话的合理复用，不需要进行非对称密钥交换计算减少了消耗，同时不需要进行完全握手阶段二⑧，节省一个和计算耗时，可大幅提高服务器的性能。
对于和两种会话复用机制均支持，默认使用的是。占用服务器资源很少，支持多机间分布式缓存；但需要服务器和客户端都支持。

远程解密硬件加速

协议中最消耗计算资源的就是非对称密钥交换的计算，通过对源码进行改造，将最消耗的加解密计算过程剥离出来，避免在本地上进行同步计算，而使用远程硬件加速集群进行异步计算。整个过程是异步的，上层应用程序不需要等待计算结果的返回就能接收其他请求。这也是用于大规模接入的杀手锏解决方案之一。


、等其他优化暂未实施

除了这些性能提升明显的核心优化，我们后续也将考虑、等优化。
跳转：
基于快速回退考虑，我们目前是在服务器端做跳转，跳转到。但这个跳转存在两个问题：使用不安全的协议进行通信并且增加一个。
而是的缩写，服务器端配置支持后，会在给浏览器返回的中携带字段，浏览器在获取到该信息后，在接下来的一段时间内，对该网站的所有访问，浏览器都将请求在内部做跳转到，而无需任何网络过程。
：
在通信过程时，浏览器会去验证服务器端下发的证书链是否已经被撤销。验证的方法有两种：和。是对缺陷的弥补，服务器可事先模拟浏览器对证书链进行验证，并将带有机构签名的响应保存到本地，然后在握手阶段，将响应和证书链一起下发给浏览器，省去浏览器的在线验证过程。
减少连接数量
除了使单个连接变得更快，请求数量方面也是不错的优化点。

链路复用

是基于开发的下一代协议。传输在增加握手、加解密开销时延后，采用了二进制分帧层、请求优先级、链路复用、服务器推送、首部压缩等技术来提升的性能。
其中链路复用的方式能将多个请求在同一个连接上一起发出去，对通信效率提升明显。链路复用配合域名收敛效果更加，理论上域名收敛越好，链路复用性能提升越明显。使用需要特别注意头部信息的变化，的头部使用小写字母键值对的方式，和区别还是比较大。
我们目前接入的域名基本都开启了，后续也会对的静态业务开启。、静态资源有进行域名收敛，不过力度还不大，这也是我们后续性能优化的重点。
浏览器对的兼容性：=



请求合并

对于素材、文件，文件比较小但是请求的数量很多，通过的请求合并功能，前端同学将多个素材资源请求合并成单个请求，可以有效的减少页面中的请求数量。

模块化接入管理
由于涉及改造的域名众多，牵扯的业务范围、人员很广，为避免各个域名改造规范不统一，同时保障改造进度，我们将域名按业务功能进行分类，通过对其中的一个搜索功能模块进行规范化改造，然后复制到其他模块，进而推动多个模块同时进行规范化改造。
接入平台：新业务接入或者
证书策略：通配符域名证书各个模块的多域名证书

之所以使用通配符域名多域名证书的管理方式，是因为全部加入通配符证书中维护成本很高，而且新增域名时可能会影响到其他域名，证书拆分可以同时兼顾了域名申请的时间、费用成本且可以缩小证书变更对业务的影响范围。
通配符证书可以匹配的域名包括、、。通配符证书可覆盖核心功能改造中的多个域名。新申请的腾讯视频业务域名需使用通配符证书。
监控排错
目前的监控主要包括页面测速、域名失败率性能监控，以及的证书监控。

证书监控
目前依赖于、的证书监控，由于该监控只针对其平台的机器，如果业务混合部署在、、甚至自有的机器上，则可能存在监控覆盖不全的情况，因此我们也在规划基于域名的证书一致性、过期监控。

页面测速监控


前端开发同学在页面中设置监控点，将数据上报到平台
的数据上报共包括个点：

耗时对应的首屏：

请求耗时对应的整页：

返回内容下载耗时对应的：

首屏加载耗时对应的：从建立连接开始到浏览器渲染好首屏播放器视频标题

整页耗时对应的：从建立连接开始到播放器抛出



效果如下图：


域名错误率性能监控

前端开发同学将调用各个接口的返回信息抽样上报到数据平台。的数据上报属性如下：

数据经过处理后的部分彩虹报表监控视图如下：


注：原始的报表可能不符合业务需求，此监控报表是将原始数据处理入库后，使用彩虹报表重新开发

啄木鸟定位工具

啄木鸟工具是我们基于华佗定制化的一个故障定位工具。主要为业务提供一套简单、高效的协议类服务异常问题的分析和诊断方案，这些解决方案包括服务异常情况下的网络连接、请求调度、服务端会话日志信息收集等问题，从而协助业务快速缩小问题范围，协助排查业务问题。

结语：经过大半年的改造，的核心功能已经基本支持了，我们终究还是踏出了这一小步，但我们离全站的路还很长。值得欣慰的是也并非传说中的那么笨重，通过适当优化，它也一样可以变得很轻快。作者|陈磊编辑|京露

陈磊，腾讯社交平台部后台开发，高级工程师。参与过朋友网、手机空间、微群组、企鹅等产品的开发，对大型服务器架构设计、音频、直播、图片领域有研究和工程经验。

背景
推出了一个新的编码算法，用于编码格式，官方称比之前可以缩小的量。此算法只是改了的编码算法，并没有改解码算法，编出的通用目前的解码器。考虑相对弱的兼容性和慢解码速度，值得考虑的方案。本文将通过比较的压缩率、压缩延时、压缩资源、解压性能，评估可用性。
原理
基于同样来源于的一个图片视觉差异评价工具。的评价体系基于三个传统方法没有考虑的原则：

人眼对强黄色光附近蓝光变化是不敏感的，因此黄光区域附近的蓝光可以用更少的来编码

人眼对蓝光有着较低的空间分辨率，视网膜中用于分辨高清细节的区域没有蓝色光的受体，故高频区域的蓝色光部分可以用更粗的粒度编码。

将图像中的噪声区域分辨出来进行粗粒度的编码。


基于这三点，主要从两方面下手来进行：

对全局量化表进行微调，这一步和我们调整质量参数本质上是一样的

对系数的高频部分进行有选择的丢弃


第二步就比较了。我们通常调整质量参数本质上就是有选择的丢弃高频信息。在这一步就相当于替我们降低了质量而不告诉用户，让用户以为仍然保持了质量。总的流程就是尝试多种两个方面的可能性，然后分别放到评测工具中评分，最后选择一张它认为最好的结果返回给用户。所以它的处理时延特别长。
此原理描述摘自文章《：谷歌家的东西可能也没有想像的辣么美》
压缩率
压缩率：描述压缩文件的效果名，是文件压缩后的大小与压缩前的大小之比
质量系数：图片压缩级别，质量系数表示最低图像质量和最高的压缩，质量系数表示最佳的图片质量和最低效的压缩。下图是、、不同质量系数下的压缩率，可以看出：

整体压缩效果：

比优，比优左右

在高质量系数下，压缩率表现更好



图片肉眼观察质量
对于相同质量系数压缩的图片，各算法肉眼是看不出区别

压缩延时
模型：这里假设业务需要转档图，这里压缩延时计算模型是一张图片转换成业务需要的五档图的总延时
数据：下面的表是测试后的平均值，每个数据都是五档图加起来的总延时

可以看出：算法的压缩延时远远高于，前者到分钟，后者不到秒。也就是说业务用算法，单个节目或者专辑的图片转五档图，不算任务排队时间，转码就需要分钟。
的同学最近用算法跑了一个不同大小图片，范围是到，转换成图表如下：横坐标是图片大小，纵坐标是耗时
此原理描述摘自文章：《谷歌开源图片压缩算法实测体验报告》

分析得出：

转码耗时整体随着图片大小增长

有些异常数据点，是图片相对小的图片有比较大的像素，这个算法严格的说是耗时和像素大小相关，而不是文件大小


后台压缩资源评估

：执行一个进程可以把单核跑满

内存：是个内存消耗性的的算法，占用内存随着像素增加而增加，具体测试数据如下：



比如：处理个的图片，尺寸，占用内存，内存的机器只能同时处理不到张；库里的图片在左右，也要左右内存。
假设业务每天的图片入库量，上面的数据看到单核处理一个图片均值，也就是一小时处理个图片，核处理个图片，个小时可以消化一天的量。对于延时要求不高的运营图片上架场景，是满足的，也可以增加逻辑提高指定图片的优先级。
客户端下载、解码耗时
用户查看图片经过客户端下载和解码两个阶段：

下载延时依赖网络环境、文件大小

解码延时依赖解码算法、机器性能

同一档图，不同算法，总延时优劣比较方法：


设带宽用户网络带宽为，算法压缩的文件大小与压缩后的文件之差为，解压延时与解压延时之差
与的优劣公式：整体耗时差=，整体耗时差大于表示更优，整体耗时差小于表示更优
以上算法需要线上大量数据测出个均衡值，可以考虑根据带宽和文件大小动态选择。
看一下真实测试的效果

输入：相同的图片源，转换成五档不同的大小

机型：选核、核、单核三种机型，选择、、

下面第一张表是不同机型的解码耗时；第二张表是两个平台不同网络条件的下载耗时、解码耗时、总耗时




数据由，两位同学提供
分析出：

解压性能：

解压性能与机器性能成正相关关系

整体耗时上，和接近，从此数据看更胜一筹，两者比优势明显

在网络环境越来越好的情况下，整体性能表现会越来越好


兼容性
只能编码编码的图片，不能直接编码格式需要做先做一步转换
综合评估

对于与的比较，视觉质量上无区别，压缩率上有明显优势；编码延时上，对资源要求高，对图片上线延时要求不高的可以接受。

对于与的比较，视觉质量上无区别，从目前的测试数据来看，整体优一些，但是优势不是特别明显，网络环境越好，表现的越好。

对于的在上传延时要求不高的场景，都适合直接用替换


算法刚提出不久，还需要更多的数据支持和验证，如果有问题，请各位指正，谢谢！

相关推荐
动态库压缩壳的实现关于图片资源瘦身的奇思妙想目前张戈博客同时使用了腾讯云、以及七牛，其中腾讯云负责电信线路流量，负责默认线路流量，而七牛主要是用于缩略图展示，你觉得这样使用有什么好处呢？

一、兵分三路
本来博客自身就有缩略图功能，不过腾讯云缓存后，这个带参数的缩略图经常出等问题，所以只好弃用。腾讯云负责电信线路的原因只有一个：安全认证也就是聊天的绿色钩钩，这里简单分享下吧。
不使用腾讯云的主机也能获取安全认证的方法：
很简单，使用腾讯云即可，道理也挺简单，安全认证它检测的就是你的网站是否解析到了腾讯服务器，而且只检测电信线路！如果是腾讯的服务器，那么就可以通过安全认证申请，而且是不定期检查，如果发现解析到了别家的，认证就会被取消。
申请认证地址：

所以，为了安全认证，我还是将电信线路解析到了腾讯云。当然，好处还是很明显的：家都有免费流量其中七牛邀请朋友注册还送了，加起来就是流量，相信绝大部分博客是够用了吧？
好了，扯得有点远了，回归正题。
二、部署代码
同时使用个，其中和腾讯云的主要是负责主站缓存，也就是页面。相当于套了一次百度云加速一样。再设定下缓存时间，比如天，那么文章或评论有更新就得天后才能刷新了。
偶然了解了腾讯云的，发现其实腾讯云提供了非常丰富的接口，其中就包含了清理缓存，感觉这个不错，于是就花时间折腾了下。
在腾讯云开发大牛廖大师的指点下，成功搞定了发布文章或评论刷新腾讯云缓存，下面开始分享。
完整的代码如下：

发布更新文章、提交审核评论自动清理腾讯云缓存首页和当前文章张戈博客
文章地址：
转载请保留出处，谢谢合作！


需要填写你的密钥，访问获取及
=此处填写_
=此处填写_

更新或发布文章清理本文和首页缓存
____

提交评论更新本文缓存
____

评论被审核更新本文缓存
______

发布文章更新缓存函数
___{

=__
=
要清理的页面，默认包含首页和文章页面，需要清理其他页面请自行发挥
_=
=_
=

=
除非有特殊说明，如，其它接口都支持及
=
是否协议，大部分接口都必须为，只有少部分接口除外如
=
下面这五个参数为所有接口的公共参数；对于某些接口没有地域概念，则不用传递如
_=
=
=
=
=


__
}

提交评论清理文章函数
___
{

=__
=___
=
参数
_=
=

=
除非有特殊说明，如，其它接口都支持及
=
是否协议，大部分接口都必须为，只有少部分接口除外如
=
下面这五个参数为所有接口的公共参数；对于某些接口没有地域概念，则不用传递如
_=
=
=
=
=


__
}

评论被审核清理缓存函数
__
{

=___
=
参数
_=
=

=
除非有特殊说明，如，其它接口都支持及
=
是否协议，大部分接口都必须为，只有少部分接口除外如
=
下面这五个参数为所有接口的公共参数；对于某些接口没有地域概念，则不用传递如
_=
=
=
=
=


__
}

请求主函数，无需改动
__
{
=
对请求参数按参数名做字典序升序排列，注意此排序区分大小写
=___

生成签名原文
将请求方法地址及排序好的请求参数按照下面格式拼接在一起生成签名原文，此请求中的原文为
===
=·=
==

=
=
=
{

{
=
}
=
拼接签名原文时，如果参数名称中携带_，需要替换成
_
{
=__
}
==
}
根据签名原文字符串，生成签名
=__
拼接请求串对于请求参数及签名，需要进行编码
==
=
{
==
}
发送请求
===
{
===
{
=
}

{
=
}
=__
}

{
===
{
=
}

{
=
}
}
__
_
}

{
=_
__
__
__
__
__
==={
___
___
}
=_

先访问腾讯云的密钥创建或获取你在腾讯云的密钥：

然后正确替换上述代码中的，行的和值，比如：
需要填写你的密钥，访问获取及
=
=
三、其他啰嗦
部署后，博客发布或更新文章、评论的提交或审核都会调用去清理缓存，其中文章和评论的提交可能会比没有部署略微卡一点，评论的审核是异步提交，所以感知不到什么。
最终，我百度了一把异步，将以上代码中的_请求改造了伪异步，将时间缩短到秒因为_的值最小是秒相关文章，所以挂上这个函数也就是略卡秒而已，完全可以接受！
好了，本文分享到此告一段落，正在使用腾讯云或打算做腾讯云安全认证将要使用腾讯云的朋友可以尝试下，非常方便！
相关推荐腾讯云存储与免费体验腾讯杰出科学家贾佳亚

今年月底，很多人的朋友圈被一组军装照刷了屏。
刷屏的军装照由互动《快看呐！这是我的军装照》生成，其个性换妆由腾讯天天图人脸融合技术和腾讯优图实验室人脸识别技术共同提供技术支持。优图实验室为腾讯旗下专注计算机视觉方向的人工智能研究团队，他们的研究成果已经通过许多类似“军装照”的产品被海量用户体验过。
有趣的体验背后离不开研究、开发人员的努力工作，最近，腾讯优图实验室交出了一份最新的成绩单：年会议即将在意大利威尼斯举行，优图实验室有篇论文入围。
今年月日加入腾讯的香港中文大学终身教授贾佳亚博士，如今在优图实验室任杰出科学家，拥有学术界的丰富经历和经验，贾佳亚成为链接团队与学术界，为团队在基础研究与应用研究中寻找连接和落脚点的关键人物。
在奔赴威尼斯参加前，贾佳亚接受深网专访，对优图实验室此次入围的论文以及实验室的基本情况进行了介绍。
的背后
篇论文入选，普通人可能并不容易理解这个数字的意义。
在人工智能时代，国际顶级学术会议的论文入选已经成为评价一个团队技术、研究实力的重要参考。
作为计算机视觉方向的三大顶级会议之一，，即国际计算机视觉大会，由主办集中展示着全球计算机视觉研究的最前沿，代表着当下计算机视觉研究的最高水平，重要程度不言而喻。
本次共收到篇论文投稿，篇被选为大会论文。其中，口头报告共有篇，亮点报告共有篇。优图实验室此次有篇论文入选为大会论文，其中口头报告篇该类论文仅占总投稿数的，亮点报告篇。这是一个不错的成绩。
优图实验室的研究与惯常中对学术研究的印象不太相同。
在一篇题为《美化人像的盲复原》的论文中，团队成员提出了一种新的深度网络结构、成分回归网络，对美化图像进行盲复原。该网络可以在不知道美化系统具体参数的情况下，更好地将美化后的图像映射为原始图像。实验表明，该网络在不同尺度上均可以得到较高的还原度。
复杂的原理实现的结果并不难理解这一研究即为美颜图片进行“卸妆”，听上去显然并不十分严肃，但这篇论文不仅入选了，还被选为大会报告。
计算机视觉具有自身的特殊性：应用性强。在贾佳亚看来，计算机视觉研究主要是在做结果，“如果结果好，那么这个研究至少已经赢了一半上，此外，研究有足够多的创新性、新的架构以及有对新问题的理解，都可以发表论文。”
这正是“卸妆”研究为何能成为报告之一的原因。
贾佳亚介绍，此次优图实验室入选的篇论文，要么是研究方向本身独一无二，要么是现有结果大幅领先了已有算法，达到了更好的高度，能够对实用化产生促进作用。
除了类似“卸妆”的应用类研究，论文《高质量的手机双摄图像匹配和分割估计》两个摄像头怎么样把信息融合起来，使得产生的效果比一个摄像头看起来更好基于实验室的自采数据则是提供了绝无仅有的研究结果，这些论文都具有很高的理论及应用价值。
“我们这十几篇论文里有智能卸妆、超分辨率、双摄的融合、滤镜的还原、智能的图像缩放等，都是有极大前景的应用，它们在创造了新应用的同时，又改进了现有的算法，为后续研究提供了更多经验。”
应用研究为重
由于论文发表的周期性，此次入选的论文已经不能完全反映优图实验室当前的研究方向。
贾佳亚介绍，入选的篇论文是从今年年初开始操作的，当时偏重比较基础的、新颖的或者相对较长期的研究。但是结合腾讯的优势和需求，优图实验室的定位将更偏重应用。
“如何在像腾讯这样的大平台上做出一些有趣的应用，是我们研究上比较看重的东西，所以实验室大部分以应用研究为主。”
目前，计算机视觉方向有三大仍待攻克的难题。
一是模型复杂、不统一，随着图像数据量的加大，模型会越来越复杂，对于每一个问题都要分开考虑，是否有一个模型能解决所有问题，是仍需要探索的。二是由于模型复杂，很多问题在手机端实现就更不容易，由于手机的芯片、计算模块不一样，即使是同一个模型在手机端的实现也会遇到很多挑战，因此，很多学术界做出的东西在产品实现上会碰到壁垒，如何在前端实现功能，需要工业界去尝试。第三，也是最难攻克的技术难题是，很多垂直领域需要深耕。
优图实验室的研究即是围绕三大难题展开。贾佳亚介绍，实验室首先肯定要对很多垂直领域深耕，目前除了人脸识别，还在研究人脸操作。
值得注意的是，优图实验室希望建立起最适合工业界的研究法则，是既不同于既往工业界的操作，也与学术界的规则不完全等同。
贾佳亚介绍，在过去，国内工业界很多时候只是参考学术界的一篇论文，然后让团队去重现，但是优图实验室希望做到的是每一个产品能够输出一个结果，能够创建模型。
“从早期研究开始都是由我们实现，整个专利在我们手里。”
但同时，贾佳亚也希望优图实验室不但可以专注于偏模型、理论且长期性问题的学术研究，而且希望基于腾讯这个大平台，团队能够做出更多有实际应用价值的成果。
可以将贾佳亚对优图实验室的定位理解为一个桥梁：将学术界的研究成果与应用实现连接起来。
在贾佳亚的设想中，优图实验室的产出是一个完整链条：“实现从早期的研究到专利的发布、专利的获取，到整个内容的发布、产品的运作都是一条龙的运作方式。我们希望以后优图开发的东西，绝大部分的原创性都是非常之高，这可能是这几年之间会发生的相当大的突破。通过论文这种简单的标识可以看得到，变化已经发生了。”
在探索中前行
对于优图实验室的发展路径设想已经成熟，要实现却并不容易。
与国外工业界不同，国内互联网企业过往大多没有建立成熟的研究体系，但随着人工智能时代的到来，工业界必须在基础研究上做更多投入，而国内工业界的特殊性又要求研发团队必须能够在一定时间内有成果产出，这其中存在着难以调和的矛盾。
如何在长期投入与短期回报间寻求平衡，是贾佳亚正在努力探索解决的问题。
构建好团队是实现设想的第一步。
加入优图实验室后，贾佳亚在构建团队上花了很多精力，他希望打造出“三一流”一流的团队、一流的研究、一流的产品化能力。
“一流的团队就是希望各个领域的精英加入，团队的每个人是一流的，研发人员有好的研究成果发表在、等国际学术会议上，开发人员能够保证编程的效率和可用性。我们是木匠，技术是锤子，锤子靠研究搭建，我们把学术界的东西拿过来再重新重现，在学术界还没有人去做这个事情的时候，我们就开始研究它，得到一整套的研究方法，这是一流的研究。一流的产品化能力就是指研究完的输出。”
除了团队外，在团队的工作方式上，贾佳亚希望学习谷歌的二八法则：员工的时间用来做公司当前的业务，另有的时间用来研究和探索自己感兴趣的更为天马行空的事情。
“我希望在优图团队能够引入这个经验，我给很多同事的时间做一些时间紧急的研究需求，他们会去进行研究。但是我们有的时间，希望他们能够多想一想，接下来几个月，或者是半年到一年时间，他觉得他有没有兴趣把某一个问题去做好。”
在更为基础、前瞻性以及冒险性的研究上，优图实验室通过与高校合作来进行。
此次入选的篇论文中，有篇是由优图与其他研究机构合作完成，对此，贾佳亚表示，这种情况的出现正是基于以上考虑：希望团队在全力以赴完成技术研发及应用落地的同时，也能与高校及合作机构等尝试更多冒险性的研究。“团队想做一个探索，我们与合作方共同研究、交流并验证。”
综合短期、中长期目标，整体调配团队的资源投入，这是目前贾佳亚为团队寻求的运作方式：“短期内要花很多力气去做好，但是从中长期考虑，我们并不放弃，希望团队能够不断地有前瞻性，在学术界里面比较前沿的东西我们依然着手来做，这可能是我们比较好的平衡。”
对于优图实验室接下来的关注重点，贾佳亚介绍，基于自学习或半监督、弱监督的学习方式，在小数据量或无数据量、无标注数据的情况下，能不能实现机器自动去学习自然世界的问题，通过图像或者视频分析有可能发生的事情，将是团队关注的新方向。
贾佳亚不吝于分享他对优图实验室未来的期望：优图会成为一个很大的视觉人工智能拥有者，同时是一个创新者、领导者。
“这是我们一直在做的事情。”

来源：腾讯科技韩依民感谢您阅读腾讯首篇文章，我们将在文章第一部分介绍即将开幕的、和等顶级学术会议，及它们收录的腾讯多篇论文，并选取其中一篇重点解读。第二部分是公众号内容简介及文章预告，我们将在之后发布的三篇文章里对前述三大顶会的热门研究方向和优秀文章做深度解析。

、

国际计算机视觉与模式识别会议月日日|美国夏威夷

是近十年来计算机视觉领域全球最有影响力、内容最全面的顶级学术会议，由全球最大的非营利性专业技术学会电气和电子工程师协会主办。谷歌学术指标按论文引用率排名，位列计算机视觉领域榜首。今年审核了篇文章，最终收录篇，录取率，口头报告录取率仅。
腾讯计算机视觉总监刘威博士介绍到，「的口头报告一般是当年最前沿的研究课题，在学界和工业界都影响很大，每年都集齐如斯坦福大学和谷歌等全球最知名高校和科技公司。」
腾讯六篇论文入选
论文一：本文用深度前向卷积神经网络探索视频艺术风格的快速迁移，提出了一种全新两帧协同训练机制，能保持视频时域一致性并消除闪烁跳动瑕疵，确保视频风格迁移实时、高质、高效完成。

此论文后附详细解析

论文二：论文首次提出一种全尺寸、无标注、基于病理图片的病人生存有效预测方法，在肺癌和脑癌两类癌症的三个不同数据库上性能均超出基于小块图像方法，有力支持大数据时代的精准个性化医疗。
论文三：针对图像描述生成任务，基于卷积网络的多层特征来动态生成文本描述，进而建模文本生成过程中空间及通道上的注意力模型。
论文四：本文提出依靠检测器自身不断改进训练样本质量，不断增强检测器性能的一种全新方法，破解弱监督目标检测问题中训练样本质量低的瓶颈。
论文五：本文提出了一种新的自动图像标注目标，即用少量多样性标签表达尽量多的图像信息，该目标充分利用标签之间的语义关系，使得自动标注结果与人类标注更加接近。
论文六：基于曼哈顿结构与对称信息，文中提出了单张图像三维重建及多张图像三维重建的新方法。
重点论文解析
选中的六篇文章，我们将重点解析《视频的实时神经风格迁移》这篇颇具创新的文章。
在过去很长一段时间内，业界流行的图像滤镜通常只是对全局颜色属性的调整，比如亮度、色相、饱和度等。在年的，等人首创性地提出将深度神经网络应用于图像的艺术风格迁移，使得输入图像能够模仿如梵高的星空、莫奈的日出印象等任何类型的艺术风格，效果惊艳。
等人工作虽然取得了非常好的效果，但是缺点是基于优化，非常耗时；到时，等人提出了使用深度前向神经网络替代优化过程，实现了实时的图像风格迁移，修图工具随之风靡一时。但直接将图像风格迁移的方法应用到视频上，却会使得原本连贯的视频内容在不同帧中转化为不一致的风格，造成视频的闪烁跳动，严重影响观感体验。为了解决闪烁问题，等人加入了对时域一致性的考虑，提出了一种基于优化的视频艺术滤镜方法，但速度极慢远远达不到实时。

腾讯科学家使用深度前向卷积神经网络，探索视频艺术风格快速迁移的可能，提出了一种全新的两帧协同训练机制，保持了视频时域一致性，消除了闪烁跳动瑕疵，同时保证视频风格迁移能够实时完成，兼顾了视频风格转换的高质量与高效率。
视频艺术滤镜模型如下图所示。通过损失网络计算连续两个输入视频帧之间的损失来训练风格变换网络。其中空间损失同时描述了图像的内容损失以及风格损失；时间损失描述了两个风格变换后的视频帧之间的时间一致性。


文章相关论文

、

国际计算机语言协会年会月日月日｜加拿大温哥华



腾讯副主任语音识别和深度学习专家俞栋博士

是计算语言学里最重要的国际会议，今年是第届。会议涵盖生物医学、认知建模与心理语言学、交互式对话系统、机器翻译等各个领域，今年有篇长论文、篇短论文、个软件演示及篇主题演讲。在谷歌学术指标按论文引用率排名，是计算机语言学和自然语言处理领域最高级别国际学术年会。
腾讯副主任俞栋认为，「自然语言的理解、表达、生成和转换一直是自然语言处理的核心问题。近年来有很多新的解决思路和方法。今年的涉及自然语言处理的各方面，尤其在语义解析、语义角色标注、基于语义和语法的自然语言生成、机器翻译和问答系统方向上都有一些有趣的工作。」
腾讯主任张潼介绍到，「早期利用语法和规则分析自然语言，年代后，随着以为代表的自然语言数据集建立扩充，统计自然语言方法在计算语言学里作用越来越大并成为主流。年后随着互联网高速发展及以自然语言为核心的人机交互方式兴起，自然语言研究被赋予极高应用价值。」
腾讯三篇文章入选
论文一：本文提出将句法树转化为句法标签序列的轻量级方法，有效将源端句法信息引入神经网络翻译系统，被证实能显著提高翻译效果。
论文二：本文引入一个额外组块神经网络层，从组块到词的层次生成译文，帮助实现神经网络翻译系统短语级别的建模，实验表明该方法在多种语言上都能显著提高翻译效果。

本文作者亦致谢前任职机构

论文三：文章提出了一种能有效表达文本长距离关系的复杂度词粒度。本文研究了如何加深词粒度对文本进行全局表达，并找到了一种简单网络结构，通过增加网络深度提升准确度，但不过多增加计算量。实验表明层的在六个情感和主题分类任务上达到了目前最佳结果。
、

国际机器学习大会月日日｜澳大利亚悉尼



腾讯主任机器学习和大数据专家张潼博士

机器学习是人工智能的核心技术，而是机器学习最重要的两个会议之一另一个是。源于年在卡内基梅隆大学举办的机器学习研讨会，现由国际机器学习学会主办。谷歌学术指标以「机器学习」关键词排名，位列第一。
腾讯主任张潼博士介绍到，「很多经典论文和算法，如，都是在上首次提出的，这个会议涉及机器学习相关的所有研究，包括近年非常热门的深度学习、优化算法、统计模型和图模型等。在早期，更注重实验和应用，而更注重模型和算法，但近年来两个会议有些趋同。」
腾讯四篇文章入选
论文一：本文提出了第一个能在模型训练开始前，同时检测和去除稀疏支持向量机中不活跃样本和特征的筛选算法，并从理论和实验中证明其能不损失任何精度地把模型训练效率提升数个量级。
论文二：本文提出了求解多块非光滑复合凸优化问题的算子分裂新算法，该算法采用迭代以及算子分裂的技巧处理不可分的非光滑正则项，并以实验证实了该算法的有效性。
论文三：本文提出了一个高维大数据中能更有效学习稀疏线性模型的分布式算法。在单个机器训练样本足够多时，该算法只需一轮通信就能学习出统计最优误差模型；即使单个机器样本不足，学习统计最优误差模型的通信代价只随机器数量对数曲线上升，而不依赖于其他条件数。
论文四：本文提出了去中心化的分布式在线条件梯度算法。该算法将条件梯度的免投影特性推广到分布式在线场景，解决了传统算法需要复杂的投影操作问题，能高效处理去中心化的流式数据。

此外，我们还受邀参加以下三个会议：月日日东京举办的国际计算机协会信息检索大会，入选论文篇。月日日墨尔本举办的国际人工智能联合会议，入选论文篇。及月日日哥本哈根举办的自然语言处理实证方法会议，入选论文篇。欢迎现场交流。

关于腾讯微信
腾讯于年四月成立，专注于机器学习、计算机视觉、语音识别和自然语言理解四个领域「基础研究」，及内容、游戏、社交和平台工具型四大「应用探索」，提升的决策、理解及创造力，向「」的愿景迈进。
腾讯主任及第一负责人是机器学习和大数据专家张潼博士详情可点链接，副主任及西雅图实验室负责人是语音识别及深度学习专家俞栋博士。目前团队有余位科学家及多位应用工程师。
一年多以来，我们主要通过行业会议及学术刊物分享研究成果。今天，我们正式入驻微信，聚焦中国前沿「思考」、实验室「动态」与学术产业「研究」三块内容，用专业严谨且平实易懂的语言，希望在更广范围内，连接不同层次的从业者，以开放、深入和持续的交流，共同构想未来。
机器与机器间的连接，能让已知信息随时随地共享。而人与人的连接，则让未知碰撞，产生更璀璨的智慧火光。让我们借此火光前行，共创「让无处不在」的未来。
下期内容预告
接下来发布的三篇文章中，我们将邀请参会的腾讯科学家，从、及现场发回第一手独家见闻，深度解析会议热门研究方向与优质文章。敬请关注！

文章来源：腾讯实验室轻听是一款小而美的本地音乐播放器，而它的特点之一就是拥有多彩的外衣，如下：

其中，左边张是白天模式下的几种不同主题色的样式，右边是夜间模式。
那么轻听是如何实现变色的呢？
主要是结合以下两种方式：

自定义和
动态配置主题色

自定义和
和主要用来实现白天模式和夜间模式。
一个是一系列属性的集合，用来指定或者的外观和格式。它可以指定的属性包括高度文字颜色，文字尺寸，背景颜色等等。
是在资源文件中定义的，比如：
==
=
=
=

在布局文件中是这样使用的：

=__
_=_
_=_
=
这样一个就可以运用在多个地方，既可以统一样式，又可以减少代码量。
而，其实就是一个，不同于我们上面提到对单一的应用，是应用于整个或的。各位开发同学一定不陌生，在的声明中就会经常看到。
=
这样，中的所有属性都会应用在整个中。
轻听这里，实现夜间模式分三步：

自定义
应用中的属性
设置

自定义
我们这里，就是写两个，然后各自有一套对应的颜色值。
简单介绍一下几个主要的颜色值：


主题色
辅助色或强调色
主要的文字颜色，一般的文字都是这个颜色
辅助的文字颜色，一般比的颜色弱一点，用于一些弱化的表示
的背景色

我们在资源文件中写对应的两套
==
=
=
=
=
=


==
=
=
=
=
=_

  细心的同学会发现，里的属性，有的前面会以“”开头，如，有的则没有，如。  以“”开头的属性，是系统的属性。而另一种属于自定义的属性，在资源文件中声明如下：
=_=
包括。在此就不赘述了，这是它们的一个相当灵活的使用方式。
应用中的属性
比如，是在包中定义的，属于自定义属性，在使用的时候，直接“”属性名就可以了。

=
系统属性要多加一个””是”“属性名。

=
这样，当指定了之后，就会去相应的下面取对应的颜色值，从而呈现出不同的色彩。
设置
在中设置是常见的方式。
=
不过为了实现模式的切换，我们是在的中进行的设置
{
{
_
}{
_
}
}
这样，通过给设置不同的，页面就能呈现出不同的颜色搭配。
问题
和的方式实现简单，非常适用于模式较为固定的场景，如白天模式和夜间模式。
但是，轻听在白天的模式的时候的基础之上还有几种不同的主题色。
简单聊一下主题色。
主题色，即，是根据品牌形象，为定义的一个主色调，一般应用于。
同时，有一个强调色，即，是用在或下划线等需要给人以提示作用的地方，起辅助的作用。
还有一个颜色是，就是比稍微深一些，主要用在状态栏。

比如上图中，“蓝色”就是主题色，“红”色就是强调色。
主题色和强调色的色值可以不一样，也可以一样。在一般的设计中都是不同的。在轻听的设计中，为了突出品牌色，将强调色跟主题色统一设计成了一个颜色，所以你会看到，到处都是“绿”色。

在强调色跟主题色统一的情况下，个主题色，套，似乎还可以接受。
但是，万一以后设计同学良心发现了呢？在套主题色的基础之上再出套强调色，那可就是个。如果以后的调色方式再更为灵活，如：

我数学不好，谁帮我算算，别忘了加上强调色还得再平方一下……
如果给每一个主题色都写一套，工作量会很大，而且不灵活。这个时候就玩不转了。
我们需要一种更为灵活的方案。
动态配置主题色
动态配置主题色是借鉴了开源控件。在中引入方式是
{
=
}
由于找不到这个项目维护的地址，所以我们自己进行了扩展和优化。
  

颜色配置
颜色处理器
遍历逻辑控制器

颜色配置
颜色配置主要负责存储颜色值。
因为这里存储数据较小，而且简单，所以用来存储，稍加封装就可以。
颜色处理器
颜色处理器主要负责对每一个的各种颜色进行设置。
首先，定义一个接口
{

}
方法就是来处理视图颜色的。
其中就是要传入的视图，这里使用泛型，在各个派生的中具体实现。
以下是几个主要的。

其中是默认，可以处理绝大部分的变色情况。其他几种，如他们的名字一样，会额外再处理他们特定的情况。
的处理方式分三步：

给设置
解析的
根据具体的进行颜色的设置

以为例。有一个，我们要使他的文字颜色为强调色。
首先，给设置一个，”__”。如果有多个，以逗号分隔。

=__

然后在方法中将解析出来
{
=={
=
{
=
=

={
=

}
}{

}

}
}
这里会根据分隔符逗号来对的数量进行解析，然后依次根据每个依次处理。
在处理方法中，会找到”__”相对应的处理逻辑
{

}
的作用就是从颜色配置模块中读取当前的强调色。
其他一些稍微复杂一点的情况，则可以使用相对应的去进行特殊的处理。
例如，。在滑动边界的时候会有一个边界反馈的效果，如下图：

这里需要特殊处理一下。中，负责两个边缘效果的是。


是一个对系统版本做兼容性处理的类，里面有真正的边缘效果模块
{

}
注意到，这两处都是私有的，所以我们必须通过两次反射来获取，然后更改颜色。
首先，通过反射获取的左右。
{
_={
{
=

=

=
={

}
=
={

}
}{

}
}
}
然后再获取真正的，并更改颜色。
{
_={
=

=
={

}
}
}
  这样边缘效果的颜色就修改好啦。
遍历逻辑
遍历逻辑控制器主要负责对整个页面的所有进行遍历，并进行颜色处理。
以下是遍历逻辑：

初始化
{
=








}
将各实例化后存入，为类名。
开始刷新的时机是，因为这个时候布局已经基本初始化完毕。我们会判断之前是否过，避免重复的进行处理。至于在此之后生成的布局，会单独对其进行一次刷新。
从流程图中可以看出，在处理之前，我们会单独处理几个特殊的布局。
是顶部状态栏，是底部导航栏，有时我们会希望让这两处也兼容主题色。
如果用到，也需要处理一下。不过的实现中，一般都是的，而用我们自己布局的来代替。
在有侧边栏的页面中，根布局一般都是，在侧边栏滑出的时候，可以设置的状态栏颜色。
找我们自己的根布局：
就是我们用设置的布局，它上面还有，，。
直接根据资源找？不现实，因为每个的资源基本都不一样的。
这里采取一种迂回的方式，先找到的父布局。
我们看的代码：

{

=



}
可以看到，实际上的资源是固定的：。
系统会先把的子视图清除，然后通过的方法将我们指定布局的视图解析出来并添加到中。
那么我们就可以根据先找到，进而找到
=
获取
根据的类名获取
=
={

}{
=

{
=
=={

}

=
}==

=={

}


}
从中获取对应的，如果找不到则根据父类的名字查找。找到之后就可以调用方法进行处理。
遍历
这里会从开始进行深度优先遍历，处理所有的视图。
有一些特殊的不需要遍历其子布局，例如，因为其自己的方法已经满足绝大部分的情况。
结语
以上，就是两种变色方案的具体实现。

自定义和实现简单，整洁，适用于模式较为固定的场景。
动态配置主题色实现起来略微复杂，但是比较灵活，适用于主题色较多的场景。

将这两种方案结合，就实现了轻听的变色。
大家轻拍，如果有好的方法或者建议，可以多多讨论交流优化～作者：张善友。连续年微软最有价值专家，深圳社区领袖
汇总国内外社区相关文章，覆盖和容器三个方面的内容：


链接：_
点评：平台上使用调试，要求版本以上，要求版本以上，只能通过源码编译安装。

链接：
点评：在开发和部署的一个讲座，有视频和，看看在上使用。

链接：
点评：在如何使用消息队列的一个教程，作者有一个系列的的文章。


链接：
点评：到底要不要支持，这里讨论非常的热烈，天不到已经有个讨论。我的答案当然是不要支持最好。本来就不应该委屈地去搞支持

链接：
点评：使用开发的系列教程，目前已经写了两篇，欢迎关注。
–
链接：
点评：前后端分离是大趋势，三大前端框架和，可以很好的集成前端框架，本文介绍认证授权怎么做的蓝图。

链接：
点评：使用实现的实现认证授权

链接：
点评：作者总结了那些应用应该升级到供参考

链接：
点评：在已有项目中添加和认证的指引教程。

链接：
点评：这是一个书《》的一章内容，还有一章是–’。作者：程绪超

导语
加入测试建模小组八个多月的时间，在日常的测试工作中，经常会有身边的小伙伴们对我们的建模很好奇，会问“什么是测试建模？”“为什么要测试建模？”“建模能给我们带来什么好处？”“建模和我们现在的测试设计区别到底在哪里？“等等诸如此类的问题。思来想去，实在有必要跟大家分享下自己对测试建模的一些想法，如有不正确的地方，欢迎指正。
一、为什么要测试建模？
抽象是认知事物的一种关键途径，是人类智慧的体现。比如，在立体几何中，三维坐标用于抽象世界空间；在地理学中，地图用于抽象生存空间交通路线标志性建筑其它；在生活中，身份证用于个人身份抽象身份证号照片；在软件工程中，类结构体用于目标的抽象等。可以说，抽象是为了用少量的特征或属性来给对象打标签，这些标签要具体、可度量，且识别性强等。抽象这个词大家都不陌生，那么建模是什么呢？我认为，建模是对目标进行的系统的、结构化的、多层次的和多视角的抽象。我们知道，软件测试是一个复杂冗长的工作。我们是否能够通过对待测试目标进行抽象和建模来指导我们的测试工作呢？下面我将从测试建模的必然性以及它的重要性两个方面来阐述我们为什么要测试建模。
测试建模的必然性
当前的软件测试它包括哪些方法呢？我觉得下面这张图承载的内容非常的立体丰富，基本涵盖了软件测试的主要方法。软件测试，它是一个系统工程。可以从单元测试到系统测试；可以从压力测试到功能测试；从黑盒测试到白盒测试等。随着软件容量的扩增和软件需求的变更，常用测试方法需要重新设计和增加测试用例，而一些特定用处的测试用例会变得越来越不重要，尤其是复杂系统的潜在问题会更加隐蔽，导致常用方法更加捉襟见肘了。
常用的软件测试方法
系统的规模越来越大，测试工作越来越复杂，工作量越来越繁重，如何减少测试过程的盲目性，提高测试过程的效率，基于模型的测试，应运而生。它具有科学性、系统性和指导性，为我们的思考、实践和测试工作指明了方向。
的特性
对于有测试工作经验的人而言，它能激发你的头脑风暴，锻炼你的思维方式，让你高屋建瓴，有理有据；对于初次接触测试的人而言，它能诱导你特异才华的展现，用一种不一样的视角来看待软件建模，给老司机们带来惊喜。可以说，测试建模能够挖掘出团队和个人的潜能，让大家能够多层次、多视角来认识和量化待测试目标，从而更加系统科学地指导软件测试工作。
测试建模的重要性
通过对系统的行为进行抽象和建模，能够处理好常用方法的困难之处。一项调研统计发现，能够额外检测出的，降低的测试费用并缩短的测试时间。它已经成为测试管理的一个重要参考依据。实际上，在设计测试用例之前，我们的头脑中已经有一些需要面对的测试场景以及一些大致的测试思路，也可能有功能清单或某种图表，或者会有谁是用户、用户关心什么等一些初步概念。然而更重要的是，我们如何将这些测试思路或内容形成条理清晰、系统全面、分工明确的软件测试文档和用例，以供测试评审和执行、分析和修复等。此外，软件测试涉及到的人，他们职能不同，视野高度不同，关注度不同，比如产品经理、开发人员、测试人员和终端用户等等，因此，它需要涉及产品各个维度的质量验证。
体现了团队和个人的专业素养、思维角度以及思考深度，能够增强我们的推理能力，同时识别潜在的风险。它正成为测试工程师的基本技能要求。需要指出的是，是为了更好的进行软件测试，而不是为了撰写尽量多的测试用例。下面，从主观人的角度和客观产品的角度角度来说明的重要性。
主观角度
测试建模有利于个人认识被测对象有利于个人更系统全面地认识被测系统。针对被测系统，我们一般需要明确“”规则的内容：测试目的，测试范围和内容，测试时间范围，测试方法和工具以及测试文档和软件的存放位置。在情况下，体现在被测系统的抽象建模和初步验证模型阶段，体现在可控地生成测试用例阶段。如果对测试目的有疑问，需要及时沟通以校正个人或补充团队对测试对象的认识；如果对测试方法和工具有疑问，那么自我学习和技术交流就变得比较重要。对被测系统的深入认识，是个人合理有效执行测试用例的前提，也是团队内和团队间进行高效沟通的第一步。
测试建模有利于团队合作和问题解决针对同一被测系统，团队内的我们由于能力和经验的差异可能出现认识水平上的不一致。这种不一致可能体现在内部组会讨论、测试任务分配以及上下级沟通等方面。然而，对被测系统进行多维度建模后，大家可以在指定的维度上进行有效沟通和讨论。
团队间的有效沟通在测试工作中非常重要，通常也非常困难。比如在软件开发过程中，的出现就将软件测试接口人员与对应的开发人员联系在一起。基于来梳理被测系统的内部逻辑和数据流情况，高效的跨角色、跨团队和跨时间交流变得可能。
以上两点也要求被测系统相关人员能够在关注本职工作之余，关注整体项目进展，从而了解本阶段的重点关注内容，提前作好准备工作，使得自己在遇到问题时候能够从容应对和团队合作。
客观角度
测试建模有利于系统高效的软件测试是被测系统的抽象模型，它可以根据需要和项目进展而动态更新，而测试用例则可以根据实际需要自动生成如。这就意味着，我们可以借助专业工具来设计和自动生成测试用例，而我们的工作重心可以放在
被测系统的多视角建模；
模型质量；
模型更新；
自动化测试；
风险评估；
以及个人能力提升。
这样，我们测试人员就可以变被动为主动，来关注项目进展和对应技能提升。
测试建模有利于客观合理地度量测试进度常用的软件测试度量方法包括缺陷度量、测试用例深度、测试执行效率和测试覆盖度等。这些度量方法能够检测到的缺陷是随着时间的推进才能逐步发现的，而检测到的可能是冰山一角。相对地，在建立被测系统模型后，能够通过代码覆盖率、规范覆盖率或其它度量方法来生成测试用例的数量，更加客观合理，也更加高效。
二、什么是测试建模
测试建模的概念
测试建模，我认为就是将测试思路或内容形成条理清晰、系统全面的模型而展开的测试。这里，需要对本文后面要论述的几个专业名次进行说明。
：，被测系统模型，也称类比模型。
：，测试准备模型，也称分析模型。
测试建模的方法
测试建模的方法从宏观上来看，主要分为建模和建模。从微观上来看又派生了很多的模型。在实际工作中，我们拿到被测系统后，会在脑海里进行瞬时画像建模，也就是构建了心智模型。而从心智模型过渡到测试用例，中间过程的不同决定了不同的测试设计，如图所示。
与其它测试设计的区别
路径一红色箭头：从心智模型直接得到测试用例，基于临时需求；
路径二黄色箭头：从心智模型得到模型，再由模型生成测试用例传统测试设计；
路径三蓝色箭头à紫色箭头：从心智模型到模型，再由模型生成测试用例教科书式；
路径四蓝色箭头：从心智模型到模型，再由模型到模型，最终由模型生成测试用例。
由上图所示，强调中间过程。特别说明的是，是一个循序渐进、逐步完善的过程，需要将被测系统的各个方面进行考虑，在发布周期之前形成完善的模型有利于整个产品的开发、测试和发布等工作，如图所示。
建模步骤
我们拿到被测需求后，首先会进行抽象建模；分析需求进行建模；初步模型验证；基于模型可控地生成测试用例；优化并生成可执行测试用例。根据用户关注重点的差异，第一步可以对被测系统进行功能建模，也可以进行用户使用环境建模；第四步可以针对一些模式或测试特异性来生成用例，也可以根据测试覆盖率等软件测试度量规则来生成测试用例。
模型
模型是心智模型对产品的理解、设想和体验的外化以及与现有模型的整合，是一种图形化或形式化的类比模型。它涉及到不同的层次如系统、组件和工作环境、不同视角如语境上下文、组件与结构、功能、行为和用户体验和不同关注点如数据类型、因果关联、程序结构、任务控制、动作、事件和接口等。
建模的语言及表示法
经过抽象、泛化和删减后，模型只保留有助于实现特定测试目的的特征。在生成可执行测试用例前，模型的实例化可能用到的技术如图包括，，，，和等。图里面的模型仅作为实例更多偏向局部，实际远不止这些，如语法测试，自然语言语义模型，此外还有从整体视角的和等等。
模型
模型是对模型的扩展和转化参考图，以使模型达到可测试的标准；该模型也可独立使用，即给出相关信息，我们就可以设计或使用一套测试设计算法，用来产生可以运行的测试用例。它根据模型特征和项目实际情况增加或凸显质量风险信息。必要时需要创建新的模型，这是测试建模的主要难点之一，但也体现了我们价值所在。另外，它转化模型以达到可测试标准，并增加“怎么测”的信息，同时为模型修改重构提供反馈。
由图可知，和模型有密切的关系，那么它们的侧重点有哪些区别呢？相对来说，层次更高，更温和，以描述被测对象为己任更抽象；而更接地气，更直接，以揭露风险为使命更具体。实践中，模型一般以发现的潜在风险为导向。与建模相比，缺少现成的系统的方法论指导，缺少可参考借鉴的方法，更倚重经验，却缺少经验积累探索式测试提供了一些思路。因此，建模是目前研究探索的一个重点。

描绘了测试对象体现测试策略，如测什么，测多少以及怎么测？
系统思维创造性思维
“面”等价类、平均值“点”边界值
构建为目的，重点关注可能产生质量风险的地方直接为“破坏”“攻击”服务，关注如何揭露质量问题
三、怎样展开测试建模
下面主要针对新手初次接触测试建模，该如何展开进行举例说明。
测试建模输入输出
在实际测试过程中，我们拿到的输入通常是需求说明书或是开发的实现代码等，经过测试人员的建模加工后，最终生成测试用例。针对需求分析从整体角度，我们往往会使用或模型进行全局系统化分析二者选其一，针对具体的模型含义可以参考相关的资料有详细的说明；针对局部分析我们会使用分析深入理解被测需求包括识别关键变量，基于的分析结果再进行具体的模型构建，如业务流程图、决策树等等；接着，结合关键变量进行风险分析，完善模型；最终将模型通过自动化或手工方式转换成用例。
由于篇幅所限，下面是我的一个小需求的实践，看官们重点看思路哈。
需求描述如下
需求理解
本次需求无代码权限，因此不涉及开发实现
本需求比较小，属于局部需求，因此无需使用全局模型。首先使用点要素进行需求理解。
依据需求特点进行建模
依据的分析，识别该需求的关键变量。
依据需求特点，该需求涉及多个属性变量间存在不同的关系，对应有不同的规则，因此主要采用决策树模型，辅助其它场景补充。
建模
转换建模

建模
模型转换用例
决策树转换程决策表即是所得用例，关于决策树转换决策表的方法本文不赘述。特别需要注意的是，经过分析存在较多的重复验证点，在转换过程中剔除重复验证点，如执行退出的。
上述过程是为了说明的过程以及美观，实际工作中无需工具绘图。
四、总结
也许最开始你总是在纠结测试建模和测试设计有什么区别，一旦你习惯性使用测试建模去进行测试分析时，你会发现你的测试工作会变得更加有条不紊，有理有据。这就是测试建模真正给你带来的帮助。它在潜移默化地让你用科学系统化的方法论去指导自己开展测试工作，让你的思维更加缜密而又细致。模型能够根据被测系统的改变而更新，还能够根据规则动态生成测试用例，尤其是它能够抽象出复杂的被测系统的结构和内在逻辑，给我们多层面多维度地呈现被测系统。将是未来软件测试的一个重要方向。
模型种类繁多，不在于它好或是不好，对或是不对，而在于合不合适，在于使用它的人如何去用。各个模型好比烹饪时的各种调料，想做出什么样的佳肴凭君搭配选择，当然也存在推荐，你可以选择接受或是拒绝，烹饪出来的佳肴只要是你想要的，目的就达到了。
本文主要阐述了测试建模的趋势，测试建模的概念以及测试建模的实践，鉴于水平有限，若有理解欠妥的地方，欢迎指正。

测试建模的精髓大家到了吗？你在测试工作中克服复杂需求是如何展开测试分析的呢？

原文链接：


相关推荐概览：可视化前端测试【腾讯】测试管理平台大比拼作者：译者：校对：

写博客是证明你的实力、深入学习和建立读者群的好方法。有许多数据科学和编程类博客帮助他们的作者找到工作，或者认识了重要人物。定期写博客是有抱负的程序员和数据科学家最应该做的事情之一。
不幸的是，写博客的一大障碍就是先搭建一个博客网站。在这篇文章中，我们将学习如何用创建一个博客网站，怎么用写文章和如何通过部署博客。读完这篇文章，你就可以使用你熟悉的方式，创建自己的数据科学博客了。
静态网站
基本上，一个静态网站就是一个全是文件的文件夹。我们可以搭建一个允许别人链接到这个文件夹并获取文件的服务器。这样做的好处是不需要数据库或者其他动态部分，可以很简单的部署在像之类的网站上。把你的博客做成静态网站是一个好主意，因为维护起来十分简单。建立静态网站的一种方法是手写，然后上传所有的文件到服务器。这种情况下，你至少要写一个文件。如果你的网站的是，当访问者浏览时，他们就会看到的内容了。的文件夹可能是下边的这个样子：

│
│
│
│
│
在上边的这个网站里，访问你就可以看到的内容。可能是下边这个样子：



==
==






=





你可能会立马发现手工编辑的一些问题：

手工编辑会很枯燥。
如果你想写多篇文章，你需要复制很多内容，比如样式、、等。
如果你想整合评论系统或者其他插件，你不得不写。

一般来说，你写博客的时候，想关注于博客内容，而不是在上浪费时间。谢天谢地，你可以用一个叫做静态网站生成器的工具来取代手动编辑。
静态网站生成器
静态网站生成器可以让你用一些简单的格式写文章，通常是，然后再定义一些设置。生成器可以自动把你的文章转换为。使用静态网站生成器，你可以把极大地简化为：






这比处理文件要简单的多！通用的元素，比如和，可以放在模板里边，这样很容易更改。
静态网站生成器多种多样。最流行的是用开发的。因为我们要搭建一个数据科学博客，所以需要网站生成器可以处理。
是一个用开发的网站生成器，可以接受文件并转换成博客文章。也可以很容易的把文章部署到让别人阅读。
安装
开始之前，这里有一个仓库，它就是我们最终成果的示例。
如果你还没有安装，在开始之前你还需要做一些前期工作。这里有一些安装的说明。我们建议使用。当你安装完成：

创建一个文件夹我们将把博客网站的内容和样式放在这个文件夹里。该教程把这个文件夹叫做，你可以随便起名字。
进入文件夹。
创建一个叫的文件，然后把这个文件里的内容加进去。我们最后将要把仓库提交到，而这将会排除一些其他东西。
创建并激活一个虚拟环境。
在文件夹里创建一个叫的文件，内容如下：==
==
=
=
=

==
==

在文件夹里运行来安装里边所有的包。

创建数据科学博客
完成了前边的设置之后，你就做完创建博客的准备了！在文件夹里运行命令，来为你的博客启动一个交互式安装序列。你将看到一些帮助你设置博客属性的问题。大多数问题你只需要点击使用默认设置就好了。你需要输入的就是你网站的名字、网站的作者，另外就是当问到前缀和时区的时候选。下边是个例子：
➜✗















_








运行完以后，文件夹里多了两个文件夹和，还有一些文件，比如和。下边是文件夹目录的示例：

│
│
│
│_
│
│
│
│
│
安装插件
默认不支持使用写文章，所以我们需要安装一个插件来完成这项功能。我们把插件作为一个子模块来安装，这样便于管理。如果你还没有安装，你可以在这里找到安装说明。当你安装完成之后：

运行来把当前文件夹初始化为一个仓库。
创建一个叫的文件夹。
运行来添加插件。

现在应该会有一个文件和一个文件夹：

│
│
│
│
│
│_
│
│
│
│
│
为了激活插件，我们需要修改文件，在最下边添加几行代码
=

_=
=

这几行代码告诉当生成的时候激活插件。
写第一篇文章
插件安装完之后，就可以写你的第一篇文章了：

创建一个，简单写一些内容。这里有一个例子。
把文件复制到文件夹。
创建一个和同名的文件，但是扩展名是。这里有一个例子。
把下边的内容添加到文件中，但是根据你自己的文章修改相应字段：








这里以上字段的解释：

文章的标题。
你的文章在服务器上的路径。如果是，而且你的服务器地址是你可以在这个地址找到你的文章。
文章发布的日期。
文章的类别可以是任何东西。
文章的标签。可以随便挂标签。
文章作者的名字。
文章的摘要。

每发布一篇文章，就需要复制一个文件，并创建一个文件
创建好和文件后，就可以生成博客文件了。下边是文件夹现在的样子：

│
│
│
│
│
│
│
│_
│
│
│
│
│
生成
为了从文章生成，我们需要先运行来把转换为，然后运行本地服务器来查看：

切换到文件夹。
运行来生成。
切换到目录。
运行。
在浏览器里访问来预览你的博客。

在浏览器里就可以看到博客里所有文章的列表，以及具体的博客内容了。
创建
是的一项功能，允许你快速部署静态网站，让所有人都可以通过特定访问。为了完成它的配置，我们需要：

注册一个帐号，如果你还没有的话。
创建一个叫的仓库，这里是你的用户名。这里有更详细的说明告诉你怎么做。
切换到文件夹。
运行把这个仓库作为远程仓库添加到你的本地仓库，把所有的参数替换为你的用户名。

会把仓库的分支下的所有文件展示到这个地址仓库和是一样的。
首先我们需要修改使得指向正确的位置：

在文件里编辑，把它设置为，还是你的用户名。
运行。当你想在本地预览你的博客的时候，运行。在部署之前运行。这将使用正确的配置文件进行部署。

提交文件
如果你想把和其他文件作为一个放在同一个仓库里，你可以使用分支。

运行切换到一个叫的分支。我们不能用分支来存放，因为那个分支是用于展示的。
创建一个提交，然后和正常一样推送到使用，和。

部署到
为了让正常工作，我们需要把文章添加到分支中。现在，内容在文件夹中，但是我们需要把它放到仓库的根目录，而不是子目录。我们可以使用工具来完成这项工作：

运行，把目录下的所有东西导入分支。
使用把你的内容推送到。
尝试访问你就可以看到你的页面了！

修改博客后，只要重新运行和，你的就会更新了。
下一步
终于搭建好了！你现在可以创作博客，然后推送到。所有人都可以通过来访问你的博客记得把替换为你的用户名。这给你提供了一个展示数据科学作品集的渠道。
随着文章数和读者越来越多，你可能就需要在以下方面更深入的研究一下：

主题：支持主题。在这里你可以看到很多主题，随便选一个你喜欢的用吧。
自定义：使用已经不错了，但是有时候你可能需要自定义域名。这里是自定义域名的指南。
插件：这里有一个插件列表。插件可以帮助你设置网站数据分析，实现评论等功能。
推广：试着把你的文章推广到或者其他一些网站，可以帮助你获得更多的读者。
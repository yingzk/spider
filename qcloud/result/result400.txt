京东、蘑菇街等电商企业率先使用微信小程序，带动了小程序开发的热潮。
腾讯云小程序方案技术负责人黄荣奎在现场为大家带来了最新的微信小程序开发工具与技巧。他将小程序的开发分成客户端代码与业务核心能力两个部分，并总结了传统开发过程中将遇到以下四个问题：1.环境部署耗时；2.后台代码部署不方便；3.开发调式不直观；4.很多时间将花费在框架搭建上，包括基础的功能，比如登录体系，而不是直接开发业务功能。
腾讯云小程序方案技术负责人黄荣奎
为了让开发者更加方便快捷地开发小程序，黄荣奎介绍了一套新版开发工具，均与腾讯云配套，可实现以下核心功能：
1.一键自动配置可运行后台环境：腾讯云和微信小程序帐号可以直接打通，开发者可以直接通过域名访问腾讯云服务器；2.后台代码编写：开发者可以基于腾讯云查看对应的资源管理，同时还能修改数据库密码、下载运营日志等；3.一键上传代码自动部署：当代码写好之后，通过点击上传测试即能实现轻松部署，成功传到服务器上的代码也能直接运行；4.远程调试：开发者可在前端调试界面看到控制台，同时获取断点、对应变量的信息，大大提高开发调试的效率；5.快速搭建后台能力；6.丰富的SDK与Wafer2.0：开发者基于Wafer2.0与SDK，还能获得腾讯云丰富的后台服务，包括CDN、优图、语音识别、图片识别、ORC、人脸识别等等。案例一：同事随手写个压力测试程序，其实现逻辑为：每秒钟先连续发N个132字节的包，然后连续收N个由后台服务回显回来的132字节包。其代码简化如下：


}
在实际测试中发现，当大于等于的情况，第秒之后，每次第三个调用，总会阻塞毫秒左右，但在分析端日志时，发现所有请求在端处理时耗均在以下。
当时的具体定位过程如下：先试图用跟踪客户端进程，但奇怪的是：一旦 上进程，所有收发又都正常，不会有阻塞现象，一旦退出，问题重现。经同事提醒，很可能是改变了程序或系统的某些东西这个问题现在也还没搞清楚，于是再用抓包分析，发现后端在回现应答包后，端并没有立即对该数据进行确认，而是等待了近毫秒后才确认。经过，并查阅《详解卷一协议》得知，此即的延迟确认 机制。
其解决办法如下：在系统调用后，调用一次函数，设置_。最终代码如下：
 

 

  {

       =      {

           

            

    }

       =      {

            

         _ _ {}  

    }

    

}
案例二：在营销平台内存化版本做性能测试时，发现请求时耗分布异常：的请求均在以内，而左右时耗始终在之间，这是一个很有规律的数字：。因为之前经历过案例一，所以猜测同样是因为延迟确认机制引起的时耗问题，经过简单的抓包验证后，通过设置_选项，得以解决时延问题。
延迟确认机制
在《详解卷一：协议》第章对其进行原理进行了详细描述：在处理交互数据流即  ，区别于  ，即成块数据流，典型的交互数据流如、等时，采用了 机制以及算法来减少小分组数目。
书上已经对这两种机制的原理讲的很清晰，这里不再做复述。本文后续部分将通过分析在下的实现，来解释一下的延迟确认机制。
为什么延迟确认会导致延迟？
其实仅有延迟确认机制，是不会导致请求延迟的初以为是必须等到包发出去，系统调用才会返回。一般来说，只有当该机制与算法或拥塞控制慢启动或拥塞避免混合作用时，才可能会导致时耗增长。我们下面来详细看看是如何相互作用的：
延迟确认与算法
我们先看看算法的规则可参考_文件里__函数注释：
如果包长度达到，则允许发送；
如果该包含有，则允许发送；
设置了_选项，则允许发送；
未设置_选项时，若所有发出去的包均被确认，或所有发出去的小数据包包长度小于均被确认，则允许发送。
对于规则，就是说要求一个连接上最多只能有一个未被确认的小数据包，在该分组的确认到达之前，不能发送其他的小数据包。如果某个小分组的确认被延迟了案例中的，那么后续小分组的发送就会相应的延迟。也就是说延迟确认影响的并不是被延迟确认的那个数据包，而是后续的应答包。

            

              

          



           

           

           

           

          

           

          
从上面的抓包分析看，第个包是延迟确认的，而第个包的数据，在端虽然早就已放到发送缓冲区里面应用层调用的已经返回了，但按照算法，第个包需要等到第个包小于的到达后才能发出。
延迟确认与拥塞控制
我们先利用_选项关闭算法，再来分析延迟确认与拥塞控制是如何互相作用的。
慢启动：的发送方维护一个拥塞窗口，记为。连接建立是，该值初始化为个报文段，每收到一个，该值就增加个报文段。发送方取拥塞窗口与通告窗口与滑动窗口机制对应中的最小值作为发送上限拥塞窗口是发送方使用的流控，而通告窗口则是接收方使用的流控。发送方开始发送个报文段，收到后，从增加到，即可以发送个报文段，当收到这两个报文段的后，就增加为，即指数增长：例如第一个内，发送一个包，并收到其，增加，而第二个内，可以发送两个包，并收到对应的两个，则每收到一个就增加，最终变为，实现了指数增长。
在实现里，并不是每收到一个包，就增加，如果在收到时，并没有其他数据包在等待被，则不增加。
本人使用案例的测试代码，在实际测试中，从初始值开始，最终保持个报文段的值，结果如下：
            

              

          



           

           

           

           

           

           

          

           

          
上表中的包，是在设置_，且已经增长到的情况，第、、发出后，受限于拥塞窗口大小，即使此时缓冲区有数据可以发送亦不能继续发送，即第个包必须等到第个包到达后，才能发出，而第个包明显有一个的延迟。
注：通过的_选项  可以查看连接的详细信息，例如当前拥塞窗口大小，等。
为什么是？这个时间能不能调整呢？
首先在的官方文档中，有如下说明：
一些应用在发送小的报文时，可能会因为的 机制，导致一定的延迟。其值默认为。可以通过修改__，调整系统级别的最小延迟确认时间。例如：
    
即是期望设置最小的延迟确认超时时间为。
不过在和系统下，均未找到这个选项，也就是说这个最小值，在这两个系统下，是无法通过配置调整的。
下有如下一个宏定义： __                 
注：内核每隔固定周期会发出  ，是用来定义每秒有几次 的。举例来说，为，代表每秒有次 。可在编译内核时设置。在我们现有服务器上跑的系统，值均为。
以此可知，最小的延迟确认时间为。
连接的延迟确认时间一般初始化为最小值，随后根据连接的重传超时时间、上次收到数据包与本次接收数据包的时间间隔等参数进行不断调整。具体调整算法，可以参考_  的___函数。
为什么_需要在每次调用后重新设置？
在  中，有如下说明：
_
`                                                                                                                  `
手册中明确描述_不是永久的。那么其具体实现是如何的呢？参考函数关于_选项的实现：
 _

      {

        _ = 

    }  {

        _ = 

           _ 

        _ | __ 

        ___ {

            _ |= __

            __ 

               

            _ = 

            }

    }

    
其实下有一个属性来表明当前链接是否为交互数据流，如其值为，则表明为交互数据流，会使用延迟确认机制。但是这个值是会动态变化的。例如链接在要发送一个数据包时，会执行如下函数_  ：
          

  ___ _  _    

{

         

          = 

                   

              

          

            _  _

                   _ = 

}
最后两行代码说明：如果当前时间与最近一次接受数据包的时间间隔小于计算的延迟确认超时时间，则重新进入交互数据流模式。也可以这么理解：延迟确认机制被确认有效时，会自动进入交互式。
通过以上分析可知，_选项是需要在每次调用后重新设置的。
为什么不是所有包都延迟确认？
实现里，用____  这个函数来判断是否需要立即发送。其函数实现如下：
         

       

 

   ___   

{

      __  = _

     _  _

}
要求满足两个条件才能算是模式：

被设置为。

快速确认数必须为非。


关于这个值，在前面有描述。而这个属性其代码中的注释为：    ，即快速确认的包数量，每次进入模式，被初始化为接收窗口除以倍值_  ，每次发送一个包，即被减。
关于_选项
_选项与_一样，是控制化的。

打开_选项，则意味着无论数据包是多么的小，都立即发送不考虑拥塞窗口。

如果将连接比喻为一个管道，那_选项的作用就像一个塞子。设置_选项，就是用塞子塞住管道，而取消_选项，就是将塞子拔掉。例如下面这段代码：


  = 

 _ _    _

       

    

 = 

 _ _    _
当_选项被设置时，链接不会发送任何的小包，即只有当数据量达到时，才会被发送。当数据传输完成时，通常需要取消该选项，以便被塞住，但是又不够大小的包能及时发出去。如果应用程序确定能一起发送多个数据集合例如响应的头和正文，建议设置_选项，这样在这些数据之间不存在延迟。为提升性能及吞吐量， 、文件服务器这一类一般会使用该选项。
著名的高性能服务器，在使用模式的情况下，可以设置打开_选项：将配置文件里的_配置为。_与_两个选项实现功能类似，只不过是下的实现，而是下的实现。另外为了减少系统调用，追求性能极致，针对短连接一般传送完数据后，立即主动关闭连接，对于的持久连接除外，程序并不通过调用取消_选项，因为关闭连接会自动取消_选项，将剩余数据发出。

相关推荐
创建服务器作者： 

文章介绍了文件的大概结构，详细解读了其中的  ，并结合图例，详细讲解了如何使用它来完成文件的随机访问。
本文属原创作品，转载请保留出处！
一、文件结构简介
在讲解的随机访问之前，我们先来大概了解一下文件结构，以及和的关系。
整个文件由若干个组成，可以嵌套。每个包含自己的大小和类型等信息，之后就是包含的内容，也可以作为其内容，形成嵌套，如下图所示：

图片来源
类似面向对象编程语言，也有“继承”的概念，所有都继承于类，其结构如下：

  {
     
     
      ==  {
         
    }  {
         一直到文件末尾
    }
      ==  {
          
    }
}
其中，就是这个的大小，包含所有字段包括自己和它包含的。就是此的类型，必须由四个英文字母表示。
有了这两个值，就可以快速定位到某个了。
另外一个常见的是，里面的都继承于此类，其结构如下：
    {
     
     
}
规范中描述了非常多的，不过最常用的到的其实只有这些：

图片来源：文件格式的解析，以及文件的分割算法
与的区别
可以理解为只包含音频的，最初由提出。
具体到  里面区别，由于所有音频帧都是同步帧，因此没有。至于有没有，还没有找到任何规范说明是否存在，但是从解码库的源码里面找不到任何相关逻辑，所以本文将不讨论。
二、什么是   
现在进入主题：在中，如何进行随机访问。
在中，一个轨道一定并且只会存在一个  ，简写为。它的官方定义如下：它包含一个轨道中所有媒体采样的时间数据索引。说人话，它的主要功能就是：将时间转换成对应采样在文件中的位置。
这对流媒体播放是至关重要的。比如说，在流媒体播放中，如果用户既拖动进度条到了处，如果的数据还没有被缓冲，就需要我们马上从这里开始缓冲。
那么问题来了：如何知道对应的数据在文件中哪个位置呢？
一个简单的方法就是用平均码率来计算：
 =   
如果歌曲是恒定码率，并且头不大的话，用这个方法计算，再加上一些补偿，也是可行的。
如果想更精确地计算，就必须使用  ，既。
三、如何使用   
里面包含很多，有必需，也有可选的。这里对必需的进行详细讲解，可选的只做简单介绍。
首先来看一下如何找到，以及它包含哪些子：

图片来源：文件研究 
然后，我用伪代码描述一下完整的流程：
     {
     

      =         

      包含  {
         =       
    }

     对应的
      =       

      包含  {
         获取离最近的同步帧
         =       
    }  {
         没有，说明中的每一帧都是同步帧
    }

     所在的
      
     该中第一个的序号
     

      =       

     该在文件中的位置
      

      包含  {
         =       
    }    包含  {
         =       
    }  {
         这个文件头不正确！
    }

     在其所在内的偏移
      =        

     两个相加就是在文件中的位置了
             
}
其中，必需的有：、、或其中一个、，一共四个。可选的有：、。
接下来，我们来看下上面伪代码中各个操作的意义。
、时间单位转换
内部的使用的时间单位不是秒、毫秒等物理意义上的时间单位，要经过以下转换：
 =   
其中，的含义是：一秒内流过多少个时间单位，对于音频，就是每秒采样率，对于视频，就是每秒帧率。
、时间偏移
如果中存在，事情就有些复杂了，它的出现，说明中的某条轨道的时间戳有偏移，比如视频比音频慢，或者某一帧画面停留一段时间等等。
这里不做详解，有兴趣的话，可以参考：和，使用方法可以参考的代码，见的__方法。
、获取时刻对应的：     
这个保存了序号和对应的播放时间信息。其中，播放时间通过差值的方式进行保存，以减少的大小。
它的结构如下：
    {
     _
    _ _
    _ _
}
一个就像这样：



 










说明这个包含个。每个的时间相差个时间单位。
如果整个只有这一个，那么就很容易计算出：

当     时， =   
当 =    时， = 因为总共只有个

以此类推即可得出任意时的算法。
、获取同步：   
这是一个可选的，如果中不存在此，说明每一个都是同步的。否则就要通过此查找同步。
每一个音频都是同步，所以不会存在。
查找方法很简单，用二分法查找即可。
、获取序号及内部偏移：    
在继续之前，有必要先来介绍一下，在中，媒体数据是如何保存的。
所有位于中，每个大小可以不一样，其中包含的每个也可以有不同大小。
一个中包含一个轨道的若干个连续。不同轨道的交错存放。
如下图所示，包含轨道的个连续，包含轨道的个连续采样。

用于查询所在的。它的结构是这样的：
    {
     _
    _ _
    _ __
    _ __
}
举个例子，比如包含两个：



_
__
__






不关心




不关心



说明第个到第个，每个都包含个，第个以及之后的，每个包含个。如下图所示：

这样就可以计算出所在的了，比如 位于 第一个， 位于 最末， 刚好位于 的第一个。如下图：

得到序号之后，用或者，可以计算出该在文件中的位置。其实就是的位版本，使用方式是一样的，两者只能同时存在一个。
、计算偏移：
这个包含每个相对文件开头的偏移，结构如下：
    {
     _
    _ _
}
使用方法很简单，用的序号去_数组里面取就行。如下图：

注意，上面得到的序号是从开始的，去数组里面取的时候注意减一。
、计算内部偏移：
这个包含的大小信息。它的结构如下：

    {
     _
     _
    _ _
}
大小不一定是固定的，如果是固定的，_就不为；否则，每个的大小保存在_数组里面。
比如有这样一个 ，它的_为，_中记录每个在所属内部的偏移：

在第步的使用中，我们获取到了所属的序号，以及第一个的序号，通过，就可以获得该在所处内部的偏移。
比如要计算 的内部偏移，需要从所属的第一个在这里是开始，将偏移累加起来：
 

看到这里，你是否会想到：既然包含了所有的大小，仅通过大小就可以计算出对应的偏移，不再需要计算偏移了。
但不要忘了：是按照不同轨道交错排列的，而且即便只有一个轨道，每个自身头部的大小也不能忽略。

、计算最终偏移
的偏移加上在当前内的偏移，就是的完整偏移了。如下图：

四、如何解析
的解析比较简单，读取前个字节，其中前个字节为大小，后个为类型，知道类型后，按照类型定义的字段按序读取即可。
其中有两点需要注意：

将转换成时，使用大端序
解析多个数组时，要“交错”地解析，比如，应该这样解析：   =    _  {
 _ = 
 _ = 
}


五、总结
相对于珍惜每一个的办事风格，还是比较慷慨的，所以解析起来比较方便。
而且，经过观察，的关键间隔仅在  ，作为比较，的则是平均一个关键。
至于所占大小，我观察了几个文件，所占空间很小：



文件大小
时长
大小




















由于文章只关注的随机访问，中可见的、，等等就没有解析了，如果对这方面有兴趣，可以参考的规范以及网上资料。
六、参考资料

  内容很多，其实只看 就好了，对文件做了一个大致的介绍，此外，第、页是其中最常用的
文件格式的解析，以及文件的分割算法
文件研究、说明：
很多情况下，对于一个程序员，作家、等等行业，都需要一个笔记本来记录自己的经验，创作等等。这么说来一个好的笔记本就需要好好选择和考虑的了。
今天我推荐一款笔记本，是网络笔记，名字是：蚂蚁笔记，：开源产品。
需要一个域名，可以从腾讯、阿里申请。
需要一台服务器，建议从腾讯云购买，很便宜的，最低只需要月。
这是我的博客，正在备案，可能打不开。
配置环境： 
、安装：数据
安装部分
        可以从网络获取资源
 
  _
 _ 
  _
  用于存储数据


设置部分
 
插入一行
 =_
使之生效
 


测试能否正常运行
  
重新开一个窗口

 
如果是有数据表列出，说明安装成功
、安装：程序
最新的程序可以从这里下载：选择： ，具体还是根据自己的服务器来决定的
安装并设置

 
 
   
 
必须改变这里：





导入初始数据库
      ___


启动
 
 
现在再开一个窗口，从第三个窗口访问
、安装：，启用：，从腾讯云申请证书
   
设置开机自启动和启动
  
  


把申请下来的证书放在中

在中创建一个配置文档，启用自己的域名并准备访问
 
 
输入以下文本
 
    
    {
          
        _  

           
        __  _
          {
            _        
            __                
            __           _
            __     ____
        }
    _     
    }

     
    
    {
           
        _  
         
        _      
        __ 

    __  _


      {
            _        
            __                
            __           _
            __     ____
        }
    }


输入完成后保存
  

现在就可以看下自己的网页了，而且还是支持的哦！
、自启动处理：使用服务
使用服务来控制与自启动
   
     
_ 
__  


编辑配置文件，末尾加入
 


=  _    =
=
=
=
_=
=




= 
=
=
=
_=
=

保存后，关闭第一个、第二个窗口，在关闭前使用，然后启动服务
  
      
、配置防火墙
  
  
  =
  =
 
此时防火墙生效

相关推荐
如何购买腾讯云服务器【腾讯云的种玩法】如何使用腾讯云服务器作为微信公众号的开发空间腾讯互联网城市服务是对公共服务的聚合，以满足一站式业务查询办理需求，目前服务上线个城市，服务亿民众
腾讯的互联网交通解决方案，可以从高效、智慧、便民、安全四个方面帮助到政府、企业和群众。高效：提升道路通行效率，提升交管执法效率，提升群众出行效率，提升交通运营效率智能：群众交通服务智能化，大数据交通规划决策，大数据交通态势分析，交通智慧监管便民：交通服务线上化，服务缴费移动化，证件电子化，验名核身线上化安全：保障业务系统安全，保障业务运维安全，保障信息安全，保障用户安全
方案整体架构：基于腾讯的提供的 公有云、私有云方面的平台能力  以及层的 地图，支付，， 大数据处理， 电子证照套件等等以开放合作的形式 和 存量的交通管理相关系统做集成， 形成交通领域 互联网解决方案覆盖了 公共交通出行，交通指挥诱导， 交通监控，交通规划，交通执法，交通业务办理等多个交通领域。同时腾讯为提整体系统架构的每一层提供相应的安全解决方案。 
互联网交通领域几个子方案介绍：智能客服目前微信城市服务领域约有超 的服务是属于交通领域， 如果用户使用量来看，超过一半的用户使用量来自交通。 由此可见，交通业务的窗口处理压力， 以及业务咨询量都是非常大，通过智能客服方案  可以大大降低各类交通领域的业务咨询方面窗口压力， 人工压力，提升传统电话服务的服务质量。 
整个解决方案的思路：分传统电话业务咨询，在线咨询两块对于可在线咨询的领域 将腾讯小智能客服能力 整合通用知识库和交通领域行业知识库 输入到交通业务咨询领域 实现智能客服对于传统的话务领域，将腾讯的云语音检测技术 整合到地的传统呼叫中心 可提升服务质量，可做基于呼叫中心的用户分析。举例：  可应用到 交通事故报警 ， 交通服务公众号中。 
交通态势分析基于腾讯的大数据处理套件集成于 交通管理部门的数据平台， 辅助交通大数据的  标准化处理，文本分析，分类标签等等 提升交通大数据的可用性，同时可结合腾讯互联网交通领域的生态合作伙伴 建立深度的交通数据应用模型通过模型实现交通事帮预测，拥堵预测，交通瓶颈分析， 公共出行用户画像等等 最终实现智慧交通管理，。应用举例： 可用于交通管理部门 人力调配智慧决策， 道路建设，交通诱导建设，交通运营策略的决策。 
高效交通 – 公交调度方案：方案分两块：群众端  公交调度后台。实现用户价值，运营效率， 行车安全，降低成本等。
互联网交通业务的主要安全风险   包括网络攻击，舆情风险，业务安全等方面业务安全 云和大数据系统安全  业务监控告警用户信息安全  系统防御 恶意攻击拦截 应用安全保障交通服务安全  站内舆情预警 群众互联网举报腾讯从以上三层为行业客户的互联网事业保驾护航，提供全方位的互联网交通解决方案导语： 想玩深度学习但是没钱更新电脑配置怎么办？ ，只要美元，只要美元，美元赠金带回家！天免费使用，让你轻松入门深度学习！是的，你没有听错，只要美元，只要美元，买赠，还在犹豫什么，机不可失，失不再来，赶紧掏出你的电脑抢购吧！

背景
由于深度学习计算量大，常常会遇到一个训练跑几小时甚至天多的情况。一段时间后，你肯定会有升级电脑的想法。而其中很重要的一块是运算需要一块好显卡。
但是当我看看价钱，再看看信用卡账单，我觉得人穷还是应该多忍忍。

我以前还不幸上了农企的船，而目前主流的深度学习框架都是使用，用的速度大部分时候比直接跑还慢。所以如果看完后有同学觉得自己装机更方便的话记住不要买的显卡当然好像土豪也不会买的显卡，另外不差钱的推荐上双 

介绍
前段时间听介绍， 现在有优惠，充值美元赠送美元，最多可使用年。用了之后觉得价格挺公道的。
 有专门的  模块，可以直接用来跑，不用像虚拟机一样开关机。只需要根据需要指定配置就行。收费分为训练收费和预测收费两种：

这里意思是如果进行模型训练，那么每个训练单位小时美元美国服务器。有中配置可供选择具体介绍，每种占用的训练单位不同。比如如果选用_就是小时美元。如果是执行预测任务是每次预测美元，会员按每小时美元收费升级不要钱，就是会在帐号没钱的时候自动扣信用卡的钱。
使用 有个好处就是完全不占用本地电脑资源，需要跑的时候扔个命令让 跑就是，而且不阻塞自己的其它任何工作。跑的过程中生成的数据全部都会存储在存储分区中。

安装和配置
以安装做说明，包括之后的示例也以为准。
安装 ，目前只支持。
更新
   
如果安装的不是基于的，那么再安装一个基于 的
 之后的版本和分开了，写这篇文章的时候刚把从更新到了，独立的一直跑不了，就先用版本说明好了
  ==
这个版本的不是用来跑代码的，是用来之后把代码提交到 运行前检查语法的。
下载  并解压
安装
 
配置。
创建一个新的云平台项目 启用付费启用机器学习
初始化
 
 然后会提示你登录，确认后会弹出登录页面，然后在弹出的网页选允许
             
 选择项目，如果只有一个项目会默认帮你选择，选刚才那个创建的云平台项目注意是填选择序号。
    
  
  
 
     
 选择默认区域，建议选，那里机器便宜而且在运算时支持
          
  
  
 
      
     
 全部设置完成后会有提示已经设置完成。
配置完成后可以用  查看配置。更加详细的命令见

示例
准备数据
下载示例代码，解压后进入目录
 
  ，将数据下载下来放在里面。

创建存储分区。如果是第一次使用，进入后会有配置引导。

在命令行中设置_临时变量
_=刚刚设置的存储分区
 设置完成后可以通过命令查看是否正常设置

设置临时变量。值与刚刚创建_的区域相同。我的是
=
 将文件夹上传到 
    _
 设置_和_临时变量
_=_
_=_
 把也上传上去并且设置临时变量
   _
_=_
训练
这时候终于可以跑训练任务了。对于每次训练或者预测，都要取一个专门的名称标识。
_=__
 指定输出地址。就是指定代码在训练过程中生成的文件。
_=__
 下面可以正式开始执行训练了
     _ \
     _ \
      \
      \
      \
      \
     _ \
     \
     _ \
     _ \
      \
       \
     
参数比较简单，熟悉应该很好理解。参数就是前面说到的执行任务机器配置，一共可以进行种机器配置。其中配置需要自己写一个配置文件，通过加载配置文件来运行，不能直接将配置以命令行参数的方式添加

详细的命令参数参考

运行完之后会提示运行成功，并且返回当前任务状态。

之后可以随时查看当前任务状态
    {  }
也可以进入可视化页面查看，下图是运行结束后的作业截图

也可以随时查看，搜索日志

运行的中间数据存储在存储空间中。

同时 也支持，使用很简单
   =_
 
生成模型
创建临时变量
_=
创建模型
    _ =
找到对应的这个时间戳
   _

_=_{你的时间戳}
生成模型
     \
 _ \
 _ \
 
生成的模型也可以直接通过网页查看
 
预测
设置预测任务临时变量
_=__
_=__
 进行预测
     _ \
 _ \
  \
  \
  \
 _ \
 _
 与训练任务类似，预测任务也可以查看任务的执行情况，日志以及返回数据。
执行完成后可以查看预测结果
  _

总结
 对于自家的支持可以算的上完美。如果学习的是其它深度学习框架则需要使用传统云服务器的方式，开虚拟机去跑任务。不管怎么样，美元返美元还是相当有吸引力的。
至于美元用完之后怎么办，由于 只需要账号，不需要身份认证，猥琐一点是可以再注册个账号继续使用赠送服务。不过最好还是祝愿看到文章的你我，到那个时候能够有钱自己装机或者直接继续享受 服务。
参考资料
前言
眼下  社区最火的开源项目莫过于  后简称，但是在云上玩  存在成本高，部署难诸多问题。腾讯公司提供的  是个不错的解决方案，也存在资源竞争，数据上传麻烦，调试不便等问题，倘若在虚拟机环境自己搭建环境，又存在  支持等问题。本文介绍一种基于  平台下搭建  运行和开发环境，带大家畅玩  。
一、个人电脑玩的理由
之所以选择在个人电脑上玩最主要的原因成本低廉取材简单，对于非专业人士也都可以搞个人工智能来取悦自己。具体而言，还有以下几个理由： 
门槛低
目前市面上个人电脑采用系统，工具软件多，开发上手简单容易，而且平台不同于以往的计算平台如等，对支持相对比较友好。采用运行环境，软件安装也十分方便，不会受到的各种网络限制。
支持
大部分个人电脑基本配备了的独显不要问我显卡为啥不行，像笔者平时很少玩游戏，显卡基本都在闲置，将跑在上提升资源利用率，还可以一边训练模型一边工作，丝毫不会受到影响。

支持
目前主工程目录的代码超过行，若没有一个好的支持，通过裸奔方式编写阅读代码简直就是一件不可思议的事情。平台下有许多优秀的开发提供语法高亮，代码补全，跳转调试功能，非常好用，例如、、等等。

二、个人电脑玩的姿势
 安装
第一步  下载安装工具
官网推荐安装版本：下载工具，安装过程一路向西。

第二步 升级不升级的可能安装包失败
       
如果出现网络请设置__环境变量
第三步 安装 
下载链接
第四步 下载安装包
带  功能下载链接  推荐 
单  功能下载链接  不推荐 
第五步  安装安装包
    
   __
 安装
首先，要确保机器本身显卡计算能力在以上：查询链接。
接着，需要安装两个软件： 和
   下载链接 选择版本 
  下载链接 选择版本 
先安装，然后将压缩文件解压到安装目录中对应。
最后，验证是否安装成功：两个方法
方法 安装软件推荐方法
查看状态出现就说明成功了

方法 命令行方式
   \\\\_
 
 
发现在部分笔记本安装完之后找不到设备的情况，后通过 =在官网下载最新版本显卡驱动解决。
 安装
和都是非常不错开发，前者是公司出品，保持家族一贯的特色，简单易用但系统开销大。我更愿意使用，再带上几个插件轻装上阵网络问题可通过代理解决。
插件：代码自动跳转，必装
插件：代码调试工具，必装
插件：代码补全工具，必装
插件  代码排版，选装
插件 规范代码风格，语法检查，选装
 畅玩
编码 自动补全

阅码 自动跳转
 
调试 方便快捷
首先，在官网下载模型进行本地训练

接着，再来一个诗和远方感谢  提供的 ，单核机器需要天的工作在办公电脑分钟内训练完，运行正常，不影响正常作业。仅仅有点忙，风扇哥，你要使劲点摇

写在最后
之前搭建过分布式环境，相对而言，环境搭建更加简单容易，文档也相对更加完善，它更适合后台以外的开发同学操作机器学习，就我自己而言算是才开始进入领地，期待后面通过实战进一步强化对的认识，顺带也锻炼一下自己的爱机。
参考文档
社区中国社区数据库优化是每个开发、运维同学成长过程中的必修课，特此，我们从腾云阁文章中梳理了一部分受开发者欢迎的数据库文章。供大家参考
腾讯云开发者社区今天想和各位开发者一起探讨下你有什么独家数据库优化技巧？欢迎留言给我们
【数据库设计优化】
数据库设计总结
内核深度优化
构建企业级应用环境之数据层面优化一
构建企业级应用环境之数据层面优化二 
【数据库迁移】
基于的云数据库搬迁实例解析 
存储总量达的实例，如何完成迁移？
【数据库安全】
黑客是如何实现数据库勒索的
成勒索新目标，数据服务基线安全问题迫在眉睫
【最佳实践】
最佳实践：小马的升值加薪之路
开发实践问，你能住几个？
【活动推荐】
最新腾讯云技术公开课直播，提问腾讯代表，如何从小白成为技术专家？点击了解活动详情许多互联网公司都流行黑客马拉松文化，腾讯也不例外。以前，选手需要自己实现某些服务或功能，但是到了云计算时代，他们更多的时间用来「搭积木」而非「造轮子」，更加聚焦于创意本身。
 月  日，腾讯云联合腾讯学院举办了第七届腾讯创意马拉松暨腾讯云开发者大赛。这是一次内部的黑客马拉松活动，但首次邀请了富途证券、乐逗游戏等合作伙伴公司参与。最终，有  个小组、 名黑客，通过腾讯云开启了人生中第一次黑客马拉松之旅。
在短短的两天三夜里，这  名黑客利用腾讯云提供的技术能力，做出了一台可通过手势控制的智能小车，一个结合情感分析实现的股票推荐系统，以及一个实时匿名吐槽的微信小程序等八个精彩作品。
本文将从中三个代表作品，简要解析其实现思路以及与云计算的结合点。
 智能小车：  智能硬件
智能小车，是本次大赛中唯一一个智能硬件作品。与市场上已有的产品不同，它是通过手势控制小车方向的，而且可借助腾讯云的云服务器实现远程操控，想象空间不小。
查看智能小车演示视频： 
手势控制方面，选手采用了   的技术方案，通过专门的设备采集用户的手势信息。

  是一家制造和销售计算机硬件感应设备的公司。类似于鼠标，其设备支持利用手掌和手指动作来进行输入，但无需手部接触或者触摸。


然后再将手势控制信息，通过腾讯云的  云服务器转发给智能小车。小车使用  开发，接受来自  的方向信息，并实时返回小车搭载的摄像头捕获的视频给操控者。
与此同时，在操控端还配置了一个   实现的语音播放器，实时播报手势控制的方位信息，方便操作者确认。

作品的参考代码如下：。
智能小车项目用到的技术栈包括： ， ，，，。
 股票推荐系统
普通股民在进行日常选股等操作时，要面对券商提供的复杂界面，浏览大量的新闻和网友评论。完成这些工作会占据他们大量的时间。如果有一套自动化的系统帮助他们，将会节省不少的时间。
本次参赛选手者也有不少散户，他们利用腾讯云提供的情感分析技术，对雪球等股票社区进行大数据挖掘，分析某支股票的舆情走势，并结合当天股市的内外盘对比提出操作建议。
这个作品采用的是腾讯云提供的文智自然语言处理中的情感分析 。其具体的调用方式比较简单：
以  请求向  发送需要分析的文本内容：

    =
    =
    =
    =
    =
    =
    =双万兆服务器就是好，只是内存小点
输出结果如下：
{
    
    
    
    
}

如上所示，文智情感分析  会给出文本正面和负面的概率值。
 实时匿名吐槽的微信小程序
微信小程序是今年的一大技术热点，此前社区内已经出现过各类小程序 。本次大赛中使用微信小程序技术的也很多，有寻找失踪儿童、狼人杀等多款小程序。其中，实时匿名吐槽的小程序是完成度比较高，创意也特别不错的一个作品。
这个小程序的名称叫“树洞森林”，为用户提供匿名向同类人群倾诉、吐槽和交流的功能。

该作品有一个突出的特色，就是智能匹配，支持对用户自定义标签进行分词，也可实现系统智能推荐，引入人工智能聊天。

在以前，自行实现智能分词、智能推荐、智能聊天等功能，需要投入大量的研发资源和时间。但是这个只有五个人的小团队，利用云计算的能力，在天之内就完成了。具体来说，这个作品用到了如下技术：

具体的项目代码可参考：。
结语
除了上述三个代表作品之外，上文还提到了帮助寻找走失儿童的微信小程序和，以及分布式视频转码系统等其他作品。
寻找走失儿童的应用基于腾讯云的优图人脸识别技术，可以快速地匹配走失儿童。利用腾讯云提供的  自动伸缩能力，可以实现视频的秒级转码。
这些作品有的非常复杂，不是两三天就能够完成的项目。但是在云计算技术支持下，研发时间大大缩短，研发的效率得到了极大的提升。
笔者觉得，未来的 ，或许会是云的时代。懂得利用云端技术的企业，其  成本和效率都将实现质的飞跃。
更多大赛作品详情，请参看以下链接：

参赛作品  分享地址：腾讯云开发者大赛作品 下载地址。
参赛作品源代码分享地址：。


相关推荐
【黑客解析】黑客是如何实现数据库勒索的
成勒索新目标，数据服务基线安全问题迫在眉睫本文作者： 程柳锋

导语
通常而言，的应用场景有前后端分离、海量页面渲染服务、命令行工具和桌面端应用等等。本篇文章选取  子领域，来谈谈编写的实践，让切实解决实际工程问题。
 
常用的用来编写的语言有    等等。 为什么选取作为的语言编写工具呢？有三个理由：

对语言更加熟悉
 完善的生态系统
 无关的包管理机制

主要原因还是归咎于 完善的生态，目前官方有万个三方包可供使用，你可以很方便的使用一些已经编写的很不错的轮子去帮你快速开发。另一方面，你不需要考虑跨平台的安装问题，比如上的、的、 上的。如果你使用或者其它语言来编写，你需要针对各个主流来做兼容并且发布到不同的平台。
看个

注： 此处的使用的是这个包， 地址
关联的基本原理
如何让编写的包可执行？其实很简单，只需要在里面增加一个字段。模块发布到上后，开发者安装这个包的时候会检查是否有字段，如果有字段则会使用软链接的方式创建可以全局使用的命令。
如果模块采用全局安装的方式，对于类系统，会在目录创建软链接，对于系统，在\\\\\目录创建软链接。
如果模块采用局部安装的方式，则会在项目内的_目录创建软链接。
配置好的如下：
…
            
   
    {
      
  }
…
基本命令设计
   

           

     

  
                                 
                        
                       

  
                     
                              
的技术架构
总体分为个模块，包括命令行参数解析、核心命令以及插件机制。设计插件主要是为了保持整体功能的稳定，避免频繁升级；同时开放能力，支持开发者接入，完善整体的生态。

扫描器的实现
在一个工程项目中，有各种各样的规范，比如项目命名规范、描述规范、目录结构规范、规范，是否增加基本监控等等。编写扫描器，对某个里面的所有业务项目进行扫描，将不符合规范的仓库和不符合规范的地方列举出来，并且捞出责任人。最后通过邮件及定时任务发送给相关同学，并且敦促修改。扫描器流程图如下：

首先，需要一个任务队列，队列里面存放不同的扫描任务。每个扫描任务依赖相关的文件信息或者信息，这个时候需要调用 提供的三方进行文件信息拉取。之后，需要编写一个规则引擎，这个规则引擎里面有多个规范相关的检查工具，解析完成后会将结果生成格式的字符串。最后调用邮件服务和定时任务服务去通知相关开发者。
插件机制设计
               安装一个插件 则会强制安装
                卸载一个插件
                          列举出所有插件信息
                  列举某个插件信息
插件机制实现
插件机制的实现包括两个部分：插件注册机制和插件发现机制。要求插件必须以开头或者 开头，作为一种特殊的插件，插件代码以包的形式存储和管理。运行  命令时，会通过 的 检查是否存在插件，如果存在，会检查当前插件是否是最新版本。如果不是最新版本，则提示用户是否需要更新。然后将插件下载到目录下的目录系统为\\ 目录下的_里面，并且写入到配置文件里面。

本地模块注册机制


本地模块发现机制


 的 服务 的查询服务网址： 

网址后面跟上模块名、版本好可以查询模块详细信息，包括最新版本，以此来判断模块是否需要更新。比如：的最新版本可以通过 来获得
返回的对象里面有个属性，是某个版本的压缩包地址

常用三方包分享

 方便的获取不同系统的环境和目录配置
 命令行炫酷的生成器
 命令行帮助命令封装
 强大的用户交互
 让命令行的带有颜色
 表格信息展示，用于升级包的提示
 用户输入的参数解析
 执行命令
 进度条

遇到的问题
，下用户未设置环境变量导致报错
解决办法 由于下环境变量并非默认存在，因此不能直接 使用。判断 === ‘’，优先使用变量，否则使 用变量；建议使用这个包。
，平台运行报错  \     
解决办法 由于类系统的换行符号为\，而系统为\\。修复换 行问题。可以在工程根目录下加文件，设置  =，这样 提交时就不会讲转换成

原文链接：产品的整个技术实现架构由  、业务服务器以及腾讯云服务组成。其中， 负责和用户进行交互，包含的功能模块有：

注册登录支持微信、 等第三方账号登录；
拍照录像；
上传到云腾讯云对象存储内容分发网络 ；
视频播放本地播放云端点播；
语音识别腾讯云智能语音服务   ；
图片处理腾讯云万象优图的图片处理和智能鉴黄服务。

考虑到我们的业务类型和开发团队的技术基础，我们选用的后台技术架构是       ，前端为  和 。
为便于快速开发和可靠扩展，对于关键技术难点——图片、音频、视频等大量非结构化数据的上传、存储和点播，我们采用腾讯云提供的对象存储：  和内容分发网络：  作为实现方案。这样，后台的  数据库中就只需要存储图片、音频、视频等文件在腾讯云对象存储中的  ，而不必在业务侧维护其数据持久化和容量扩展，同时，内容的分发和访问，也可通过腾讯云  来加速，有效降低了服务器端的下载压力。
在公有云产品的价格方面，腾讯云提供了每月存储，外网访问流量、 的  回源流量、 万次读请求和万次写请求的免费额度，可以满足初创项目的使用需求。同时，腾讯云对象存储还提供了全面的开发者手册和各类编程语言的  ，可以让开发者快速上手，搭建原型应用。
腾讯云  的注册、实名认证，以及开通  的过程都很简单快捷，可以点击链接立即使用的控制台，按照教程“快速上手”完成上述操作。
接下来，新建项目，然后在项目中新建存储桶。

同时，选择默认开通加速。

在存储桶中新建文件夹，用于存放上传的“宠物互动视频”。
点击获取密钥一定要注意保护自己的密钥不被泄漏，并尽量定期的更换密钥。

对于端的“文件上传”功能，腾讯云官方提供的已经将分片上传的功能做了封装，开发者只需按照文档调用函数，即可完成图片、音频、视频等大文件的上传，并且能在对应的回调接口中进行上传成功失败后的进一步操作，比如更新的来显示上传进度，或者提示上传成功失败消息等。下面为代码示例：
 
 

 若已存在同名的文件： == 表示能够上传成功，且会覆盖同名的文件； == 则不能成功上传

  =        {

        
              {
                
             上传成功
        }

        
              {
                
             上传进度
        }

        
            {
                
             上传状态变化
        }

        
            {
                
             上传失败
        }}


需要说明的是，上面中的字段，即为业务端服务器返回的签名字符串，用于完成用户请求的鉴权。的生成过程，在服务器端的中也有提供封装好的方法。
腾讯云的签名分为两种：多次有效签名和单次有效签名。当需要进行上传文件 重命名文件 创建目录 获取文件目录属性 拉取目录列表这几个操作时，必须在请求中填写多次有效签名。
对于多次有效签名，可以在服务器端调用方法来获得。        其中的各个参数对应的含义是：



参数名
参数类型
默认值
参数描述






无
名称，即为上文中提到的


_

无
资源在下的相对路径，即为上文中提到的 




无
用户身份信息 包括   将腾讯云 控制台中获取到的密钥信息填入即可




无
签名过期时间 时间戳，单位为秒。注意，这儿的是个时间点，而非时间段。它等于当前时间有效期限



获取多次有效签名的代码示例：
  =    
  =     
  =    
对于单次有效签名，适用场景为删除和更新文件目录。在服务器端的构造过程和上面的多次有效签名类似。
当图片、音频、视频等文件上传成功后，腾讯云会给端返回文件在中的，此时，业务端的数据库仅需存储这个，当用户访问该文件时，将这个返回给用户，然后由腾讯云来响应用户的请求，将实际的文件传输给用户。
这样，在端，就可以直接调用原生的视频播放控件比如的或者自定义，链入腾讯云提供的来播放视频当使用来播放视频时，视频源必须是标准的或的视频，否则无法播放。

需要说明的是，腾讯云返回的资源会有两种，一种是_不经过加速，直接访问存储源，另一种是_经过加速来访问存储源。推荐使用_来为访问加速，不仅可以极大的降低访问时延，同时还可以节省的回源流量。

除了音视频的上传和下载播放以外，我们的产品还需要为用户提供图片处理功能，包括缩放、裁剪。同时，为了保证平台内容的健康可持续，我们需要引入图片鉴黄功能；为了保护内容的版权，我们还需要防盗链和水印功能。
于是我们采用腾讯云的万象优图来实现上述的图片处理功能。整个使用过程可以分为：

在万象优图控制台配置参数；
在业务服务器和中集成；
按照业务需求自定义回调处理逻辑。

首先，在腾讯云控制台中点击进入“万象优图”。在之前已经建好的项目中新建一个图片空间。

然后，点击“管理”，进入对图片空间的配置界面。

如何在控制台对鉴黄功能进行设置？
在“图片识别”功能中，可以开启鉴黄功能的使用状态。点击保存后，凡是要上传入当前图片空间的新图片，都需要先经过鉴黄处理。万象优图会为每一张图片打分分，其中，超过分的图片，会被系统确定为是黄图，低于分的，会被系统确定为是正常图片。分值处于之间的，系统会判别为“疑似黄图”，但无法确定，需要业务端通过人工审核的方式来判定是否为黄图。业务端可以进一步设置回调阈值和回调，让腾讯云万象优图将“疑似黄图”的图片和相应的判别结果返回给业务端，以做进一步的处理。
如何在端将图片传送给万象优图？
万象优图为开发者提供了、和服务器端的和示例，并封装好了相应的功能模块供灵活调用。如下是的下载地址。

以为例，点击下载“体验”，在中可以看到关键的业务逻辑代码：
首先，由向业务端服务器发起请求，获取签名即访问腾讯云万象优图资源的权限。

在获取签名后，就可构造图片上传请求：

在图片上传请求的回调接口中，可以设定图片上传成功后对 界面的操作，在中可设定图片上传的进度显示，在中可设定图片上传失败后的处理。
如何在服务器端构造签名？
以 为例，在我们的业务服务器端，只需将万象优图控制台中提供的_、 、 填写至下图中的对应位置：


然后调用对象的方法，即可得到多次单次有效签名。


将签名返回给端后，端即可将图片连同签名一起送至腾讯云万象优图，进行鉴黄处理。
业务服务器该如何处理腾讯云万象优图的回调结果？
在服务器端，需要监听在控制台中配置的回调接口。当万象优图发现上传的图片分值在阈值，疑似黄图内时，会默认回调该，向其发送一个标准的 通知消息。

的信息如下表：



参数名称
类型
必选
描述






是
上传后的资源，包括域名




是
供参考的识别结果，正常，黄图，疑似图片


_

是
封禁状态，表示正常，表示图片已被封禁只有存储在万象优图的图片才会被封禁




是
识别为黄图的置信度，范围；是  的综合评分




是
图片为正常图片的评分




是
图片为性感图片的评分




是
图片为色情图片的评分



业务端通过判别中的参数，来决定向端发送对应的处理比如，拒绝此次上传，或者转向人工审查等。
如何使用万象优图来实现图片处理裁剪缩放水印？
万象优图提供了如下的图片处理功能：
其中，基本图像处理即为对 图片的长和宽按约束条件来等比压缩。在把原图上传到万象优图的对象存储空间后，如果鉴黄通过万象优图会返回该图片的。当我们再次请求该图片的时，可以在后面添加参数，来告诉万象优图“请按照参数来等比缩放该图片，然后返回给我”。这样，端就能拿到指定长宽的图片，不仅便于排版，还能实现缩略图显示。
举个例子来说明：
点击万象优图→新手指引→端接入→样例，进入下面的试用界面：


上传一张图片，长宽为，生成如上的下载链接。
访问该链接可以看到原图。

然后，我们在下载链接上添加基本图像处理的相应参数，含义为“调用基本图像处理接口，指明采用模式来等比缩放图片，并指定图片的宽的最大值为”：
在浏览器中打开该，即可看到万象优图将原图等比压缩后的处理结果：

基本图片处理中还提供了很多的等比缩放模式，以及指定图片格式、图片质量等等，大家可以按需设定参数。

但对于我们的，仅仅实现图片的“等比缩放功能”还不够，因为在大多数情况下，用户上传的图片长宽不一，等比缩放很容易造成“顾得了长但顾不了宽”，使得原有的图片经过缩放后，要么在显示时产生留白，要么就是图片的关键部分比如中间部分被缩放到了边缘，变得很难看。所以，在实际使用时，我们会采用上图中的模式，来指定在缩放时，先等比缩放，然后居中裁剪。举个例子：

这样，即使经过了缩放和裁剪，也可以使得原图的中间部分得到保留。
对于万象优图提供的高级图像处理接口，可以按照九宫格来选择更多的旋转、裁剪处理模式。

但是这种用传参数来指定图片处理方式的做法显得很笨呐有木有，每次请求图片资源都需要做一次处理……别急，万象优图提供了另外一种省心的图片处理方式——在控制台中，对某个存储空间下的所有图片，设定统一的图片样式。

新添加一个样式，点击编辑。



以及图片水印左上角的蝙蝠侠标志

总结：
通过以上操作，就将腾讯云提供的音视频上传下载、万象优图图片存储以及处理缩放、裁剪、水印等功能集成到了和业务端服务器中。

相关推荐开发者手册  整合微视频上传管理能力，轻松打造视频后台如何依托腾讯云完成海量数据的存储和备份| 导语   内容不同步的真相

起因
昨天晚上尝试使用对缓存进行定时任务的更新，但是发现定时任务并不能刷新到中，由此开始了一阵
经过
问题出现的场景
想使用一个后台任务在缓存中存放一些信息，然后在中有的时候可以快速获取到页面信息，但是失败了，用户在进入主页的时候并没有获取到后台任务在缓存中存放的信息
尝试解决问题经过
首先使用打出对象的内存地址以及一些简单信息

代码逻辑如下

发现和中的打出的内存不一

原因 不同进程在   中获取的  只是原型的复制品，并不是同一块内存
 解决问题的过程
当然，我们的问题并没有解决，真正的原因是因为我一开始使用的是
 = {
     {
         
         
    }
}
我所使用的  它的机制是不能做同步缓存的 见第三小节
在更改为之后，问题解决
 = {
     {
         
         _
    }
}
结论与文档
废话不多说，直接上官方文档吧
 
                        ’                          “”  
 = {
     {
         
         
    }
}
                                                  
                          ’    ’         ’   
着重标记最后一段文档
                 注意每个进程都有自己的私有缓存实例，这意味着不可能有跨进程缓存
所以说，是不能用来做同步缓存的 请使用别的任意什么是微视频
微视频服务是腾讯云为需要支持  类小视频、短视频的移动应用提供定制化的，仅需通过集成  便可快速接入并支持视频上传、转码、存储和播放的解决方案。
微视频  如何安装？
本适配插件是专为  开发的拓展组件，后续将为整个  提供支持。
安装微视频  只需要在您的项目根目录执行如下命令
  

执行成功后，打开您的  的  目录，打开  ，找到  ，在其中加入
\\\

保存，退出。
执行命令
  

会自动在  目录下生成  其中有微视频需要配置的几个参数。
使用编辑器打开  文件，填写其中的配置项。
微视频如何使用
如果你需要在某个文件中使用微视频的，在代码中加入
 \\

然后使用静态方法来调用相关方法，如


和对象的区别
拓展对一些函数进行了封装。
在使用时，你可以选择使用
 \\

或
 \\

区别在于， 对函数进行了封装。默认使用在  文件中定义的  使用的是官方的函数，需要加入作为参数。相关的文档可以看：官方文档
可用函数
 上传视频文件：创建文件夹：目录列表 ：前缀搜索：更新目录信息：更新文件信息：目录信息查询：文件信息查询：删除目录 ： 删除文件

相关阅读如何用腾讯云打造一款微视频 点对点直播作者：

前言
 是微信官方的移动端数据库组件，致力于提供一个高效、易用、完整的移动端存储方案。
它包含三个模块：





数据库损坏修复工具


目前正在筹备开源中。
背景
对于开发者来说，数据库的技术选型一直是个令人头痛的问题。
由于提供的框架差强人意，使得开发者们纷纷将目光投向开源社区，寻找更好的存储方案。 
对于微信也是如此。数据库是微信内最基础的组件之一，消息收发、联系人、朋友圈等等业务都离不开数据库的支持。为了满足需求，我们也对现有方案做了对比研究：
目前移动端数据库方案按其实现可分为两类，

关系型数据库，代表有、等。

  它是苹果内建框架，和深度结合，可以很方便进行；但其上手学习成本较高，不容易掌握。稳定性也堪忧，很容易；多线程的支持也比较鸡肋。

 它基于封装，对于有和基础的开发者来说，简单易懂，可以直接上手；而缺点也正是在此，只是将的接口封装成了接口，没有做太多别的优化，即所谓的胶水代码 。使用过程需要用大量的代码拼接、拼装，并不方便。



数据库，代表有、、等。

因其在各平台封装、优化的优势，比较受移动开发者的欢迎。对于开发者，的实现直接易懂，可以像使用一样使用。并且彻底，省去了拼装的过程。但其对代码侵入性很强，要求类继承的基类。这对于单继承的，意味着不能再继承其他自定义的子类。同时，数据库对较为复杂的查询场景也比较无力。



可见，各个方案都有其独特的优势及劣势，没有最好的，只有最适合的。
而对于微信来说，我们所期望的数据库应满足：

高效；增删改查的高效是数据库最基本的要求。除此之外，我们还希望能够支持多个线程高并发地操作数据库，以应对微信频繁收发消息的场景。

易用；这是微信开源的原则，也是的原则。本不是一个易用的组件：为了完成一个查询，往往我们需要写很多拼接字符串、组装的胶水代码。这些代码冗长繁杂，而且容易出错，我们希望组件能统一完成这些任务。

完整；数据库操作是一个复杂的场景，我们希望数据库组件能完整覆盖各种场景。包括数据库损坏、监控统计、复杂的查询、反注入等。


显然，上述各个方案都不能完全满足微信的需求。
于是，我们造了这个“轮子”  

以下简称，均指代的版本，是一个基于封装的数据库组件，提供了如下功能：

便捷的和接口：通过，开发者可以便捷地定义数据库表和索引，并且无须写一坨胶水代码拼装对象。

语言集成查询：通过，开发者无须拼接字符串，即可完成的条件、排序、过滤等等语句。

多线程高并发：基本的增删查改等接口都支持多线程访问，开发者无需操心线程安全问题。

线程间读与读、读与写操作均支持并发执行。

写与写操作串行执行，并且有基于源码优化的性能提升。可参考我们分享的另一篇文章《微信 源码优化实践》



损坏修复：数据库损坏一直是个难题，内置了我们自研的修复工具。同样可参考我们分享的另一篇文章《微信  数据库修复实践》

统计分析：提供接口直接获取的执行耗时，可用于监控性能。

反注入：框架层防止了注入，以避免恶意信息危害用户数据。




覆盖了数据库使用的绝大部分场景，且经过微信海量用户的验证，并将持续不断地增加新的能力。
本文是系列文章的第一篇，主要介绍的基本用法，包含：

、与

高级用法


在内，  是指

将一个的类，映射到数据库的表和索引；
将类的，映射到数据库表的字段；

这一过程。通过，可以达到直接通过进行数据库操作，省去拼装过程的目的。
通过内建的宏实现的功能。如下


对于一个已有的类，

引用框架头文件 ，并定义类遵循协议

_用于在头文件中声明绑定到数据库表的字段。

_，用于在类文件中定义绑定到数据库表的类。同时，该宏内实现了。因此，开发者无须添加更多的代码来完成的接口

_，用于在类文件中定义绑定到数据库表的字段。


简单几行代码，就完成了将类和需要的字段绑定到数据库表的过程。这三个宏在名称和使用习惯上，也都和定义一个类相似，以此便于记忆。
除此之外，还提供了许多可选的宏，用于定义数据库索引、约束等，如：

_用于定义主键

_用于定义索引

_用于定义唯一约束

__用于定义非空约束




定义完成后，只需要调用接口，即可创建表和索引。

接口会根据的定义，创建对应表和索引。

得益于的定义，可以直接进行通过进行增删改查操作。





内可通过两种方式执行事务，一是接口

这种方式要求数据库操作在一个内完成，简单易用。
另一种方式则是获取对象

对象可以在类或函数间传递，因此这种方式也更具灵活性。

有心的同学可能会注意到上述例子中的一些特殊语法：








这个便是。
  ，音，即集成查询，是将自然查询的集成到框架中的技术，基于实现。
传统的语句，通常是开发者拼接字符串完成。这种方式不仅繁琐、易错，而且出错后很难定位到问题所在。同时也容易给注入留下可乘之机。
而将查询语言集成到了中，可以通过类似函数调用的方式来写查询。借用的代码提示和编译器的语法检查，达到易用、纠错的效果。
对于一个已绑定的类，可以通过的方式，获得数据库内字段的映射，以此书写的条件、排序、过滤等等所有语句。如下是几个例子：

由于通过接口调用实现查询，因此在书写过程中会有的代码提示和编译器的语法检查，从而提升开发效率，避免写错。


的接口包括但不限于：

一元操作符：、、等

二元操作符：||、、、、、、|、、、、、=、==、=、、=等

范围比较：、等

字符串匹配：、、、等

聚合函数：、、、、等




凡是支持的语法规则，基本都有其对应的接口。且接口名称与的语法规则基本保持一致。对于熟悉的开发者，无须特别学习即可立刻上手使用。
高级用法
重定向
基于的支持，我们可以从数据库直接取出一个。然而，有时候需要取出并非是某个字段，而是有一些组合。例如：

这段代码从数据库中取出了消息的最新的修改时间，并以此将此时间作为消息的创建时间，新建了一个。这种情况下，就可以使用重定向。
重定向，它可以将一个查询结果重定向到某一个字段，如下：

通过的语法，将查询结果重新指向了。因此只需一行代码便可完成原来的任务。
链式调用
链式调用是指对象的接口返回一个对象，从而允许在单个语句中将调用链接在一起，而不需要变量来存储中间结果。
对于增删改查操作，都提供了对应的类以实现链式调用









、、等接口的返回值均为，因此可以通过链式调用，更自然更灵活的写出对应的查询。
传统的接口方便快捷，可以直接获得操作结果；链式接口则更具灵活性，开发者可以获取数据库操作的耗时、错误信息；也可以通过遍历逐个生成。

内同时支持这两种接口，优势互补，开发者可以根据需求，选择使用。
多表查询
支持联表查询，在某些特定的场景下，可以起到优化性能、简化表结构的作用。
同样提供了对应的接口，并在的支持下，通过的链式接口，可以同时从表中取出多个类的对象。

类字段绑定
在中，我们通过宏，将类的绑定为数据库的一个字段。但并非所有的类型都能绑定到字段。
内置支持的类型有：

 的字符串类型

包括但不限于、、、 、 、  等所有基于整型的基本类型

包括但不限于、、 等所有基于浮点型的基本类型

及所有基于枚举型的基本类型

、

、

、

、

、










然而，内置支持得再多，也不可能完全覆盖开发者所有的需求。因此支持开发者自定义类字段绑定。
类只需实现协议，即可支持绑定。


接口定义类对应数据库中的类型

接口定义从数据库类型反序列化到类的转换方式

接口定义从类序列化到数据库类型的转换方式


为了简化定义，提供了文件模版来创建类字段绑定。
、首先需要安装文件模版。该模版的安装脚本集成在的编译脚本中，只需编译一次，就会自动安装文件模版。安装完成后重启，新建文件，即可看到对应的文件模版。

、选择       


：需要进行字段绑定的类，这里以为例

：支持绑定类和类，这里选择

  ：类对应数据库中的类型。包括









、我们知道是遵循协议的，因此这里选择了类型。即，将以二进制数据的形式存到数据库中。完成后会自动创建如下的文件模版：

、然后只需将和互相转换的方式填上去即可。如下：

总结
通过和，体现了其易用性上的优势，使得数据库操作不再繁杂。同时，通过链式调用，开发者也能够方便地获取数据库操作的耗时等性能信息。而高级用法则扩展了的功能和用法。
由于篇幅所限，本文只介绍了最表层的功能。该系列接下来还将深入介绍的架构和原理，分享高并发的解决方案、实现中的思考等等。敬请期待！

本文来源于： 微信公众号

相关推荐
微信移动端数据库组件  系列：数据库修复三板斧二微信移动端数据库组件系列：原理篇三微信移动端数据库组件  系列： 特性篇四今天在几台上发现中的监控任务从来没有执行。但操作一下的配置 –   监控任务就能正常执行，重启也能正常执行。
出问题的机器的情况如下：问题挺奇怪，第一条执行正常第二条一直没有执行。
第一条正常证明有正常运行。监控任务的是凯丽系统自动安装的，理论上不会存在突然出错的情况。
问题定位：
出了 第二个任务确实没有执行还是执行前遇到问题退出刚好日志又打印到了
考虑到执行历史在系统日志里会有记录，检查日志如下，整的分钟点只有的第一个任务。
 
第二个任务确实没执行，应该是出了点问题再看看在修改的那一刻发生了什么？
根据最后一次修改的时间 检查系统日志如下
刚巧在同一秒内修改了次。根据凯丽安装监控的顺序，第一个应该是在安装第一条任务，第二个应该是在安装第二个任务。
猜想：根据的工作原理难道在增加第一个任务之后，加载了的配置，但是在增加第二个任务之后，没有加载该配置 如果是这样那么判断是否需要加载配置文件的机制是如何的呢
网上文档稀少直接看代码。
在网上找到一个的源代码 _
解压打开查看的执行过程在 的函数中的主函数代码如下_  最小执行单位是分钟因此是每秒执行一次 = 
_ 检查的配置文件是否有更新如果有更新则重新否则使用上次记录的 _  实际执行任务查看是如何加载的配置文件的，进入_函数 
可以看到在加载配置的时候会先获取 目录信息然后获取用户的配置文件的信息，然后比较上一次统计的修改时间与目录、配置文件的最后修改时间，如果一致则不重新，否则重新 配置文件。
为系统函数调用该函数取得的结构体的_的单位为秒。
至此，我们可以得出这样的结论：
由于两次修改时间均在同一秒，而的加载是以配置文件的最后修改时间秒级来判断文件是否需要更新。当出现以下场景，第二次对的修改就会失效不仅是增加。
失效的场景：  

而这个场景刚好是我们的出现失效的情况。
的刷新机制是以文件的最后修改时间为准
因此如果在一秒内对进行多次大于次操作就可能出现后修改的不执行
当再次对文件进行保存操作时会重新加载配置文件生效
解决办法：
该问题是由于在一秒内执行多次变更导致。因此解决办法有个：

在凯丽每次操作的时候增加 的操作

在凯丽每次操作完成之后， 强制刷新的最后更新时间

合并并行的操作为一次操作减少对的操作频率


根据凯丽的情况选择第二个方案对现有代码改动最小。
提醒：
脚本尽量不要在同一秒内多次操作内容，否则可能导致不生效的情况。

相关推荐
【腾讯云的种玩法】 为  设置特定启动提示信息
下延迟确认 机制导致的时延问题分析
性能监控——案件重现

直播平台遭遇攻击、竟然导致万用户断网

今年上半年，重庆市某区局部网络连续三日遭受攻击，造成局部地区的个宽带用户、个网吧及部分政企用户网络中断，中断时长最高接近个小时，影响极其恶劣。
因案情重大，重庆警方接到报案后立即开展工作，在腾讯云与腾讯守护者计划安全团队的协助下，警方专案组先后在福建和广东两地，抓获发动 攻击的犯罪嫌疑人的钟某某男，岁和陈某某男，岁。
到案后的犯罪嫌疑人钟某某供诉，他为攻击网络直播平台的主播，向陈某某购买  攻击程序，并与其共同实施网络攻击行为。

图： 犯罪嫌疑人 钟某某
科普时间

 黑产集团运作模式曝光

 攻击  又称“分布式拒绝服务”攻击   ，黑客通过控制肉鸡和流量，操纵网络资源，虚拟网络请求，对目标发动攻击，耗尽目标主机的资源和网络带宽，以达到瘫痪网络的目的。
 是互联网上常见的攻击方式，是一种原始而又暴力的网络犯罪行为，近几年已逐步形成完善而专业的黑色产业链。
腾讯安全专家介绍，黑客组织通常受雇佣或利益驱动，去攻击一些高盈利性行业。他们通过控制的服务器、肉鸡等资源，只需要隐藏在幕后操控指挥，即可发动上至政企网站、下到个人用户的互联网上任意一目标打击，对网络空间生态危害很大。
该案中，陈某某则作为攻击软件代理商，从上游软件作者处获取  攻击程序，售卖软件注册码给下游用户，联合发动  网络攻击，谋取不法利益。经查，该案中的犯罪嫌疑人与黑产圈某大型  犯罪团伙也有关联。

图： 犯罪嫌疑人使用的  攻击程序界面

乘胜追击、刻不容缓

目前，腾讯云联合腾讯守护者计划安全团队配合警方，对  犯罪团队产业链正在展开深入追查。直播行业并非是唯一受害者，今年开年以来，黑产团队气焰嚣张，国内外各大云服务商均陆续遭受大流量攻击，各行各业均受影响，上百家互联网企业受牵连，过千万用户受影响。这在很大程度上影响到国家网络基础设施的安全稳定，威胁到整个生态的发展。
我们的态度是坚决捍卫腾讯云上用户，让整个云上行业更安全。
封面配图： 搜索导语：本文详细的解释了机器学习中，经常会用到数据清洗与特征提取的方法，从理论、数据、代码三个层次予以分析。

机器学习，这个名词大家都耳熟能详。虽然这个概念很早就被人提出来了，但是鉴于科技水平的落后，一直发展的比较缓慢。但是，近些年随着计算机硬件能力的大幅度提升，这一概念慢慢地回到我们的视野，而且发展速度之快令很多人刮目相看。尤其这两年，阿法狗在围棋届的神勇表现，给人在此领域有了巨大的遐想空间。
所谓机器学习，一般专业一点的描述其是：机器学习  是一门多领域交叉学科，涉及概率论、统计学、逼近论、凸分析、算法复杂度理论等多门学科。专门研究计算机怎样模拟或实现人类的学习行为，以获取新的知识或技能，重新组织已有的知识结构使之不断改善自身的性能。
机器学习这门技术是多种技术的结合。而在这个结合体中，如何进行数据分析处理是个人认为最核心的内容。通常在机器学习中，我们指的数据分析是，从一大堆数据中，筛选出一些有意义的数据，推断出一个潜在的可能结论。得出这个不知道正确与否的结论，其经过的步骤通常是：

、预处理：把数据处理成一些有意义的特征，这一步的目的主要是为了降维。
、建模：这部分主要是建立模型通常是曲线的拟合，为分类器搭建一个可能的边界。
、分类器处理：根据模型把数据分类，并进行数据结论的预测。
本文讲的主要是数据的预处理降维，而这里采用的方式是。
的个人理论分析：
假设有一个学生信息管理系统，里面需要存储人性别的字段，我们在数据库里可以有、两个字段，用、分别代表是、否。当是男学生的时候其中列为，列为，为女生时列为，列为。我们发现，对任意一条记录，当为，必然为，反之也是如此。因此实际过程，我们把列或列去掉也不会丢失任何信息，因为我们可以反推出结论。这种情况下的、列的关联比是最高的，是。
再举另外一个例子，小明开了家店铺，他每天在统计其店铺的访问量和成交量。可以发现，往往多的时候，通常也多。少的时候，通常也很少。可以猜到和是有种必然的联系，但又没有绝对的联系。此时小明如果想根据、来衡量这一天的价值，往往可以根据一些历史数据来计算出、的关联比。拍脑门说一个，如果关联比大于，那么可以取其中任意一个即可衡量当天价值。这样就达到了降维的效果。
当然降维并非只能在比如说维数据，中选取其中的维作为特征值，它有可能是在的情况下，使得对 的关联比最大。
但是思想就是如此。简单点说：假设有、、…维数据，我们想把数据降到维，我们可以根据这维的历史数据，算出一个与…相关维数据，使得这个维数据对历史数据的关联比达到最大。
数学分析
假设我们有一组二维数据

如果我们必须使用一维来表示这些数据，又希望尽量保留原始的信息，你要如何选择？
这个问题实际上是要在二维平面中选择一个方向，将所有数据都投影到这个方向所在直线上，用投影值表示原始记录。这是一个实际的二维降到一维的问题。
那么如何选择这个方向才能尽量保留最多的原始信息呢？一种直观的看法是：希望投影后的投影值尽可能分散，这样投影的范围越大，在做分类的时候也就更容易做分类器。

以上图为例，可以看出如果向轴投影，那么最左边的两个点会重叠在一起，中间的两个点也会重叠在一起，于是本身四个各不相同的二维点投影后只剩下两个不同的值了，这是一种严重的信息丢失。同理，如果向轴投影中间的三个点都会重叠，效果更糟。所以看来和轴都不是最好的投影选择。直观来看，如果向通过第一象限和第三象限的斜线投影，则五个点在投影后还是可以区分的。
我们希望投影后投影值尽可能分散，那什么是衡量分散程度的统计量呢，显然可以用数学上的方差来表述。

通常，为了方便计算，我们会把每个点都减去均值，这样得到的点的均值就会为这个过程叫做均一化。均一化后：

于是上面的问题被形式化表述为：寻找一个基，使得所有数据变换为这个基上的坐标表示后，方差值最大。
我们跳出刚才的例子，因为很容易把刚才的结论推广到任意纬度。要求投影点的方差最大值所对应的基，这时有两种方法来求解：
方法一：
假设有个投影：  
显然刚才说的方差可以用来表示： 
而投影 = 原始数据  ；
这样方差可以表示为：   
求这个方差的最大值，我们可以用拉格朗日插值法来做
，λ为： 

求导’： 
令导数为： 
这样问题就转换成求的特征值和特征向量，问题就迎刃而解了。
同时我们可以知道，特征值和特征向量有很多个，当λ最大的时候所对应的特征向量，我们把它叫作主成份向量。如果需要将降维为，只需要去前大的特征值所对应的特征向量即可。
方法二：
对于上面二维降成一维的问题来说，找到那个使得方差最大的方向就可以了。不过对于更高维，首先我们希望找到一个方向基使得投影后方差最大，当我们找第二个方向基的时候，为了最大可能还原多的信息，我们显然不希望第二个方向与第一个方向有重复的信息。这个从向量的角度看，意味这一个向量在另一个向量的投影必须为
这就有：
这时候我们思路就很明了：将一组维向量降为维大于，小于，其目标是选择个单位模为正交基，使得原始数据变换到这组基上后，各字段两两间协方差为，而字段本身的方差则尽可能大。
还是假设我们原始数据为

我们做一个处理得到：

我们发现要是能找到一个基使得这个矩阵变成一个，除了斜对角外，其余全是的话，那这个基就是我们需要的基。那么问题就转换成矩阵的对角化了。
先说一个先验知识：
在线性代数上，我们可以知道实对称矩阵不同特征值对应的特征向量必然正交。对一个行列的实对称矩阵一定可以找到个单位正交特征向量，设这个特征向量为⋯。
组合成矩阵的形式如图：
由上结论又有一个新的结论就是，对于实对称矩阵，它的特征向量矩阵为，必然满足：
 
有了这个先验知识，我们假设原始数据，基为，投影后的数据为。则有=。根据上面所说的要是投影后的矩阵的为一个对角阵，那么就有：

要是为对角阵，那么只需要是的特征向量即可，那么问题最终还是转换为求的特征向量。
代码实现：
刚才说了两种的计算思路，我们简单看下代码的实现吧，由于自带了求特征向量的函数，这边使用进行模拟。


我们用测试数据试试：

当我们只保留的成分时，从维降到维，当进行还原时，准确性也会稍微差些
  
 
当我们保留的成分时，从维降到维，当进行还原时，还原度会稍微好些。


当我们保留的成分时，就无法降维了。这时候就可以还原了。
 

总结一下：
我们在做机器学习的数据分析的时候，由于数据集的维度可能很高，这时候我们需要对数据进行降维。本文从各个方向介绍了一下降维的经典方法，也从代码的角度告诉了怎么降维的过程。实际操作可能会比较简单，但是原理个人觉得还是有学习的地方的。适用场景： 系列系统异常宕机蓝屏且存在文件
相关背景解释：众所周知，历史上比较多，无故宕机、程序卡死的例子较多，为了避免无迹象可循的情况， 推出 机制在宕机时先进行蓝屏收集宕机前状态，并且可以捕获到导致异常的关键错误，当出现异常时会调用系统来形成一个转储文件 ，通过特殊工具可以进行分析。
蓝屏文件俗称   ，一般出现后处理方式就只有重启，蓝屏的产生原因是：

有三大规则会触发：

保护规则：当低级特权的代码直接访问高级特权代码与数据时如某些安全防护软件通过用户态进行驱动修改就会触发；
异常处理：程序异常时程序本身没有写好完整的异常处理回路，系统接收到异常则启动先行中断机制，所以程序设计存在问题时也有可能触发蓝屏比如之前漏洞黑客所用的工具导致蓝屏，明显就是没有写好异常处理回路
、中调用了只有在特定调用的内核参数，即只有特定中断请求的时候才可以使用调用的内核参数在未到中断请求时被发起调用一般出现于 应用中

在腾讯云主机上，一般第一、二规则导致的 比较多。
附蓝屏产生过程：

转储原理：

一、    分析：
虽然必然会输出文件，但是也会带来相关有用的信息，一般呈现方式为：


浅蓝框：序言、错误的信息描述
中间部分：建议的措施
红色框：相关中断的代码及其参数

关于 浅蓝框 跟 中间部分 基本可以忽略，作为排错需要关注的下面红色框的参数，下面具体举个例子：
：，，，
：，即导致的关键代码，通常可以在 可以搜索到：，涉及的进程对象 ：对应对象的指针指向位置：进程涉及的映像名：备注解析信息等
二、文件分析
、    工具环境准备，配置好 路径，使其用相关命令时可以自动加载对应可能信息提供较少：

、    设置路径为\ 使其在加载相关最常见就是时自动从 进行下载

：  时自动加载涉及到的：
 
对应文件夹出现相关：

、    打开文件：

、    初始界面如下：

、    点击！ – 可以进行自动分析，可以看到这个是因为底层调用导致：
 
、    但是大部分并不是如例子所示就可以明确看出涉及的驱动进程，所以可以使用 查看时住的进程：

、    通过 可以到进程中涉及的线程信息可以看到这里是时系统掉：

、    如果是系统组件导致的问题的，可以通过  导出加载的内核模块：

、     可以看出时内存状态可以看到用户的   进程占用较高：
 
、    当然也可以通过视图来定位 在什么位置：
 
 
、    提供大量其他视图可以辅助定位原因，可以根据实际进行灵活使用比如视图也是很好用的一个功能：

后言
系统方面的 提供信息较少，在这块信息会比较多，具体使用方法需要根据具体来灵活调整使用。
附常见命令：
进程：   ； _； _；线程： ； _； _；请求包：   _；；常见同步对象：  _；  _；  _；作业： ；会话 ；内存管理 的命令等。
附件是使用指南版
相关推荐：如何分析 ： 起源与初始设置一云硬盘与云主机一样，是云计算用户接触最多的云服务之一。但是许多用户可能对它并不是特别了解，仍然像本地使用硬盘那样对待云硬盘。有的开发者甚至不太在意选择具体哪种云硬盘，直到某一天网站开始变得响应迟缓，才发现瓶颈竟然是因为当初选的硬盘性能已无法满足网站的要求。
月日，在腾讯云技术社区推出的云端架构师养成系列分享，我们邀请到了负责云硬盘产品经理和研发工程师进行在线分享，为大家全面地介绍云硬盘服务的具体情况，同时分享一些云硬盘使用的最佳实践。
分享嘉宾
张浩，腾讯云存储产品经理吴光辉，腾讯云后台研发工程师
分享视频回放
当前浏览器不能支持视频播放，请采用或以上浏览器
另外，课程分享资料请查看文末附件下载。
下期分享
时间：年月日，晚点半点半主题：流量扛不住？云端负载均衡上手与实践课程链接：=上一次分享的如何通过代码分析精简用例主要是针对侧逻辑复用，从而精简冗余用例的案例。
本次的案例分享是希望通过对代码的分析，完成用例执行的精简。
测试需求：
每日每工号电话拉取画像限制为次
这种类似频次的需求，在很多项目中都会遇到，它们共通的特点是实际操作起来比较复杂，在有限的时间里可能难以覆盖。对于这类需求比较好的方式是单元测试全流程测试的组合，关于单元测试的方法在我曾经的乱弹单元测试中有介绍，本次介绍的是手工测试如何通过代码分析来简化。
代码分析：
涉及：画像___ 风控___

不想看下面的分析过程的可以直接看上图。

画像在拉取画像前会请求风控，检查画像拉取配额信息

__


风控首先拉取用户画像配额配置如：次，接下来通过读取获取用户画像使用次数，判断使用次数是否小于配额，如果不小于配额则返回没有配额，否则自增使用次数写入后返回。

____

___


画像通过返回的配额信息，决定是否拉取画像。

__

用例精简：
拿两个用例来举例：
登录工号，拨打网络电话同一号码次，同一天内尝试再次拨打
登录工号，拨打网络电话不同号码次，同一天内尝试再次拨打
通过这两个用例我们可以得出写用例同学是希望校验同一号码是否会被“去重”。
通过代码分析后，我们的执行则可以变成：
前提：拨打一次后，拨打同一号码，用户画像使用次数是否增加。
前提：拨打一次后，拨打不同号码，用户画像使用次数是否增加。
用户画像使用次数的查询，如果直接去通过命令行去查是比较麻烦的，从代码里我们可以看到开发其实是把查询结果写进了日志。我们可以通过日志比较直观的看到查询结果。

__ = =  = = =
至此，我们就完成了从耗时较长的多次电话拨打转变为拨打少量电话检查日志，从而完成了用例执行的精简。
总结
对于一些共通的需求和设计保持敏感，保持测试的完备性的同时提升测试效率。作者：，腾讯适配测试负责人、专家兼容测试负责人

 导读
互联网产品测试，测试的是产品质量，但也同时考验着测试者的质量。
什么是兼容性测试？指的是设计程序与硬件、软件之间的兼容性的测试，考验的是程序，软件，硬件三者的能力，缺一不可。而什么是好的兼容测试？我个人理解是一个双向检验的过程：“测试产品质量的同时，也在考验测试者的质量”。只有当两个“质量”都达标的时候，才是真正的测试通过。
天下大事必作于细，我们从基础环节便严格要求，围绕质量高于一切的理念打造精品兼容服务。以下跟大家分享一下腾讯游戏兼容测试一步步走来的经历。

一、腾讯游戏兼容测试的源起
腾讯最早做兼容性测试其实是在端游时代，目标是为了给腾讯产品建立一道专业的测试防线，保证产品兼容性方面的质量。兼容测试可以说是见证了英雄联盟、天天爱消除、王者荣耀这些里程碑式的游戏崛起，也在路上修炼了自己的功力。兼容测试根据服务对象和测试内容可分为大类：端的兼容测试和移动端兼容测试。两者之间有着天壤之别，最大差别就是测试环境，端游的玩家环境相对简单集中，所以兼容性测试环境易搭建，流程简单并且覆盖面广，所以，在功能测试通过后，兼容性暴露出的问题往往并不严重。以下主要介绍下腾讯移动兼容性测试团队是如何运作的。
二、建立最有效的用户机型库
从年手游市场起步，手机用户数量增长，每年超过款新机型的上市，安卓碎片化问题严重，移动游戏对兼容测试的服务需求越来越强。腾讯移动兼容性团队也随着不断调整和更新测试角度、方法和范围，投入专业测试人力，帮助产品发现和规避兼容性缺陷；

为了保障兼容性测试的有效性，甄选最能代表市场的测试设备成为了团队面临的第一个问题。测试设备选择需要一个科学的范围，很多人觉得测试设备越多越好，在不考虑其他成本的情况下这的确是一个无限接近正确的答案。而事实上这是一个不可能完成的任务，投入越多测试设备，测试成本的边际效应表现越明显。
通过腾讯游戏大数据对机型和缺陷进行统计，我们选择了的测试范围，这部分机型在市场占比接近，兼容性缺陷触发率在左右，硬件和品牌覆盖面完整，此外，这部分设备上发现的问题有一定代表性，也便于开发更有效地修复和解决问题，性价比综合评定下最高。在服务腾讯游戏的过程中也获得了项目组的认可，最终被应用到腾讯游戏的测试标准中。

为了保障每次测试项目组都可以拿到有效的机型，我们会定时采购来匹配动态变化中的机型库。除此以外，我们还会有针对性地去采购新上市机型，以便满足游戏的特殊需求，同时根据经验来调整测试范围。
三、“质量＞效率”的测试坚持
腾讯兼容性测试团队大部分使用人工测试，其实测试成本非常高。
所以在早期，因为团队人力紧张，排期有压力的时候，我们也考虑过采购第三方自动化兼容测试服务。但实际用下来，效果上有几点比较难受：
    问题的准确性、完整性不足
我们团队反馈问题必须要求验证必现性，＞次出现才会归类为必现，还需反馈信息完整并且会根据市场占比评估出当前缺陷影响的人数范围，提出建议性的优先处理等级；而第三方服务会提出非常多的问题，需要测试投入精力去甄选出真正有效的问题，反而增加了确认工作的人力成本消耗。

、测试深度较浅，核心功能很难覆盖
第三方服务一般会测试到新手引导，但其实腾讯游戏对兼容测试的需要至少是覆盖核心功能和主要场景的。

、无法实现复杂操作
专业测试人员对缺陷的敏感度高，对缺陷定位准确。可以实现复杂操作步骤，如动作类、竞速类或随机事件。对音效、重力感应、、智能玩具测试上无可替代。
整体评估下来效率有提升，但服务效果会有比较大的下滑。为了保障游戏测试的品质，也响应公司精品游戏的战略，在效率和质量者中，我们最终选择了质量。我们愿意花更多的时间和成本把效果做好。
虽然兼容测试以人工测试为主，但我们始终也没有放弃对效率的追逐，团队其实也一直在研究自动化测试方案。其中，包括可以快速验证兼容的标准兼容测试，保障人工测试品质同时提高测试效率的多机同步助手；针对一些项目组提来的重度兼容需求，例如《王者荣耀》的自动化测试，我们还针对性研发了框架，获得官方推荐，也是目前腾讯游戏的标配框架，被应用在《火影忍者》、《龙之谷》等众多项目的各种测试场景中。
多机同步助手演示效果视频地址：

框架示意图
目前，腾讯移动兼容性测试团队除了负责腾讯所有游戏的兼容性质量，也通过平台向外部开发者开放了同品质的兼容性测试服务。
然而这却并不是腾讯兼容团队和兼容服务努力的终点，我们期待着将越来越智能的测试深度介入游戏测试的各个环节，让云端化的游戏测试成为一件可以随时触发的自动化流水工作。通过技术的力量解放开发者，专注体验做出更好的产品，最终实现“ ， ”。

商业转载请联系腾讯获得授权，非商业转载请注明出处。
原文链接：
欢迎对兼容性测试同样精益求精的同行们来体验服务，共同交流。
点击链接即可使用专家兼容测试服务：
如果对使用当中有任何疑问，欢迎联系腾讯企业：
亲爱的读者，为了能够提供更好的网站内容，希望您填写我们的问卷，我们会随机抽取读者回馈币以示感谢！问卷入口：

相关推荐阻击外挂——《龙之谷手游》安全测试的那点事直播应用的后台服务器性能测试实践作者 ：徐汉彬 

接首篇《 人人都可以做深度学习应用：入门篇上 》
四、经典入门：识别手写数字
常规的编程入门有“ ”程序，而深度学习的入门程序则是，一个识别×像素的图片中的手写数字的程序。
 
备注： 的数据和官网
深度学习的内容，其背后会涉及比较多的数学原理，作为一个初学者，受限于我个人的数学和技术水平，也许并不足以准确讲述相关的数学原理，因此，本文会更多的关注“应用层面”，不对背后的数学原理进行展开，感谢谅解。
 加载数据
程序执行的第一步当然是加载数据，根据我们之前获得的数据集主要包括两部分：的训练数据集和的测试数据集。里面每一行，是一个×=的数组，数组的本质就是将×像素的图片，转化成对应的像素点阵。
例如手写字的图片转换出来的对应矩阵表示如下：

之前我们经常听说，图片方面的深度学习需要大量的计算能力，甚至需要采用昂贵、专业的的，从上述转化的案例我们就已经可以获得一些答案了。一张像素的图片，对学习模型来说，就有个特征，而我们实际的相片和图片动辄几十万、百万级别，则对应的基础特征数也是这个数量级，基于这样数量级的数组进行大规模运算，没有强大的计算能力支持，确实寸步难行。当然，这个入门的的还是可以比较快速的跑完。
中的关键代码读取并且加载数据到数组对象中，方便后面使用：

 构建模型
的每一张图片都表示一个数字，从到。而模型最终期望获得的是：给定一张图片，获得代表每个数字的概率。比如说，模型可能推测一张数字的图片代表数字的概率是但是判断它是的概率是因为和都有上半部分的小圆，然后给予它代表其他数字的概率更小的值。
 
的入门例子，采用的是回归 ，模型可以用来给不同的对象分配概率。为了得到一张给定图片属于某个特定数字类的证据，我们对图片的个特征点阵里的各个像素值进行加权求和。如果某个特征像素值具有很强的证据说明这张图片不属于该类，那么相应的权重值为负数，相反如果某个特征像素值拥有有利的证据支持这张图片属于这个类，那么权重值是正数。类似前面提到的房价估算例子，对每一个像素点作出了一个权重分配。
假设我们获得一张图片，需要计算它是的概率，转化成数学公式则如下：

公式中的代表需要预测的数字，代表预测数字为的情况下，个特征的不同权重值，代表的偏置量，则是该图片个特征的值。通过上述计算，我们则可以获得证明该图片是的证据的总和，函数可以把这些证据转换成概率 。的数学原理，辛苦各位查询相关资料哈
将前面的过程概括成一张图来自官方则如下：

不同的特征和对应不同数字的权重进行相乘和求和，则获得在各个数字的分布概率，取概率最大的值，则认为是我们的图片预测结果。
将上述过程写成一个等式，则如下：

该等式在矩阵乘法里可以非常简单地表示，则等价为：

不展开里面的具体数值，则可以简化为：

如果我们对线性代数中矩阵相关内容有适当学习，其实，就会明白矩阵表达在一些问题上，更易于理解。如果对矩阵内容不太记得了，也没有关系，后面我会附加上线性代数的视频。
虽然前面讲述了这么多，其实关键代码就四行：
 
上述代码都是类似变量占位符，先设置好模型计算方式，在真实训练流程中，需要批量读取源数据，不断给它们填充数据，模型计算才会真实跑起来。则表示，先给它们统一赋值为占位。数据是从数据文件中读取的，而、是在训练过程中不断变化和更新的，则是基于前面的数据进行计算得到。
 损失函数和优化设置
为了训练我们的模型，我们首先需要定义一个指标来衡量这个模型是好还是坏。这个指标称为成本或损失，然后尽量最小化这个指标。简单的说，就是我们需要最小化的值，的值越小，则我们的模型越逼近标签的真实结果。
中使用的损失函数是“交叉熵”，它的公式如下：
 
 是我们预测的概率分布  是实际的分布我们输入的，交叉熵是用来衡量我们的预测结果的不准确性。拥有一张描述各个计算单元的图，也就是整个模型的计算流程，它可以自动地使用反向传播算法 ，来确定我们的权重等变量是如何影响我们想要最小化的那个值的。然后，会用我们设定好的优化算法来不断修改变量以降低值。
其中，采用梯度下降算法  以的学习速率最小化交叉熵。梯度下降算法是一个简单的学习过程，只需将每个变量一点点地往使值不断降低的方向更新。
对应的关键代码如下：

备注内容：

交叉熵
反向传播

在代码中会看见 的概念和变量名，其实这个是个非常简单的东西，就是设置一个个元素的数组，其中只有一个是，其他都是，以此表示数字的标签结果。例如表示数字的标签值：
 训练运算和模型准确度测试
通过前面的实现，我们已经设置好了整个模型的计算“流程图”，它们都成为框架的一部分。于是，我们就可以启动我们的训练程序，下面的代码的含义是，循环训练我们的模型次，每次批量取个训练样本。
 
其训练过程，其实就是框架的启动训练过程，在这个过程中，批量地将数据交给底层库进行处理。我在官方的里追加了两行代码，每隔次则额外计算一次当前模型的识别准确率。它并非必要的代码，仅仅用于方便观察整个模型的识别准确率逐步变化的过程。

当然，里面涉及的预测准确率等变量，需要在前面的地方定义占位：

当我们训练完毕，则到了验证我们的模型准确率的时候，和前面相同：

我的跑出来的结果如下回归的例子运行速度还是比较快的，当前的准确率是：

 实时查看参数的数值的方法
刚开始跑官方的的时候，我们总想将相关变量的值打印出来看看，是怎样一种格式和状态。从的代码中，我们可以看见很多的变量对象，而实际上这些变量对象都是无法直接输出查看，粗略地理解，有些只是占位符，直接输出的话，会获得类似如下的一个对象：
 = =
既然它是占位符，那么我们就必须喂一些数据给它，它才能将真实内容展示出来。因此，正确的方法是，在打印时通常需要加上当前的输入数据给它。
例如，查看的概率数据：
 _={ _ _ _}
部分非占位符的变量还可以这样输出来：

总的来说，的识别准确率是比较令人失望，因此，官方的其实也有多种模型的不同版本，其中比较适合图片处理的卷积神经网络的版本，可以获得以上的准确率，当然，它的执行耗时也是比较长的。
备注：_就是卷积神经网络版本的，后面有附带微云网盘的下载
前馈神经网络  版本的，可达到：

分享在微云上的数据和源码：
备注：国外网站下载都比较慢，我这份下载相对会快一些，在环境已经搭建完毕的情况下，执行里面的即可
五、和业务场景结合的：预测用户是否是超级会员身份
根据前面的内容，我们对上述基于只是三层输入、处理、输出的神经网络模型已经比较熟悉，那么，这个模型是否可以应用到我们具体的业务场景中，其中的难度大吗？为了验证这一点，我拿了一些现网的数据来做了这个试验。
 数据准备
 
我将一个现网的电影票活动的用户参与数据，包括点击过哪些按钮、手机平台、地址、参与时间等信息抓取了出来。其实这些数据当中是隐含了用户的身份信息的，例如，某些礼包的必须是超级会员身份才能领取，如果这个按钮用户点击领取成功，则可以证明该用户的身份肯定是超级会员身份。当然，我只是将这些不知道相不相关的数据特征直观的整理出来，作为我们的样本数据，然后对应的标签为超级会员身份。
用于训练的样本数据格式如下：

第一列是号码，只做认知标识的，第二列表示是否超级会员身份，作为训练的标签值，后面的就是地址，平台标志位以及参与活动的参与记录是未成功参与，表示成功参与。则获得一个拥有个特征的数组经过一些转化和映射，将特别大的数变小：
          
对应的是否是超级数据格式如下，作为监督学习的标签：
超级会员： 非超级会员： 
这里需要专门解释下，在实际应用中需要做数据转换的原因。一方面，将这些数据做一个映射转化，有助于简化数据模型。另一方面，是为了规避的问题，当数值过大，在一些数学指数和除法的浮点数运算中，有可能得到一个无穷大的数值，或者其他溢出的情形，在里会变为类型，这个类型会破坏掉后续全部计算结果，导致计算异常。例如下图，就是特征数值过大，在训练过程中，导致中间某些参数累计越来越大，最终导致产生值，后续的计算结果全部被破坏掉：

而导致的原因在复杂的数学计算里，会产生无穷大或者无穷小。例如，在我们的这个中，产生的原因，主要是因为的计算导致。
 
      
刚开始做实际的业务应用，就发现经常跑出极奇怪异的结果遇到问题，我发现程序也能继续走下去，几经排查才发现是值问题，是非常令人沮丧的。当然，经过仔细分析问题，发现也并非没有排查的方式。因为，值是个奇特的类型，可以采用下述编码方式 = 来检测自己的训练过程中，是否出现的。
关键程序代码如下：

我采用上述方法，非常顺利地找到自己的深度学习程序，在学习到哪一批数据时产生的。因此，很多原始数据我们都会做一个除以某个值，让数值变小的操作。例如官方的也是这样做的，将的像素颜色的数值统一除以，让它们都变成一个小于的浮点数。
在处理原始图片像素特征数据时，也对特征数据进行了变小处理：

值问题一度深深地困扰着我往事不堪回首__，特别放到这里，避免入门的同学踩坑。
 执行结果
我准备的训练集和测试集数据并不多，不过，超级会员身份的预测准确率最终可以达到。虽然，预测准确率是不高，这个可能和我的训练集数据比较少有关系，不过，整个模型也没有花费多少时间，从整理数据、编码、训练到最终跑出结果，只用了个晚上的时间。

下图是两个实际的测试例子，例如，该模型预测第一个用户有的概率是非超级会员用户，的概率为超级会员用户该预测是准确的。
 
通过上面的这个例子，我们会发觉其实对于某些比较简单的场景下应用，我们是可以比较容易就实现的。
六、其他模型
 识别图片分类的官方
数据集的分类是机器学习中一个公开的基准测试问题，它任务是对一组的图像进行分类，这些图像涵盖了个类别：飞机， 汽车， 鸟， 猫， 鹿， 狗， 青蛙， 马， 船和卡车。
这也是官方的重要之一。
 
更详细的介绍内容：

  

卷积神经网络


该例子执行的过程比较长，需要耐心等待。
我在机器上的执行过程和结果：
_用于训练：

_用于检验结果：

识别率不高是因为该官方模型的识别率本来就不高：

另外，官方的例子我首次在月日跑的时候，还是有一些小问题的，无法跑起来最新的官方可能已经修正，建议可以直接使用我放到微云上的版本代码里面的和读取文件的路径，需要调整一下。
源码下载：
微云盘里，不含训练集和测试集的图片数据，但是，程序如果检测到这些图片不存在，会自行下载：

 是否大于岁的测试
为了检验回归模型是否能够学习到一些我自己设定好的规则，我做了一个小来测试。我通过随机数生成的方式构造了一系列的数据，让前面的回归模型去学习，最终看看模型能否通过训练集的学习，最终预测这个样本数据是否大于岁。
模型和数据本身都比较简单，构造的数据的方式：
我随机构造一个只有个特征纬度的样本数据， ，其中随机取值，数字是放进去作为干扰。
如果大于岁，则标签设置为：  ；
否则，标签设置为：  。
生成了条假训练集去训练该模型，最终它能做到成功预测准确：
 
微云下载源码下载：
 基于的古诗学习
最开头的写古诗，非常令人感到惊艳，那个是美国的一个研究者做出来的，能够根据主题生成不能的古诗，而且古诗的质量还比较高。于是，我也尝试在自己的机器上也跑一个能够写古诗的模型，后来我找到的是一个基于的模型。循环神经网络  ，是非常常用的深度学习模型之一。我基于一个外部的，进行一些调整后跑起一个能够学习古诗和写古诗的比较简单的程序。
执行写诗让它写了十首：

抑滴留居潋罅斜，二川还羡五侯家。古刘称士身相染，桃李栽林欲称家。回首二毛相喘日，万当仙性尽甘无。如何羽马嘶来泪，不信红峰一寸西。

废寺松阴月似空，垂杨风起晚光催。乌心不把嫌香径，出定沧洲几好清。兰逐白头邻斧蝶，苍苍归路自清埃。渔樵若欲斜阳羡，桂苑西河碧朔来。

遥天花落甚巫山，凤珮飞驰不骋庄。翠初才象饮毫势，上月朱炉一重牛。香催戍渚同虚客，石势填楼取蕊红。佳句旧清箱畔意，剪颜相激菊花繁。

江上萧条第一取，名长经起月还游。数尺温皋云战远，放船乡鬼蘸云多。相逢槛上西风动，莫听风烟认钓鱼。堤费禽雏应昨梦，去朝从此满玄尘。

避命抛醺背暮时，见川谁哭梦知年。却随筵里腥消极，不遇嘉唐两带春。大岁秘魔窥石税，鹤成应听白云中。朝浮到岸鸱巇恨，不向青青听径长。

楚田馀绝宇氤氲，细雨洲头万里凉。百叶长看如不尽，水东春夜足残峰。湖头风浪斜暾鼓，北阙别罹初里村。山在四天三顾客，辘轳争养抵丹墀。

九日重门携手时，吟疑须渴辞金香。钓来犹绕结茶酒，衣上敬亭宁强烧。自明不肯疑恩日，琴馆寒霖急暮霜。划口濡于孤姹末，出谢空卿寄银机。莲龛不足厌丝屦，华骑敷砧出钓矶。

为到席中逢旧木，容华道路不能休。时闲客后多时石，暗水天边暖人说。风弄霜花嗥明镜，犀成磨逐乍牵肠。何劳相听真行侍，石石班场古政蹄。

听巾邑外见朱兰，杂时临厢北满香。门外玉坛花府古，香牌风出即升登。陵桥翠黛销仙妙，晓接红楼叠影闻。敢把苦谣金字表，应从科剑独频行。

昨日荣枯桃李庆，紫骝坚黠自何侵。险知河在皆降月，汉县烟波白发来。仍省封身明月阁，不知吹水洽谁非。更拟惭送风痕去，只怕鲸雏是后仙。


另外，我抽取其中一些个人认为写得比较好的诗句以前跑出来的，不在上图中：

该模型比较简单，写诗的水平不如最前面我介绍的美国研究者，但是，所采用的基本方法应该是类似的，只是他做的更为复杂。
另外，这是一个通用模型，可以学习不同的内容古诗、现代诗、宋词或者英文诗等，就可以生成对应的结果。
七、深度学习的入门学习体会

人工智能和深度学习技术并不神秘，更像是一个新型的工具，通过喂数据给它，然后，它能发现这些数据背后的规律，并为我们所用。

数学基础比较重要，这样有助于理解模型背后的数学原理，不过，从纯应用角度来说，并不一定需要完全掌握数学，也可以提前开始做一些尝试和学习。

我深深地感到计算资源非常缺乏，每次调整程序的参数或训练数据后，跑完一次训练集经常要很多个小时，部分场景不跑多一些训练集数据，看不出差别，例如写诗的案例。个人感觉，这个是制约发展的重要问题，它直接让程序的“调试”效率非常低下。

中文文档比较少，英文文档也不多，开源社区一直在快速更新，文档的内容过时也比较快。因此，入门学习时遇到的问题会比较多，并且缺乏成型的文档。


八、小结
我不知道人工智能的时代是否真的会来临，也不知道它将要走向何方，但是，毫无疑问，它是一种全新的技术思维模式。更好的探索和学习这种新技术，然后在业务应用场景寻求结合点，最终达到帮助我们的业务获得更好的成果，一直以来，就是我们工程师的核心宗旨。另一方面，对发展有重大推动作用的新技术，通常会快速的发展并且走向普及，就如同我们的编程一样，因此，人人都可以做深度学习应用，并非只是一句噱头。
参考文档：
中文社区英文社区
数学相关的内容：
 高中和大学数学部分内容线性代数视频
文章来源公众号 小时光茶社 

相关推荐 效果广告点击率预估近期实践：深度学习 免费体验腾讯云服务器年月日世界权威数据库管理系统之一的的  版本发布，在版本更新介绍里，出现了这么两行字：

其实，早在去年发布的 版本中，腾讯互娱运营部团队提交的两个新特性第一次被被集成到新版本中，被点名感谢了！
 
时隔半年，在更新版本的时候再一次特别感谢了腾讯。据了解，新的版本里增加了腾讯互娱运营部团队输出的功能特性，这个新的版本里，新增了我们从年就开始在腾讯游戏场景中大规模使用的 两大核心特性：快速加字段以及大字段压缩。
看到这里，身在这个生态圈外的你可能想问：
是什么？团队做什么？
对于圈外人来说，和是个抽象的存在。但是对圈内的人来说，置身在的生态圈是所有的人生幸事。说到就不得不提，它原本是一个开放源代码的关系数据库管理系统，在过去由于性能高、成本低、可靠性好，成为最流行的开源数据库，后来被甲骨文公司收购了。然而，原创始人麦克尔·维德纽斯认为的收购，有将闭源的潜在风险。因此以为基础，成立分支计划。由于具有众多领先的新特性，原先很多使用的开源软件现在逐渐转向，短短几年过去，已成为全球排名前的数据库，并且使用人数和影响力都在稳步提升。
从秒到秒  倍的质变
腾讯互娱运营部的 团队，一直都是等开源软件的使用者，致力于为游戏提供稳定、高效的在线数据存取服务，根据腾讯游戏的业务需求，不断改进数据库和提升性能，提供高性能、可扩展、稳定可靠的数据库解决方案。团队发现，每次游戏停机维护，花在数据库的变更上的时间最长，这对用户体验和收入都有影响。“每次半夜数据库更新，每台机器都要花费数小时，我们也必须盯着等着，生怕出错导致更新延迟，太不智能。我们团队就想寻求突破，改变以往只从外围做修改的方式，而是从内核上做出改动，实现质的突破。这是之前不曾有过的。”互动娱乐运营部存储与计算资源中心的说。
通过大半年的努力，团队基于官方版本的定制了后来改名为，提供业界领先的在线加字段功能——使用作为存储的业务实例中，占比。
“这个版本出了之后，我们在一些游戏上进行了测试，效果明显。先前，某游戏在数据更新的时候对日志中一个约的分区表执行加字段操作，当时这个机器的配置比较低，结果耗时约个小时，还导致正常入库操作延迟数小时。而将该升级成我们的版本后，执行类似的加字段操作，仅需秒就完成了！”互动娱乐运营部存储与计算资源中心的举了个例子。
从秒小时到秒，该游戏在数据库更新加字段的操作上，效率提高了倍！这只是一个举例，但是据团队介绍，数据量越大，该特性带来的效果越明显。
获和创始人的认可
一直以来，腾讯游戏的团队都是等开源软件的使用者，也通过对的管理和维护工作，逐步积累了丰富的运维经验技术和源码能力，和版本也是基于的系统定制的。“我们从受益这么多，也很想为开源社区做一点贡献。我们梦想着有一天，我们能与的开源社区共同成长。”互动娱乐运营部存储与计算资源中心的说起了团队的开源梦。“我们知道，这做起来很难，但却价值最大：从开源社区中来，再把我们的经验和成果回馈到社区去，让广大使用者和爱好者可以更加放心地使用我们的功能特性。”
年月，团队将的两个功能提交给的复制团队及邮件组，得到了官方团队的积极认可。但可惜的是，鉴于公司或流程或制度上过于严谨的考虑，这些功能迄今还未能落地。
转机出现在年月，在开源社区爱好者联盟的帮助下，团队见到了和的创始人先生。
这是一位有传奇色彩的程序员，他是第一行代码的作者，已经岁了，白发苍苍，依旧亲自参与写代码，先后创立了，和这三个项目分别是老爷子用自己的三个孩子名字命名的。
在见到之后，团队抓住机会将腾讯游戏的业务场景及定制化的两个产品和 的设计和功能特性做了详细地阐述。“那天下午，一位业界泰斗，认真聆听我们给他讲，表述不清的时候，大家在白板上边写边画。能身处其中，我真的觉得特别幸运。”回忆。




图说：团队在向之父介绍我们的并进行交流
 最后团队表达回馈开源社区的愿望，希望把和 的部分功能特性提交给，集成到的主干代码。而这个想法也得到了的大力支持，而且这些正是所需要的。尤其是快速加字段特性，是整个生态都急迫需要的特性。“他对我们产品的功能表示了认可，他说我们的是他们之前没想过的。能得到创始人的认可，让我们看到了圆梦的曙光，备受鼓舞！”说。

当天团队和的合照
圆梦  新特性回馈开源社区
作别之后，团队开始按照的代码规范，在上提交了我们的 ，经过各种和比较，团队提交的个 都得到了认可。

与的、等讨论快速加字段的设计及实现
年月，团队第一次参加了的开发者大会，确定了 优化的两个特性集成到 的测试版本。


 这是腾讯游戏的团队第一次出现在了的感谢名单里！今年的月日， 版本发布，新增了的两个核心功能：快速加字段和大字段压缩。这两个功能分别解决了超级大业务加字段导致的停机时间太长的问题，及业务大字段压缩问题，提升服务器的吞吐和磁盘空间利用率；这两个功能可以应用到包括游戏在内的其他场景中！
这个版本发布之后，第一个全职员工、最资深的开发专家之一还专门写了一篇博客给新增加快速加字段功能点赞：

“                    ”

快速加字段功能是 最重要的特性之一。

“            ”

这个设计是来自腾讯游戏团队的。
“不管是版本更新信息的致谢，还是的认可，都是对我们团队最大的肯定。尤其是我们使用了多年的特性，能合并到主流的分支中，对社区做贡献，让更多使用者受益，这才是最值得高兴的事情。”笑称。
 “自己有产出并被大量使用才是对开源社区最大的贡献和回馈。”这一直是团队的梦想，这句话也一直激励了团队一路向前。只要有利于开源和社区发展，团队都愿意尝试。最终，腾讯互娱运营部的团队也做到了。
我们能为开源社区做点啥？团队用行动已经给出了答案。
这样的才有意思，不是么？
更多腾讯游戏团队对外开源进展请进入《  社区初鸣，梦想始兴 – 腾讯游戏携手开源起航 》查看！购买腾讯云数据库之后 ，可以通过命令行和控制台提供的数据库管理界面登陆。本文将为大家介绍这两种登陆方式的具体操作过程。
使用命令行方式登录
登录腾讯云后，进入管理中心，在云产品模块点击云数据库，进入云数据库管理视图。

获取要登录的云数据库的及端口号。

设置云数据库的密码。点击云数据库实例的初始化按钮，进行初始化时设置。

如果忘记云数据库密码，可以重置该密码，详见密码重置。
登录云服务器，在云服务器上使用下面标准  语句登录云数据库云数据库的帐号默认为 。
   云数据库    云数据库端口号   云数据库密码

注：需要先安装  客户端，可到  官方下载安装命令行中第一个为大写，第二个为小写。

示例如下：

登录云数据库后，即可执行  语句管理云数据库。 语句说明详见： 手册。
示例如下：

使用云数据库管理界面登录

登录 腾讯云后，进入管理中心，在云产品模块点击云数据库，进入云数据库管理视图。


设置云数据库的密码。点击云数据库实例的初始化按钮，进行初始化时设置。

如果忘记云数据库密码，可以重置该密码，详见密码重置。
在云数据库实例列表页面，找到要登录的云数据库实例，点击右侧的登录按钮。

在  登录界面，输入正确的云数据库密码，点击执行后进入  管理界面。

在  管理界面，即可对数据库进行相关操作。作者：

介绍几种使用实现斐波那契数列的方法。
其中第一种和第二种都是使用递归：可优化，应该将每一个元素的值缓存起来，而不是每次递归都计算一次。
          
           {
             
              =           
        }
        

           {
              =           
        }
        

这里可以说一下函数实参对象的属性。函数的实参对象定义了和属性。在严格模式中，对这两个属性的读写操作都会产生一个类型错误。而在非严格模式下，标准规范规定属性指代当前正在执行的函数。是非标准的，但大多数浏览器都实现了这个属性，它指代调用当前正在执行的函数的函数。通过属性可以访问调用栈。属性在某些时候会非常有用，比如在匿名函数中通过来递归地调用自身。
  =   {
      ==  { }
       
}

第三种用的非递归。
          
           {
             = {
                 
            }
              = 
              = 
               =      {
                  = 
                 =   
                 = 
            }
             
        }
        

第四种也是非递归，但是利用了黄金比率，不过要注意的是这种方法在之后，性能就会下降很快，参考文章看这里：。
          
           {
              = 
              =   黄金比率：
                          =  
        }
        


原文链接：


相关推荐 中的  全面进阶高性能高稳定的弹性伸缩的计算服务作者：曹建峰 腾讯研究院法律研究中心高级研究员   　　　祝林华 腾讯研究院法律研究中心助理研究员

一、 公共政策成领域全球热点
研究开发和行业应用的热度仍在持续，在此背景下，公共政策成为了全球公私部门关注的热点。比如，年月，石油大国阿联酋将人工智能确立为国家战略，同时高调任命了全球首个人工智能部长   ，表明了阿联酋要用数据这一“新石油”和人工智能来解决其社会和经济发展问题的决心。
同样是在月，英国工业联合会发布《在英国发展人工智能产业》的报告，十分看好大数据、人工智能等对英国生产力的促进、提高作用，预计到年将给英国经济增加亿美元，并为此提出了条公共政策建议，涉及“提高数据获取、促进技能供给、最大化研发、支持传播和渗透”等四个主要层面参见腾讯研究院高级研究员徐思彦《英国再推人工智能报告 四方面发力打造强国》一文。
除了最近这些公共政策举措，美国、欧盟、英国、德国等自年以来就开始积极推进公共政策，比如在发布的政府报告或者国家战略中呼吁政策、法律、伦理、社会影响等研究，积极推动责任立法、伦理准则以及自动驾驶、医疗机器人等领域的细分立法，以及呼吁成立专门的人工智能机构加强对就业结构、工作等社会影响的监测并提出政策建议。
不仅公共部门热衷于公共政策，私营部门的科技公司对此亦动作频频。部分原因是人们对人工智能存在很大的认知偏差，对新技术缺乏深入理解导致威胁论、普遍失业等观点加深公众敌意和不信任，新技术带来的隐私、责任、安全和控制、理解和透明性、歧视等问题日益引起研究人员的兴趣。在业界，未来生活研究院年初组织提出了人工智能发展的条原则，年的“ ”报告提出了项公共政策建议，这些都是业界的研究尝试。
硅谷的科技公司同样在以多种方式发表对于公共政策的观点和看法。比如，微软纳德拉年在演讲中提出微软发展人工智能的六大原则，包括必须是透明性的，在追求效率最大化的同时不损害人类尊严，必须保护隐私，防止产生偏见，向算法问责，等等。这六大原则是微软研发的核心设计原则。
此外，微软还发布了《人工智能政策建议》，包括革新法律和法律实践以促进发展，鼓励制定最佳实践伦理准则，以带来的好处为基准衡量隐私法，政府以及公共部门通过启动重大项目和系统来促进的传播和采用。
还有，团队很早就成了伦理审查委员会，在年达沃斯世界经济论坛上公布了其发展人工智能的三个基本原则，不以取代人类为目的，增加透明性，以及提高技能培训和供给。此外，还致信美国国会，表达其公共政策诉求。
英特尔在发布的《人工智能公共政策机会》中对外传达了英特尔对这一新技术的社会影响的回应，包括促进创新和开放发展，创造新的就业机会并保护人们的福利，负责任地促进数据获取，重新思考隐私包括、公平信息实践原则等，合伦理的设计和执行以及配套的可责性原则。
谷歌团队最近宣布成立人工智能伦理部门，表明其在加强技术研发和应用的同时，也将伦理等公共政策提上议程，负责任地研究和部署。
当然，谷歌、等五大科技公司苹果公司后来加入联合组成的合作伙伴关系也对外宣示了科技公司对社会影响的重视，希望技术能够造福于社会经济生活和人类自身。
科技公司和科技行业背后的行业组织也没有闲着。月日，代表硅谷等科技行业发展利益和需求的美国信息技术产业理事会发布首份《人工智能政策原则》，承认人工智能作为新技术将给社会经济生活和生产力带来变革性影响，系统可以用于解决一些最迫切的社会问题，而且系统应当不是取代劳动者，而是增强劳动者或者创造新的就业机会。
在这份文件中提出了三大层面的个原则，从人工智能发展和创新的角度回应舆论关于失业、责任等的担忧，呼吁加强公私合作，共同促进人工智能益处的最大化，同时最小化其潜在风险。
二、人工智能政策原则呼吁灵活监管，避免激进立法
人工智能是一套通过对人类大脑的模仿，能够进行学习、推理、适应和执行任务的技术。随着数据获取和计算能力以及人类创造力的提高，研究人员正在开发智能的软件和机器，以提高人的生产力并无处不在地增强人类能力。
人们已经感受到了人工智能在众多领域为人们、社会和经济带来的益处。人工智能系统有助于医学诊断，提高医生对病情的预见性，帮助个性化治疗病人。人工智能提高了软件的可用性，使得残疾人可以获取数字内容，例如帮助盲人“阅读”互联网上数百万张照片或网站。此外，智能系统正在负责监测大量的经济交易，实时辨别潜在的欺诈行为，并为消费者节省了数百万美元。
通过将的能力和陆地概况图、天气预报和土壤数据结合起来，科技可以提供所需的数据和工具以便人类更好地保护土地，改善生态系统和提高农业产量。驱动的机器甚至可以使危险或困难的任务更安全，为人们开辟以前无法由人类探索的新环境。
创业公司、中型企业和大型科技公司都开发了系统来帮助解决一些社会最迫切的问题。通过使小型企业能以更少的资源做更多的事情，能使小型企业承担风险的能力增强并以更快的速度实现发展。
像其他变革性的技术演变，人工智能的影响不可能被完全地预测。但我们预测它会像互联网的发展一样，产生比预料还要大的影响。仅在美国，分析非结构化数据的技术市场预计到年将达到亿美元，每年对生产力改善带来的收入可能超过亿美元。这些创新本质上还会创造以前不存在的新产品和服务。到年，技术预计将为全球经济增加万亿美元至万亿美元。
这些转变不应该掩盖这样一个事实，即仍然是一个不断发展和改进的研究领域。随着它的发展，我们要认真承担责任，为世界做好准备，包括寻求解决潜在负外部性的方案，以及帮助培养和锻炼未来的劳动力。
为了确保能够发挥最大的积极潜力，信息技术产业理事会代表技术领域的前沿公司，呼吁公共和私人部门的利益相关者之间相互合作。作为一个行业，我们承认有必要与各国政府和其他有关方面进行对话，并使之成为每一个阶段都应有的步骤。下文列举了行业和政府可以合作的具体领域，以及能够促成公私合作伙伴关系的具体机会。为了发展这些我们认为会和技术一道进化的原则，我们提出以下共识：
我们的责任：促进负责任的发展与利用
 负责任的设计和部署
我们认识到，我们有责任在遵守现有法律的基础上，将一些原则与的技术设计相结合。虽然对人类和社会的潜在好处是惊人的，但研究人员、专家和利益相关者还是应该花费大量的时间来确保的设计和部署是负责任的。高度自动化的人工智能系统必须符合保护人类尊严、权利和自由的国际惯例。作为一个行业，我们承认的使用和滥用可能产生的任何影响，并承认我们有责任也有机会能够通过引导向符合道德的方向发展，来避免可能产生的不良后果。
安全和可控性
技术人员有责任确保系统设计的安全性。自主的代理  ，或称能动体必须将用户和第三方的安全视为首要考虑，技术应努力降低对人类可能产生的风险。此外，系统的开发必须具有相应保障措施，以确保人类对具有控制力，使严格遵守特定的运行程序。
稳健而有代表性的数据
为了促进数据的有效使用并确保其在每个阶段的完整性，行业有责任了解数据的参数和特征，以证明其了解潜在的有害歧视和偏差，并在开始之前和部署整个系统的过程中对潜在的歧视和偏差进行测试。系统需要利用大型数据集，提供稳健而又有代表性的数据对于开发和改进和机器学习系统而言至关重要。
可解释性
我们致力于与政府、私营企业、学术界和民间社会等主体共同寻求减少自动化决策系统中的歧视偏见、不公平和其他潜在危害的方法。但是，寻求这种解决方案的方法应该具体针对特定系统运行所依的特定环境下所呈现的独特风险。在许多情况下，我们认为实现更优解释性的工具将发挥重要作用。
自动化系统的责任
针对人类作出的自主决策虽然受到人类驱动的繁琐程序启发，但常常取代人类通过此类程序作出的决策引发了社会对相关责任的担忧。我们承认现有的法律和监管框架，并将致力于与利益相关者合作，在自主系统的背景下为所有实体提供合理的问责制框架。
政府的机会：投资和建立生态系统
投资研究与发展
我们鼓励通过激励制度和资金支持来促进研究、开发以及创新。作为长期高风险研究的资金的主要来源，我们支持政府对与有高度相关性的研究领域的投资，包括：网络防御，数据分析，欺诈性的交易或信息的检测，机器人，人类增强技术，自然语言处理，交互界面和可视化。
灵活的监管方式
我们鼓励政府在采用新的法律法规之前，评估现有的政策工具，并谨慎使用。因为新的法律法规和税收政策可能无意或不必要地阻碍的推广和使用。由于技术的应用领域跨度很大，过度管理可能会无意间减少市场主体尤其是创业公司和小型企业创造和提供的技术的数量。我们鼓励政策制定者认识到在不同部门需要有具体做法的重要性，因为一种监管方式将不足以完全适合所有应用程序。我们随时准备与政策制定者和监管机构合作，解决出现的问题。
促进创新和互联网安全
我们坚决支持保护的基础，包括源代码、专有算法和其他知识产权。为此，我们认为政府应避免要求公司转让或提供技术、源代码、算法或加密密钥作为业务交易条件。我们支持使用包括贸易协议在内的所有可用工具来实现这些目标。
网络安全和隐私
就像其他技术一样，依赖强大的网络安全和隐私政策。我们鼓励政府使用强大的、全球接受和部署的加密技术和其他安全标准，从而实现信任和互操作性。我们鼓励自愿分享关于网络攻击或者黑客的信息，以更好地实现消费者保护。技术部门作为利益相关者最信赖的部门，可以通过将强大的安全功能融入到产品和服务中以提升可信度，例如使用已发布的算法作为默认加密方法以及限制对加密密钥的访问。数据和网络安全是实现成功的重要部分。
我们认为随着的蓬勃发展，用户必须能够相信他们的个人和敏感数据受到适当保护和处理。系统应使用包括数据匿名化、取消标识性或集成等工具以尽可能保护可识别性个人信息。
全球标准和最佳实践
我们促进发展全球自愿的、行业主导的、基于共识的标准和最佳实践。我们鼓励在这些活动中进行国际合作，以帮助加快采用，促进竞争，并有助于实现成本效益的技术的引入。
公私合作的机遇：促进终身教育和多样性
民主获取和机会平等
人工智能系统正在形成创造经济价值的新方法，如果这些价值为某些主体所独享，则可能会加剧现有工资、收入和财富差距。我们支持获取开发所需资源的机会和途径是多样的并且是不断扩大的，例如获取计算资源、教育和培训以及参与技术开发的机会等。
科学、技术、工程和数学教育
当前和未来的工人需要接受能够帮助他们成功的必要的教育和培训。我们认识到培训的提供至关重要，要对教育领域以及人文科学和社会科学领域都进行重大投资。为了确保未来劳动力的就业能力，公营部门和私营部门应共同努力，设计和提供以工作为基础的学习和培训体系，积极为学生提供实际的工作经历和具体的技能。特别是在社区中，优先考虑领域的多样性和包容性将是确保以最强劲的方式发展的重要要求。
劳动力
有人担心人工智能将导致工作变更、失业或工人流离失所。虽然这些关切是可以理解的，但应该指出的是，大多数新兴的技术旨在执行特定任务，而不是替代人员。然而这种不断增强的智力的确意味着一个雇员的部分但很可能不是全部工作将会被替代或者更轻易地完成。
就创造或破坏就业机会而言，对工作的全面影响尚且无法完全知晓，但适应快速的技术变革的能力至关重要。我们应该综合利用传统的以人为中心的资源，以及新的职业教育模式和新开发的人工智能技术，来帮助现有的员工和未来的员工成功地开拓他们的事业或完成职业转型。
此外，我们必须通过公私合作，提高包括劳动力调整项目在内的终身职业教育和学习的传递性和有效性。同时，我们还必须优先考虑提供职业培训以满足市场对劳动力的需求，将资源集中于能产生强劲成果的项目上。
公私合作伙伴关系
公私合作伙伴关系将使部署成为政府和私营企业的热门投资项目，并促进领域的创新性、可扩展性和可持续性。通过利用公私合作伙伴关系，特别是通过企业、学术机构和政府之间的相互合作，我们可以加快人工智能研发，为未来的工作做好准备。
三、对我国公共政策的几点启示
从《“互联网”人工智能三年行动实施方案》到人工智能被写入年政府工作报告、《新一代人工智能发展规划》再到十九大报告提出“推动互联网、大数据、人工智能和实体经济深度融合”，我国对人工智能的重视不断提高，已经将发展人工智能上升为国家战略，而人工智能正逐步成为国际竞争的新焦点，西方发达国家如美国、英国、加拿大等都大力加码人工智能，纷纷看好其对经济增长的巨大价值和其他潜在好处。
我们需要看到，人工智能作为一项变革性的技术，有能力创造出巨大的经济效益，推动经济增长，并帮助解决人类社会中诸如交通、城市建设、医疗、环境保护等一系列迫切的社会问题，但这同时需要良好的公共政策环境以及对风险和危机的警惕意识。
第一，多层面打造人工智能生态系统。人工智能目前已经成为全球竞争的新焦点，各国在技术研发和部署上不断加码加力，都欲抢占技术高地。我国需要持续加大对人工智能的投资和政策支持，不仅包括提供专项研究资金、给予税收优惠等扶持性政策，而且需要对阻碍研发利用的既有法律制度进行革新比如形成促进数据开放和获取的政策框架，因为用来解决社会问题、改善社会管理的核心还在于数据的获取，同时谨慎监管新事物，不宜激进立法，而是多采取行业指导等灵活的监管方式，在技术研发、产业应用、人才培养、政策支持等多层面形成合力，打造创新性的生态系统。
第二，负责任的研发和利用。技术本身是中立的，可以带来经济增长、解决社会问题，但其研发和利用也可能超越法律、伦理的界限，带来危险危害。如同过去的所有技术一样，也可能被滥用，其发展也可能偏离人类价值追求的方向，这是一个需要重视的问题。公私部门需要一起探索形成人工智能研发伦理和利用伦理限制，形成行业最佳实践的伦理准则，让创新、研发和部署是负责任的、可持续的，不断增进社会和个人的福祉。
第三，技术传播渗透和应用普及。的社会价值是巨大的，但这取决于技术在各个行业的传播渗透和应用普及。在这方面，政府可以发挥重大作用，比如可以通过组织实施一系列重大的研发、应用工程和系统部署，形成典型案例，从而对行业形成指导，促进技术的应用普及。
第四，教育、人才培养和劳动力转型。发展需要教育的跟进和高端人才的培养。正如的人工智能政策原则所言，为了确保未来劳动力的就业能力，公营部门和私营部门应共同努力，设计和提供以工作为基础的学习和培训体系，积极为学生提供实际的工作经历和具体的技能。特别是在社区中，优先考虑领域的多样性和包容性将是确保以最强劲的方式发展的重要要求。
但在另一个层面，虽然当前对将如何影响就业和工作，各方观点不一，但即使最终会带来更多就业，过渡期的劳动者大量失业是目前最大的担忧，因此需要促进劳动力转型，适应人工智能、数字经济等的发展要求。
在这方面，英国已经投入而且目前还在持续投入大量资金，为每个人提供所需的数字技能；而且，谷歌谷歌、等科技公司都承诺通过“数字技能合作伙伴关系”这一项目为数百万英国民众提供数字技能培训，形成人才培养和劳动力再培训的公私合作伙伴关系。确保在这场变革性的技术演进中没有一个人落下，是一个社会该尽的责任。背景
随着开发团队规模不断发展壮大，在人员增加的同时也带来了协作成本的增加，业务项目越来越多，类型也各不相同。常见的类型有组件类、活动类、基于的业务项目、项目、项目等等。如果想要对每个项目进行一些规范的约束比如提交规范、规范简直难于登天。所有的这些，只因为缺少一个好用的工程化工具。从项目创建、开发、构建、代码规范检查到最终项目上线，通过可以提升效率，同时保障开发规范的实施。
实现的基本原理
关键点在于里面的字段。模块全局安装，对于类系统，在目录创建软链接；对于系统，在\\\\\目录创建软链接。模块局部安装，会在项目内的_目录创建软链接。
现代化工程的生命周期
随着前端工程的不断演进，一方面工程变得日趋复杂，同时对规范和质量的诉求在不断增加。现代化工程应该包含以下几个阶段：初始化、开发、构建、检查、发布。如下图所示：

痛点：项目拷贝
项目拷贝存在的问题显而易见，大致有以下三个方面：

容易出错；一旦某个关键文件拷贝丢失或者错误，很可能需要耗费半天到一天的时间排查环境问题。
不同场景下对目录结构要求不同；平时开发过程中，工程通常会分为运营活动、业务、入口级别的项目对性能和体验有极致和苛刻的要求。需要基于或者的首屏直出，还有常用的业务组件等的开发。
新的和难以同步；某个同学开发过程中增加的新方法或者解决的很难传递给其它同学并且沉淀成经验积累下来。

社区里面提供了完美的解决方案，它是为了自动化项目的创建而生。创建项目包括以下几个阶段：

 初始化一些状态之类的，通常是和用户输入的  或者  打交道
 和用户交互的时候命令行问答之类的调用
 保存配置文件如  等
 生成模板文件
 安装依赖
 结束部分，初始代码自动提交

我们只需要继承的类做模板定制化，基于的脚手架设计思路应该如下图所示：

首先，开发者会和进行交互，开发者会告诉需要创建哪一种类型的项目，收到命令后。从本地已经安装的脚手架里面选择某种类型的模板。然后，会调用 在远程创建仓库并且授予开发者权限。接下来，会根据实际业务场景需要，自动化申请一些打点信息，常见的如离线包，监控告警等等。之后，在本地目录生成代码并且安装项目依赖的包，最后将本次初始化生成的所有代码自动提交到远程仓库。
痛点：运营配置频繁修改
基于组件化开发方式中，一个页面或者是由多个容器组件拼装后渲染而成。

某个组件通常是由：模板、数据和事件组成。理想情况下，开发和产品和平共处，你可以把一个组件写成下面这个样子，比如规则组件：
 {
     
         =
             =
                活动时间：
                月日～月日
            
             =
                活动规则：
                、活动期间，在 上录制小视频，上传成功后即可参赛。
                、根据参赛小视频获得的点赞数进行排行。
                、按照城市评选，分别评选“明日之子”仅限男性参加和”闪亮女神“仅限女性参加。
            
        
    
}
咋一看，上面的写法没什么问题。实际确很可能是、次的文案修改，甚至对外入口开放后仍然要修改文案或者图片等静态数据。然后，你需要走代码发布流程。
更好的解决思路是：在开发某个业务组件之前，结合以往的经验，分析哪些静态数据很可能是需要高频次的修改。将这些高频次修改的静态数据抽离出来，对于万年不变的数据则没有必要抽出来。那么，如何将静态数据动态化呢？
答案是：   ， 开发组件之前先设计，通过生成一个表单，达到静态数据和模板分离。如果使用开发，可以基于定制。静态数据和模板分离之后应该如下图：

痛点：缺少协作规范
此处以 规范为例子进行相关改进介绍。
良好的 规范有以下优势：

加快的流程
根据元数据生成
后续维护者可以知道被添加的原因

此处采用 项目的提交作为参考，整理出 的解决方案：

具体的提交格式要求如下：
 
 

 

对格式的说明如下：

代表某次提交的类型，比如是修复一个还是增加一个新的。所有的类型如下：
： 新增
 修复
 仅仅修改了文档，比如  等等
 仅仅修改了空格、格式缩进、都好等等，不改变代码逻辑
 代码重构，没有加新功能或者修复
 优化相关，比如提升性能、体验
 测试用例，包括单元测试、集成测试等
 改变构建流程、或者增加依赖库、工具等
 回滚到上一个版本

一键生成版本日志：

痛点 缺少代码规范
一次血淋淋的生产环境事故：年月日，腾讯高级工程师小圣在做充值业务时，修改了苹果支付配置，将配置增加了重复的。代码发布后，有小部分使用了手机的用户反馈充值页面白屏，无法在 内进行充值。最后问题定位是：手机使用了系统自带的而没有使用内核，解析时遇到重复报错，导致页面白屏。
分析：现代化的浏览器对于里面的重复会做兼容处理，但是某些老旧的浏览器内核并不会，比如此处的手机，导致代码直接出错。那么，如何避免类似问题再次出现呢？
此处不得不提及，于年月推出最新版本，是一款适用于和的代码规范检查工具，相比和而言，它更加灵活，支持自定义配置、插件扩展和配置错误级别。虽然接入会给团队的同学增加不少代码修改的成本，但是从长远来看，收益肯定是大于付出的。
规范制定的原则：

不重复造轮子，基于 配置并改进
能够帮助发现代码错误的规则，全部开启
配置不应该依赖于某个具体项目，而应尽可能的合理
帮助保持团队的代码风格统一，而不是限制开发体验
有对应的解释文档

为了更好的定制和维护规范，我们创建了的 。一方面，我们觉得 里面的部分配置定义的错误级别过于严格，比如代码里面出现了会导致校验错误，另一方面，它没有包含的最佳实践和其它规则。我们定义的部分规则解释如下：



规则名称
错误级别
说明






 循环的方向要求必须正确




必须有返回值，并且禁止返回值为 比如 




允许在循环里面使用




允许在代码里面使用




直接调用对象原型链上的方法




函数注释一定要遵守规则


    

在字符串里面出现{和}进行警告




和没有成对出现时给出警告




对于数据相关操作函数比如  等，必须有




把关键字看成块级作用域，防止变量提升导致的




要求在里面合理使用，如果某个方法没有使用则应该申明为静态方法




关闭代码复杂度限制




 语句里面一定需要分支



的执行可以接入到 里面，步骤如下：
 安装
    

 集成进 
{
   {
     
         
  }
}
设计
的作用是将工程开发过程中遇到的一系列痛点问题连接起来，提升开发效率，同时保障规范的实施。

插件设计
插件实现原理
这里有一个非常巧妙的设计，通过使用提供的和模块，可以通注入全局变量来访问到的实例。从而能够访问上的各种属性，比如 和一些等。
   {
      = 

      = {

        =  
       = 
       = _

        {
           
      }

       =  {
           _ 
      }

       = 
       = _
       = _

         
       =    __ __ { 
            }

        =  

            
      }
  }
命令注册：
命令需要以进行注册，比如：
     {
     
       
}
说明：

有个参数，第一个是子命令名称，第二个是命令描述说明信息，第三个是对应的子命令执行逻辑函数。
会将命令行参数解析成对象，传递给插件处理函数

配置
可以通过获取当前的版本， 获取跟目录在用户目录下的，通过 获取插件目录
日志
通过来进行相关命令行日志输出
  = 
     提示日志，控制台中显示绿色
    调试日志  命令行增加可以开启，控制台中显示灰色
     警告日志，控制台中显示黄色背景
     错误日志，控制台中显示红色
    致命错误日志，，控制台中显示红色
最后
感谢源创汇提供的交流机会，能和广大开发者分享和交流学习。直播团队的工程化解决方案如下：

主页：
码云主页：继插件化后，热补丁技术在年开始爆发，目前已经是非常热门的开发技术。其中比较著名的有淘宝的、支付宝的以及的超级热补丁方案。微信对热补丁技术的研究并不算早，大约开始于年月。经过研究与尝试现有的各个方案，我们发现它们都有着自身的一些局限性。微信最终采用不同于它们的技术方案，走出了自己的实践演进之路。
另外一方面，技术应当只是热补丁方案中的一环。随着对热补丁的多次尝试与应用，微信建立起自身的流程规范，同时也不断的尝试拓展它的应用场景。通过本文，我希望大家不仅能够全面的了解各项热补丁技术的优缺点，同时也能对它的应用场景有着更加全面的认识。在此基础上，大家或许能更容易的决定是否在自己的项目中使用热补丁技术，以及应当如何使用它。
一为什么需要热补丁
热补丁：让应用能够在无需重新安装的情况实现更新，帮助应用快速建立动态修复能力。从上面的定义来看，热补丁节省大量应用市场发布的时间。同时用户也无需重新安装，只要上线就能无感知的更新。看起来很美好，这是否可以意味我们可以尽量使用补丁来代替发布呢？事实上，热补丁技术当前依然存在它的局限性，主要表现在以下几点：

补丁只能针对单一客户端版本，随着版本差异变大补丁体积也会增大；
补丁不能支持所有的修改，例如；
补丁无论对代码还是资源的更新成功率都无法达到。
既然补丁技术无法完全代替升级，那它适合使用在哪些场景呢？

二 轻量而快速的升级
热补丁技术也可以理解为一个动态修改代码与资源的通道，它适合于修改量较少的情况。以微信的多次发布为例，补丁大小均在以内，它相对于传统的发布有着很大的优势。
以用户的升级习惯，即使是相对活跃的微信也需要天以上的时间去覆盖的用户。使用补丁技术，我们能做到天覆盖以上。这也是基于补丁体积较小，可以直接使用移动网络下载更新。
正因如此，补丁技术非常适合使用在灰度阶段。在过去，我们需要在正式发布前保证所有严重的问题都已经得到修复，这通常需要我们经过三次以上的灰度过程，而且无法快速的验证这些问题在同一批用户的修复效果。利用热补丁技术，我们可以快速对同一批用户验证修复效果，这大大缩短我们的发布流程。
若发布版本出现问题或紧急漏洞，传统方式需要单独灰度验证修改，然后重新发布新的版本。利用补丁技术，我们只需要先上线小部分用户验证修改的效果，最后再全量上线即可。但是此种发布对线上用户影响较大， 我们需要谨慎而为。本着对用户负责的态度，发布补丁等同于发布版本，它也应该严格执行完整的测试与上线流程。
总的来说，补丁技术可以降低开发成本，缩短开发周期，实现轻量而快速的升级。
三 远端调试
一入深似海，开发的另外一个痛是机型的碎片化。我们也许都会遇到本地不复现，日志查不出，联系用户不鸟你的烦恼。所以补丁机制非常适合使用在远端调试上。即我们需要具备只特定用户发送补丁的能力，这对我们查找问题非常有帮助。
利用补丁技术，我们避免了骚扰用户而默默的为用户解决问题。当然这也需要非常严格的权限管理，以防恶意或随意使用。
四 数据统计
数据统计在微信中也占据着非常重要的位置，我们也非常希望将热补丁与数据统计结合的更好。事实上，热补丁无论在普通的数据统计还是都有着非常大的优势。例如若我想对同一批用户做两种 传统方式无法让这批用户去安装两个版本。使用补丁技术，我们可以方便的对同一批用户更换补丁版本。在数据统计之路，如何与补丁技术结合的更好，更加精准的控制样本人数与比例，这也是微信当前努力发展的一个方向。
五 其他
事实上，官方也使用热补丁技术实现 。它分为 、 与 三种方式，大家可以参考英文介绍，也可以看参考文章中的翻译稿。最新的 应该也是采用类似的原理，但是 是不允许下发代码的，这个海外需要注意一下。
六微信热补丁技术的演进之路
在了解补丁技术可以与适合做什么之后，我们回到技术本身。由于无法支持全平台，并不适合应用到商业产品中。所以这里我们只简单介绍、、微信几套方案的实现，以及它们方案面临着的问题，大家也可以参考资料中的各大热补丁方案分析和比较一文。
 
采用 的方式，这套方案直接使用_替换中方法的实现。由于它并没有整体替换 而在中的相对地址在加载时已确定，所以无法支持新增或者删除的情况通过替换与只可以修改的数值。
也正因如此，可以支持的补丁场景相对有限，仅仅可以使用它来修复特定问题。结合之前的发布流程，我们更希望补丁对开发者是不感知的，即他不需要清楚这个修改是对补丁版本还是正式发布版本事实上我们也是使用分支管理方式。另一方面，使用替换将会面临比较复杂的兼容性问题。
相比其他方案，的最大优点在于立即生效。事实上，的实现与 的热插拔有点类似，但是由于使用场景的限制，微信在最初期已排除使用这一方案。
 
方案并没有开源，但在上的采用了相同的方式。这个方案使用的方式，能实现更加友好的类替换。而且这与我们加载的做法相似，能基本保证稳定性与兼容性。具体原理在这里不再细说，大家可以参考安卓热补丁动态修复技术介绍这篇文章。
本方案为了解决  异常而采用插桩的方式，从而规避问题的出现。事实上，系统的这些检查规则是非常有意义的，这会导致方案在与都会产生一些问题。

； 在过程，若 通过会写入标志，在经过之后再写入文件。这里的主要包括以及指令优化等。
若采用插桩导致所有类都非，这导致与操作会在加载类时触发。这会有一定的性能损耗，微信分别采用插桩与不插桩两种方式做过两种测试，一是连续加载个行左右的类，一是统计微信整个启动完成的耗时。平均每个类跟类的大小有关系的耗时并不长，而且这个耗时每个类只有一次。但由于启动时会加载大量的类，在这个情况影响还是比较大。

； 采用了新的方式，插桩对代码的执行效率并没有什么影响。但是若补丁中的类出现修改类变量或者方法，可能会导致出现内存地址错乱的问题。为了解决这个问题我们需要将修改了变量、方法以及接口的类的父类以及调用这个类的所有类都加入到补丁包中。这可能会带来补丁包大小的急剧增加。这里是因为在时已经将类能确定的各个地址写死。如果运行时补丁包的地址出现改变，原始类去调用时就会出现地址错乱。这里说的可能不够详细，事实上微信当时为了查清这两个问题，也花费了一定的时间将跟的流程基本搞透。若大家对这里感兴趣，后续在单独的文章详细论述。


总的来说，方案好处在于开发透明，简单，这一套方案目前的应用成功率也是最高的，但在补丁包大小与性能损耗上有一定的局限性。特别是无论我们是否真正应用补丁，都会因为插桩导致对程序运行时的性能产生影响。微信对于性能要求较高，所以我们也没有采用这套方案。
 微信热补丁方案
有没有那么一种方案，能做到开发透明，但是却没有方案的缺陷呢？ 的冷插拔与的或许能给我们灵感，它们的思想都是全量替换新的。即我们完全使用了新的，那样既不出现地址错乱的问题，在也无须插桩。当然考虑到补丁包的体积，我们不能直接将新的放在里面。但我们可以将新旧两个的差异放到补丁包中，最简单我们可以采用算法。
简单来说，在编译时通过新旧两个生成差异。在运行时，将差异重新跟原始安装包的旧还原为新的。这个过程可能比较耗费时间与内存，所以我们是单独放在一个后台进程中。为了补丁包尽量的小，微信自研了算法，它深度利用的格式来减少差异的大小。它的粒度是格式的每一项，可以充分利用原本的信息，而的粒度是文件，的粒度为。
这块后面我希望后面用单独的文章来讲述，这里先做一个铺垫，大致的效果如下图。在最极端的情况，由于利用了原本的信息完全替换一个的，我们的补丁大小也仅仅只有。
但是这套方案并非没有缺点，它带来的问题有两个：

占用体积；这边大约是你所修改大小的倍压缩成的大小加上生成的文件大小。
一个额外的合成过程；虽然我们单独放在一个进程上处理，但是合成时间的长短与内存消耗也会影响最终的成功率与修改大小、补丁大小相关。


微信的热补丁方案叫做，也算缅怀一下中的地精修补匠，希望能做到无限刷新。

限于篇幅，这里对、以及资源的更多技术细节并没有详细的论述，这里希望放在后面的单独文章中。我们最后从整体比较一下这几种方案：
若不性能损耗与补丁包大小，方案是最简单且成功率最高的方案没有单独的合成过程。相对来说，它的占用体积也更小。另一方面，与的成功率当前大约相差左右。
事实上，一个完整的框架应该也是一个容易使用的框架。对补丁版本管理、进程管理、安全校验等都有着很好的支持。同时我们也支持与命名行两种接入方式。希望在不久的将来，它可以很快的跟大家见面。
七微信的热补丁应用现状
上一章节我们简单比较了各个热补丁的技术方案，它们解决了如何生成与加载补丁包的问题。但一个完善的热补丁系统不应该仅限于此，它还需要包括以下几个方面：
网络通道；这里要解决的问题是决定补丁以何种方式推送给哪部分的用户。上线与后台管理平台；这里主要包括热补丁的上线管理，历史管理以及上报分析，报警监控等；
 网络通道现状
网络通道负责的将补丁包交付给用户，这个包括特定用户与全量用户两种情况。事实上，微信当前针对热补丁有以下三种通道更新：

通道 在登陆小时等时机，通过方式查询后台是否有对应的补丁包更新，这也是我们最常用的方式；
指定版本的通道 针对版本的通道，在紧急情况下，我们可以在一个小时内向所有用户下发补丁包更新。
指定特定用户的通道对特定用户或用户组做远程调试。

事实上，对于大部分的应用来说，假设不实现通道，通道实现起来还是较为容易。
 上线与管理平台现状
上线与管理平台主要为了快速上线，管理历史记录，以及监控补丁的运行情况等界面比较丑陋，因为我们木有美工啊。
事实上，微信发布热补丁是非常慎重的。它整个发布流程与升级版本是保持一致的，也必须修改版本号、经过严格的完整测试流程等。我们也会通过灰度的方式上线，同时监控补丁版本的各个指标。这里的为了完整的监控补丁的情况，我们做的工作有：

分钟粒度的每小时每天的各版本累积用户，及时监控补丁版本的人数与活跃；
分钟粒度的统计，基准版本与补丁版本的每小时每天的两个维度对照；
分钟粒度的补丁监控信息上报。

 补丁成功率现状

应用成功率= 补丁版本人数补丁发布前该版本人数

由于可能存在基准或补丁版本用户安装了其他版本，所以本统计结果应略为偏低，但它能现实的反应补丁的线上覆盖情况。
使用方案，微信补丁在天后的应用成功率大约在左右。使用大约只有左右，主要原因在于空间不足以及后台进程被杀。在这里我们也在尝试使用重试的方式以及降低合成的耗时与内存，从而提升成功率。
热补丁技术发展的很快，推出的 也令人期待。但是在国内，似乎我们还是指望自己更靠谱一点。每一个的应用的需求都不太一致，这里大致讲了一些微信的实践经验，希望对大家有帮助。
八未来工作
随着微信部门内从“单”向“多”演进，微信也正在迈入开源化的开发实践。我们希望将各个功能组件化，从而做可以到快速复制与应用。微信的热补丁框架“”当前也在经历从微信分离，又合入到微信的过程。希望在不久的将来，我们也可以将“”以及微信中一些其他的组件开源出去。
我们也希望可以找一些作为内测，给我们提供宝贵的意见。若对微信的方案感兴趣的用户，可以单独发消息或在文章末留言注明姓名、所在公司以及负责的，我们希望挑选部分产品作为内测。

参考文章大家可以点击下方的阅读原文，即可直接点击跳转。      实现原理解析 __====== 英文原文  工作原理及用法中文翻译稿   介绍 各大热补丁方案分析和比较 


相关推荐
微信的一切都在这里，包括源码一
安卓热补丁动态修复技术介绍一、有什么新特性？
是一种关联数据库管理系统，关联数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。年最重磅的当属的发布，号称万只读 ，大有赶超趋势。新版本的在测试平台上每秒只读 比近乎提升了两倍。同时该版本在数据库其他方面也得到不少改进：

使用和编写，并使用了多种编译器进行测试，保证源代码的可移植性；
为多种编程语言提供了；
支持多线程，充分利用资源，支持多用户；
优化的查询算法，有效地提高查询速度；
提供、和等多种数据库连接途径；
可以处理拥有上千万条记录的大型数据库；
提供用于管理、检查、优化数据库操作的管理工具。

看到官方介绍中如此多的功能优化和性能提升，不免让人有些激动。这一期的评测报告就着重针对在和 中的性能，通过与的对比，展示下新版本的性能提升。
二、有哪些性能提升？
、性能
 ①对无索引字段的处理速率高于
在许多针对数据库的压力测试中，都只关注于吞吐量的数值，追求高吞吐量的过程中，往往在进行测试时只针对建立过索引的字段进行测试，而忽略了在实际工作环境中针对数据库操作的不定性和复杂性因素所导致的用户或者管理员对数据中的读操作不仅仅局限于使用有索引的字段出于成本、存储空间、效率等因素的考虑，为所有字段建立索引是不科学、低性价比的，在对未建立索引进行读操作时，系统不得不对表进行全扫描，其对系统整体的吞吐量将造成很大影响，但考虑到木桶效应一只木桶能盛多少水，并不取决于最长的那块木板，而是取决于最短的那块木板，综合考虑有索引和无索引情况下数据库的效率才能综合的反映出数据库所具有的真实用户体验值，其实验数据才是更贴近实际工作环境的，更加具有参考价值。
针对无索引字段的测试结果如下图所示，根据在无索引字段查找时进行全表扫面的原理，采用“扫描速率”作为衡量其整体性能的评价标准。


对于普通数据文件、、的查询效率远高于；
当数据文件的大小达到系统内存的阈值时，的在并发时的查询效率也能保持下万左右，其数值也高于的万；
和在无索引情况下的查询效率均受到数据规模和并发连接数的影响；
并发连接数的增加对和的查询性能影响高于因数据规模增加所带来的影响；



的性能随数据规模的变化情况比更加平滑；
随着并发数的增加的查询效率比更加趋于平稳；
在数据量低于其物理内存的情况下，查询效率随并发数增加而产生的变化趋势十分相近，也就是说和在性能在未达到阈值的情况下相对稳定的，不会随着数据集合规模的变化而发生较大波动。 

②索引查询吞吐率在高并发时的性能约为的倍
索引查询的可用性、稳定性均高于
 功能有效提高数据库在高并发时的性能近倍
索引是对数据库表中一列或多列的值进行排序的一种结构。使用索引可快速访问数据库表中的特定信息。
什么是 ？的每个连接上来都要创建一个线程来执行语句。这样每一个新的连接进来即会创建一个新的线程，这种动作对本身压力比较大。 是提供一种线程代理的模型执行每个连接的语句。而内部维护一个可能接受的线程总数，减少线程太多在切换等方面的压力。但 仅在的商业化版本中作为的官方功能支持，也实现了这一功能。
针无索引字段的测试结果如下图所示，根据查找索引字段时原理，采用“吞吐量”作为衡量其整体性能的评价标准。


对比和_，可以看出使用 时系统吞吐率远高于不使用 的情况，而且随着并发数的增加，差距越发明显；
对比和，可看出在低并发时，二者吞吐率差距不大，但随着并发连接数的增大，的吞吐将达到的倍左右；
对比_和，可以发现 功能更能直接通过减少的切换，提升系统在高并发时的吞吐率；
对比三者曲线变化，不难看出的吞吐率变化更加平滑，且在并发连接不断增加的情况下，趋于稳定，系统整体性能的衰减程度低。虽然_的吞吐率基数较高，但随着并发连接数的增加，吞吐率已经出现了与相似的明显下降趋势也可参考下图。



、、_在使用索引查询时，并发连接数的增加成为了影响其吞吐率的关键因素。
因采用索引机制，查询时不需要进行全表扫描，故其单表的数据量对、、_的查询吞吐率影响不大，仅在并发数达到时，针对大数据文件的查询吞吐率开始出现明显波动。
由于建立索引进行查询，可大大提高在大规模数据中数据表中，数据条数越有近亿的高并发查询的吞吐率。

、性能
 ①中的吞吐率、稳定性、可用性均高于
 性能随负载增加的衰减趋势优于
作为数据库操作中最为频繁的操作之一，其操作由于涉及到数据查询、数值更新以及数据存储，该操作性能的优劣会对对数据库的用户体验和性能发挥造成重要影响。
针对不同版本和配置的数据库、、_，测试如下图所示，采用“吞吐量”作为衡量其整体性能的评价标准。


对比、_、，明显看出的写性能，不论在低并发还是高并发的情况下，均远高于和_，几乎为其的倍；
对比和_，可以看出在低并发时，二者操作的吞吐率几乎差别不大。当并发数达到时，_进行操作的吞吐率几乎为的倍。



对比三者随并发连接数变化的曲线，可以看出不仅吞吐量远高于另外二者，且曲线更为平滑，即说明在并发数不断增加的情况下，的写性能更加稳定，波动性和衰减率都低于、_；
对比和_的曲线变化，可以看出，随着并发数增加，在不使用 功能的情况下性能下降趋势更为明显，而 在高并发时对系统吞吐率有较积极的影响。



对比、_、进行操作的性能，可以看出，并发连接数对其吞吐率形象十分明显。
对比、_、进行操作的性能，可以看出，数据量的增加对进行操作的吞吐率影响不大，而对于来说，会产生少许影响，而_则通过在定位查找时采用 功能弥补了些许影响。

三、使用的建议？
通过以上测试数据和分析说明，给出如下结论：

在低并发情况下的读写性能与差别不大，在高并发下情况下的读写性能远高于；
读写性能的稳定性好于；
读写性能随负载增加的衰减趋势优于；
在内存利用率达到阈值的情况下，可用性高于；
针对无索引字段的处理速率远高于；
 功能有效提高数据库在高并发时的性能近倍，尤其在查询操作时效果更加明显。

通过以上测试结论，给出如下建议：

仅从稳定性、效率、可用性考虑忽略替换成本和复杂性成本，使用将能更好的提高系统性能和优化资源利用率最好能使用商业版，可以使用 功能，能提升整体性能；
对于读操作为主要的核心服务，不更新数据库版本，进而选择开启 服务，不仅能提高整体性能，也减少了更新版本所带来的开销和风险，也是一个不错的选择。

【数据库评测报告】第一期：的主要内容就是以上这些了，测试在进行过程中由于网络条件、数据库配置等因素的影响，可能无法发挥出机器的最大性能，但在同一配置和运行环境在针对和的测试，在一定程度上对于数据库选型具有参考价值。还想了解测试的参数和细节的朋友可以继续往下读。
四、环境配置包括哪些？
、硬件环境



设备型号
配置描述
型号





个核，内存， ，万兆网卡




、软件环境
①数据库版本



测设设备
数据库版本













 ②数据库配置

、测试细节
①测试工具
是自带的基准测试工具，该工具可以模拟多个客户端同时并发的向服务器发出查询更新，给出了性能测试数据而且提供了多种引擎的性能比较。
 ②测试流程
建立测试数据库 → 在数据库中建立结构相同的多个 → 利用脚本向中分别插入一定数量的数据、、、 → 利用对相应语句进行测试采用随机取值并且多次测试取均值 → 结果数据的分析
 ③测试方案

测试



测试


④测试表结构商家为什么要打广告？因为广告能够带来用户流量。
既然如此，有两种情况下商家不会打广告：
、如果广告不能带来足够的用户流量，即广告的成本大于广告带来的收益；
、如果商家有比广告更好的方式带来用户流量；
广告的价值
自己是学生的时候，甚至在毕业工作了好几年之后，我一直对于央视天气预报之前的那些天价广告难以理解：为什么这些厂商要花那么多钱打广告？明明一点效果都没有嘛！我看了这么多年这么多广告，他们的产品我一个也没有买过！
后来，伴随着我个人消费能力的提升，突然才发现：自己的购物行为确实受到了广告的极大影响，尤其是选择某些礼品送人的时候，广告的参考价值就更大了——不是因为打广告的商品质量一定更好，而是因为知名度一定更高。曾经某次，送给一个年长的亲戚一个老字号的礼品，这个极爱面子的老人家不太高兴，这个老字号貌似他不太清楚。
当我自己去超市购物的时候，面对货架上各种品牌的同类商品，基本上会选择知名度比较高的，相比之下，那些毫无知名度的商品基本上很少选择，除非是某些质量差异不大价格非常优惠的商品。
竞争激烈的运动鞋市场，如果某些品牌不进行大规模的广告宣传，很难获得更广范围群体的品牌认同，甚至，中止广告一段时间会给大家这样的错觉：这个品牌可能不行了。比如说：之前李宁打广告比较猛，我会认为李宁的价格比安踏高一点确实是因为李宁的质量好；而现在安踏的广告比李宁猛，我会觉得李宁可能不行了，安踏慢慢做得更好了。
商品质量和广告，从理性的逻辑上，当然是没有直接关联的，然而直观上给我的感觉是：既然这家公司能够花更多的钱打更多的广告，一定是公司更有钱了，而另外那家广告突然变少的品牌，可能是经营不善或者没人买他们家的商品。
举个例子：现在和到处打广告，突然某一天，不再打广告了，许多人会直觉的认为这两家一定是出了什么不好的事情。
 所以，同样是豆浆机，哪怕是质量价格全都一样，我更愿意选择九阳。
声明一下：这里，我们讨论的是广告的正向价值，至于一个商品的成功多大程度上取决于广告，这真的很难说，取决于市场供需平衡和竞争环境。供不应求，广告就显得不那么重要；供大于求，广告就很有必要；质量优势明显，广告就没那么必要；质量优势不明显，广告就很重要。更为详细的讨论，会在后续“企业核心竞争力”的章节来进行。
广告内容表达方式的变化
最早的广告，比如张弓酒：“东西南北中，好酒在张弓。”再然后是什么“省优部优”、“全国销量第一”、等等。
在中国观众初步接触广告的时候，这种直接明了的广告效果足够好。
当时，电视台都是官方的现在大部分也是，既然电视台都说“张弓酒好”，那一定错不了。
“省优部优”则是最直接的官方评价体系。当时我印象最深的两个词是：“公家”和“私人”：公家的厂商做得东西就是好，私人的便宜但没好货。
所以，整个那个年代，大家对“官方”是完全信赖的！包括电视台、认证机构、国营企业、等等具备“公家”身份的团体及其产品甚至言论。
这种氛围之下，民营企业该如何打广告？
首先，寻找尚未被发现的广告方式及渠道，因为公家的渠道比如电视台很难给予民营企业广告的机会，哪怕你给再多的钱。这种方式包括传单、张贴画、刷墙。
其次，除了一线的电视台之外，还有许多三四线的小电视台，他们覆盖人群比较小，大的国营企业是看不上的，然而这些小电视也需要更多的经费，于是，有些民营企业主动找这些微小的电视台打广告，一个电视台覆盖一个县城，一百个电视台就是一百个县城。
再然后，伴随着中国观众对广告的逐渐熟悉，以及大型电视台的改革主要是他们自己认识到了广告对于电视台的重大价值，民营企业开始大举进入央视广告。
 在内容表达方式上，民营企业一开始就不太好宣传各种官方认证，更不要说外资品牌了。可口可乐打死也拿不到什么“省优部优”。
更何况，观众已经厌倦了各种所谓的官方认证，尤其是年青一代叛逆群体，他们希望得到最直接的对个人自身的重视，而不是反过来自己去重视什么官方评价体系。
由此，广告的内容表达方式逐渐艺术化，甚至于，在普通的电影长片依然在争论商业性和艺术性的时候，广告小短片已经将商业和艺术完美的结合在一起。
渠道红海与新大陆
网络媒体刚刚出现的时候，由于受众网民的年龄偏小，消费能力有限，因此广告的价值不大。
当网民的覆盖群体越来越广，而且第一代年轻网民的消费能力越来越强，网络媒体的广告价值逐渐被认可甚至推崇。
网络媒体的最大优势是：能够根据地域、用户属性进行精准投放。这是传统电视媒体无论如何也做不到的。这种精准投放，对于进行广告投放的商家当然是求之不得。
 然而，与传统电视媒体相比，网络媒体也有其必然的短板，那就是：无法保证广告的真实到达率。通常一个网络用户会同时打开多个页面，当一个页面正在播放广告的时候，网络用户会暂时切换到另外一个没有广告的页面；而相比之下，虽然电视观众也会在广告时间换台，但比例并不高。
当然了，网页广告可以像电视广告一样，一直保持在屏幕的某个角落，持续展现，但是大多数浏览器都会对此进行拦截、优化。
于是，网络媒体的广告回归到传统媒体类似的瓶颈：怎样降低广告自身对受众的干扰同时扭转受众对广告的负面情绪，而不是强制提高此种干扰从而导致产生更多的负面情绪。
不知道保健品广告是否最先发现的此种方式：邀请业内专家为自己的商品说好话。比如请某些穿着白大褂的“医生”“博士”说自家的保健品多么多么好；比如请一大堆的患者说自家的保健品多么多么有效。虽然是保健品，但是他们从来没有大嗓门说自己不是药品，而是默默引导观众误以为他们是包治百病的药品。
到这个地步，小米就该出场了。
互联网媒体行业有很多专门做数码产品信息的网站，除了提供官方的各种产品信息，还提供用户交流，甚至还提供专业化的产品评测。
最后这个“专业化的产品评测”，就相当于保健品行业穿着白大褂的医生和博士。
从评测性的文章里，我们可以看到，除了用官方数据横向对比一下各种参数之外，其它的评测，都是主观性极强的笼统描述，而非客观性的定量描述。
比如：开机时间用秒表计时，这是定量描述，骗不了的；拍出的照片，这个鲜艳，那个不好看，这个就是主观性很强了，不同人有不同的看法。
所以，如果你想你家的产品被这些数码网站的小编说好话，就可以做一些相应的操作。当然了，最直接的，莫过于直接入股甚至收购这些具有喉舌价值的数码评测网站。
小米除了入股这些数码媒体之外，还入股了某些“客户的”、“定量评测的”、“第三方”评测工具。
有了一大群的数码媒体小编，有了具备性能评测的“中立”评测工具，请问，小米还需要别的方式打广告么？
不同渠道的流量属性
早期购买智能手机的，都是年轻群体，无论是从群体本身属性还是购买智能手机的初衷，都跟互联网有直接的关联。意思就是说：但凡买智能手机的，都是网民，但凡买智能手机的，都是为了上网。
因此，小米依靠数码媒体及评测工具，很好的获得了智能手机的用户流量新大陆。
然而，伴随着智能手机向非网民群体的蔓延，这个新大陆的局限性立刻暴露出来：这波新的智能手机用户，根本就不看数码媒体，也从来不会用评测工具评测自己的手机跑分有多少，甚至，这帮人之前根本就没有上过网！
对于这波即将入住新时代而起始于旧时代的“传统用户”，反倒是传统的广告渠道更加有效，这也是这帮人一直以来生活的场景，尽管这种场景马上会因为他们的选择而被打破。
于是，到处打刷墙广告，到处打电视广告，到处开专卖店的、崛起了。
有人说“这是社会的倒退！”说这话的人，自以为最懂技术，最懂手机，其实，他们忽视了两点：
、数码媒体和评测工具看似中立，实则也是受人摆布的；意思就是说：万像素的摄像头，不见得就比万像素的摄像头更好，哪怕所有的媒体和工具都说万的更好；
、技术的本质是为生活服务的，技术为生活服务的方式在于提供某种产品或服务，然而，决定产品或服务品质的，并不仅仅是技术，还包括设计、工艺、艺术、甚至购物流程和体验等等各个方面；意思就是说：技术性能最好的产品，不见得就是用户最想要的产品；更何况，“技术性能最好”也只不过是自己吹出来的。
所以，广告渠道的不同，并不是社会进步或倒退的标志。有人认为花钱打广告拉高了产品价格是对消费者利益的损害；有人认为花钱入股数码媒体而不是花钱提升产品质量是对消费者及股东利益的损害；
实质上，两者没有本质的区别，都是花了很多的钱在用户流量上、在广告渠道上，只不过在广告的形式和渠道的选择上有所不同罢了！
媒体是不是变坏了？
当我们反思媒体的广告业务，质疑是否广告让媒体变坏了？比如说：明明不好的产品，电视台非说是好的；明明不好的技术，数码小编非说是好的；
很多年前我们就鼓吹：这是个信息爆炸的时代。我们却忽视了信息爆炸对我们自身的挑战：需要提升个人对信息的鉴别、判断能力。
信息的爆炸，并不会自然而然的单方面提升优质的有价值的信息同时降低劣质的甚至有害的垃圾信息。
信息的爆炸，尤其是信息产生、传播方式的爆炸，提升了整个社会所有个体的话语权，因此，信息量越来越大，信息的角度、态度也越来越繁杂。
这很正常，盲人摸象，任何一个盲人都说的不全面，然而任何一个盲人所提供的信息却又都是客观真实的。
 我们每一个人，包括媒体的小编，都是生活在一个相对固定的角落里，因此，每一个人提供的信息都可以被认定为客观真实的，然而却又是彼此冲突的。
 面对彼此冲突而又客观真实的各种信息，每一个人必须增强自身的鉴别、判断能力，而非拱手将自己的命运交托在他人手上。
所以，信息爆炸的时代，我们是幸运的，却又是悲催的。哪个时代不是呢？指望有一个人或一个机构为大家筛选唯一可靠的信息，这本身就是最大的风险。
更何况，任何一个媒体都是由个人组成的，没有任何制度可以完全保证由个人组成的媒体可以完全客观公正，以及最为重要的“全面”。
【水滴的声音】关注互联网企业文化、团队管理。
本篇为《互联网陷阱——流量战争》的第三篇。以下为相关文章：《盛大盒子：误判的野心——互联网陷阱：流量战争》《互联网，流量的战争》作者：曾夏，微信客户端测试开发

年月，企鹅智酷公布了最新的《微信用户生态研究报告》。报告数据显示，截止到年月微信全球共计亿月活用户，新兴的公众号平台拥有万个。微信这一年来直接带动了信息消费亿元，相当于年中国信息消费总规模的。

坐拥如此量级的用户，也意味着，微信发生一个小问题，即会影响大量的用户体验。基于此，微信非常注重质量。
目前国内很多硬件厂商，对于版本，深度定制自己的、系统版本，例如小米的、华为的、联想的等。这就是个厂商乘以个版本，导致的版本数量爆炸，牵引出各种适配问题。
微信应用去适配那么多的设备花费了大量精力时间。在这个环境下，微信团队寄托于自动化测试，希望把更多的测试环节放在云端自动化地运行。

一、微信最关注的质量问题
兼容性测试覆盖的环节众多，微信优先选取核心的环节进行测试。并把必测的环节尽量以自动化，云端化的方式实现。那么，哪些问题属于高优先级？
、安装和启动失败
安装和启动问题是属于最严重的。这种问题一般比较少出现，但是一出现就是大问题。安装和启动失败，很可能造成微信团队的监控数据不充分，有时无法主动发现问题，最后只能通过用户反馈感知到这种错误。此时可能已经给用户造成很大影响了。
比如曾经发现华为和三星某台机型的这个挂掉了，导致这两款机型部分用户启动不了微信，虽然影响用户量不大，但非常严重。安装失败和启动失败是兼容性测试最基本的要求。
、问题
率是微信团队衡量一个版本是否稳定的重要标准，尤其是新出现的。当测试包灰度出去之后，如果率偏高，或新出现的占比较高，微信团队一般会采取换包，撤包措施。这会带来以下连锁反应
、给用户造成极差的使用体验
、给开发和测试造成额外的工作
、造成因版本发布延迟引起的一系列损失
因此，新出现的一定是微信最关注的质量标准之一。
二、对症下药，提前发现问题
上面提及的兼容性问题，出现任何一种情况都是极其严重。微信团队根据同行的积累和历史经验，针对不同的问题，做不同的测试。
、针对安装和启动问题——覆盖安装测试
覆盖安装，顾名思义就是用新版本的应用覆盖旧版本。
覆盖安装的测试流程如下：

针对安装和启动问题是影响最严重的问题，微信团队目前在版本发布前都要做覆盖安装测试。将要发布的包，安装并且启动成功之后保证微信基本功能能正常运行。微信的每个正式版本基本都会修改配置的版本号，也是根据版本号来判断是否有更新。当覆盖安装完之后，有专门的代码处理更新，保证数据兼容。一般第三方商店都是以这个值来检测软件是否更新。 
覆盖安装测试的流程较简单，尽可能模拟真实用户升级安装使用的场景。覆盖安装之后，用户启动微信时，后台发出升级指令，升级主要是确认老版本的数据能否在新版本中使用；最后通过冒烟测试，检测微信核心功能覆盖到主要的数据库能否正常通过。微信团队重视覆盖安装测试，除了监测一些数据兼容性问题外，还需检测新打的包是否有问题。此外的包也需要经过类似的测试，保证成功以及基本的核心功能。
覆盖安装测试只在发布前夕做，因为微信这边是持续集成开发，分布分支上的包一直在更新，所以只拿即将发布的包来做，通过之后才会进行外网发布。
、问题——稳定性测试
问题对应的测试是稳定性测试。对于的稳定性测试，官方的测试工具是。会产生一些列随机性事件具体比例可以配置测试目标是否出现。
测试的局限性
微信团队发现不会去检测界面上的控件，因此产生的事件过于随机，不太符合微信的测试需求。因此，微信开发了一个基于控件的定制化来做稳定性测试。
要基于控件开发一个定制化，首先就需要获取界面的所有控件。
选择框架修改脚本
一开始采用框架，但微信本身是一个多进程的，比如打开相册，或者的时候，都是在一个进程中的，而只针对单个进程，需要去改框架源码才可以支持多进程的微信，实现起来比较繁琐。因此后面微信团队开始使用官方框架。
利用框架获取控件
并没有给出公开接口获取所有控件，如果使用来获取，速度很慢，因为为了保证自动化的执行，很多地方加了等待，而测试需要快速的点击。通过参考的源码实现，微信团队决定利用的反射原理拿到，中间去掉无谓的等待或者减少等待事件增加重试次数。 跟控件有一对一的关系，在里面就跟一个对应。目前外面很多的抢红包插件也是利用拿到来做识别和点击。
定制化的诞生
通过反射的方案，获取当前的速度可以保证在十几毫秒以内完成。获取所有控件之后，就可以针对控件做随机探索了！
为了更好的遍历尽可能多的，微信团队采用改造之后深度遍历算法。我们称之为“定制化”。定制化的运行逻辑比较简单，其中，还有一些特殊处理，比如返回的时候要检查是否有弹框，打开的时候检查是否有弹框地理位置，跑的时候是否有退出登录等。目前来看改造的效果比原生的效果有一定的提升，下面是单机的测试结果： 

从上图可以看出，相对于原生的，行覆盖率大约有的提升，覆盖率大约有将近的提升。而且从曲线上可以看到，这两个在登录之后的个小时以内，行覆盖率和覆盖率都有明显的提升，在到个小时以内也会缓慢提升，而两个小时之后提升就非常缓慢了。
微信团队每天都会取最新代码编的包进行稳定性测试，收集出现的，并且把新出现的，提交给对应开发。

、机型覆盖——云端化测试
兼容性测试根本还是要覆盖机型，微信团队在做一些自动化方案目的就是为了在多种机器上并行执行。原先，微信团队用来做自动化的机型数量较少。上面提到的覆盖安装测试和定制化测试，可能只跑典型的到台机型。
现在兼容性测试迁移到平台上，测试基于给微信搭建的私有云平台进行，同时公有云的机型作为补充。
至此，微信团队实现了机型管理云端化，设备覆盖也有了实质性提升。

微信团队每天都会在测试平台上申请上百台手机跑多轮定制化测试，日均测出十几个，一些新特性上线的高峰期有时可达个。
三、其他关键质量问题——新功能适配
除以上问题之外，新功能上线时，微信团队会非常关注其是否会产生新的适配问题。譬如，字体截断问题，键盘问题等。一年多前，微信发布小视频功能，发现多个厂商定制导致的视频方向错误，黑屏，播放失败等问题，严重影响用户体验。
每个版本都有功能兼容性问题，并且每个版本的测试内容都不一样。目前采用的方式还比较低级，主要依靠人力在主流机型上进行兼容性测试以及众测。
版本间差异大，自动化陷入困境
功能测试一般针对某个特定版本，因此自动化脚本基本只适用特定版本，复用性弱，自动化不能带来好的收益。同时，功能测试路径有时比较特殊，自动化脚本难写，验证麻烦。比如小视频功能测试，自动化脚本判断不出来是否出现黑屏、花屏，必须要人眼判断。
部分特性可以自动化实现：半自动化测试
一些特性可以做自动化或者半自动化测试。比如测试，主要是检测在不同手机上打开页面，看看页面是否有问题。半自动化测试方案：通过脚本驱动操作和操作，同时在关键的页面截图，生成带一系列截图的测试报告。事后肉眼查看截图，比对判断测试是否通过。
功能兼容性问题目前我们还没有一个通用的解决方案，都是根据不同的需求利用目前手头资源做尽可能完善的测试。
功能自动化测试迁入平台
针对功能适配兼容性测试，微信团队也把适配兼容性测试和部分高优先级自动化用例迁移到平台上。
● 建立微信私有云：在私有云上，微信团队不间断提交自动化脚本进行小时测试。当私有云缺少某台特定机型时，公有云上的机型作为补充测试。
● 微信质量系统与私有云对接：将一些接口开放给微信，微信利用这些接口，搭建了自己的云端质量管理平台，直观、便捷地进行测试管理工作，大大提升了效率。

四、效果
微信团队通过自动化、云端化测试，在兼容性和功能测试方面效率提升了倍多，更快速、精准地定位解决问题，累计发现并解决的问题数达数千个，覆盖亿级用户，提供了流畅稳定的体验环境。
后续，我们期待云端化、自动化测试深度覆盖到更多测试环节，使测试过程和测试结果变得更加流畅、可视化。通过技术的力量，持续提升产品的质量！

马上进入“专家兼容测试”界面，找腾讯测试专家团队帮您把关移动应用质量吧！点击链接即可使用专家兼容测试服务：
恰逢钜惠焕新季，还有手游专家兼容豪华大礼包哦！特大优惠不容错过：
可以联系小助手抢先了解优惠详情，咨询预约：
亲爱的读者，为了能够提供更好的网站内容，希望您填写我们的问卷，我们会随机抽取读者回馈币以示感谢！问卷入口：是一个容器集群管理平台，需要统计整体平台的资源使用情况，合理地将资源分配给容器使用，并且要保证容器生命周期内有足够的资源来保证其运行。 同时，如果资源发放是独占的，即资源已发放给了个容器，同样的资源不会发放给另外一个容器，对于空闲的容器来说占用着没有使用的资源比如是非常浪费的，需要考虑如何在优先度和公平性的前提下提高资源的利用率。为了实现资源被有效调度和分配同时提高资源的利用率，采用和两种限制类型来对资源进行分配。
一、中和限制方式说明
 容器使用的最小资源需求，作为容器调度时资源分配的判断依赖。只有当节点上可分配资源量=容器资源请求数时才允许将容器调度到该节点。但参数不限制容器的最大可使用资源。
  容器能使用资源的资源的最大值，设置为表示使用资源无上限。
   能够保证有足够的资源来运行，而则是防止某个无限制地使用资源，导致其他崩溃。两者之间必须满足关系  === 如果为表示不对资源进行限制，这时可以小于
   在腾讯云容器服务中，可以在创建服务，在容器编辑栏中点击显示高级设置，在高级设置中进行和的和设置。目前支持设置和，用户可以根据业务的特点动态的调整和的比例关系。目前只支持设置，必须强制等于，这样确保容器不会因为内存的使用量超过了但没有超过的情况下被意外的掉。


二、中和使用示例
一个简单的示例说明和的作用，测试集群包括一个的节点。已经部署的两个，每个的资源设置为     =   节点上和内存的资源使用情况如下图所示：

已经分配的资源为：分配分配=，剩余可以分配的资源为
已经分配的内存资源为：分配分配=，剩余可以分配的内存资源为
所以该节点可以再部署一个   =的部署，或者部署个   =的部署
在资源限制方面，每个和使用资源的上限为，即在资源空闲的情况下，使用的量最大能达到，使用内存的最大量为。从资源的角度，对于资源使用上线为的，通过设置为，实现了倍数量的的部署，提高了资源的使用效率。
另外一个复杂一点的例子来进一步说明和的作用，主要说明和都为的对提高资源使用率的作用。测试集群仍然包含有一个的。集群中已经部署了四个，每个的资源设置为     =   。
此时节点上和内存的资源使用情况如下图所示：

此时按照的需求，已经没有可以供分配的资源。但由于业务负载比较低，造成节点上使用率较低，造成了资源的浪费。这的时候可以通过将设置为来实现对资源使用率的进一步提高。在此节点上部署个资源限制为     =   。资源的使用情况如下图所示：

能够在空闲时，使用节点上剩余的资源，从而进一步提高资源的使用率。
三、中资源的抢占
中资源通过和的设置，能够实现容器对资源的更高效的使用。在如果多个容器同时对资源进行充分利用，资源使用尽量的接近。这个时候节点上的资源总量要小于所有中的总会，就会发生资源抢占。
对于资源抢占的情况，根据资源能不能进行伸缩进行分类，分为可压缩资源和不可以压缩资源。资源是现在支持的一种可压缩资源。内存资源和磁盘资源为现在支持的不可压缩资源。
可压缩资源的抢占策略按照的比值进行分配
例如在示例一种，假设在部署了的基础上，又部署了资源限制和相同的两个容器。这个时候，节点上的资源模型为。

假设四个同时负载变高，使用量超过，这个时候每个将会按照各自的设置按比例分占调度的时间片。在示例中，由于个设置的都为，发生资源抢占时，每个分到的时间片为×，实际占用的核数为。在抢占发生时，的值对时间片的分配为影响，在本例中如果条件容器值的设置，抢占情况下分配的比例保持不变。
不可压缩资源的抢占策略按照优先级的不同，进行的驱逐
对于不可压缩资源，如果发生资源抢占，则会按照优先级的高低进行的驱逐。驱逐的策略为： 优先驱逐==的，其次驱逐 为的情况也包括在内。 ==的的会被保留，除非出现删除其他后，节点上剩余资源仍然没有达到需要的剩余资源的需求。
由于对于不可压缩资源，发生抢占的情况会出被意外掉的情况，所以建议对于不可以压缩资源，的设置成==。
针对内存抢占，本文进行了一次小的测试，示例中依次部署了单个。节点中资源的示例图为：
步骤 部署，资源参数为     =   ，此时中进程使用内存，运行依然正常。
步骤 部署，资源参数为     =   ，此时中进程使用内存，程序运行正常。超过，小于时程序运行正常，但超过程序异常。
步骤 部署，资源参数为     =   。此时保持中进程使用内存为，中内存使用为，抢占内存，抢占内存大小为。这时，最先会出现因内存不足异常的情况。同时有时也会出现内存不足异常的情况。但一直能够正常运行
步骤：修改的参数为     =   ，仍然保持步骤中资源的使用量。这时仍然最先出现内存不足而异常的情况，但和一直运行正常。
更多关于不可压缩资源抢占时的资源回收策略，可以参考： 针对资源紧缺处理方式的配置作者：
导语： 如果发现描述不当的地方，请联系我进行修改哈，谢谢。

众所周知，是隔离的私有网络，之间不能直接内网互通，且云上网络还有基础网络和之分，且两者又是不能直接互通。此外，云上产品众多，云产品分布的地域也很多，跨地域不同产品如何以正确的姿势进行使用？本文将从网络的角度给出相关的实践参考。
云上产品内网互通需要通信的场景可以大概分为类：

同地域，基础网络互通—支持
跨地域，基础网络互通—支持
同地域，基础网络和互通—支持
跨地域，基础网络和互通— 不支持
同地域，跨互通—支持
跨地域，跨互通—支持

接下来本文将分别对上述场景进行解答。
同地域，基础网络互通

基础网络是腾讯云上所有用户的公共网络资源池，所有云服务器的内网地址由腾讯云统一分配。默认情况下，同账号，同地域的基础网络是互通的。
不同账号下的，同地域，基础网络互通的功能需要提工单进行申请开通。

跨地域，基础网络互通
该通过可以通过提工单进行申请开通。
备注：

与基础网络相比，私有网络更适合有网络自定义配置需求的场景。为了使用户更好地使用云网络产品，腾讯云目前正在逐步下架基础网络，后新注册的部分账号的网络属性为；
账号仅支持在下创建实例，无法在基础网络内创建实例；
存量的基础网络如何迁移到私有网络，请关注后续系列文章。

同地域，基础网络和互通
点击需要与基础网络互通的  ，进入详情页，点击【基础网络互通】，然后点击【关联云主机】即可；

备注：

【基础网络互通】的选项卡只有在账号中存在基础网络的服务器才会出现，即如果企业中全部服务器都是私有网络的服务器，点击 进入详情页是看不到【基础网络互通】的按钮；
基础网络互通仅支持网段为 含子集的私有网络；
此方式只适用于直接的互通，即基础网络云服务器可以访问私有网络内的云服务器、云数据库、内网负载均衡、云缓存等云资源，而私有网络内的云服务器仅可访问互通的基础网络云服务器，无法访问基础网络内其他计算资源；
如果需要实现私有网络访问云数据库、内网负载均衡、云缓存等云资源，可通过提工单申请开通“终端连接”功能来实现；

跨地域，基础网络和互通
该功能不支持，即该场景无法实现；
同地域，跨互通
可建立对等连接，本端地域和对端地域选同地域即可；

跨地域，跨互通
可建立对等连接，本端地域和对端地域选不同地域即可；

备注：
这两种对等连接方式的详细差异，可以查看官网关于对等连接的详细介绍；傅飞玲， 年毕业进入腾讯公司，在架构平台部从事分布式存储领域相关研发工作，在海量分布式存储、高性能服务、存储运营系统的建设以及运营故障的诊断积累了一定经验。致力于建设公司级存储平台，携手业务为用户提供安全、可靠、高效的数据存储服务。

  是腾讯架构平台部自研海量文件系统，自年平台上线，经过多年不断技术演进，目前承载了包括相册、微信朋友圈图片、邮件、微云、腾讯云等公司重要产品的数据存储，截止到年年初，承载的数据突破。
一、平台概述
平台提供以文件为粒度的上传，下载，删除等数据访问服务，系统分为接入，文件索引，索引存储，数据存储四个部分。接入层串联文件上传、下载、删除、查询索引等关键流程，提供简单的事务机制；文件索引层管理文件的元数据；索引存储提供接口的分布式存储和访问，用于存储文件的元数据；数据存储提供基于机械磁盘的数据存储和访问，用于存储文件内容。以相册为例，索引存储中保存着相册列表、图片排重索引以及图片数据的原信息，而文件索引层则负责上面三种索引的逻辑组织，图片数据存储在数据存储层中。

二、文件索引   技术
 技术作为文件存储中索引设计的桥梁，连接了索引存储和数据存储。它包括文件索引、用户目录、排重索引，不仅满足基本的文件存储需求，还支持了同一目录下千万级文件个数的用户目录，以及追求最优成本的排重索引。
文件索引
面对丰富业务场景，上的文件长度从几到几十都有，大文件对文件的上传、下载、存储都带来很大的挑战。文件索引支持大小灵活伸缩，文件最大可达，同时带来文件并发上传、下载提升用户体验的好处。
将文件切分成多个数据分块存储在数据存储集群中，文件索引维护文件中所有分块在数据存储的位置等元数据，将元数据存储在索引存储中。通过文件索引可以到元数据中指向的数据存储集群中获取到文件数据分块，串联起索引存储和数据存储，支持文件存储。
目录索引
文件存储中，常见目录类应用场景如相册、微云网盘，每个用户的所有文件、图片都使用目录功能来管理。早期将同一目录下的文件、目录索引打包存储到一条中来提供通用的用户目录索引的解决方案。随着业务发展目录下文件数越来越多，部分用户需要超过十万的超大目录景，这些大目录的查找效率、流量都成为瓶颈。
 采用分拆目录索引的方式，将目录下超长列表按字典顺序分段存储在多个扩展记录中，在主目录索引下记录所有扩展记录以及列表范围。分而治之的思路不仅加速大目录下增删改查的性能、降低了延时，也提供了同一目录下千万级文件个数的用户目录功能。

排重索引
平台针对用户数据在云端多份存储常见的场景，特别是热点视频、图片、安装包等，对文件和数据分块都支持了排重，以相册为例，排重率大于，而微云则超过了，排重效果可观。数据排重为用户提供了图片、文件秒传，既优化大文件上传的用户体验，也降低存储成本。
三、索引存储  高性能存储
 的索引数据落在基于盘的高性能分布式存储系统中，采用数据分布技术，以及基于混合索引的存储引擎，具有高性能、低成本、低延时、运营可控的特点。
整体架构见下图，其中为接入服务器，负责前端业务的接入；为元数据服务器，负责资源和路由的管理；为存储服务器，负责数据的磁盘存储。

 数据分布技术
对于分布式存储来说，首先要解决如根据快速定位数据所在位置存储节点，磁盘，盘内偏移。业界常用分布式哈希或者中心化路由等技术来解决数据分布化的问题，典型代表有的、等 但这些方案存在伸缩性不足，运营可控性差的缺点。
 的  的数据分布技术，拥有的分布式无中心节点的路由访问容错性的同时兼顾了中心化集中式的路由的可控性。技术中，路由表基于万的一致性哈希虚拟节点，大小可控有利于路由同步、缓存；作为中心节点负责路由管理，提供日常运营副本状态、节点更替等路由变化功能；在可平行扩展的中缓存路由、增量同步，解决中心节点单点瓶颈问题；存储节点上实现路由访问校验，为数据安全加一层保障。
 基于技术，我们在运营中还实现了双读去毛刺和平滑扩容。
双读去毛刺。线上运营中，经常遇到磁盘毛刺严重、网络抖动等影响业务质量的问题，通过双读策略解决访问毛刺问题，在磁盘高负载毛刺率较高的情况下，做到了的请求都低于。在接入层实现双读访问控制：遇到读取副本超时未响应时从其他副本读取数据，发挥多副本的优势。
 平滑扩容。节点故障离线、增加节点带来数据腾挪均衡是常态，而数据腾挪是一个离线的过程，如何保证在线访问新写数据不丢呢？在接入层加入数据搬迁中的源和目标存储单元串联双写的访问控制，实现平滑扩容，扩容过程可进可退。
 混合索引存储引擎
存储支持了记录大小从几十字节到几百业务场，业务特性为读多写少场景，所以需要一个记录大小灵活且读性能高的存储引擎。目前业界常用的存储引擎有树 等，这些存储引擎存在读性能差，写放大导致固态盘使用寿命短等问题。
 混合索引技术。我们在运营中针对固态硬盘自研了基于混合索引的存储引擎，该引擎具有读效率高，读写延时波动小，无写放大等优点。在有限的内存基础上实现记录全索引，读请求都是一次磁盘访问，保证可控的读效率。记录较小场景下，内存索引先被耗尽导致磁盘利用率低、空间浪费的问题，通过混合索引技术得到很好的解决。
 以小于的记录为小记录，将小记录哈希到桶索引、大记录独立索引混合放在内存中。读访问时，通过索引查询判断是大记录、桶记录，通过相应索引从磁盘读取数据，大记录直接返回，桶记录则需要遍历查询获得对应小记录、或确认遍历不到的空记录。通过合并写，块回收的方式减少对磁盘的随机写入，去除对盘的写放大。

主机技术。业界基于的存储系统设计中，都实现了垃圾回收、地址映射、调度的功能，与通用的功能重叠，在性能、寿命上存在浪费。基于主机技术，极大的精简了内部设计；其中基于优先级和最差延时保证的读写调度算法，超过延时比例为；应用感知的回收算法，使得随机写寿命提升倍。
四、数据存储
 在丰富的业务场景驱动下，的数据存储也发展出来不同的差异。根据业务的场景、数据冷热层度，提供高性能数据存储—基于存储单元结对的存储引擎、更低成本的数据存储—一体化的纠删码存储引擎。

在数据存储系统中，将文件切分的分块数据存储在存储节点；存储节点上以的空间聚集多个分块数据、把空间称为；将分布在不同存储节点上的一个或者多个组合成数据的多副本或者纠删码条带，称为。通过元数据管理节点管理，并负责数据分块空间分配、下载定位。
 基于存储单元结对的存储引擎
在众多同构存储节点，不同副本分布设计和存储引擎将是直接影响数据存储系统的性能。常见的有基于主机、磁盘结对的副本分布方式，实现设备、硬件的故障隔离，但是故障后性能与可靠性都有缺点。
 数据存储提供了基于存储单元结对存储引擎，具有极致的系统性能和超高数据可靠性。
副本均匀分布在集群各个故障容灾节点中，故障隔离包括磁盘、设备、基架、交换机等。在常见的磁盘、设备故障下，系统保持近乎峰值性能；且硬件故障、数据恢复上面，其他节点都参与数据快速重建，瓶颈不再集中在单节点上，数据安全性更有保证。     
 的存储引擎跳过文件系统直接运行在“裸盘”上，优化了路径。每个设计独立的元数据区和数据区，全内存缓存、对齐，数据区追加写，实现极致性能以及运营可控：业务读数据时，只需访问一次数据，业务写只有一次、一次数据共两次写。
 一体化的纠删码存储引擎
 文件存储主要存储的是类的用户数据，访问频率随着时间推移越来越低，数据在慢慢变“冷”，需要低成本的数据存储方案。业界常见降成本的方式为对数据进行编码，在保证数据可靠性的提供，降低存储份数到份，一般的有基于多副本写层，以及的纠删码存储层双系统架构，这种架构存在运营复杂、业务数据落地路径长的问题。
 一体化的纠删码存储引擎具有份的低成本、高可用和数据可靠性的优点。系统使用纠删码副本模式，将存储成本缩减到份；利用指令集加速、实现高效纠删编码；简单的元数据存储节点架构，上传写到提供写服务的内并拷贝多份数据到其他故障容灾的设备上，支持服务高可用；新上传的数据通过增量编码的方式快速进行纠删编码落地，提高数据高可靠性。
五、总结
 存储系统通过 索引技术，为用户提供丰富的索引功能。基于主机和混合索引的大规模存储和处理技术，提供高性能、低成本、运营可控的索引存储。基于存储单元结对的存储引擎、一体化的纠删码存储引擎，助力提供高性能、低成本等多种场景的数据存储。
十一年的数据极速增长，从无到有、架构不断演进，后续也将持续通过数据异地分布、硬件定制等技术，继续在数据高可靠、高性能、更低成本上助力业务更好发展。

文章来源公众号：腾讯架构师作者：刘恒兵

为什么要做组件平台
为什么要组件，这个问题在很多场合都被人提起，这里不做过多赘述，其解决的本质问题：

复用：减少产品、设计、开发、测试、部署大型应用的重复工作量，提升开发效率
统一：同一个平台统一产品特性保持高度统一和一致，能做到同步修改。

然后，在任何产品的上线过程中，谁都不愿意重复早轮子，都希望能通过一些规范和标准统一起来，后续就完全按照这个标准执行，并能否把历史上实现过的沉淀出来的直接使用，不需要重复劳动。
这里就提到的重要的点：、沉淀；、标准。如何沉淀？沉淀的标准是？在哪里沉淀？该不该使用？如何使用？新加入的小伙伴如何知道？
同时，我们还需要解决每个组件之间的依赖即模块依赖，就需要一个平台来帮我们做这样的事情，维护组件，而且能做到工具化，和构建体系打通，使用者能快速方便地相信和使用组件。这里就提到一个重要的问题：工具、维护
从组件的维护发展历史来看有以下一些方式：

：把一些组件抽离出来，放到代码管理系统，使用者通过既定的发现路径，招到组件，下载使用。这种方式效率相对比较低，团队内部都不一定能知道对方有什么组件，外部更不用说了。
：相对于来讲，除了代码托管之外，比较优势的地方是开源化，可以在这个平台找到很多有类似功能的组件。同时，还可以参与贡献和反馈，提升组件。然后，对于使用者来讲，首先要找到自己想要的组件相对麻烦；同时，和自己的构建体系结合，依赖维护等都是比较明显的问题。
、，，、、等。他们都能解决组件依赖，同时也能和构建体系打通，有很多关于他们对比的文章，这里不做更多描述。他们在很大程度上解决了我们工作中遇到的问题。但随着组件的增多，我们逐渐发现，找一个组件且是自己信任和想要的组件比较难，只能根据知名度、关注度以及文档来初步判定，而且没办法反哺组件，进一步提升组件
：这里之所以单独列出来，一度我们觉得这个是离我们目标最近的组件管理平台，他包括了组件初始化、编码、本地化调试、文档生成、发布、依赖管理、单元测试、构建、源服务等功能。

而我们理想需要的一个组件管理平台应该要满足以下条件：

更新维护
文档调试
依赖管理
构建体系
单元测试
快速发现
质量认证
使用反馈

那么，现有的哪个平台离我们最近呢？之前的分析可以看到，离我们最近的是，基于我们可以打造出我们理想目标的组件管理平台。
如何着手做呢
开始之前我们得明确自己的目标，有了目标之后我们得确定规范，然后才能开始行动。
规范
每一个组件平台应当有自己的规范，至少应该包含以下规范：

 组件规范
 平台规范
 运营规范

当然这里的运营规范是后面补充的，早期我们确定了代码采用规范，后期我们打通了基于的构建体系。其他构建体系下的插件也会逐渐放出来。
全景图
规范确定之后，应当有一个整个平台全景图的规划，应该罗列需要包含的功能。

认证流程
其中我们想要的认证体系如下：

平台开发
开发之前，有做过一些深入的交流和讨论，基于客户端开源。
组件使用
这里有详细的组件使用文档
大致罗列了一下，的产生的背景、规范、使用的指引，后续章节再逐渐解析体系下各个模块运作机制和的理念

原文链接：


相关推荐 源码解析之前端渲染篇 简介腾讯存储与免费体验王玉伟，腾讯架构平台部平台开发中心基础研发组，组长为专家工程师，专注于为数据中心提供高效的异构加速云解决方案。目前，已在腾讯海量图片处理以及检测领域已规模上线。

随着互联网用户的快速增长，数据体量的急剧膨胀，数据中心对计算的需求也在迅猛上涨。诸如深度学习在线预测、直播中的视频转码、图片压缩解压缩以及加密等各类应用对计算的需求已远远超出了传统处理器的能力所及。摩尔定律失效的今天，关注“新“成员\\为数据中心带来的体系架构变革，为业务配上一台动力十足的发动机。
 异构计算：
明明用的好好的，为什么我们要考虑异构计算芯片呢？

随着互联网用户的快速增长，数据体量的急剧膨胀，数据中心对计算的需求也在迅猛上涨。诸如深度学习在线预测、直播中的视频转码、图片压缩解压缩以及加密等各类应用对计算的需求已远远超出了传统处理器的能力所及。
历史上，受益于半导体技术的持续演进，计算机体系结构的吞吐量和系统性能不断提高，处理器的性能每个月就能翻倍众所周知的“摩尔定律”，使得处理器的性能可以满足应用软件的需求。但是，近几年半导体技术改进达到了物理极限，电路越来越复杂，每一个设计的开发成本高达数百万美元，数十亿美元才能形成新产品投产能力。年月日，英特尔宣布正式停用“”处理器研发模式，未来研发周期将从两年周期向三年期转变。至此，摩尔定律对英特尔几近失效。
一方面处理器性能再无法按照摩尔定律进行增长，另一方面数据增长对计算性能要求超过了按“摩尔定律”增长的速度。处理器本身无法满足高性能计算：  应用软件的性能需求，导致需求和性能之间出现了缺口参见图。
一种解决方法是通过硬件加速，采用专用协处理器的异构计算方式来提升处理性能。
图：计算需求和计算能力的缺口发展形式
 异构计算：
通常我们在为业务提供解决方案的时候，部署平台会有四种选择 、、、。那有什么标准来评判计算平台的优劣呢？
图：我是法官标准我说了算
当今理想的协处理器应该是基于硬件的设计，具备三种基本能力。第一是设计能够提供专门的硬件加速实现各种应用中需要的关键处理功能。其次是协处理器设计在性能上非常灵活，使用流水线和并行结构，跟上算法更新以及性能的需求变化。最后，协处理器能够为主处理器和系统存储器提供宽带、低延迟接口。
除了硬件要求以外，理想的协处理器还应该满足  市场的“”要求：性能  、效能  、功耗  和价格  。
 市场对性能的最低要求是全面加速实现算法，而不仅仅是某一步骤，并能够加速实现整个应用软件。
效能需求来自最终用户。在现有的计算机系统中，协处理器必须安装起来很方便，提供简单的方法来配置系统，加速实现现有的应用软件。
 市场的功耗需求来自计算系统安装和使用上的功耗限制。对于大部分用户，能够提供给计算机的空间有限。计算系统的功耗越小，那么可以采取更少的散热措施来保持计算机不会过热。因此，低功耗协处理器不但能够为计算系统提供更低的运转成本，而且还提高了计算系统的空间利用率。
价格因素在  市场上显得越来越重要。十几年前，某些应用软件对性能的需求超出了单个处理器能力范围，这促使人们采用专用体系结构，例如密集并行处理  和对称多处理  等。然而，这类系统要求使用定制处理器单元和专用数据通路，开发和编程都非常昂贵。
现在的  市场抛弃了如此昂贵的方法，而是采用性价比更高的集群计算方法。集群计算采用商用标准体系结构，例如  和 ；采用工业标准互联，例如万兆以太网和  ；采用标准程序语言，例如运行在低成本操作系统上的  语言等。当今的协处理器设计必须能够平滑集成到商用集群计算环境中，其成本和在集群中加入另一个节点大致相当。
了解了基本的评判标准之后，我们以当今最火的深度学习为例，从芯片架构、计算性能、功耗、开发难度几个方面来对几种不同的芯片进行分析对比。
 芯片计算性能
深度学习的学名又叫深层神经网络  ，是从人工神经网络  模型发展而来。我们以深度学习作为切入点来分析各个芯片的性能。图是神经网络的基本结构，模型中每一层的大量计算是上一层的输出结果和其对应的权重值这两个矩阵的乘法运算。
 图：神经网络基本结构
横向对比，，，计算能力，实际对比的是：
硬件芯片的乘加计算能力。
为什么有这样乘加计算能力？
是否可以充分发挥硬件芯片的乘加计算能力？
带着这三个问题，我们进行硬件芯片的计算能力对比。

相关阅读深入理解和异构计算芯片 下摘要论述如何借助开放技术的平台，探索连接互联网时代，实现企业的转型、升级或变革，从而激发企业活力，不断演进或进化，进一步提升企业价值与竞争力。

“互联网”写进年的《政府工作报告》，使其一举成为年的中国热词；而伴随国家发改委着手“互联网”行动计划的制定，可以预见，中国社会发展即将进入“互联网”时代。 
互联网时代的特征
通信技术与智能终端的发展，使得人人都可以随时随地方便地连接互联网：获取资讯、创造内容、参与娱乐或产生消费。据第次中国互联网络发展状况统计报告显示：截至年月，中国网民规模达亿，中国手机网民规模达亿。网民中使用手机上网人群占比由年底的提升至。移动互联网与传统行业正加速融合。

更进一步，联网的设备越来越多，用户不再有离线的概念，这要求企业运作永不停歇，服务永远在线。据华为预测，到年，全球将产生亿连接，其中以上将会来自于各种智能传感器。这意味着几乎所有的企业都将加入到互联网的连接中来。
物联网、云计算、大数据、移动等技术的集成，将大大加快新模式培育及新业态形成，互联网创新应用也将深度融合于经济社会各领域之中。而开放技术平台，是集成了物联网、云计算、大数据及移动技术的平台，由此成为互联网时代企业转型与变革的最佳利器。
传统企业面临的技术困境与挑战
传统企业互联网技术运营相对缺位。这体现在几个方面：技术方向选型犹豫。传统企业往往资产比较重，对业务流程的把控谨慎，要求特别高；而对技术快速改变难以适用，对新技术或新应用实施总抱有某种担心，导致互联网技术方向的选型没有底。技术开发与控制能力也相对薄弱。一般传统企业对互联网用户规模及其突发特性预估不足，技术方案或架构弹性能力相对欠缺，导致线上应用与服务总是不稳定或成本畸高，恶性循环之下更易招致管理层对互联网创新业务的抵制。对顾客的积累和挖掘做得不够。传统企业总是不停地做生意，对产品的标准化与规模化较为重视。而互联网时代，用户个性化需求越来越多。企业要面临越来越多关于如何吸引海量的顾客、随时随地全方位提供产品服务、更好地满足顾客个性化需求等等挑战。互联网行业所擅长的大数据处理恰恰能帮助其改良运营系统，利用数据分析加大对顾客的积累与挖掘，可大大优化顾客体验、留存更多的顾客、节省运营成本和增加效益。
传统企业信息不对称的问题较为严重。企业的信息流存在着脱节的情况，甚至现在有些企业还没有 化，要靠嘴巴相传。企业信息的不对称，也导致创新动力匮乏。如何构建基础设施、使用互联网技术特别是移动技术打通信息流，使企业的各类信息更加透明、更全面，流动更高效也是企业面临的困境之一。开放技术平台所集成的基础设施能力、丰富且成熟的互联网应用技术接口及其背后承载用户规模及生态等均有助于化解传统企业所面临的这些技术困境与挑战。
开放技术平台的优势与价值
开放技术平台具备天生的互联网技术基因。目前市场上的开放技术平台均衍生于大型互联网企业。如腾讯、阿里、百度、、等开放技术平台。这些平台都服务支撑过亿万海量用户，已证实其技术更具可靠性、扩展性、安全性与稳定性。
使用开放技术平台可获得海量用户的触达或导入，也更易形成互连的生态。开放技术平台一般衍生自亿万规模用户的标杆业务，并伴随相应成熟度的生态。如腾讯开放平台为广大移动应用开发者提供登录，分享以及关系链等多项用户能力支持，在满足用户的需求的同时，也达到迅速增加用户数量与粘性的目的。
开放技术平台还提供丰富的应用功能技术接口，其应用生态越来越成熟与完善。这使得应用开发与维护的难度大大降低，而且成本十分低廉。例如腾讯开放平台提供的信鸽推送应用接口，使开发者可以方便地嵌入，通过调用或者端可视化操作，实现对特定用户推送，大幅提升用户活跃度，有效唤醒沉睡用户；甚至推送效果也可实时查看。开放技术平台的这些优势，正是传统企业的技术系统所短缺的。传统企业结合引入开放平台技术与应用，将事半功倍地完善其技术体系，实现信息更加透明并加速流动，让资源配置更加合理，从而大大降低企业转型的门槛及加快创新的速度。
开放技术平台的引入与结合
开放技术平台包括几方面：开源软件的选择与引入；云计算技术平台的选用；开放应用技术的选用。
开源软件的选用
互联网诞生以来就以分享、协作为宗旨，因此互联网企业普遍选用开源软件进行技术开发。常见的、、、等典型互联网服务系统架构，均是由开源软件构建。大数据处理如，，，，，等存储与计算技术，也均为开源系统。移动端的系统，也是一个开源项目系统。显然拥抱开源、选用开源软件系统，不仅利于传统企业广罗合适的人才，更有助于传统企业转型时，将有限的资源投入到最核心业务的开发或产品试错上，降低成本。 
云计算技术平台的选用
基础设施资源如服务器、网络、存储、带宽等，是运行互联网业务所必需的。基础设施资源的选型、采购、管理与维护都相对比较重，需要专业技术人才。但这些人才与技术储备，传统企业是相对薄弱的。互联网行业近年的飞速发展，已经成就了一些非常好的、以   基础设施为主要产品的开放云计算技术平台。主流的开放的云计算技术平台有：，阿里云，腾讯云，，青云等等。
传统企业若要独自建设承载互联网业务的基础设施，要面临太多技术挑战。举个常见的网络例子，中国各运营商割据而导致的特殊“跨网难通”的网络环境，云计算技术平台的网络就是打通网络互通的解决之道。网络大大减少了企业应用架构的复杂性并提升了性能。因此，云计算技术平台提供了非常专业的、可靠且性能卓越的技术资源产品与解决方案，包括但不限于跨机房容灾、安全扫描服务、全方位监控方案及及监控报告输出等。一般企业仅需在其上选购技术产品，自行搭建运行环境与具体应用即可。
除基础设施技术与资源之外，多数云计算技术平台还提供业务发展所需的专业支撑服务：如由专业的工程师提供架构咨询与优化，技术支持团队提供小时的技术响应与支持，更有提供研发与运维团队直接对接服务。主流云计算技术平台总体架构如下：

由于规模化采购以及高度市场化的竞争，云计算技术平台具有较好的性价比，最为关键的一点是使用非常灵活，可按需租用可做到按小时租用、按需扩展。因此企业转型使用可以很好地控制成本。下面介绍企业可以直接从云计算技术服务平台选购的主要技术产品或服务：
、云主机 为即租即用、弹性扩展的主机服务，提供有丰富硬件配置和操作系统供客户选择。可以满足企业不同发展阶段、不同业务的需求。
、云数据库  一般地讲云数据库主要具有以下一些特点：云存储服务，提供的面向互联网应用的数据存储服务完全兼容协议，适用于面向表结构的场景，适用的地方都可以使用云数据库提供了高性能、高可靠、易用、便捷的集群服务整合了备份、扩容、迁移等功能，同时提供管理后台，用户可以方便的进行数据库的管理。
、云内存存储 即高性能、高可用的内存存储，兼容常用的协议，主要用于为热数据提供高性能缓存，一般配合数据库使用，以提升系统性能并减轻数据库压力。此产品最关键特性是分布式、支持数据可持久化、多备份与容灾。
、海量文件存储  为基于对象的存储，是高可靠性，高安全性的云存储系统，可根据用户使用情况进行弹性扩展。几乎支持所有的文件类型，特别适合  的应用使用。
、负载均衡服务 特别适合业务接入层服务。可自动隔离故障或异常，支持无缝扩展或升级，实现服务的高可用。典型的负载均衡服务架构如下：

、云分发：开放云计算技术平台提供  服务一般都具有过百个国内和海外节点，为静态内容如图片、样式、文件等、流媒体内容如音视频点播、直播等、动态内容如动态信令，、游戏通信、图片或文件等提供加速及就近访问，大大改善提升业务体验，减少源站复杂度及服务压力，节省成本一般来言，源站的网络需为核心节点，带宽为或带宽，价格高昂；而靠近用户，价格较低。的典型拓扑图如下：

可以预见，互联网时代，以上的企业都不必自己建设这些基础设施，把握并使用好这些云计算技术平台，将会为企业转型或变革取得先机。
开放应用技术的引入
有了基础设施，传统企业要考虑结合自身的资源，在其上构建延展或创新的业务与服务。那有没有现成的开放应用可以“拿来”借用？答案是肯定的。下面结合一些案例，来介绍一些典型的开放应用技术的引入。
、开放的统一账户管理与登录。互联网时代，企业能快速地获取用户、并让其方便快捷地登录体验至关重要。腾讯的、微信，由于其庞大的用户基数据腾讯最新的财报信息披露：全平台亿月活跃帐户；微信与合在一起，月活动帐户亿，已形成事宜上的互联网底层账号系统，刚好腾讯将这个通用的、底层用户登录认证能力开放出来了。作为企业转型或变革拥抱互联网，支持引入开放的统一账户登录与认证，毫无疑问是最基本、最有效的实践。
可选择使用的统一账户管理与登录技术有：登录分享、关系链、微信登录、新浪微博等。如京东、雪球除自身的帐户体系外，还为用户提供了登录、微信登录功能，大大降低了注册门槛，方便了用户，提升了活跃度。参考见下图示例：

一般地讲，通过或微信开放登录，还可在用户授权后，获取用户基本信息，包括头像、昵称、性别、地区。当然出于安全考虑，网站应用的微信登录，需通过微信扫描二维码来实现。
有关账户登录授权使用可参考：
 用户能力
有关微信账户登录授权使用可参考：
=_=_==
、分布式数据处理。一般开放技术平台会基于框架，提供，和组件，按使用量计费。前面讲过，传统企业往往对顾客的积累和挖掘做得不够，有了分布式数据处理技术与平台，就可以尽可能地收集并积累产品与顾客的数据，进行大数据分析。如腾讯云分布式数据处理的开放技术平台。典型的大数据处理平台架构拓朴见下：
例如：腾讯云大数据处理平台支持支持、、的数据实时接入；支持、、等主流关系数据库高效导入，支持文本类日志数据离线导入。离线批处理计算支持、、等批处理计算作业；支持分布式内存计算框架。实时流处理计算支持腾讯对社区流处理引擎重写的版本、流式任务作业引擎；支持基于上的 ，满足毫秒级的实时计算场景需求，如实时推荐、用户行为分析等。
、开放支付。支付功能，是互联网时代打通线上线下交易最为重要的功能，它赋予企业实现交易闭环的能力，有助于挖掘更广泛的市场商机，吸引更多的顾客。在开放支付方面，腾讯的微信支付与阿里的支付宝基本是家喻户晓。这里以微信支付为例进行说明。通过接入微信支付功能，用户可以在公众帐号或中方便快捷地通过微信支付来收付款，包括：刷卡支付、扫码支付、公众号支付、支付等多种模式。有数据显示：截止到年第季度，微信支付的线下门店总数超过万家，仅零售行业就已覆盖全国超过万家门店。
年月日微信支付团队更宣布，微信支付全面开放申请，使得企业接入微信支付后即可快速、无门槛地获得诸多丰富的接口和权限，包括但不限于资料管理、技术开发、交易、对帐等权限。关于接入微信支付的使用步骤介绍，可参考：
=_
、开放搜索。开放技术平台服务商将搜索引擎组件化、平台化、服务化，形成的一套成熟的搜索开放能力，为企业提供数据处理、检索串识别、搜索结果获取与排序，搜索数据运营等搜索相关服务。腾讯云的云搜，就是这类开放搜索技术服务。如开放搜索的详细使用案例可参考：
 腾讯云搜
、音视频通信。音频、视频通信处理技术，使得远程医疗、教育等传统业务可通过互联网延伸并改善服务。如腾讯云提供：视频点播、直播、音视频云通信等开放技术服务，成功应用于富途证券开户，医院挂号与远程诊断。详细案例及使用可参考：
 音视频云通信
、人脸识别。开放技术平台服务商基于人的脸部特征信息进行身份识别的一种生物识别技术。提供了人脸检测与分析、人脸比对、人脸验证、人脸识别等一整套技术方案。可用于客户识别，远程开户等场景。如腾讯云提供：“优图人脸识别”服务成功应用于微众银行远程开户，其基本技术架构图见下：

、推送服务。移动互联网时代，开放技术平台服务商可提供基于移动用户画像的精准营销功能，管理者可以针对特定的用户群体展开不同的活动，百亿级的通知消息推送，秒级触达移动用户，从而提升付费率和用户留存率。如腾讯提供的“信鸽推送”开放技术成功应用于” 块包邮购”，企业反馈非常正面：通过信鸽强化了与用户的连接能力，各类个性化推送可以准确及时的送达用户，通过推送不同的运营活动有效的提升了用户留存，并刺激了持续走高的流水增涨。详细使用与案例可参考：
结合自身的优势资源，使用好开放应用技术，企业不仅减少重复造轮子，省时少力，还可以大大提升企业转型创新的能力与机会。
结语
借助开放的技术平台，企业可拥抱并适应了互联网时代，获得连接世界的新型能力。而开放技术平台产生的连接力量将使企业大大缩短业务流程、降低成本、提升效率，释放出创新价值的巨大能量。
作者简介

熊普江
北大互联网班学员，现任腾讯资深架构师，负责腾讯公司业务资源规划与技术架构评审等工作。自年涉足互联网，曾服务美国、太平洋网络、等技术与互联网公司，任网络营运总监、运维总监等职务，年加入腾讯。逾年互联网从业背景，拥有丰富的大型网络架构规划与建设，海量用户平台规划与营运技术支撑，超大规模业务资源规划与技术架构管理优化等经验。导语
终于到了本系列最后一篇，在上一篇中，我们准备好了各种资源，包括搭建 群集的底层，在发布了前面四篇后我收到了大量反馈，现在集中回答下。
、    文中采用  服务器作为共享存储仅仅是为  效果，但是生产环境绝不推荐使用  层面的  服务器，那么究竟什么样的架构才可以相对合理  层面的   没有绝对合理的架构呢？我个人建议是这样的，可以采用  来进行搭建  高可用这也是从   之后就主推的架构， 但是同样需要安装  ，只是不需要再起  ，在      不依赖域可以无存储进行搭建，如果确确实实需要搭建   ，有什么办法呢？目前来说，国内大部分公有云厂商不支持双挂  盘的架构，  实际上底层支持，但是这同样需要一定的  钱才可以支持这种特殊配置，据我所知，目前客户群体中不超过两位数。
、    那既然     之后不推崇     了，为毛你还要写     文章？首先写     最主要的目的是给大部分客户在国内云厂商上搭建    不单单是   提供指引，其次也是为了验证国内云厂商的可折腾性，单从这两点来看，目前效果还是不错的，从文章被官方腾云阁收录的情况来看，国内云厂商的容忍度还是比较高的。
、 后续计划是怎么样的？你们以为就只有   吗？看过我个人博客的童鞋应该都知道，我所写的文章基本都是系列文，而且是平行世界炒鸡大的系列文，既然这次系列文反响还不错，那么解下来的尿性应该就是《在  上创建您的》的一大堆博文了，最终会跟我  云平台系列文章做整合，这算是埋下的一个彩蛋，敬请期待。
有些童鞋肯定存在疑问，为什么做一个   需要这么多 ，这么多角色有点混乱，现在我们就来捋一捋，涉及到本系列文章其实最重要有三个角色：





 


其中  作为  、  的基础群集服务，自然不用多讲，那么  与  之间存在什么关系，我个人是运维集成工程师，并不是专业  ，通过请教  大师得知，  分布式事务协调器主要目的是为了实现分布式的事务型任务处理，确保节点间进程通信一致，如果不做  的话  不需要搭建，如果需要做到群集的话，  就是必要条件之一，当前环境只存在一个   ，默认选择第一个也是唯一一个  实例作为分布式实例为确保群集完整，这是     之后才有的验证。
好了，话痨了这么久，现在上正菜，涉及架构及相关网络如下：




编号
服务器名称
生产
存储
心跳
对外







无
无







无








  







  




与  高可用部署一样，这里也需要采用脚本方式见上一篇进行判断是否需要切换，记得把反向区域创建好，避免  出现解析错误：

 
在  、  安装  角色：

确认 、 介质到位，初始化两个节点的数据盘我们将  主程序安装在数据盘上，避免出问题，开始进行安装：
点击群集管理器将   进行脱机删除上一篇主要为了测试将共享存储进行转换成  测试转移：

点击  安装程序，切换到安装：

第一个节点点击新的群集安装并输入  ：

一路点到安装故障转移群集规则检测，默认会有群集警告前篇介绍过由于  驱动：

功能目录、实例根目录统一选择输入数据盘路径：

输入之前配置好的群集名称及输入实例名称：

在检查群集资源页上下一步由于存在仲裁盘及默认  这里的  组不可用是正常的：

在群集磁盘页面选择   作为  共享存储：

配置管理账户这里选定域管理，后面再添加  作为管理账户，建议生产环境直接使用  域账户作为管理账户：

为确保管理遍历，这里启用  账户：

确认配置后开始安装：

完成搭建，检查群集状态：

完成第一个节点的创建后，打开群集管理器，点击角色——选中   右键——选择添加资源——分布式事务处理协调器来添加  进行事务处理：

检查分布式事务处理协调器是否状态正常，正常后对  进行重启下。
登录 ，打开安装并选择：

一路下一步就会识别到群集并进行安装：
 
至此，完成群集搭建完成，如果应用要使用调用可以直接采用  进行访问，当一个  节点挂了后  就会切换到另外一个节点这里会存在停机时间，如果要实现没有停机时间的群集，可以采用目前推荐使用的  或者直接采用  级别的  底层其实也是  ，效果如下：

模拟切换：

切换过程中：

切换完成：

关于如何连接该群集实例 及 安全相关：

直接使用   链接，注意使用 ：进行链接
连接后先添加一个管理员到登录名中并指定相关权限

下批系列预告：
将放出更多基于的微软架构文章

相关推荐【腾讯云的种玩法】在腾讯云上创建您的  故障转移集群【腾讯云的种玩法】在腾讯云上创建您的  故障转移集群 【腾讯云的种玩法】在腾讯云上创建您的  故障转移集群作者简介：申砾，  ，前网易有道词典服务器端核心开发，前奇虎  新闻推荐系统  地图基础数据与检索系统  。

续上文：三篇文章了解  技术内幕：说存储
关系模型到  模型的映射
在这我们将关系模型简单理解为  和  语句，那么问题变为如何在  结构上保存  以及如何在  结构上运行  语句。
假设我们有这样一个表的定义：
       {
         
         
         
         
          ，
          
    }

 和  结构之间存在巨大的区别，那么如何能够方便高效地进行映射，就成为一个很重要的问题。一个好的映射方案必须有利于对数据操作的需求。那么我们先看一下对数据的操作有哪些需求，分别有哪些特点。
对于一个  来说，需要存储的数据包括三部分：

表的元信息
 中的  
索引数据

表的元信息我们暂时不讨论，会有专门的章节来介绍。
对于 ，可以选择行存或者列存，这两种各有优缺点。 面向的首要目标是  业务，这类业务需要支持快速地读取、保存、修改、删除一行数据，所以采用行存是比较合适的。
对于 ， 不止需要支持  ，还需要支持  。 的作用的辅助查询，提升查询性能，以及保证某些 。查询的时候有两种模式，一种是点查，比如通过   或者   的等值条件进行查询，如      = ，这种需要通过索引快速定位到某一行数据；另一种是  查询，如            ，这个时候需要通过  索引查询  在  和  之间的那些数据。 还分为   和 非  ，这两种都需要支持。
分析完需要存储的数据的特点，我们再看看对这些数据的操作需求，主要考虑 这四种语句。
对于  语句，需要将  写入 ，并且建立好索引数据。
对于  语句，需要将  更新的同时，更新索引数据如果有必要。
对于  语句，需要在删除  的同时，将索引也删除。
上面三个语句处理起来都很简单。对于  语句，情况会复杂一些。首先我们需要能够简单快速地读取一行数据，所以每个  需要有一个  显示或隐式的 。其次可能会读取连续多行数据，比如    。最后还有通过索引读取数据的需求，对索引的使用可能是点查或者是范围查询。
大致的需求已经分析完了，现在让我们看看手里有什么可以用的：一个全局有序的分布式  引擎。全局有序这一点重要，可以帮助我们解决不少问题。比如对于快速获取一行数据，假设我们能够构造出某一个或者某几个 ，定位到这一行，我们就能利用  提供的  方法快速定位到这一行数据所在位置。再比如对于扫描全表的需求，如果能够映射为一个  的 ，从  扫描到 ，那么就可以简单的通过这种方式获得全表数据。操作  数据也是类似的思路。接下来让我们看看  是如何做的。
 对每个表分配一个 ，每一个索引都会分配一个 ，每一行分配一个 如果表有整数型的  ，那么会用   的值当做 ，其中  在整个集群内唯一， 在表内唯一，这些  都是  类型。
每行数据按照如下规则进行编码成  ：
    ： ___
        
其中  的  都是特定的字符串常量，用于在  空间内区分其他数据。对于  数据，会按照如下规则编码成  ：
     ____
     
 数据还需要考虑   和非   两种情况，对于  ，可以按照上述编码规则。但是对于非  ，通过这种编码并不能构造出唯一的 ，因为同一个  的 ____ 都一样，可能有多行数据的  是一样的，所以对于非   的编码做了一点调整：
     _____
    ：
这样能够对索引中的每行数据构造出唯一的 。
注意上述编码规则中的  里面的各种  都是字符串常量，作用都是区分命名空间，以免不同类型的数据之间相互冲突，定义如下：
    
             = {}
         = _
          = _
    
另外请大家注意，上述方案中，无论是  还是  的  编码方案，一个  内部所有的  都有相同的前缀，一个  的数据也都有相同的前缀。这样具体相同的前缀的数据，在  的  空间内，是排列在一起。同时只要我们我们小心地设计后缀部分的编码方案，保证编码前和编码后的比较关系不变，那么就可以将  或者  数据有序地保存在  中。这种保证编码前和编码后的比较关系不变的方案我们称为 ，对于任何类型的值，两个对象编码前的原始类型比较结果，和编码成  数组后注意， 中的  和  都是原始的  数组的比较结果保持一致。具体的编码方案参见  的  包。采用这种编码后，一个表的所有  数据就会按照  的顺序排列在  的  空间中，某一个  的数据也会按照  的  顺序排列在  空间内。
现在我们结合开始提到的需求以及  的映射方案来看一下，这个方案是否能满足需求。首先我们通过这个映射方案，将  和  数据都转换为  数据，且每一行、每一条索引数据都是有唯一的 。其次，这种映射方案对于点查、范围查询都很友好，我们可以很容易地构造出某行、某条索引所对应的 ，或者是某一块相邻的行、相邻的索引值所对应的  范围。最后，在保证表中的一些  的时候，可以通过构造并检查某个  是否存在来判断是否能够满足相应的 。
至此我们已经聊完了如何将  映射到  上面，这里再举个简单的例子，便于大家理解，还是以上面的表结构为例。假设表中有  行数据：

   
   
  

那么首先每行数据都会映射为一个  ，注意这个表有一个  类型的  ，所以  的值即为这个   的值。假设这个表的   为 ，其  的数据为：
    ___     
    ___     
    ___    
除了   之外，这个表还有一个 ，假设这个  的  为 ，则其数据为：
    _____  
    _____  
    _____  
大家可以结合上面的编码规则来理解这个例子，希望大家能理解我们为什么选择了这个映射方案，这样做的目的是什么。
元信息管理
上节介绍了表中的数据和索引是如何映射为 ，本节介绍一下元信息的存储。 都有元信息，也就是其定义以及各项属性，这些信息也需要持久化，我们也将这些信息存储在  中。每个  都被分配了一个唯一的 ，这个  作为唯一标识，并且在编码为  时，这个  都会编码到  中，再加上 _ 前缀。这样可以构造出一个 ， 中存储的是序列化后的元信息。
除此之外，还有一个专门的  存储当前  信息的版本。 使用   的   变更算法，有一个后台线程在不断的检查  上面存储的  版本是否发生变化，并且保证在一定时间内一定能够获取版本的变化如果确实发生了变化。这部分的具体实现参见  的异步  变更实现一文。
   架构
 的整体架构如下图所示

  主要作用是作为  引擎存储数据，上篇文章已经介绍过了细节，这里不再敷述。本篇文章主要介绍  层，也就是   这一层，这一层的节点都是无状态的节点，本身并不存储数据，节点之间完全对等。  这一层最重要的工作是处理用户请求，执行  运算逻辑，接下来我们做一些简单的介绍。
 运算
理解了  到  的映射方案之后，我们可以理解关系数据是如何保存的，接下来我们要理解如何使用这些数据来满足用户的查询需求，也就是一个查询语句是如何操作底层存储的数据。能想到的最简单的方案就是通过上一节所述的映射方案，将  查询映射为对  的查询，再通过  接口获取对应的数据，最后执行各种计算。
比如      = 这样一个语句，我们需要读取表中所有的数据，然后检查  字段是否是 ，如果是的话，则返回这一行。这样一个操作流程转换为  操作流程：

构造出  ：一个表中所有的  都在   这个范围内，那么我们用  和  根据  的  编码规则，就能构造出一个   的左闭右开区间
扫描  ：根据上面构造出的  ，读取  中的数据
过滤数据：对于读到的每一行数据，计算 = 这个表达式，如果为真，则向上返回这一行，否则丢弃这一行数据
计算 ：对符合要求的每一行，累计到  值上面这个方案肯定是可以  的，但是并不能  的很好，原因是显而易见的：

在扫描数据的时候，每一行都要通过  操作同  中读取出来，至少有一次  开销，如果需要扫描的数据很多，那么这个开销会非常大

并不是所有的行都有用，如果不满足条件，其实可以不读取出来
符合要求的行的值并没有什么意义，实际上这里只需要有几行数据这个信息就行

分布式  运算
如何避免上述缺陷也是显而易见的，首先我们需要将计算尽量靠近存储节点，以避免大量的  调用。其次，我们需要将  也下推到存储节点进行计算，这样只需要返回有效的行，避免无意义的网络传输。最后，我们可以将聚合函数、 也下推到存储节点，进行预聚合，每个节点只需要返回一个  值即可，再由  将  值  起来。
这里有一个数据逐层返回的示意图：

这里有一篇文章详细描述了  是如何让  语句跑的更快，大家可以参考一下。
 层架构
上面几节简要介绍了  层的一些功能，希望大家对  语句的处理有一个基本的了解。实际上  的  层要复杂的多，模块以及层次非常多，下面这个图列出了重要的模块以及调用关系：

用户的  请求会直接或者通过   发送到 ， 会解析   ，获取请求内容，然后做语法解析、查询计划制定和优化、执行查询计划获取和处理数据。数据全部存储在  集群中，所以在这个过程中  需要和  交互，获取数据。最后  需要将查询结果返回给用户。
小结
到这里，我们已经从  的角度了解了数据是如何存储，如何用于计算。 层更详细的介绍会在今后的文章中给出，比如优化器的工作原理，分布式执行框架的细节。下一篇文章我们将会介绍一些关于  的信息，这部分会比较有意思，里面的很多东西是在使用  过程中看不到，但是对整体集群又非常重要。主要会涉及到集群的管理和调度。
 源码地址：接《马里奥  实现方式探索 ：神经网络增强学习上》
马尔可夫决策过程
一提到马尔科夫，大家通常会立刻想起马尔可夫链 以及机器学习中更加常用的隐式马尔可夫模型   。它们都具有共同的特性便是马尔可夫性：当一个随机过程在给定现在状态及所有过去状态情况下，其未来状态的条件概率分布仅依赖于当前状态；换句话说，在给定现在状态时，它与过去状态即该过程的历史路径是条件独立的，那么此随机过程即具有马尔可夫性质。具有马尔可夫性质的过程通常称之为马尔可夫过程。
之后我们便来说说马尔可夫决策过程  ，其也具有马尔可夫性，与上面不同的是考虑了动作，即系统下个状态不仅和当前的状态有关，也和当前采取的动作有关。
用表格描述马尔可夫各个模型的关系摘自

基本定义
一个马尔可夫决策过程由五元组组成

：表示状态集
：表示一系列动作
：表示状态转移概率。表示的是在当前 ∈ 状态下，经过 ∈ 作用后，会转移到的其他状态的概率分布情况。比如，在状态下执行动作，转移到’的概率可以表示为’|。

 ：表示阻尼系数

：，表示回报函数  的动态过程如下：某个智能体的初始状态为，然后从  中挑选一个动作执行，执行后， 按概率随机转移到了下一个状态，∈ 。然后再执行一个动作，就转移到了，接下来再执行…，我们可以用下面的图表示状态转移的过程。


如果回报是根据状态和动作得到的，则还可以表示成下图：

值函数
上面我们给出了的定义，作为一个智能体，当它在决定下一步应该走什么时，最简单的方式就是看下函数的值是多少，即比较走不同动作的回报，从而做出决定。但是就像下棋的时候，我们每走一步都会向后考虑，所谓“走一步看三步”，所以这里我们只看一步即一次函数是不够的，这就引出了值函数 也叫折算累积回报  。
状态值函数  
当我们遵循某个策略，我们将值函数定义如下：

我们将上面的式子写作递推的样子如下：

另外当策略，在状态时，我们可以确定唯一的动作，但是经过动作会进入哪个状态是不唯一的，比如同样是掷骰子操作，可能得到的状态有种，那么利用等式我们便可以得到下面的公式：

再根据我们最初增强学习的目的，我们便可以得出，求的目的就是想找到一个当前状态下，最优的行动策略，表示如下：

动作值函数  
上面我们的值函数的只与状态有关，如果与状态和动作都有关，便称为动作值函数，即所谓的函数，如下：

从上式我们可以看出，我们不仅仅依赖状态和策略，并且还依赖于动作。
综上我们可以将的最优策略定义如下：

关于的求解主要分为值迭代和策略迭代，分别站在不同的角度对进行求解，这里我们不在赘述，网上有很多相关资料。下面我们简单阐述下动作值函数的值迭代求解方式，即所谓的
学习
学习的基本迭代公式如下：

从公式中我们也可以看出它是一种值迭代方式，因为我们每次更新的是函数的值，而非策略。简单起见，整理一个简单的例子加以说明。
假设我们有这样一个房间：

我们的目的是训练一个机器人，使得它在图中的任意一个房间都能够到达房间外。
，我们对房间进行建模：

并得到矩阵：

通过一下过程的迭代我们最终得出了我们的结果矩阵

可以看出，我们的机器人现在无论在哪个房间，都可以利用我们的矩阵顺利的走到屋外。
噗噗噗，终于写到这里了，综上我们将马里奥只能需要用到的算法简单整理了下如有任何谬误请指出。下面我们结合两种成熟的算法，归纳整理马里奥的两种实现方式。
基于算法的马里奥实现
所谓算法即通过增强拓扑的进化神经网络     ，算法不同于我们之前讨论的传统神经网络，它不仅会训练和修改网络的权值，同时会修改网络的拓扑结构，包括新增节点和删除节点等操作。算法几个核心的概念是：

基因：网络中的连接
基因组：基因的集合
物种：一批具有相似性基因组的集合
：有点类似于增强学习中的函数
：进行一组训练的基因组集合，每一代训练结束后，会根据淘汰基因组，并且通过无性繁殖和有性繁殖来新增新的基因组
基因变异：发生在新生成基因组的过程中，可能会出现改变网络的权重，增加突出连接或者神经元，也有可能禁用突触或者启用突触

下图我们展示了算法从最一开始简单的神经网络，一直训练到后期的网络

利用算法实现马里奥的只能通关的基本思想便是，利用上面算法的基本观点，从游戏内存中获取实时的游戏数据，判断马里奥是否死忙、计算值、判断马里奥是否通关等，从而将这些作为神经网络的输入，最后输出对马里奥的操作，包括上下左右跳跃等操作，如下图：

大多数该算法实现马里奥的智能通关都依赖于模拟器，运用语言编写相应脚本，获取游戏数据并操作马里奥。  。实现效果图如下：

基于  的马里奥实现
算法是相对提出较早的算法，在年大名鼎鼎的提出了一种深度增强学习的算法，该算法主要结合了我们上面讨论的和两种算法，的研究人员将该算法应用在游戏机中的多种小游戏中进行通关。
其基本算法核心便是我们之前介绍的和增强学习的，游戏智能通关的基本流程如下图：

利用来识别游戏总马里奥的状态，并利用增强学习算法做出动作选择，然后根据新的返回状态和历史状态来计算函数从而反馈给函数进行迭代，不断的训练直到游戏能够通关。研究人员在训练了一个游戏后，将相同的参数用在别的游戏中发现也是适用的，说明该算法具有一定的普遍性。下图反映了一个学习的过程

而同样的方法，将应用在马里奥上，上有一个开源的实现方式：
其最终的实现效果图如下：

我们发现在识别过程中，每帧图像，才会进行一次识别，这是识别速率的问题，图中曲线反映了直接回报函数和简介回报函数。
总结
综上便是从最基本的神经网络算法增强学习，到将这些算法用在智能上的一些基本整理，长舒一口气，整理了好久。。。关于智能的应用有很多，也跟好多小伙伴讨论过，包括智能测试、新式游戏、游戏平衡性调整以及机器人的加入。这个领域除了枯燥的理论知识还能玩游戏，想想有点小激动。总结完毕，如有任何纰漏还请指出，我会尽快修改，谢谢。
最后感谢于洋、何庆玮的指导以及小伙伴张宇飞、王洋、王超、施冰燕
参考文献：
漫谈：模型漫谈：神经网络卷积神经网络卷积神经网络全面解析重磅！神经网络浅讲：从神经元到深度学习        马尔可夫性质增强学习二—— 马尔可夫决策过程增强学习三—— 的动态规划解法增强学习                                                                      一、使用封锁
脚本逻辑：两个脚本，一个脚本检索出访问量大于固定值的，并把这个加入到的封锁配置文件中，使用任务，定时如一个小时启用另一个脚本，实现对封锁的解锁。
步骤如下： 
、打开配置文件：   这个配置文件根据自己的路径进行配置、在段加入如下语句：  
、封锁

=    我们设定的最大值，当访问量大于这个值得时候，封锁
= 封锁配置文件路径
=_  访问日志文件路径
检测文件
  {} ||  {}
_=
循环遍历日志文件取出访问量大于的
 _     |  { } |  |   |    |  {   }

      {_} {}  = || =
    {}== 
       {_}  把“ ；”语句写入封锁配置文件中
       `  `  发现攻击源地址   {_}   _  记录
  

  
、解锁
！
   
  把封锁配置文件中的内容注释掉
     重置服务，这样就做到了解锁
二、使用封锁
封锁逻辑：两个脚本，一个检索出访问量大于我们设定值得，并把这个添加到防火墙规则中，实现封锁，定时如一小时后，使用服务调用另一个脚本，这个脚本把规则清楚，实现对封锁的解锁，脚本如下：
、封锁脚本

=    我们设定的最大值，当访问量大于这个值得时候，封锁
=_  访问日志文件路径
=
_=
循环遍历日志文件取出访问量大于的
 _     |  { } |  |   |    |  {   }

      {_} {}  = || =
    {}== 
           {}  {_}  
       `  `  发现攻击源地址   {_}   _  记录
  

加入计划任务每五分钟执行一次
  _
封
      _  

相关推荐
网站使用之后禁止用户真实访问的方法【腾讯云的种玩法】 部署  实践自然语言处理，语音处理、文本处理。语音识别 ，让计算机能够“听懂”人类语音，语音的文字信息“提取”。
日本富国生命保险公司花万美元安装人工智能系统，客户语言转换文本，分析词正面或负面。智能客服是人工能智能公司研究重点。循环神经网络  模型。
模型选择。每一个矩形是一个向量，箭头表示函数。最下面一行输入向量，最上面一行输出向量，中间一行状态。一对一，没用，如模型，固定大小输入到固定大小输出图像分类。一对多，序列输出，图片描述，输入一张图片输出一段文字序列，、结合，图像、语言结合。多对一，序列输入，情感分析，输入一段文字，分类积极、消极情感，如淘宝商品评论分类，用。多对多，异步序列输入、序列输出，机器翻译，如读取英文语句，以法语形式输出。多对多，同步序列输入、序列输出，视频分类，视频每帧打标记。中间状态部分固定，可多次使用，不需对序列长度预先约束。 《      》。 。自然语言处理，语音合成文字生成语音、语单识别、声纹识别声纹鉴权、文本处理分词、情感分析、文本挖掘。
英文数字语音识别。 。行代码创建超简单语音识别器。循环神经网络，训练英文数字口语数据集。  数据集 _ 。多人阅读数字英文音频，分男女声，一段音频文件只有一个数字对应英文声音。标识方法{数字}_人名_。
定义输入数据，预处理数据。语音处理成矩阵形式。梅尔频率倒谱系数    特征向量。语音分帧、取对数、逆矩阵，生成代表语音特征。
定义网络模型。模型。
训练模型，并存储模型。
预测模型。任意输入一个语音文件，预测。
语音识别，可用在智能输入法、会议快速录入、语音控制系统、智能家居领域。
智能聊天机器人。未来方向“自然语言人机交互”。苹果、微软和小冰、 、百度度秘、亚马逊蓝牙音箱 内置语音助手、 语音助手。通过和用户“语音机器人”对话，引导用户到对应服务。今后智能硬件、智能家居嵌入式应用。智能聊天机器人代技术。第一代特征工程，大量逻辑判断。第二代检索库，给定问题、聊天，从检索库找到与已有答案最匹配答案。第三代深度学习，模型，大量训练，根据输入生成输出。
模型原理、构建方法。翻译模型，把一个序列翻译成另一个序列。两个，一个作编码器，一个解码器，组成编码器解码器。文本处理领域，常用编码器解码器框架。输入编码器语义编码解码器输出。适合处理上下文生成一个目标通用处理模型。一个句子对，输入给定句子，通过编码器解码器框架生成目标句子。、可以不同语言，机器翻译。、是对话问句答句，聊天机器人。、可以是图片和对应描述，看图说话。由､等单词序列组成，由､等单词序列组成。编码器编码输入，生成中间语义编码，解码器解码中间语义编码，每个时刻结合已生成､……历史信息生成。生成句子每个词采用中间语义编码相同 。短句子贴切，长句子不合语义。实际实现聊天系统，编码器和解码器采用模型、模型。句子长度超过，模型效果急剧下降，引入模型，长句子提升系统效果。机制，人在做一件事情，专注做这件事，忽略周围其他事。源句子中对生成句子重要关键词权重提高，产生更准确应答。增加模型编码器解码器模型框架：输入编码器语义编码､､解码器输出、、。中间语义编码不断变化，产生更准确。
最佳实践。_ ，依赖  环境。康奈尔大学 数据集    __ 。 部电影对白。
处理聊天数据。
先把数据集整理成“问”、“答”文件，生成问句、答句文件。 测试集答句， 测试集问句， 训练集答句， 训练集问句。创建词汇表，问句、答句转换成对应形式。词汇表文件万个词汇。 答句词汇表， 问句词汇表。_、_、_、_ 模型特殊标记，填充标记对话。_标记对话开始。_标记对话结束。_标记未出现词汇表字符，替换稀有词汇。_填充序列，保证批次序列长度相同。转换成文件，､､。问句、答句转换文件，每行是一个问句或答句，每行每个代表问句或答句对应位置词。
采用编码器解码器框架训练。
定义训练参数。。
定义网络模型 。_。 。定义模型类，个函数。《    》  。初始化模型函数、训练模型函数、获取下一批次训练数据函数_。
 ____  _
 ____  
 ____  _
 
   
       =
   
   _
 
   ____ __ __  
               _ __ _ _
               ___ _=
               _= _=
     构建模型
     参数
      __      问句词汇表大小
      __     答句词汇表大小
                  
                   
                  
                    
                   
        其中指定最大输入长度，指定最大输出长度
               每层神经元数量
      _      模型层数
      __        梯度被削减到最大规范
      _        
              _    
                 批次大小。训练、预测批次大小，可不同
      _     学习速率
      ___        调整学习速率
      _          使用 单元代替单元
      _      使用样本数
      _            是否仅构建前向传播
    
    __ = __
    __ = __
     = 
    _ = _
    _ = _ =
    ___ = _
        _  ___
    _ =  =
              
    _ = 
    __ = 
                
     如果样本量比词汇表量小，用抽样
     _    _  __
       = __  __
      _ = 
       = __ __
      _ =  
       _ 
         =   
         ___    _
                __
      __ = _
            
     构建
    _ = _
     _
      _ = _
     = _
     = _ __=
     _  
       = __  _

               
     模型
     __ _ _
       __
          _ _ 
          __=__
          __=__
          _=
          _=_
          _=_
       
     给模型填充数据
    _ = 
    _ = 
    _ = 
               
      _ =
                                                ={}
         
      _ =
                                                ={}
      _ =
                                                ={}
            
     值是解码器偏移位
     = _  
                  _  
        
     训练模型输出
     _
        = __
          _ _ 
          _     _  
          __=__
                  
       _   
           
           = 
               _  _
                 
          
    
        = __
          _ _ 
          _ 
             _  
          __=__
             
     训练模型，更新梯度
     = _
      _
      _ = 
       = 
       = 
         
         =  
        _  = ___
                                                         __
        _
        _
            _  _=_
     = _
     _ _ _
           _ _
             
    定义运行模型的每一步
    
          
      _          问句向量序列
      _          答句向量序列
      _          
      _       输入_
      _         是否只做前向传播
    
                   
          
    
          _ _ 
        _        _
    
         
    _ _ = _
     _ = _
                
                         =   _ _
     _ = _
                
                         =   _ _
     _ = _
                
                         =   _ _
           _  
     输入填充
    _ = {}
       _
      __ = _
       _
      __ = _
      __ = _
                 
    _ = __
    __ = _ =
                
     输出填充：与是否有后向传播有关
      _
      _ = _       
                     __    
                     _      
    
      _ = _      
         _    
        __
     = _ _
      _
                有后向传播输出，梯度、损失值、
    
                仅有前向传播输出，，损失值，
   _  _
    
    从指定桶获取一个批次随机数据，在训练每步使用
    参数
                
                      长度为元组，每个元素包含创建批次输入、输出数据对列表
      _        整数，从哪个获取批次
    返回
        _ _ _ 
                 一个包含三项元组_ _ _
    
    _ _ = _
    _ _ =  
               
                
     _  _
      _ _ = _
             
      _ = __  _  _
      __  _
                 
      __ = _  _  
      ___  _ 
                            __  __
              
    __ __ _ =   
           _
     _  _
      __
          ___
                     _  _ =
          _   
     _  _
      __
          ___
                     _  _ =
        _        
      _ = _ =
       _  _
                     
             _    
         _  _  
           = ___  
         _ == _     == __
          __ = 
      __
     __ __ _
训练模型。修改文件值“”，训练。
验证模型。修改文件值“”，测试。
 ____  _
 ____  
 ____  _
 
 
 
 
 
   
       =
   
 _
 _

       

                     
 = {}
 __=
     = 
    _
          
    __ =        
    __ =        
    __ =        
     __  __  __
              
  _      
_ =        
 __ _ _=
            
  
    _          
    _          
                  
            _
    _           
                 
  
    _     _ _    
                
               _ 
        _       
  
  _ =   _  _
   _ =  _
     _ =  _
        = _ _
       = 
            _    _
         = 
            == 
                 
          
        _ =     
        _ =     
        ___
         _ _ _  _
           _  _  _  _
            ___ _
            
          = _ _
   _
 _ _
        
   = _ __ __ _ _ _ __ _ _ ___ _=_
   _  
      _
       
   = ___
     __
          __
     __
  
        
    __
   
 
    
   准备数据集
       _
  _ _ _ _ _ _ = ____________
        
   = 
  __ = 
   =  
      
     构建模型
           _ _
     = _ 
            
     把数据读入桶中，计算桶大小
           
            ___
    _ = __ _
    _ = __ _ ___
    __ = _    _
    __ = __
                    
               
             
    __ = __    __
                              __
         
     开始训练循环
    _  =  
    _ = 
    _ = 
     
                  
                __
       随机生成一个数，在生成_中使用
      __ = _
      _ =     __
                        __  __
             
       获取一个批次数据，进行一步训练
      _ = 
      _ _ _ = _
         _ _
      _ _ _ =  _ _
                                   _ _ 
      _ =   _  __
       = _  __
      _ = 
                  
       保存检查点文件，打印统计数据
       _  __ == 
              
         =       
                  
                 _ _
                         _ 
                    
         如果损失值在最近次内没有再降低，减小学习率
         _      _
          ___
        _
               
         保存检查点文件，计数器、损失值归零
        _ = _ 
         _ _=_
        _  =  
                 
         _  _
           __ == 
                   _
            
          _ _ _ = _
              _ _
          _ _ _ =  _ _
                                       _ _ 
          _ = _  _    
                  _ _
        
 
     
         
     建立模型，定义超参数_
     = _ 
    _ =          一次只解码一个句子
      
     加载词汇表文件
    __ = _  __
    __ = _  __
    _ _ = ____
    _ __ = ____
        
     对标准输入句子解码
     
    
     = 
     
            
       得到输入句子的
      _ = _____ _
            
       计算_属于哪个桶
      _ =     _
                        _  _
                 
       句子送入模型
      _ _ _ = _
          {_ _ } _
            
      _ _ _ =  _ _
                                       _ _ 
                  _
       贪心解码器，输出_ 
       =  =    _
                   
       __  
         = __
             
       打印与输出句子对应法语句子
       ___    
        =
      
       = 
 _
     
     
        
                 
     = _       
                                           _=
    __
                
    _ =         
                              
     _           
      _ =  
      _ _ _ = _
          _ _
       _ _ _
                 _ 
 _ =
     
     = _
         
     = _ 
    _ =          
      
    __ = _  __
    __ = _  __
    _ _ = ____
    _ __ = ____
       _ __
 _  _ __ 
          
    _ = _____ _
          
    _ =     _  _  _
               
    _ _ _ = _{_ _ } _
          
    _ _ _ =  _ _ _ _ 
                _
     =  =    _
                 
     __  
         = __
      ___    
 ____ == ____
       
         = _
    
            
         = _
    \   \ 
      == 
          
        
      == 
          
        
    
             
               
                    _   
             
          _   
基于文字智能机器人，结合语音识别，产生直接对话机器人。系统架构：人语音识别自然语言理解对话管理自然语言生成语音合成人。《中国人工智能学会通讯》年第卷第期。
图灵机器人公司，提高对话和语义准确度，提升中文语境智能程度。竹间智能科技，研究记忆、自学习情感机器人，机器人真正理解多模式多渠道信息，高度拟人化回应，最理想自然语言交流模式交流。腾讯公司，社交对话数据。微信，最庞大自然语言交流语料库，利用庞大真实数据，结合小程序成为所有服务入口。
参考资料：《技术解析与实战》
欢迎推荐上海机器学习工作机会，我的微信：导语
借项目的开发周期，把思考了一段时间的场景化性能测试框架搭建起来，包括 耗电性能测试、内存泄漏测试、流畅度性能测试、后台接口性能测试、启动速度测试等。方案应用于项目的测试，也发现了产品中的不少问题。 接下来将用七八个篇幅详细记录一下心路历程。为分享轮子或为回忆总结。
简述
性能测试，在通信设备测试界，是一个非常成熟的领域，组织在这个范畴制定了诸多以规范测试行为。但在笔者接触移动测试领域的四年里，性能测试仿佛是一个可有可无的专项；性能问题，在各个项目中，总是停留在“用户报障开发关注  测试复现”。
显然，如果性能问题，如果也能最大限度的按照“测试发现问题定位 开发修改”的正常流程来走，对产品质量是有非常大贡献的。下文的介绍，目标就在于此：测试过程中，测试工程师识别更多的产品关键场景，通过场景化、工程化、自动化的测试手段，发现更多的性能问题，使得性能收敛于产品发布前。
目标与战法
尝试概括下性能测试：通过自动化的测试工具模拟多种正常、峰值以及异常负载条件来对系统的各项性能指标进行测试。成功的性能测试，会具备以下几个特点：

提供给开发的信息具有精准性必备；

测试方法高效，测试数据稳定可靠必备；

使用的分析方法具有高可信度必备；

测试熟练使用工具帮助开发定位性能问题可选。


提供给开发的信息具有精准性。如果测试或用户告诉开发同学：“你们这个版本性能很差！”、“用着用着手机就开始发烫了，你搞定一下！”开发同学内心肯定是迷茫的。
如果测试将自己的措辞换成：“资讯页面，观看视频过程耗电量高，这个版本比上个版本高了。”，这样开发团队可以根据模块指定跟进人，知道具体的路径，知道耗电量的优化目标这个版本多出的这，那问题的推进必然会更加顺利。
测试方法高效，测试数据稳定可靠。在设计本框架前，团队执行性能测试，包括长板性能测试亮屏后台耗电及内存、手工驱动的场景性能测试、基于页面驱动的流畅度测试。
、 长板性能，场景过于单一，基本只校验了管家后台进程无任何操作下的性能表现；
、 相比于自动化驱动，手工测试无法保证收集到大样本数据让人反复做一个操作分钟，这种任务毫无疑问是对员工的摧残；
、 页面驱动的流畅度测试，经常出现两次对同一版本的测试得出截然不同的测试结果，测试数据不稳定，难以向开发证明其代码有问题。后文介绍流畅度测试时再详述优劣。
使用的分析方法具有高可信度。传统的分析方案中，往往简单地采用均值来评估性能项。笔者认为，合理的选用评估算法，也能让你的测试报告更有说服力。一个存在少量毛刺的数据序列，如下图，由于毛刺偏离严重，将严重拉低平均值。多一个毛刺，少一个毛刺，均值都会有很大不一样，在样本量较少时，往往会出现两次测试获得的性能数据差异大的问题。如何解决后面详述。

图一 流畅度样本
 测试熟练使用工具帮助开发定位性能问题。测试左移一点，多做一点，开发就可以少花一点精力在缩小问题访问上。在功能测试中，一个从偶然复现到找到必现路径，会让开发减少大量定位问题时间。同样，在性能测试中，如果测试能指明哪个线程是功率消耗大户，哪个对象是内存泄漏祸首，那么开发也能更加迅速地修复问题。同时，测试在定位过程中，不仅仅提升了自身能力，也建立起了自己的技术形象。
性能测试框架设计
如下图，本次设计的性能测试框架，包含有数据收集、数据分析、自动化、驱动框架四个模块，各自独立解耦。这样设计能够降低用例接入成本，可扩展性好。

图二 框架设计原理图
数据收集方案
我们需要通过一种或多种数据，直接反应一项性能的好坏。所以如何收集数据样本？收集那些数据样本，是性能测试框架必备的一个模块。
驱动方案
移动客户端的性能测试，主要是模拟用户操作来创造类用户使用场景，获取使用过程中的、、流畅度等数据，以衡量该使用场景下，被测应用的性能指标。
本框架的自动化框架，选择了 版的开源代码。主要有如下几点原因：

数据收集模块需要使用工具，做输出结果处理、文本分析，在这方面有较大优势，代码量低；

封装的开源版，非常轻量级，功能全面，直接使用开源项目，能够节省非常多的框架开发时间；


驱动框架介绍
在本框架中，测试人员能够用如下的命令行直接驱动一个或多个用例的执行，所以设计了类逻辑的方案。

     

     


如下图，类用来驱动和组织各个用例的_，_，，_，_等方法。

图三 类的驱动部分
而用例中包含的这些方法，主要作用是：
     _  用于执行初始化环境
     _  主要用于拉起相应的性能数据收集线程、使用自动化初始化应用到被测场景，如闪屏滑动，进入主页等。
        自动化执行场景的关键逻辑，如：测试“连续播放不同视频”场景的内存泄漏。则用例需要在方法中，使用实现循环点击不同视频播放的逻辑。
     _  该方法主要用于通知数据收集线程停止数据收集，进行数据归档；
     _  该方法将清空环境，将所有数据汇总到报告中，并使用数据分析算法得到可以直接用于报告的内容。

图四 执行逻辑
如图四，自动化在中执行相应场景时，性能数据收集线程会持续收集性能数据
注明：上述的五个步骤并不需要在每个中实现，对应同一专项，除了，其他四个方法，都具有相同的逻辑，抽象到父类中实现即可，这样可以做到同一个专项下的不同场景用例，只需要写一个方法。
数据分析方案
拿到数据后，想要最大化数据的价值。合理合适的数据分析方案显得尤为重要。笔者一开始做性能测试，所能想到的也就是拿到一大堆样本数据，取平均值，再做对比分析。
本框架试图提供除了平均值外，提供其他更为丰富的数据来评估各类性能指标。包括：
    中位数：以它在所有标志值中所处的位置确定的全体单位标志值的代表值，不受分布数列的极大或极小值影响，从而在一定程度上提高了中位数对分布数列的代表性。中位数用于评估网络延迟样本，效果明显优于平均值。原因在于，如大部分延迟在时，其中有几个异常样本值以上，它们会严重拉高均值，导致均值不能完全代表该延迟数据序列。
    方差与标准差：结合均值来评估数据序列，可以评估到数据序列的离散程度。
    分布图或分布表：分布图或分布表也能比较好的评估一个数据序列的好坏，用它来做流畅度、网络带宽、网络延迟等性能评估，能够比较直观、详细地给出对比结果。

图五 流畅度优化效果示意
    曲线图：内存性能的评估，最优解莫过于占用曲线 平均值了。

图六 占用内存曲线
       平均值：最传统的均值，依然是一柄利器。
     极大值、极小值。
必要的说明
框架使用了开源代码：






以上对具体代码的介绍比较少，后续几篇继续阐述下具体逻辑是怎么实现的。导语  在单机环境下，由于使用环境简单和通信可靠，锁的可见性和原子性很容易可以保证，可以简单和可靠地实现锁功能。到了分布式的环境下，由于公共资源和使用方之间的分离，以及使用方和使用方之间的分离，相互之间的通信由线程间的内存通信变为网络通信。网络通信的时延和不可靠，加上分布式环境中各种故障的常态化发生，导致实现一个可靠的分布式锁服务需要考虑更多更复杂的问题。

前言
锁，核心是协调各个使用方对公共资源使用的一种机制。当存在多个使用方互斥地使用某一个公共资源时，为了避免并行使用导致的修改结果不可控，需要在某个地方记录一个标记，这个标记能够被所有使用方看到，当标记不存在时，可以设置标记并且获得公共资源的使用权，其余使用者发现标记已经存在时，只能等待标记拥有方释放后，再去尝试设置标记。这个标记即可以理解为锁。
在单机多线程的环境下，由于使用环境简单和通信可靠，锁的可见性和原子性很容易可以保证，所以使用系统提供的互斥锁等方案，可以简单和可靠地实现锁功能。到了分布式的环境下，由于公共资源和使用方之间的分离，以及使用方和使用方之间的分离，相互之间的通信由线程间的内存通信变为网络通信。网络通信的时延和不可靠，加上分布式环境中各种故障的常态化发生，导致实现一个可靠的分布式锁服务需要考虑更多更复杂的问题。
目前常见的分布式锁服务，可以分为以下两大类：

基于分布式缓存实现的锁服务及其变种：典型代表是使用实现的锁服务和基于实现的方案；

基于分布式一致性算法实现的锁服务：典型代表为和。


本文从上述两大类常见的分布式锁服务实现方案入手，从分布式锁服务的各个核心问题核心架构、锁数据一致性、锁服务可用性、死锁预防机制、易用性、性能展开，尝试对比分析各个实现方案的优劣和特点。
、基于分布式缓存实现的锁服务
基于分布式缓存实现的锁服务，思路最为简单和直观。和单机环境的锁一样，我们把锁数据存放在分布式环境中的一个唯一结点，所有需要获取锁的调用方，都去此结点访问，从而实现对调用方的互斥，而存放锁数据的结点，使用各类分布式缓存产品充当。其核心架构如下以为例：

图基于分布式缓存实现的锁服务典型架构
 加解锁流程
基于官方的文档，对于一个尝试获取锁的操作，流程如下：
、  向结点发送命令：

                           =_，=__   
其中：
__是由客户端生成的一个随机字符串，它要保证在足够长的一段时间内在所有客户端的所有获取锁的请求中都是唯一的，用于唯一标识锁持有方。
表示只有当_对应的值不存在的时候才能成功。这保证了只有第一个请求的客户端才能获得锁，而其它客户端在锁被释放之前都无法获得锁。
 表示这个锁结点有一个秒的自动过期时间。自动过期时间，目的是为了防止持有锁的客户端故障后，锁无法被释放导致死锁而设置，从而要求锁拥有者必须在过期时间之内执行完相关操作并释放锁。对于第二、三点的特性，目前应该绝大部分缓存产品都具备
 、 如果命令返回成功，则代表获取锁成功，否则获取锁失败。
对于一个拥有锁的客户端，释放锁，其流程如下：
  向结点发送命令：
                      =_
 如果查询回来的和本身__一致，则表示自己是锁的持有者，可以发起解锁操作，发送命令：
                       =_
 锁安全性分析
基于上述流程，由于结点是单点存在，所以在锁过期时间之内且结点不发生故障的情况下，锁的安全性即互斥性可以得到保证。但是仍然有如下几个问题需要考虑：
、  预防死锁的必要性
考虑如下场景，一个客户端获取锁成功，但是在释放锁之前崩溃了，此时实际上它已经放弃了对公共资源的操作权，但是却没有办法请求解锁，那么它就会一直持有这个锁，而其它客户端永远无法获得锁。因此，对于绝大部分场景，此类死锁场景是应该得到考虑和避免。
、  引入锁自动过期时间来预防死锁带来的问题
为了预防死锁，利用分布式缓存的结点自动过期特性来定期删除死锁结点，看似可以解决问题。但是其中隐藏的隐患是：实质上，锁自动过期清理是释放了一个不属于自己的锁。那么几乎必然的，会破坏锁的互斥性，考虑如下场景：
客户端获取锁成功
客户端在某个操作上阻塞了很长时间
过期时间到，锁自动释放
客户端获取到了对应同一个资源的锁
客户端从阻塞中恢复过来，认为自己依旧持有锁，继续操作同一个资源，导致互斥性失效
也许有一个疑问，第五步中，客户端恢复回来后，可以比较下目前已经持有锁的时间，如果发现已经快过期，则放弃对共享资源的操作即可避免互斥性失效的问题。事实上，客户端的时间和结点的时间本身就存在偏移的可能性，更极端一点，上的时间还可能发生跳变或者比客户端时间跑得更快，所以，严格来讲，任何依赖两个时间比较的互斥性算法，都存在潜在的隐患。
、  解锁操作的原子性
引入全局唯一的__，目的是想保证每次解锁操作，一定是解锁的自己加的锁。由于没有能够提供基于数据版本号来删除的原子操作的特性，其的机制本身基于连接有其他的分布式缓存产品能够支持这个特性。因此解锁需要两步，先查锁回来确认这把锁是自己加的，然后再发起解锁。由于和操作的非原子性，那么解锁本身也会存在破坏互斥性的情况，考虑如下场景：
客户端获取锁成功。
客户端访问共享资源。
客户端为了释放锁，先执行操作获取随机字符串的值。
客户端判断随机字符串的值，与预期的值相等。
客户端由于某个原因阻塞住了很长时间。
过期时间到了，锁自动释放了。
客户端获取到了对应同一个资源的锁。
客户端从阻塞中恢复过来，执行操纵，释放掉了客户端持有的锁。
、  结点故障后，主备切换的数据一致性
考虑结点宕机，如果长时间无法恢复，则导致锁服务长时间不可用。为了保证锁服务的可用性，通常的方案是给这个节点挂一个，当节点不可用的时候，系统自动切到上。但是由于的主从复制是异步的，这可能导致在宕机切换过程中丧失锁的安全性。考虑下面的时序：
客户端从获取了锁。
宕机了，存储锁的还没有来得及同步到上。
升级为。
客户端从新的获取到了对应同一个资源的锁。
客户端和客户端同时持有了同一个资源的锁。锁的安全性被打破。
设想下，如果要避免这种情况，只有在写数据的时候，就阻塞地把数据写多份，全部写成功才返回，这样才能保证锁的安全性分布式缓存的同步主从复制。但这样就可以即保证数据一致性，又保证服务可用性了吗？其实不然，在锁数据写和两份，都写成功才认为加锁成功的情况下，如果写成功，写超时其实写成功了，这个时候认为加锁是失败的，但是主和备的数据产生了不一致，而且自身稳定性以及和的通信稳定性还成为了导致服务不可用的额外因素。所以基于分布式缓存实现的锁服务，要想解决分布式系统一致性和可用性的核心问题，并不是简单的主从同步可以搞定核心还是要靠这样的分布式一致性协议。
 总结
、锁服务性能
由于锁数据基于等分布式缓存保存，基于内存的数据操作特性使得这类锁服务拥有着非常好的性能表现。同时锁服务调用方和锁服务本身只有一次就可以完成交互，使得加锁延迟也很低。所以，高性能、低延迟是基于分布式缓存实现锁服务的一大优势。因此，在对性能要求较高，但是可以容忍极端情况下丢失锁数据安全性的场景下，非常适用。
、数据一致性和可用性
锁数据一致性基于上述的分析，基于分布式缓存的锁服务受限于通用分布式缓存的定位，无法完全保证锁数据的安全性，核心的问题可以概括为三点：
锁数据写入的时候，没有保证同时写成功多份：任何事后的同步在机制上都是不够安全的，因此在故障时，锁数据存在丢失的可能。解决此类问题，需要在写多份和服务可用性之间找到平衡典型思想：多数派，详细描述见后面的两类锁服务方案。
没有原子性的保证持有者才能解锁：锁服务需要提供一种机制，使得在网络各种乱序以及包重放的时候，保证只有锁当前持有者方能解锁，同时要保证解锁操作的原子性。
锁服务缺乏和调用方或者公共资源方的确认机制：预防死锁等问题，光靠锁服务自身，是不够安全的，只有调用方和公共资源的一同参与，方能全面保证提供了一种做法，详细见后面的描述
、基于分布式缓存实现锁服务的变种
基于分布式缓存实现锁服务，在业界还存在各类变种的方案，其核心是利用不同分布式缓存产品的额外特性，来改善基础方案的各类缺点，各类变种方案能提供的安全性和可用性也不尽相同。此处介绍一种业界最出名，同时也是引起过最大争论的一个锁服务变种方案。
由的作者提出，算是官方对于实现分布式锁的指导规范。的算法描述就放在的官网上。
选择对比分析，第一是因为它作为官方的锁服务指导规范，在提出的时候业内也对其进行过很多争议和讨论；第二是的算法中，已经有了分布式一致性算法中最核心的概念多数派的思想。因此我们在众多变种中选择来进行介绍和分析。
 核心架构和流程

图锁服务流程图
对于一个客户端，依次执行下面各个步骤，来完成获取锁的操作：
获取当前时间毫秒数。
按顺序依次向个节点执行获取锁的操作其实可以并发同时向个获取锁。这个获取操作跟前面基于单节点的获取锁的过程相同，包含随机字符串__，也包含过期时间。为了保证在某个节点不可用的时候算法能够继续运行，这个获取锁的操作还有一个超时时间，它要远小于锁的有效时间。客户端在向某个节点获取锁失败以后，应该立即尝试下一个节点。这里的失败，应该包含任何类型的失败，比如该节点不可用，或者该节点上的锁已经被其它客户端持有。
计算整个获取锁的过程总共消耗了多长时间，计算方法是用当前时间减去第步记录的时间。如果客户端从大多数节点= 成功获取到了锁，并且获取锁总共消耗的时间没有超过锁的有效时间，那么这时客户端才认为最终获取锁成功；否则，认为最终获取锁失败。
如果最终获取锁成功了，那么这个锁的有效时间应该重新计算，它等于最初的锁的有效时间减去第步计算出来的获取锁消耗的时间。
如果最终获取锁失败了可能由于获取到锁的节点个数少于，或者整个获取锁的过程消耗的时间超过了锁的最初有效时间，那么客户端应该立即向所有节点发起释放锁的操作同基于单节点的释放一致。释放锁的过程比较简单，客户端向所有节点发起释放锁的操作，不管这些节点当时在获取锁的时候成功与否。
 锁安全性分析
算法的最核心也是最有价值之处，是引入了多数派思想，来解决单点故障对数据安全性和服务可用性的影响。由于加锁成功需要所有结点中的多数结点同意，因此只要集群中结点有一半能够提供服务时，服务的可用性就能够保证。同时对于数据的一致性，只要对于一把锁，其多数派结点的数据不丢，那么锁就不可能被另外的调用方同时获得不够多数派，所以锁的安全性也可以得到保证。所以从核心算法来说，多数派的思想是对数据一致性的保证下，向保证服务可用性又进了一大步。
但是，多数派仅仅是算法最核心的理论保证。要实现一个工程上完全保证锁数据安全性，同时高可用的锁服务，还有很远的距离，这也是在业界引起很多争议的地方，核心的问题见下面的分析。
、  的安全性依旧强依赖于系统时间
在之前单点锁服务的时候已经分析过，由于为了预防死锁，使用了过期自动删除锁的机制，所以导致安全性依赖于单机上的时间服务不能异常，从而存在隐患本质是违反了锁持有者才能删除锁的原则。同样的，到了中，仍然有此问题，考虑如下的时序：假设一共有个节点：    。
客户端成功锁住了  ，获取锁成功但和没有锁住。
节点时间异常，导致上的锁数据提前到期，而被释放。
客户端此时尝试获取同一把锁：锁住了  ，获取锁成功。
所以一个安全的算法，是不应该依赖于系统时间的。消息可能在网络中延迟任意长的时间，甚至丢失，系统时钟也可能以任意方式出错。一个好的分布式算法，这些因素不应该影响它的安全性，只可能影响到它的有效性，也就是说，即使在非常极端的情况下比如系统时钟严重错误，算法顶多是不能在有限的时间内给出结果而已，而不应该给出错误的结果。
、  缺乏锁数据丢失的识别机制和恢复机制
假设一共有个节点：    。见如下的事件序列：
客户端成功锁住了  ，获取锁成功但和没有锁住。
节点崩溃重启了，但客户端在上加的锁没有持久化下来，丢失了。的持久化方式是每秒写一次磁盘即执行，因此最坏情况下可能丢失秒的数据。为了尽可能不丢数据，允许设置成每次修改数据都进行，但这会降低性能。当然，即使执行了也仍然有可能丢失数据这取决于系统而不是的实现。
节点重启后，客户端锁住了  ，获取锁成功。
客户端和客户端现在都认为自己持有了锁。
此类问题的本质，是作为多数派数据的一个结点，数据丢失之后比如故障未落地、超时被清理等等，首先没有能够区分丢失了哪些数据的能力，其次还没有恢复丢失数据的能力。这两种能力都缺乏的情况下，数据结点就继续正常地参与投票，从而导致的数据一致性被破坏。
也意识到了这个问题，所以在其中有一个延迟重启 的概念。也就是说，一个节点崩溃后，先不立即重启它，而是等待一段时间再重启，这段时间应该大于其上所有锁的有效时间的最大值。这样的话，这个节点在重启前所参与的锁都会过期，它在重启后就不会对现有的锁造成影响。这个方案，是在缺乏丢失数据识别的能力下，实现的较“悲观”的一个替代方案，首先其方案依旧依赖于时间，其次如何确定最大过期时间，也是一个麻烦的事情，因为最大过期时间很可能也一起丢失了未持久化，再有延迟重启使得故障结点恢复的时间延长，增加了集群服务可用性的隐患。怎么来看，都不算一个优雅的方案。
 总结
、锁服务性能
由于锁数据仍然基于保存，所以和基于单点的锁一样，具有高性能和低延迟的特性，不过由于引入多数派的思想，加锁和解锁时的并发写，所以在流量消耗来说，比基于单点的锁消耗要大。从资源角度来说，是用流量换取了比单点稍高的数据一致性和服务可用性。
、数据一致性和可用性
的核心价值，在于多数派思想。不过根据上面的分析，它依然不是一个工程上可以完全保证锁数据一致性的锁服务。相比于基于单点的锁服务，解决了锁数据写入时多份的问题，从而可以克服单点故障下的数据一致性问题，但是还是受限于通用存储的定位，其锁服务整体机制上的不完备，使得无法完全保证锁数据的安全性。在继承自基于单点的锁服务缺陷解锁不具备原子性；锁服务、调用方、资源方缺乏确认机制的基础上，其核心的问题为：缺乏锁数据丢失的识别和学习机制。
中的每台，充当的仍旧只是存储锁数据的功能，每台之间各自独立，单台缺乏全局的信息，自然也不知道自己的锁数据是否是完整的。在单台数据的不完整的前提下，没有识别和学习机制，使得在各种分布式环境的典型场景下结点故障、网络丢包、网络乱序，没有完整数据但参与决策，从而破坏数据一致性。
接《分布式锁服务关键技术和常见解决方案  下》导语 ：大哥说，今年手游戏的春节红包你来做。那该怎么做？以及怎么做才能让大哥放心？本文从后台的角度出发讲述了这个过程和方法，对于关键的前台部分也有所涉及。

目录

需求背景

红包类别
体验流程
后台需求


需求分析

礼包列表
区服信息
领取礼包


整体方案与项目分解

需求开发

功能需求开发
性能需求开发
容错需求开发
监控需求开发


系统保障

系统容灾
过载保护
柔性可用
立体监控


演习验证

灰度演习
压测演习
异常演习


总结


 需求背景
红包类别
 年的手  春节游戏红包共有刷一刷  地图扫福三种，如下图所示：

体验流程
虽然红包分三种，但在游戏业务侧这边的体验都是一样：用户得到一个红包卡券，打开后展示一个刷一刷红包或者多个  地图红包游戏的礼包列表，用户选择一个礼包后弹出区服组件，用户确认对应的区服角色信息后会礼包会在  个小时内发放到账。体验如下：

后台需求
游戏红包的设计容量为入口卡券页流量 ，以上体验流程一共涉及三个后台接口：

礼包列表：用户界面的礼包内容需要根据后台接口返回礼包列表进行排序和过滤展示。

区服选择：用户界面弹出的区服组件需要后台接口返回用户区服角色信息。

领取礼包：用户点击“确认”按钮领取礼包，后台进行游戏道具发货。



需求分析
礼包列表
这个功能使用现有能力比较容易解决。活动共有十种游戏，每个游戏有两种礼包：拉新面向非注册用户，价值  元拉活跃面向注册用户，价值  元，一个用户只能获得这两种礼包中的一种，产品策略允许拉新的用户获得价值较低的拉活跃礼包，反之则不允许。页面展示按用户偏好排序十个游戏，每个游戏展示一个拉新礼包或者一个拉活跃礼包。
出于降低除夕当前流量负载和柔性考虑，在红包活动前，十种游戏的礼包内容作为前端静态数据已经预先通过离线包  下发；红包活动时，后台接口根据用户偏好返回的游戏礼包列表，只是提供前端礼包内容进行过滤和排序，失败了也有前端默认的游戏礼包列表，保障用户体验。
过滤：读取存储，用户有注册的游戏返回活跃礼包，用户没有注册的游戏返回拉新礼包。
排序：一个两层排序，第一层排序读取存储 为用户， 为用户所注册的游戏列表，用户注册的游戏拉活跃排在用户没有注册的游戏拉新前面；第二层排序，对于拉新游戏列表和拉活跃游戏列表内部，使用神盾算法对用户这款游戏的偏好再进行二次排序。对于外部接口的依赖只有  存储和神盾算法接口，这两个接口以及合并这两种数据给出最终的个性化推荐礼包列表接口都可以平行扩容以支持  级别的 。
区服信息
这个功能是现有能力。这个角色信息的来源是  ，但由于该接口较缓慢 左右且容量较低低于 ，故后台做了一层缓存，将  的区服信息永久性缓存到  中，前台也有本地缓存，在实践中，前台缓存命中率为 ，后台为 ，多级缓存后走到  的请求量只有，对  影响不大，只需要扩容现有的区服  和  即可。
领取礼包
这个功能使用现有能力解决存在困难。游戏中心日常发货的道具和平台比较多，平台分为  两种，  发货对于发游戏道具和发  币又是两种接口，故我们在架构上使用  模式，使用  作为发货 ，屏蔽了底层发货的复杂性，向游戏中心提供统一的发货接口，但比较遗憾的是从  到游戏的发货接口都是同步接口，发货能力较低，发货能力最高的王者荣耀也只承诺了  的发货速度，明显不足以直接承受  级别的红包发货，故这里的核心问题是需要有一个队列来解决生产消费速度不对等的问题。
去年的红包是后台收到发货请求后落地到本地文件返回用户成功，再由一个本机的  跑落地文件按游戏方所能提供的发货速度进行实际发货，相当于使用本地队列缓冲。但这个方案存在某台机器挂掉后如果不能恢复会丢失一部分本地的发货数据造成漏发，以及每个高并发业务都要重新做这一套东西不方便通用的问题。
从架构上思考，其实最合理的方案是作为发货  的  提供异步发货的能力，将用来解决生成消费速度不匹配的  做在  内部，为业务提供通用的异步发货能力，业务侧就不需要考虑发货超过游戏方能力的问题，新业务有类似的场景也不需要重新开发。
游戏中心是业务侧，  是平台侧的能力，属于另一个中心的业务，于是一开始我们准备推动  做异步发货的能力，这样业务就只要调用发货接口就可以了，很是方便。但事情并没有想象中顺利，与  的开发和  开会沟通了几次，异步发货的能力他们也有做技术规划，但年前他们有其它需求要做，没有时间支持。和  讨论了一下这个能力最好还是放在  做成通用以便以后有同样场景的业务使用，前台也有同学开发过  功能，可以由游戏中心业务侧的前后台同学合作完成  异步发货功能的开发，在春节红包中应用，再将这个功能交接给平台侧的同学维护，达到双赢的效果。
整体方案与项目分解

整体方案图如上图所示，由于整个项目涉及多方开发，而且模块较多，整个模块的开发周期较长，作为一期开发的话无法跟上基础侧卡券的验收和安排的几次演习压测，故按「大系统小做」的原则，根据模块的重要和紧急程度分为几期迭代完成，每一期有独立的里程碑目标并达到对应的验收演习压测要求：
第一期方案图左侧部分为功能需求，在  月  号上线通过卡券方面功能验收，先使用当前的同步发货接口，对性能无特别要求。
第二期方案图右侧偏左部分为性能需求，在  月  号上线参加第一次演习，对发货进行异步化改造，要求直接面向用户的外网发货接口能支持   的峰值流量。
第三期方案图右侧偏右部分为容错需求，在  月  号上线参加第二次演习，对发货进行对账补送改造，保证发货的可靠性。
第四期为监控需求，在  月  号上线参加第三次演习，确认各项关键数据的采集，并将采集到的数据展现到一个统一视图上，以便除夕期间值班人员实时了解红包系统的整体运行情况和出数据报表。
需求开发
功能需求开发
核心问题：不同场景的数据一致性
{ 后台礼包推荐接口}为用户推荐礼包，用户领取时需要经过{  外网发货新 }校验领取资格，后台的推荐数据必须能和  的资格校验数据能够对上，否则会出现后台推荐的礼包用户领取时却通不过  的资格校验导致领取不了的问题。
{  外网发货新 }接口处理的是单个游戏的领取礼包的请求，资格校验操作判断一个用户是否注册了某个游戏。这个是  现有的通用功能，数据存储在  的  中，简化描述就是一个  模型， 为 ， 如果有注册则为 ，没有则为 实际为了节省存储空间，使用  桶实现，具体参见号码包系统使用文档，导入的数据源是产品在除夕前一周提供  款游戏的全量注册号码包，每个游戏一个文件，文件内容是注册用户的  号。
但{ 后台礼包推荐接口}接口返回的是多个游戏的礼包列表，需要获取十个游戏的用户注册状态。如果读取  现有的接口存储，会有两个问题：

 号码包服务也要承受等同于推荐列表接口  的流量，需要进行扩容。

 号码包服务调用  虽然可以一次请求合并  个  进行批量读取，但请求到了  的  机还是要读取多个  块，性能并不如单请求单  读取。



解决方案：同质异构的数据冗余
后台将号码包数据进行重新组织存储到后台申请的另外一个  中， 为 ， 为用户已注册的  列表，已注册的游戏推荐拉活跃礼包，没注册的游戏推荐拉新礼包，这样只需要查询一次  就可以得到十个游戏每个游戏的礼包推荐类型是拉新还是拉活跃。
由于  和后台使用的是同一份号码包数据，只是应用场景不同，数据组织形式不同，两份  数据同质异构，故后台推荐的礼包可以通过  的资格校验。

性能需求开发
核心问题：用户领取礼包流量远超游戏发货能力
红包活动具有时间短单场  分钟、大用户量参与 亿参与的特性，请求并发高，游戏红包入口流量设计为 ，流经各个模块有衰减也有增幅，最终用户领取礼包请求预估为 ，而游戏方提供的十款游戏总发货能力只有 单款游戏最大为王者荣耀 ，请求峰值接近处理能力的  倍，同步调用会导致游戏方发货接口过载，造成大面积发货失败，这个问题如何处理？

解决方案：发货异步化
使用一个缓冲队列来解决生产消费能力不对等的问题。用户领取请求到达  进行基础的资格校验后将请求放入  中，返回用户成功并告知会在  小时内到账。再由后台发货  从  中读取请求，通过限速组件控制保证以不超过游戏方发货能力的速率进行发货操作。使用的  是部门近来建设的 ，具体参见会员消息队列  接入指南。

容错需求开发
核心问题：安全发货
三场活动发放的礼包总数预计将近  亿，如何保障这些礼包对于合法用户能都发货到账，不少发也不多发？如何防范高价值道具被恶意用户刷走？有没有可能内部开发人员自己调用接口给自己发礼包？
解决方案：对账补送订单号安全打击权限控制

订单号解决不多发的问题

用户领取礼包的接口{  外网发货新 }调用成功，会为这个请求附带一个  生成的一个全局唯一的订单号，再放进  中，{  内网发货 }从  中取出消息，调用游戏方发货接口前都会先校验这个订单号是否用过，没用过则将订单号以  的形式写入 ，再进行发货操作。如果出现对同一个发货消息进行重复发货，则会发现订单号已经用过了不会进行实际的发货操作，保证以订单号为标识的同一个发货请求只会进行一次发货操作。


对账补送解决不少发的问题

发货失败是不可避免的，诸如网络波动游戏方发货接口故障之类的问题都可能导致调用发货接口失败。在同步领取环境下，用户可以通过重试在一定程度上解决这个问题。但是对于异步发货，用户点击领取后发货请求由{  外网发货新 }放入  中就算成功了，即使后台调用游戏的实际发货接口失败了没有实际到账，用户对此也无感知不能进行重试但是会投诉，后台发货系统必须通过自身的容错保证即使游戏方的发货接口不稳定偶尔会失败，用户所领的礼包能最终到。这里我们使用了对账补送方案。
对账：用户领取礼包调用的接口{  外网发货新 }成功写应发流水，{  内网发货 }调用游戏方发货接口的写实发流水，由于部分消息会堆积在消息队列中，这部分称为队列堆积流水。故实际要进行补发操作的流水由以下公式可得：失败补发流水= 应发流水  实发流水  队列堆积流水。
由于订单号的存在，可以保证同一个发货请求重复发送也不会多发，对队列中堆积的消息提前进行补发操作也不会导致多发。故当队列中堆积的流水较少的时候，采用应发流水与实发流水的差集作为失败补发流水是合理，只是每个对账周期会对队列中堆积的消息进行两次发货操作，对性能略有损耗。
后台每个小时运行一次增量对账功能，检测  消息堆积量量低于某个阈值，则进行对账操作，截取上次对账到此时的应发流水实发流水，两者相减得到补发流水。
补送：对对账操作得到的补发流水调用游戏方发货接口进行发货补送操作。


安全打击解决高价值道具防刷的问题

对于领奖的请求，都要求都要求带上登录态，对用户进行身份验证，同时对于高价值的道具开启安全打击，上报安全中心进行恶意用户校验，防止被恶意用户刷走。


权限控制解决内部人员监守自盗的问题

对于发货的机器都要安装铁将军，用户需要使用  名和  才能登录机器，审计用户在机器上的操作行为；
发货模块对于调用方是需要严格授权，调用方需要申请 ，包含程序路径、程序 、部署模块等信息，保证发货功能不被随意调用。

监控需求开发
核心问题：红包涉及多个系统的自有监控，数据收集困难
在监控方面有两个主要诉求：
我们对外提供的服务是否正常？如果有问题，如何快速地发现问题、分析问题？实时知道用户在整个系统的行为漏斗模型，每一步的转化率是多少？游戏红包涉及红包基础侧业务前台业务后台 平台等多个合作方，各个系统有自己的监控系统，数据来源不一致，活动当天一个系统一个系统地收集的话效率太低。

解决方案：汇总各个系统的关键数据到一个视图
红包作为一个涉及多个子系统的聚合系统，我们需要一个汇总了各个子系统关键数据的整体视图，才能够较全面地监控业务核心指标，对系统和业务有较全面把控，避免在监控系统中跳转检索而耗费有限的时间，为迅速响应解决问题提供保证。
接口封装：虽然红包涉及的多个子系统，各自有各自的上报方式和监控系统，但是对于关键数据大都有提供  形式的查询接口，我们通过封装，将接口的定义统一为  形式，以监控项 ，开始时间，结束时间为 ， 为开始时间，结束时间段内监控的值之和。
配置化：一场红包活动的监控，可以由一个时间段加若干个监控项定义。比如刷一刷红包，时间段为除夕当天 ，监控项为若干页面的点击量，若干礼包的发放量，若干后台接口的请求量，若干  的堆积量等等。
通过对接口的封装和配置化，新增一场红包活动，只需要增加一个时间段和若干个监控项的配置文件，比如下图的 刷一刷混场刷一刷专场就是通过  个配置文件定义  场活动，新增一场活动也只需要增加一个配置文件，并可以在一个视图上灵活切换，相当方便。

从上图中我们就可以实时看到实发和应发是大致相等的，队列没有出现堆积，用户在各级页面的转化率，可以很方便地判断系统的健康状态和分析定位问题。

相关推荐下一篇 海量服务实践：手  游戏春节红包项目设计与总结下篇导语 ：柏林噪声是一个非常强大算法，经常用于程序生成随机内容，在游戏和其他像电影等多媒体领域广泛应用。本文以一种通俗简单的方式介绍 的改进版柏林噪声算法，算法代码采用编写，开源免费使用。如果你只是想看完整代码，可以点击文章结尾链接查看。

柏林噪声是一个非常强大算法，经常用于程序生成随机内容，在游戏和其他像电影等多媒体领域广泛应用。算法发明者 也因此算法获得奥斯卡科技成果奖靠算法拿奥斯卡也是没谁了。本文将剖析他于年发表的改进版柏林噪声算法。在游戏开发领域，柏林噪声可以用于生成波形，起伏不平的材质或者纹理。例如，它能用于程序生成地形例如使用柏林噪声来生成我的世界里的地形，火焰燃烧特效，水和云等等。柏林噪声绝大部分应用在维，维层面上，但某种意义上也能拓展到维。柏林噪声在维层面上可用于卷轴地形、模拟手绘线条等。如果将柏林噪声拓展到维层面，以第维，即轴代表时间，就能利用柏林噪声做动画。例如，柏林噪声可以通过插值生成地形，而柏林噪声则可以模拟海平面上起伏的波浪。下面是柏林噪声在不同维度的图像以及在游戏中的应用场景。



噪声维度
原始噪声灰阶
游戏应用




















一维：使用噪声进行偏移，制造手绘效果二维：制造火焰燃烧特效三维：最普遍的运用莫过于生成游戏里的随机地形
正如图所示，柏林噪声算法可以用来模拟许多自然中的噪声现象。接下来让我们从数理上分析算法的实现原理。
基本原理
注意：事先声明，本节内容大多源于     ，不过该篇文章内容也是建立在年所发明的柏林噪声算法基础上的。本文我将使用年发明的改进版柏林噪声算法。因此，我的算法版本跟的版本会有些不同。
让我们从最基本的柏林噪声函数看起：       
函数接收三个坐标分量作为输入，并返回的值作为输出。那我们应该怎么处理输入值？首先，我们取个输入值的小数点部分，就可以表示为单元空间里的一个点了。为了方便讲解，我们将问题降维到维空间来讨论原理是一样的，下图是该点在维空间上的表示：

图：小蓝点代表输入值在单元正方形里的空间坐标，其他个点则是单元正方形的各顶点
接着，我们给个顶点在维空间则是个顶点各自生成一个伪随机的梯度向量。梯度向量代表该顶点相对单元正方形内某点的影响是正向还是反向的向量指向方向为正向，相反方向为反向。而伪随机是指，对于任意组相同的输入，必定得到相同的输出。因此，虽然每个顶点生成的梯度向量看似随机，实际上并不是。这保证了在生成函数不变的情况下，每个坐标的梯度向量都是确定不变的。

举个例子来理解伪随机，比如我们从圆周率π…的小数部分中随机抽取某一位数字，结果看似随机，但如果抽取小数点后位，结果必定为；抽取小数点后位，结果必定为。


图：各顶点上的梯度向量随机选取结果
请注意，上图所示的梯度向量并不是完全准确的。在本文所介绍的改进版柏林噪声中，这些梯度向量并不是完全随机的，而是由单位正方体维的中心点指向各条边中点的个向量：  
采用这些特殊梯度向量的原因在 ’     这篇文章里有具体讲解。
注意：许多介绍柏林噪声算法的文章都是根据最初版柏林噪声算法来讲解的，其预定义的梯度表不是本文所说的这个向量。如图所示的梯度向量就是最初版算法所随机出来的梯度向量，不过这两种算法的原理都是一样的。
接着，我们需要求出另外个距离向量在维空间则是个，它们分别从各顶点指向输入点蓝色点。下面有个维空间下的例子：

图各个距离向量
对每个顶点的梯度向量和距离向量做点积运算，就可以得出每个顶点的影响值：          
这正是算法所需要的值，点积运算为两向量长度之积，再乘以两向量夹角余弦：
 =     换句话说，如果两向量指向同一方向，点积结果为：
    如果两向量指向相反方向，则点积结果为：
    如果两向量互相垂直，则点积结果为。
    点积也可以理解为向量在向量上的投影，当距离向量在梯度向量上的投影为同方向，点积结果为正数；当距离向量在梯度向量上的投影为反方向，点积结果为负数。因此，通过两向量点积，我们就知道该顶点的影响值是正还是负的。不难看出，顶点的梯度向量直接决定了这一点。下面通过一副彩色图，直观地看下各顶点的影响值：

图：柏林噪声的影响值
下一步，我们需要对个顶点的影响值做插值，求得加权平均值在维空间则是个。算法非常简单维空间下的解法：
        
  | 
 
  | 
    
                    
                           

  = 
  = 

  = 
至此，整个柏林噪声算法还剩下最后一块拼图了：如果直接使用上述代码，由于是采用线性插值计算得出的值，虽然运行效率高，但噪声效果不好，看起来会不自然。我们需要采用一种更为平滑，非线性的插值函数：函数，通常也被称为 也作为缓动函数在游戏中广泛使用：

图： 
 的值会用来计算前面代码里的和，这样插值变化不再是单调的线性变化，而是这样一个过程：初始变化慢，中间变化快，结尾变化又慢下来也就是在当数值趋近于整数时，变化变慢。这个用于改善柏林噪声算法的函数可以表示为以下数学形式：

基本上，这就是整个柏林噪声算法的原理了！搞清了算法的各个实现关键步骤后，现在让我们着手把代码实现出来。
代码实现
在本节开始前我需要重申一遍，代码实现是版本。相比 的版本实现做了小小的改动，主要是增加了代码的整洁性和可读性，支持噪声重复瓦片重复特性。代码完全开源，可免费使用考虑到这毕竟不是我原创发明的算法   才是！
准备工作
第一步，我们需要先声明一个排列表 ，或者直接缩写为数组就行了。数组长度为，分别随机、无重复地存放了这些数值。为了避免缓存溢出，我们再重复填充一次数组的值，所以数组最终长度为：
     = {                               
                
     
     
    
       
     
    
       
      
     
       
    
}

                                                             

  {
     =  
     = {
         = 
    }
}
数组会在算法后续的哈希计算中使用到，用于确定一组输入最终挑选哪个梯度向量从前面所列出的个梯度向量中挑选。后续代码会详细展示数组的用法。
接着，我们开始声明柏林噪声函数：
        {
       {                                                 
         = 
         = 
         = 
    }

      =                                             
      =                                       |__||__||__|       
      =                                                
      = 
      = 
      = 
     
}
上面的代码很直观。首先，对输入坐标使用求余运算符，求出范围内的余数。声明  三个变量。它们代表了输入坐标落在了哪个单元正方形里。我们还要限制坐标在这个范围内，避免访问数组时，出现数组越界错误。这也产生了一个副作用：柏林噪声每隔个整数就会再次重复。但这不是太大的问题，因为算法不仅能处理整数，还能处理小数。最后，我们通过  三个变量也就是的小数部分值，确定了输入坐标在单元正方体里的空间位置就是前面所示的小蓝点。
函数
现在我们需要用代码表示前面所提到的函数图。正如上文所提，函数的数学表示：

代码实现如下：
     {
                                                                    
                                                                     
                                                           
                                 
}

        {
     

      = 
      = 
      = 

     
}
代码所计算得出的    变量将在后面的插值计算中使用到。
哈希函数
哈希函数的作用就在于给每组输入计算返回一个唯一、确定值。哈希函数在维基百科的定义如下：
哈希函数是一种从任何一种数据中创建小的数字“指纹”的方法，输入数据有任何细微的不同，都会令输出结果完全不一样
下面代码就是柏林噪声算法所使用的哈希函数。它使用了早前我们声明的数组：
        {
     

            
     =                
     =           
     =           
     =      
     =           
     =      
     =      
     = 

     
}

    {
    
         = 

     
}
代码的哈希函数，对包围着输入坐标小蓝点的周围个单元正方形的索引坐标进行了哈希计算。函数用于将输入值增加，同时保证范围在内。如果不需要噪声重复，函数可以简化成单纯将输入值增加。由于哈希结果值是从数组中得到的，所以哈希函数的返回值范围限定在内。
梯度函数
我时常认为 的最初版算法里的函数写法过于复杂，令人费解。我们只要明白函数的作用在于计算随机选取的梯度向量以及顶点位置向量的点积。 巧妙地使用了位翻转技巧来实现：
           {
      =                                                     == 
      =                                         =    

                                                               
                                                              

                                                     = 
         = 
      ==     ||  ==                 = 
         = 
                                                                     = 
         = 

      ==      ==                          
}
下面代码则是以另一种令人容易理解的方式完成了这个任务而且在很多语言版本的运行效率都优于前面一种：
  
          
{
      
    {
              
             
              
             
              
             
              
             
              
             
              
             
              
             
              
             
             
    }
}
以上的源码可以点击这里查看。无论如何，上面的两种实现并没有实质差别。他们都是从以下个向量里随机挑选一个作为梯度向量：  
随机挑选结果其实取决于前一步所计算得出的哈希值函数的第一个参数。后面个参数则代表由输入点指向顶点的距离向量最终拿来与梯度向量进行点积。
插值整合
经过前面的几步计算，我们得出了个顶点的影响值，并将它们进行平滑插值，得出了最终结果：
        {
     

        
     =                                  
                                               
                                                           
     =                                       
                                     
                  
     =   

     =             
                      
                
     =           
                      
                  
     =    

                                              
}

  
         {
           
}
利用倍频实现更自然的噪声
最后让我们再思考下，除了前面所讲的计算，还有其他办法可以令噪声结果更加自然吗？虽然柏林噪声算法一定程度上模拟了自然噪声，但仍没有完全表现出自然噪声的不规律性。举个现实例子，现实地形会有大段连绵、高耸的山地，也会有丘陵和蚀坑，更小点的有大块岩石，甚至更小的鹅卵石块，这都属于地形的一部分。那如何让柏林噪声算法模拟出这样的自然噪声特性，解决方法也很简单：我们可以使用不同的频率和振幅参数进行多几次柏林噪声计算，然后将结果叠加在一起。频率是指采样数据的间隔，振幅是指返回值的幅度范围。

图：不同频率和振幅参数下的柏林噪声结果
将所有结果叠加在一起，我们就能得到以下结果：

图：图所有噪声的叠加结果
很明显，这样的噪声结果更加令人信服。上面的组噪声被称之为噪声的不同倍频。随着倍频增大，噪声对于最终叠加噪声的影响程度变小。当然，倍频组数的增加，会线性地增加代码执行时间，在游戏运行时使用噪声算法，再好不要使用超过几组倍频比如，当你想在下模拟火焰特效时，最好不要这么干。然而，做数据预处理时，就很适合使用多组倍频叠加来模拟更自然的噪声比如用于提前生成游戏地形等。
那我们应该分别挑选多大的频率和振幅来进行噪声计算呢？这个可以通过参数确定。 对的定义使用如下：
=
=
以上公式的值取决于倍频数量，代码实现也很简单：
            {
      = 
      = 
      = 
      =           
     = {
         =           

         = 

         = 
         = 
    }

     
}
小结
以上就是算法的全部内容，我们现在可以使用算法制造噪声了。再次声明，你可以点击这里查看完整源码。
本文原文出自  ，翻译不易，如果你已经看到了这里，就顺手点个赞吧哈哈！记得当年我萌生出要建立一个自己网站的时候，在网络上搜索了很多教程，但是都不怎么能看懂，于是建站这个事情折腾了我很长的时间。
在学习了很多知识之后，我终于能够熟练的从 到 建立一个安全可靠的站点。现在把我的经验分享给各位刚入坑的伙伴，希望新手不用像我当年一样为建站苦恼。
一、简单介绍云服务
要想建立一个网络站点，前提要有一个“公网服务器”，“公网”就像一块土地，“服务器”就像建立在土地上的建筑物。你要想把你的建筑艺术拿出来给别人看，两者缺一不可。
但是，对于个人而言，购买“公网服务器”的成本太高，所以“云服务”应运而生，通过“云服务”可以让你很轻易的购买到服务器，而且管理方便。目前比较火的云服务器厂商有腾讯云、阿里云等。
下面，我就以“腾讯云”为例，教你从零打造自己的站点。其实各大云服务商的购买流程大体都差不多，选择谁还要看你自己的选择。
二 、简单介绍云服务
打开腾讯云的官方网站，使用  号登录。
选择云产品→基础产品→计算→云服务器，进入云服务器购买页面。

点击立即购买，进入选购服务器界面，根据自己的需要选择适合自己的服务器，包年包月还是按量计算，可以随意搭配。

下一步选择服务器系统，这里我选择的系统，因为属于系统，可用性要相对于高一些，所以我推荐大家选择，后面我都已为例建立站点。

下一步选择储存和网络服务，根据自己的实际情况选择即可，注意分配公网这一项必须要选择，否则别人就无法访问你的站点啦！

下一步设置服务器密码，然后付费，即可获得自己的一台云服务器啦！
三、 如何进入服务器
首页点击自己的，可以进入控制台界面，在这里面，你可以找到自己购买的所有云服务，找到“云主机”列表，可以看到自己购买的云服务器和公网。
许多第三方工具可以登录你的云服务器，这里以免费的软件为例。

帐号和密码为购买服务器时，最后一步设定的密码，默认帐号为
如果你使用的是苹果公司的 那么直接在终端输入 “你的地址” 即可登录。
四、如何配置服务器
我们的目的是为了建立一个站点。一般来说，下站点的环境有和两种。的效率比高，更加适合小服务器，所以，下面我教大家如何快速建立一个环境。
使用登录进服务器之后，可以输入各种命令，下面安步骤输入下面的命令即可。
 下载并安装一键安装包
安装稳定版
            
按上述命令执行后，会出现如下提示：

需要设置的密码不输入直接回车将会设置为如果输入有错误需要删除时，可以按住再按键进行删除。输入后回车进入下一步，如下图所示：

询问是否需要启用 ，引擎默认为开启，一般建议开启，直接回车或输入  ，如果确定确实不需要该引擎可以输入 ，输入完成，回车进入下一步。
选择版本，目前提供了较多版本的和，需要注意的是 及 必须在以上内存的更高配置上才能选择：

输入对应或版本前面的序号，回车进入下一步，选择版本：
接下来直接按照默认选项就行选择就可以，一路按回车即可，不多解释了。
提示        后，按回车键确认开始安装。 
下面就是漫长的安装阶段了，安装时间可能会几十分钟到几个小时不等，主要是机器的配置网速等原因会造成影响。
安装完成
如果显示 ， ， ，并且、、都是，和端口都存在，并提示     的话，说明已经安装成功。

接下来按添加虚拟主机教程，添加虚拟主机后上传网站代码，可以使用或服务器上传网站，将域名解析到或服务器的上，解析生效即可使用。
添加虚拟主机的命令是  
接下来按照他给的提示设置域名没有域名可以直接用替代等信息，即可完成虚拟主机的创建。
如图：

下面就是上传或者你自己做的静态网页。网络上的教程数不胜数。
当你成功上传页面，你的个人网站就完成了。

相关推荐【腾讯云的种玩法】从到搭建自己的互联网领地专题：如何从到搭建个人站点作者：


随便写点啥，不然要被。。

 的出错我们应该都很熟悉，例如 等。
我们  将出现错误的  代码取名为 ，也有一个开源的  项目，用于捕获和分析  错误，并提供了一些基础的报表数据分析。
捕获错误一般有两种方式：

使用捕获全局的错误信息
使用{}{}包裹需要执行的代码，获取对象的属性定位错误并上报

第一种方式最简单，但当执行的代码和我们的站点在不同域即跨域时，由于浏览器的安全限制，方法只能捕获到一个固定的错误代码 。具体可参考这里：点击查看。
我们团队目前的业务基本都会将静态资源部署到服务器，和站点处于不同域，所以需要解决跨域问题。
跨域问题可以通过服务器端设置解决，但并不完美。这个问题更深入的信息可以参考这里：
第二种方式是手动包裹一些要检测的代码，没有跨域问题并且可以获取到的对象的详细出错信息。这种方式相对麻烦一些，但可以通过全局的，处理大部分情况，免除每次手动写的烦恼。
我们都知道代码的执行是通过事件和定时器触发执行的，所以理论上将事件触发时的回调、定时器的回调包裹即可。
我们的项目主要是通过第二种方式实现，并根据现有的业务，对以下几种方法进行了处理：

等方法
封装的一些事件，如等
 等

这里处理的原理比较简单，类似下面的代码：
 {
    
}
  = 
 = {
    {
        
    }{
        错误上报
    }
}
这里还有一些兼容性的问题需要处理，例如在低版本中和方法并不是类型，而是，所以无法使用改写的方式进行包裹。类似的还有方法也是，不是。
除了对以上方法的单独处理外，还有一些意外情况无法处理，例如：

等浏览器和的事件这类方法无法直接改写
第三方的插件的自定义事件，如播放器提供的一些用于播放控制的事件。
新的一些，如等

这些意外情况很难做全局的，所以只好手动。我们的也提供了一个便捷的，例如源代码是这样：
  =  
 = {
    
}
使用包裹
  =  
 = {
    
}
除此之外，能获取的对象在各不同的浏览器之间，也有一些差异。好在有人已经做一个页面展示详细的差异，参考 。
一些其他的补充
回到捕获错误这件事本身，是为了更好的监控并定位错误，帮助我们改善代码质量，所以也提到另外一个思路，可以灰度一部分用户，直接使用主域而不是的，直接避免跨域问题，这个思路也值得一试。
另外，错误上报数据和访问量等数据如果到结合一起分析，不仅可以更快速的定位问题，甚至可以实现监控自动告警等，当然这个也非常复杂。

原文链接：


相关推荐移动端异常捕获玩转正则表达式作者简介：梁定安，腾讯织云负责人，目前就职于腾讯社交网络运营部，开放运维联盟委员，腾讯云布道师，腾讯课堂运维讲师，  讲师，凤凰项目沙盘教练，复旦大学客座讲师。
  请原谅我的标题党，谢谢你点击进来，本文主要是从持续反馈的视角出发，围绕着构建企业质量体系的目标，谈谈如何做好监控、做好告警、做好运营这件运维绕不开的大事。
备注：此文是月日深圳与线下技术交流大会，《最后一棒，有效构建海量运营的持续反馈能力》主题演讲的文字稿。
的最后一棒图
  这张图概括了整个的体系，它最后的一个环节，就是做运营和终结的环节。对与运营和终结的理解，我认为应该包含两个纬度，一是这次运维活动的质量运营与终结；二是产品的技术运营和生命周期的终结。今天我们聊下在产品生命周期结束前，我们在技术运营阶段构建的质量体系，以实现持续反馈和优化的目标。
持续反馈于运维的理解图
监控——覆盖率、状态反馈、指标度量。  监控要做到度无死角，业务出现了什么问题都能发现，有了监控的反馈，可以看到实时监控的状态，同时，当指标发生变化的时候也需要看到一些反馈。
告警——时效性、准确性、触及率。  业务越来越复杂，层次越来越多，每一个监控点都会产生数据指标、状态异常，会收到越来越多的告警。未看到或者看到未处理都需要承担责任，因为收到的并非都是误告警。最重要还要有触及率，告警由谁发布与处理？
运营——、事件管理、报表考核
  问题再三出现、必须从根源优化。通过事件管理机制保证可以落地，最后通过报表和考核去给运维赋予权利推动相关优化活动的开展，包括架构和代码的优化等等。
全面的监控点图
  腾讯织云监控体系是按照互联网业务不同的层级进行管理，从下向上，有服务器层、数据库、逻辑层、中间计算的这一层，有接入层、负载均衡，有我们的机房，服务、客户端、用户端，为了做到无死角，我们布局了很多监控点。  在实现舆情监控后，织云监控点做到了的覆盖，但并不能高枕无忧，因为当监控点做得越多越立体化的度无死角后，每个最细节的点都有指标去度量，指标数据爆炸很有可能成为另一个潜在的监控隐患。
运营阶段要解决的问题图 
繁——简  在具体生产过程中会产生运维的事件或者是故障，经常会有死机，以及各层监控告警，这些繁琐的告警、故障，改如何简单化？
泛——精  举个案例，在一台核心的交换机下，假设其下联有台的机器分布到数据层、逻辑层、接入层等等，当这台交换机故障不可用时，由于有立体化监控的存在，每个监控点都会产生大量的告警信息，我们要如何发现这些告警是由于这台核心交换机故障引起的呢？
乱——序  由于指标采集方式和计数据量的不同，直接导致了监控的流处理效率是不一样的，告警收到的次序不一样，我们要如何排序，如何有效识别优先级？
  所以我们今天重点聊下，在监控匮乏的时代我们在积极的搞建设，但是告警泛滥的时候我们要学会过滤。
监控对象与度量指标图
  腾讯业务要监控的对象如左图，按照业务逻辑从下往上，下面是通用的监控层面，网络、服务器、虚拟化还有应用，应用包括了组件的一些监控。
  这里举了申请号的业务场景案例，假设用户在端发起申请号的业务请求，请求走到前端，而后是注册服务，注册包含了三个信息：个人信息、个性化的设置、增值服务。
  基于立体化的织云监控体系，假设用组件的监控，无论是还是空间、音乐，都有一些通用的指标可以衡量。如，打开的内存是多少？长连接数是多少？用户进程、吞吐量、流量、，业务层面返回码的分别是什么？省市连接的成功率、请求量的分布是什么？这都与具体的业务逻辑无关。
在做监控时，我们把指标划分成两大类：低层次指标  把公共的、基础设施等在业务逻辑之下的指标称之为低层次的指标，网络、硬件、虚拟化等。
高层次指标  高层次的指标要能更直接的反馈业务可用性的情况，如成功率、延时、请求率等。
监控点  越低层次的指标会给让监控系统或者是告警带来的噪音越大的，在规划监控处理或者优化监控策略时，要尽量把低层次的指标自动化处理或收敛掉，尽量以高纬度的指标来告警，因为这才是最核心需要关注的，也是最能反馈业务可用性的。如果一个公司用低层次指标来代替高层次的指标的作用，那质量是很难管理好的。
  高层次的指标，是要能够实时反馈业务的真实状况的，在海量规模的业务运维场景下，靠人没办法看到单机的层面，必须要看到集群的层面。
  以运维举例，我们以模块为统一的运维对象，模块是提供单一业务功能的集群。为什么要管理到集群呢？简单的理解就是把运维对象给抽象，做减法。拿腾讯的来说，有万的服务器，抽象成模块后只有一万多个模块，相当于以前面对万个运维对象的个指标的告警量，现在面对一万个模块告警量要轻松不少。再把低层次的告警优化掉，可能只面对台的告警了。
  在高层次指标中，还要有效的区分开单服务的高层次的指标，和业务功能的高层次的指标。我们要先理清两个概念，可靠性和可用性。
  可靠性是指单个服务失败的次数，由于单个服务的失败并不一定会影响整个申请号业务功能的可用性的下降，因为微服务自身有失败重试的逻辑，在腾讯的运维经验中，我们会在可靠性和可用性之间做出一定取舍。
  低层次的指标虽然比较基础或者可以自动化的解决，但往往是一些高层次指标的根源的问题，善用这些低层次的指标能够帮助运维快速的定位高层次指标的故障原因。
监控的本质图
  监控无非就是很多的值、很多的率，把值和率分开是有考虑的，因为值报上来就是一个值了，率是经过一定的计算才变成率的，其实都是把扁平化的信息包装成高层次的指标。  最终监控的目标都是要分析状态和发现异常的，要从图、表或数据中，分析现在业务的真实的情况，分析现在服务是否有异常。
为什么要强调有效图
立体化的监控，会带来监控指标的爆炸，更有可能带来告警数据的失控，如果不能妥善处理，就会把告警通知演变成“狼来了”，失去了原来警报的效用。要有效的解决告警多、误告警多我们要面对几点：、    关联分析：  把一些真正重要的，需要通过事件、活动、指标提取出来。希望不要把什么事情都告警出来，而过多的消耗告警的诚信。
、无误告警：怎么样把收敛策略、屏蔽的策略用到极致，必要时可以将两者组合，以达到更强化的效果。
、    持续运营  做好持续运营就是做好跟进，为了保证重要的事情有人跟、有人度量，防止问题再三出现，要在流程上有保障的机制。这样就要求我们有一个质量体系来闭环管理，当监控发现业务架构不合理、代码不合理等问题，能够通过该质量体系，推动业务、开发、运维去将优化措施落地，这也是为了最终的商业价值，这是的观点。
案例：扼杀真相的“结论”图   这是手机的一个多维监控案例。当客户端第一次连接服务端，会有一个心跳包，它是一个命令字，我们以成功率来度量其质量，其实就是考量它维持长连接的可靠性。如果长连接断开移动客户端连服务端的话要跟基站建立长连接，起码、秒耗掉了，好友消息没有办法接收。如图，一般的功能，我们要求三个的质量。但是千万别被平均数所蒙骗了，我们一起展开看看真实的情况。
按被调的聚集展开图   腾讯的服务是多地多活的，有一些分布在规模相对小的点，有些分布在比较大的点。根据全国用户访问的服务端的点的不同，腾讯内部称之为。讲平均数按的纬度展开，为什么“无”的成功率只有个？再展开一下。
按展开图   按接入方式、、等展开，服务质量越来越差，只有两个绿了，你会是，的环境为什么只有两个了？
按运营商展开图   按运营商展开，质量数据更红差了，虽然符合预期，但最终的问题还没有找到。
按地区展开图 
  继续按地区展开，发现全是红的，但还是没有头绪。
按运营商展开图   当再次按地域展开时，展开到浙江地区，我们发现出错的全是安卓的版本。而的版本，全是的成功率，共性问题呼之欲出？
一击命中图   这时候回过头来检讨一下排障的思路，可能打开的方式不对。在第三步的时候直接展开，好像真相就已经出来了，其实是安卓的某几个版本，可能有这样的隐患，导致我们这个心跳逻辑有问题。
这里说明一个问题，我们对待海量的多维数据的处理，分析方案很重要，在我们规划和建设监控体系时，应该考虑好这点。今天给大家带来了个小技巧，希望能给大家在做监控数据分析时有帮助。
海量监控数据分析个小技巧图 
海量监控数据分析的技巧：溯源、根因和优选。为了加快告警信息量的处理往往把监控的协议格式化，格式化处理完了之后进一步的格式化，把很多原始数据的蛛丝马迹丢掉了，导致没有办法查到真正的问题。因为之前做的格式化会让监控数据失真，影响排障的效率，所以上报协议的时候尽可能的保留字段。 
溯源分析图 
高纬与降维打击  高维与降维打击，把一个指标的结果值或率以不同的纬度展开，要把每一个纬度的指标组合的状态异常都变成告警，这是很不现实的，因为压根处理不过来。反而多维度的指标异常能通过日常的报表汇总分析就能发现的异常，然后通过考核去持续的推动，把异常指标给理顺、优化掉，这是就是高维、降维的打击。
级联分析  网络有一个词叫微突发，网络突然拥塞了，导致一大波低层次和高层次的告警产生。举个案例，一个交换机异常，引发下联的服务器爆炸式的告警，当此类情况发生，我们的统一告警平台全部不理，做好全局的收敛，以保证监控告警的有效性不受影响。
逆向思维  意思是不能只看结果数据，要回到原始数据来看。如果要做到逆向思维可生效，那流处理集群在真正加工完，存储的结果数据之前要做最基础的清晰，把那部分日志备份到大数据平台做离线的计算，然后结果数据再走正常的流，去做告警也好，异常波动也好，因为很多异常的东西必须要看到原始数据。我们曾经深入分析相册的日上传照片流水日志，找到了大量异常的用户照片，从而节省了大量的运营成本，这些都是结果数据无法做到的效果。
根因分析图 
用高层次的告警收敛低层次的告警：  同一个集群下既产生了低层次的告警，又产生了高层次的告警，低层次的告警不用发。
用主调的告警收敛被调的告警：  模块调用模块，挂了，受不受影响？从保障业务可用性的角度，如果没有产生告警，证明该场景只是的可靠性告警，告警通知开发而不是运维。但如果挂了，也产生了告警，运维就应该收到的告警，还是告警给开发。推进告警分级分值、分级、分人、分通道的机制，其实是慢慢把一些运维要做的事情分给开发，运维只看核心的，软件可靠性这些开发来看，可靠性是开发的问题，可用性是运营质量的问题。
用原因告警收敛现象告警：  在业务逻辑的调用联调中，用原因告警收敛掉现象告警。具体可参考年月深圳运维大会上，我关于监控的分享。
用主动触发的活动去屏蔽一个对象的告警：  有些告警是由于变更的行为引起的，要收敛掉。如正在做升级引发了告警，运维系统要能关联这些事件与告警。有高层次的告警、低层次的告警，还有运维的活动事件，都把这些集中在一起，通过权重的算法，有一个排序决策说告警应该是告这条链路，而不是每一个对象都重复的告警。
优选指标图 
核心指标论  优选指标应该是第一次对外分享，腾讯内部的系统代号叫，是一种通过人工来筛选核心指标的方法，可以说在大数据时代的今天，这种做法稍稍有些不够优雅。加入，一个模块可能有－个指标，这－个指标中，包含有低层次的指标，高层次的指标，但当这个模块出问题的时候，这－个指标可能都会产生告警，那么应该怎么样收敛呢？倘若我们提前已经对该模块进行过核心指标的人工筛选，这个指标能代表模块最真实的指标。
监控的相关性  监控是相关的，例如个指标告警了，最核心的那个也会告警，最核心的告警了这个指标可以不告警，只看核心的就可以了，为什么要人手选核心指标，因为暂时没有办法人工识别。
告警分级管理  可以基于核心的指标对告警做分级，非核心的开发自己收，核心的运维收，高规格保障。
降低流试监控的计算量  监控点越多，流的数据越大，整个监控流处理集群规模很大，万台机器光是流处理的集群都是接近台，当运营成本压力大时，我们也可以重点的保障的指标的优先计算资源，保证优先给予容量的支持。
用户舆情分析监控图   还有一个很核心的指标，就是织云用户舆情监控系统。简单的介绍这个系统，用户舆情监控顾名思义就是监控用户的声音和反馈。用户的意见反馈来源可以分几部分，一是的入口，另一个是内嵌的反馈入口，还有的就是腾讯的用户反馈论坛，所有的数据都会被汇集到织云舆情监控平台上，然后通过机器学习实现自动分类。系统会把类似“空间打不开”、“空间不用好”等这些词汇进行语意分析和归类，然后统一告警成“空间异常”，时间间隔是分钟颗粒度，技术细节今天不重点介绍，感兴趣的同学可以参考我在年在北京大会上的分享主题。  当实现了用户舆情监控后，我们基本有把握说业务的监控度无死角的假设用户都会反馈问题，且不考虑时间因素。这套监控先天就有门槛，因为要基于用户的主动反馈行为，同时需要较多的用户反馈数据量，因为腾讯的用户量基数很大，用户主动反馈的量也很大。同时，舆情监控可以用于监控技术上的质量问题，也能用于监控产品的体验或交互问题。
有策略更要有自动化图   告警自动化处理的前提是标准化运维体系，在织云监控体系下，所有告警处理会先经过预处理策略，然后再经过统一告警平台的策略和算法，最终才被决策会否发出。
精准适用的算法与策略图 
  在定义指标状态异常时，我们的经验是尽量不要用固定阀值，要用也是动态阀值，否则在监控对象的阀值管理上就会有大量的人工管理的成本。其他的推荐策略如图。
常见的业务监控图形与策略图 
  我们在日常运维工作中，面对的监控的图形就如上图，趋势有小波动、毛刺、无规律的，建议大家有针对性的套用监控策略，让监控告警更精准。
案例：监控自愈图   分享一个织云监控实现进程自愈的案例，流程中的模块在部署时，运维自动化流程就会把进程和端口的信息注册到中，然后监控服务会读取该模块需要监控的进程与端口信息，并把监控配置发送每台机器的监控上，本地的监控通过定时的检测进程和端口的运行情况，如果发生异常，则自动通过标准化的管理找到启动的命令启动，如果启动成功便实现了进程自愈。如果启动不了发给统一告警平台，统一告警平台来决策是否需要告警。当该告警原因是因为基础设施正在做变更影响时，也不会发出告警。一系列的监控自愈的方案都是构建在织云的自动化运维体系中的，详情可以参考以前织云的相关技术分享。
常用的收敛算法图 常用的收敛算法。毛刺收敛：  在织云监控中，我们的告警策略为了防止毛刺的影响，会将告警策略定义为分钟发生次类似的模式。
同类收敛：  一个模块有个监控实力，产生了条的告警，只要有一条告给运维，对于运维同类收敛掉了。
时间收敛：  生产环境中有很多定时的任务，如定时跑批会引起的陡增等异常，这种可以针对性的收敛掉。
昼夜收敛：  有一些告警，在分布式服务的高可用架构下，晚上不需要告警出来，可以等白天才告警，更人性化的管理。
变更收敛：  如果告警的时间点有运维的活动，就要收敛掉它。怎么做到的？取决于要把运维的活动都收口在标准化运维的平台，运维平台对生产环节都要讲变更日志写入在变更记录中心那里，然后统一告警系统能够关联变更记录来决策是收敛还是发出告警。
织云监控构建的质量体系图   织云监控构建的质量体系，分成用户端、客户端、服务端、基础端，定义核心指标，并且善用分级告警、分渠道告警，结合短信、、微信和电话等渠道实现告警通知，整个质量监控体系都是围绕预警、自愈、分析、排障碍的能力构建。
织云监控：质量体系图   小结织云监控的质量体系，我们希望打造一个闭环，能够实现持续反馈、度量、优化，让团队间能够有效的协同工作，更高效更有效。
监控能力：  全局的看、需要什么样的监控能力和监控点，同时要理清指标是怎么分层的，哪些指标是重要的？最终把它转成业务看得懂的高层次指标。
业务可用性：  运维要看什么，要看可靠性还是可用性，如果规模不大看可靠性可以，但是在海量的场景下可靠性要太细，要抽象核心指标来度量，用于衡量可用性。可靠性则可以通过考核体系去度量与管理，结合和老板的力量来推动开发团队的投入与优化。
用户体验：  做技术运营会有视角的盲点，会经常迷恋可用性的数据是个、个，但这并不完全代表了我们服务质量好，当用户连接不上我们的服务端时，几个的意义都不大。这是一个很现实的问题，因此用户体验监控一定要做，因为内部的可用性再高都不代表用户用得好。
技术解决：  要有技术解决的方案，要有自动化的工具，有协助用户排障的工具，有根因分析的算法平台等等。
统计分析：  最终形成可度量的指标、可考核的、可展示的，最好是展示的，监控数据的统计报表能力服务化，应发挥更多的角色来使用监控数据，而非仅限于运维角色。
持续改进：  最终持续的改进无论是架构的问题、代码的问题，还是因为标准化的问题或非功能落地推进不了的问题，都是需要数字来度量和推动。最好，这个数字要能间接的反馈商业的价值，也就是提倡的思路。
  最后，质量体系肯定是反作用于监控能力再去形成这样的闭环，跟开发怎么沟通？跟产品怎么沟通？跟、跟客服怎么沟通？要把他们用起来，要把他们关注的点牵引住，最终落到运维想实现的目标上是最好的，这很，也撬动老板的思维，争取从上而下的支持做好质量体系的建设。
  我们经常说很难落地，为什么难？因为我们总是想要去影响老板，先改变文化再改变工作方法，但这谈何容易。如果是运维和开发能联合起来，先从小的重点的业务抓起，用数据说话体现能给业务带来的最终的商业价值，说不定会起到事半功倍的效果。概述
代理、作为两种古老的数通网络安全解决方案，在当今移动互联网时代，伴随着游戏网络加速、安全性等用户硬性需求，再次焕发青春。
在数通网络中，一般拓扑如下图一。需要测试系统的网络性能，只需要使用背靠背网络如图二，测试仪器从端发包，端收包，就可以轻松测算到系统带来的延时、丢包、网络的吞吐性能以及新建、并发等性能指标。组织的和也详尽的阐述了如何测算这些指标。而这些指标，也会成为设备供应商参与竞标必备的技术指标，采购方也会详细对比各厂商的设备性能，再决定采购谁的设备。

图一 数通网络一般拓扑

图二 背靠背测试网络
同理，在移动测试范畴内，我们也需要进行可靠的竞品测试，验证自己产品提供的、服务，性能是否优于竞品。顺理成章，笔者首先想到的是，能否搭建一套类似于图二的背靠背网络来测试其网络性能？马上会出现两个问题：

笔者无法搭建测试环境的竞品  所知；竞品的实现方案也不为笔者所知；

在快节奏的互联网产品迭代中，也不允许如此复杂的测试环境搭建。


不管怎样，借鉴其思路，我们还是能够找到一个可行的的方案来获取可靠的竞品对比数据。
测试方法篇
延迟、带宽这类指标，都需要在大量样本上运用统计学进行分析才是有意义的。所以收集数据，是专项性能测试的第一步。
在简单的网络测试中，我们一般采用来进行网络延迟检测。笔者选用的方案并不是简单的，而是 一个单数据包能够容纳的页面。而带宽测试，则是通过下载一个左右的文件，并记录每一秒收发数据量来获得带宽数据。
这样选择，主要有两方面原因。
一、从业务上说，的按应用导入流量，程序的包不会进，导致测试数据错误；同时，和的流量更贴近用户场景的真实流量。
二、从测试方案上说，使用的接入成本更低。这样延迟、带宽等各种参数均可以使用同一个数据接口来实现。
延迟测试原理
相比于使用背靠背网络，可以测得数据单向传输所需的时延。在笔者的方案中，单位数据样本是计算测试发出 请求，到收到  的响应所耗时长。如下图，这次延迟的数据，计算的是发出号包，到收到号包所耗用的时长。
 延迟测试 数据的选择，笔者是选用的是 。原则是尽量选择内容能够单个数据包能够返回的页面。

图三 延迟测试抓包
如果没有现成的好用的，笔者推荐。它有点像一个蜜罐，时刻等待着你的光临，然后根据你的请求，给你返回你想要的东西。我们可以放心大胆的黑他，而不用担心他报复你。官网| 唯一的缺点是，这东西在美国，未加之前的访问延迟和抖动就比较大。要吐槽下，为什么免费的，好用的，技术性的东西，都在美国？。图三的截图，就是  的结果。
延迟测试逻辑
在阶段，为了更低的代码成本。笔者选用了，而不是自己去实现一大堆网络通信的东西。当然，作为一个深爱技术的测试，深入去理解下原理还是非常有必要的官网。具体的使用方法不详细介绍，有兴趣的同学可以详细了解官网或的例子。
如下代码中，需要注意下的第一次执行，的时间点是在三次握手首包之前，是在收到  回应之后，所以首包的时延会比较长。尤其是在测试代理场景时，因为先跟建立连接，再去跟三次握手，然后才是数据转发。在选择样本时，可以选择过滤掉首次数据。但是，别忘了，首包时延值，其实也可以成为你衡量一个系统或系统性能的关键指标。

  = 
 = 
  = 
  ==  {
     = 
      =   
    
        
    
    
}
带宽测试原理
带宽测试分两步，先拉起一个线程使用接口去下载一个大文件。然后拉起另一个每隔两秒去收集一下 接口的发包数据和收包数据量。
其实在的流量类中，和是隐藏方法，而和是可以直接调用的方法。为什么要选用隐藏的而不是后者呢？
因为，笔者测试的测试目标是性能，在中，测试对象会拉起一个的接口。如果使用这两个方法，它们统计的流量就将口的收发数据也统计进来了。这样会导致数据整体不准确。
以下，是调用到的关键代码。全量代码依然可以在上面提及的文中找到。
 = 
=  
=  


综上所述，笔者实现了一个小的，给它命名为悟空。负责提供一些按钮触发测试；各个测试线程用来跑逻辑测试逻辑；负责将数据写入存成文件。

图四 悟空的结构
数据分析篇
对于延迟数据，建议使用中位数和方差来衡量衡量总体延迟和抖动。原因如下，如果执行次之后，数据可能是如下图的。大部分数据都在以内，有少量几个数据是在以上。但由于这几个异常值过大，几乎是一般延迟的倍左右，如果使用均值来计算的话，会导致偏差过大。

图五 延迟数据
数据示意如下，计算公式参考：
均值=_
方差=_
中位数=_

当然，上表的数据，其实还是不太直观的。笔者从自己的测试数据中抽取了以下两组数据来观察。如果从均值来看，两者似乎很接近。但中位数却表明样本的延迟要远小于样本。从方差分析，样本中肯定是存在某些波动很大的数据导致均值偏大。



时延
样本
样本




均值




方差




中位数





这里反应的背景是，我们的测试并不像数通网络测试一样，将测试链路与真实通信链路隔开。延迟数据中，带入延迟的，可能是我们的系统，也可能是网络中某个节点的突然波动。所以补充下面的数据分析是非常必要的。
 公式：
 =__



时延
样本
样本




大于




大于




大于





这样，从延迟上看，样本确实远逊于样本，的延迟数据都在以上。而样本中只有的数据在以上。得出这样的结论，是因为延迟数据的波动是一个单向波动的数据：在一定的基础延迟下，延迟数据只可能正向抖动，物理规则决定不会抖动出一个非常小的数据。如网络原有的延迟，新加入节点带来的抖动，只可能使得总体延迟大于。
结语
移动互联网的性能测试，很多时候需要我们快速输出报告，还要求数据可靠性高。这样，就要求测试人员在很好的理解需求之下，在需求提测前将一些数据收集的行为自动化成工具。同时，要有良好的数据分析能力，能够让自己的测试结论更具说服力。

文章来源于：腾讯移动品质中心 笔者很久以前分享过一个攻击的防御脚本，写得不怎么样，不过被意外转载了。博客从此走上了经常被人拿来练手的不归之路。
当然，还是有不少朋友在生产环境使用，并且会留言询问相关问题。根据这些问题的需求，我花了一些时间重新写了一个比较满意的轻量级攻击防御脚本，我给它取了一个比较形象的名字：，译为终结者。

一、功能申明
分享之前我必须先申明一下，众所周知，攻击指的是分布式拒绝服务。而攻击只是攻击的一种，本文所阐述的攻击，指的是单个达到我们设定好的阈值并发请求，而非海量的低并发攻击类型！
对于个人低配服务器，除了使用缓存来防护，至少我是没有想到如何抵挡海量攻击的！因为每个都模拟正常的用户浏览器请求，并不会触发防御阈值，同时来个，甚至上万个，个人低配服务器的带宽在第一时间就会被占满，就无法继续提供服务了。
当然，用脚本也是无法防御大流量攻击的，因为所有机房的防御带宽是有限的，当攻击的流量超过了机房的防御带宽，要么机房把你的服务器拉黑洞，要么就一起死。因此，如果你的服务器正遭受大流量攻击，比如几十上百，一般机房或节点都是扛不住的，脚本也无能为力了，赶紧换高防服务器吧！
二、功能介绍
通过以上申明，也就大致给一个定位：是用于个人低配服务器的轻量级攻击防御，可以抵挡单个产生的高并发攻击。
目前设计的功能特性如下：
①、秒级检查
很多人写的防御脚本都是使用了系统的计划任务来定时检查的。而的最细颗粒是分钟，也就是说脚本最快也只能分钟检查一次。对于一些强迫症来说就会很不爽。
所以，我还是按照以前分享的思路，利用循环实现秒级检查，实现更细的颗粒。当然，更是被我写成了系统服务，更加灵活稳定。
②、拉黑时长
可以设置拉黑时长，默认为分钟。当发现有恶意请求时，会自动拉黑目标，并在拉黑时长结束后自动释放，这个功能算是对我之前写的脚本的一个大的改进。
③、并发阈值
 可以设定单个的最高请求数，如果某个同时请求数超过了设定的阈值，就会被暂时拉黑一段时间。
④、邮件发送
这个功能没啥好说的，意义并不大。而且发送成功率和服务器的环境也有很大关系。
⑤、并发显示
安装后，直接运行会列出当前系统的请求排行，可以清晰的看到当前请求和并发数。使用参数还可以继续定制需求，比如    就能显示当前并发数排行前名的。
⑥、手动拉黑
支持手动拉黑，执行后会立即检查，将并发请求超过的拉黑一段时间，比如    就会将目前超过个请求的拉黑一段时间，如果没有则不会执行任何拉黑操作。
三、工具安装
①、在线安装
由于我可能经常会更新一些功能，或修复一些，所以仅提供在线安装，以保证脚本是最新的。
安装非常简单，执行如下命令就能进入配置步骤了：
    =        
②、下载安装
目前已经将源码全部存放在，能看懂的朋友可以下载后手工配置安装。
传送门：
③、工具配置
因为每个服务器的情况可能不一样，所以有一个自定义配置的过程。
执行上述安装命令后，将会进入自选配置部分，如图：
提示否使用脚本默认配置，如果选择是，那么显示默认配置，并询问是否继续：
默认配置如下：
            每检查一次系统请求情况
      拉黑时长设为分钟
     邮件对象设置为即关闭邮件发送
        单个并发限制为
如果不符合你的需求，你可以使用    组合键终止脚本，或者先继续安装，因为工具设计了配置修改的功能，所以无需着急。
如果不使用默认配置，则会要你输入参数来自定义配置：

如图，我将参数依次定义为每秒进行检查，拉黑时长为秒，发件人设置为博客邮箱，并发限制设置为，回车后会弹出一个提示，让你检查，如果没问题你直接回车就会安装并启动：

④、服务控制
安装后，会将注册成系统服务，这时你就可以使用来控制了。
使用标准的定义，支持  |  |  |  四个参数。所以，你可以使用  来停止，也可以使用  来查看状态。
⑤、集成命令
成功安装后，系统还会多出一个的命令，这个命令现有功能如下：
 可以调出帮助信息：
     
 ©     
   
         

 |           
 |          
 |         
我蹩脚的英文也能凑合解释一下功能了吧
 是拉黑功能，需要在后面带上你想拉黑的并发数，比如    就会拉黑当前请求数大于的一段时间和拉黑时长一致 是显示并发排名，也需要在后面带上数字，比如    就能显示当前并发数排行前名的。
⑥、文件结构
如上图所示，脚本安装目录为，其结构如下：

├──        主程序
├──            日志目录 新增特性
├──         配置文件
├──  白名单
└──      安装和卸载脚本
   
很简单也比较规范的的结构，当然，后续功能如果越来越多，此结构可能会有所更新，这是后话。如果你熟悉的话，只要编辑就可以定义工具参数了：
       
=
=
=
__=
=
=
=
 _设定检查频率，单位为秒
_=
 __设定并发限制
__=
 _设定邮件的发送对象
_=
 _设定拉黑时长，单位为秒
_=
 设置忽略端口，比如  默认不忽略
_=
 定义日志级别  默认 
_=
如果不熟悉也没关系。你还可以执行   进行工具初始化，重新设定所有参数，过程和首次安装时一致，这里就不赘述了。
⑦、白名单
工具安装时会默认将系统所有都加入白名单，避免自己把自己给拉黑的尴尬。如果你还有其他要加白的，可以将加入到安装目录下的文件中，每行一个。
：目前白名单还不支持段，敬请期待后续更新。
⑧、卸载工具
有心的朋友可能注意到了是可以带参数的。我写代码的时候已经设计了几个常用的安装卸载功能，具体如下：
直接执行 将会显示如下帮助信息

                 
        

                     


  


 |      
 |         
 |        
 |         
 |       
其中： 参数用来升级工具，不过目前由于没时间还没写，所以不可用 已支持在线更新  参数用来安装工具，如果已安装则会提示并终止 参数用来配置工具，方便安装后随时修改工具配置 参数用来卸载工具，注意是大写哦！
因此，我们可以使用    如图卸载：

四、攻防测试
成功安装并启用之后，我们可以使用压力测试工具来测试拉黑和释放效果，比如  或 等。
假如设定的并发限制为，检查间隔为，使用如下测试：
     
启动测试后，你可以立即去服务器上查看防火墙：
 
多刷几下，就可以看到所在服务器已经在规则中了。
确定已被拉黑之后，你等个分钟再来看防火墙，可以发现所在服务器已经消失了，成功释放！
：如果邮件发送功能无误，那么应该也收到了工具发来的告警邮件，比如有一个饱受攻击煎熬的站长给我发来的反馈：

五、更多说明
①、配置并发限制
配置最大连接数限制时，建议根据单个网页产生的并发数来判断。
情况： 你网站做了动静分离，那么静态的请求就到另一个域名了假设静态资源托管在另一台服务器或是，单个请求一个页面可能就只会产生若干并发假设个，我们假设某个用户很猛，他喜欢快速拖拽打开你网站的多个网页，比如同时打开个，那么正常用户的正常最大并发你也可以基本确定了吧？即并发限制：=。如果有人同时刷新你几十个页面，要说没恶意你也不相信吧？
情况： 如果没有做动静分离，那么一个页面产生的并发可能就比较多了，每个、、图片都会产生一次请求。所以，在这种情况下就需要稍微计算一下你网站单个页面产生的并发请求，比如一个单页面会产生个请求，那么你也需要考虑用户可能会连续拖拽多个页面的情况，假设我允许用户可以同时刷新页面，那么并发限制就可以设置为了，依此类推。
容错：从和来看，其实是有一个盲点的，那就是如果用户是某个公司的统一出口，也就是代理上网，那么工具就容易误杀无辜了。所以，除了和，你还得考虑你网站的受众人群类型。比如，我就一个个人博客，同一时刻被一个公司的多名同时多窗口拖拽访问，这种情况也不多吧？如果可能存在这种受众人群，那么这个并发限制可以设置大一些，避免错杀无辜。当然，拉黑也就分钟而已，也不至于“一失足成千古恨”。。。
当然，不管哪种情况，并发限制都可以比预估设置高那么一些，这个自行斟酌吧！
②、不足与完善
是我最近利用闲暇时间，匆忙之作，难免会有各种问题。也没时间进行测试和完善。不过目前还是有数位站长在使用，暂未反馈异常。当然， 我分享的是在线安装方式，也是为后续的更新提供方便。不过对比我以前写的防御脚本，算是有了长足的进步了，很简单的安装，更强大的功能！
功能计划：
 在线升级功能已实现这个不用多说，现有的工具已经预留了，后面可能会加入版本判断和更新的功能。
 加入其他安全防护设置待定目前工具其实是赶鸭子上架一样，直接就检查，也没有对系统环境做一些初始化的设置。比如网站通用的设置、洪水攻击防御等。后续会在安装的时候会作为一个可选功能。
 集成傻瓜式的防火墙控制功能已实现并不是每个站长都会熟练操作，所以可能考虑给这个命令集成一个和 的功能，比如禁止一个，执行    即可，降低  的使用门槛。
另外，值得说明是，只适合裸奔的网站，而不适合使用的网站，因为使用之后，请求过来的都是节点，你总不能把节点也拉黑了吧？：其实也可以用，你把并发限制稍微设置高一些就好了，就算拉黑节点也就拉黑分钟而已，不至于影响过大
针对这个问题，后续我会找时间研究下直接从日志里面取得真实来源来拒绝访问。目前已经有了阶段性的进展了，敬请期待！
附录：更新记录
  ：
支持白名单为段，格式为段通用格式，比如 ；新增拉黑改为判断  是否已存在操作的判断方式；增加日志记录功能，每天一个日志文件，位于安装目录下的文件内；集成手动拉黑和解封功能，使用   拉黑，使用    解封。
  ：

新增在线更新功能，执行   即可检测是否有新版本：如果发现有新版本则显示更新内容，并提示是否执行更新。选择之后将会更新到新版本，需要重新配置，但是或端口白名单会保持不变。

新增端口白名单功能应网友需求，新增了这个端口白名单功能。在配置的最后一项会提示输入端口白名单：


如果需要排除某些端口，请如图最后一行所示，输入端口并已逗号分隔，比如 本次更新为非必须功能，在用的朋友可以按需更新，当然新增了在线更新这个功能，也强力推荐更新一下，方便后续检测是否是最新版本。更新难免存在不可意料的纰漏，使用中存在任何问题请留言告知，谢谢！
  ：

增加“永久”拉黑时长有网友反馈，需要设置更长的拉黑时间。原先的机制来看，如果设置拉黑时间过长，那么可能会产生很多后台释放黑名单脚本，占用系统资源。因此，版本加入永久拉黑设置。只要在安装的时候，设置拉黑时长为，则不会再产生后台释放脚本，也不会释放已拉黑的了：但是，考虑到灵活性问题，并没有在新版中加入    的保存命令，所以当你重启系统或者重启，这些拉黑的都将得到释放。当然，如果你真的想永久拉黑，请手动执行    即可。

注册开机启动新版本已将服务注册到了开机启动服务列表，重启系统不用在担心未启动了。

兼容  目前博客运行在  系统，所以将也做了一下兼容，其实就是在 上安装了。并且修复了系统对已拉黑的判断问题。：以上功能如果你觉得有用，可以执行   进行在线更新，记得是小写哦。


  ：

修复根据网友反馈，发现攻防测试中一个不能被拉黑，经过分析发现命中了白名单。而实际上白名单中并没有段，只因同属于一个网段。因此，在是否属于段的判断中，加入对斜杠的筛选，也就是说只判断白名单中存在斜杠的条目，简单粗暴！

    中间漏记了个小版本，也不记得修复了啥

日志级别、开关根据网友建议，新增日志控制开关，参数为_，支持 、和 个参数，其中表示仅记录拉黑和释放，记录全部日志，包括拉黑、释放的报错信息，表示关闭日志。如果需要使用该功能，可以执行   在线更新或直接重新安装。作者：

译自，  
当我们开始使用  时，我们很快会开始遇到疑惑。在哪里放置数据，组件间变化如何通信或如何管理状态？问题的答案往往是与场景相关，也有时候只是跟平常使用  库来做的练习与实验有关。 然而，有一种广泛使用并有助于组织基于的应用模式 —— 将组件拆分为展示组件和容器组件。
本文是  模式系列的一部分。检出这个仓库来了解在使用开发应用时使用的更多技术。
让我们从一个简单的例子开始，说明问题，然后将组件拆分为容器和展示组件。 我们将使用一个  组件。 它接受一个对象作为，并显示实时变化的时间。
    {
   {
    
     = {   }
    _ = _
  }
   {
      = _
     
      {  }  {  }  {  }
    
  }
   {
    _ = _ 
  }
   {
    _
  }
  _ {
          = 
      
      
      
     =         

     {    }
  }
  _ {
    {      }
  }
}

 ={   } 

在组件的构造函数中，我们将传递的对象存储到内部状态。 通过使用，我们每秒更新状态，组件被重新渲染。 为了使它看起来像一个真正的时钟，我们使用两个辅助方法 —— _和_。_方法是提取小时，分钟和秒，并确保他们遵循两位数格式。_以一秒为度量来改变当前的对象。
问题
在我们的组件这里有几件事情会发生。看起来这个组件有太多的职责。

它自己改变状态。 更改组件内部的时间可能不是一个好主意，因为只有知道当前的值。 如果系统的另一部分依赖于此数据，则很难共用它。
_实际上是做两件事 —— 它从日期对象中提取所需的信息，并确保这些值始终为两位数。 这看起来没问题，但如果提取的方法不是这个组件的一部分，这将是很好的。因为绑定了对象的类型作为一个。 也就是说它需要知道关于数据形态的细节。

解决思路
那么，让我们将组件分为两个部分  容器和展示组件。
容器
容器知道数据，知道数据的形态以及数据从何而来。 他们知道事务如何运作的细节或者说所谓的业务逻辑。 它们接收信息并对其进行格式化，以便由展示组件简单地使用。 通常我们使用高阶组件 来创建容器。 它们的方法仅包含展示组件。 在架构 的上下文中，这是绑定了的变化和调用的创建者的。
下面是我们的：
 
      展示组件

      {
   {
    
     = {   }
    _ = _
  }
   {
      { _ }
  }
   {
    _ = _ 
  }
   {
    _
  }
  _ {
     {
       
       
       
    }
  }
  _ {
    {      }
  }
}

它仍然接受日期对象，执行循环并了解有关数据，和的详细信息。 最终渲染到展示组件并传递小时，分钟和秒三个数字。
展示组件
展示组件是与展示的东西样子相关的。 他们有着让页面变得漂亮所需的额外的修饰。这样的组件不绑定任何东西，并且没有依赖性。 通常被实现为无状态功能组件  ，也就是说它们没有内部状态。
在我们的例子中，展示组件只包含两位数字的检查并返回标签：
 
    {
        = 
    
    
    
   =         

   {  }  {  }  {  }
}

好处
将组件拆分为容器和展示组件增加了组件的可重用性。 我们的函数组件可能存在于不改变时间或不使用的对象的应用程序中。 这是因为它是漂亮的傀儡。 没有关于数据的细节，只有它的初始形态和它来自哪里。
关于容器的好处是它们封装逻辑并且可以将数据注入到不同的渲染器中。 通常，导出容器的代码不直接导出一个类，而是一个函数。 例如，不是使用
   

      {
   {
      
  }
}

而是我们可以导出一个接受展示组件的函数：
   {
       {
     {
        
    }
  }
}

使用这种技术我们的容器是真正灵活的渲染其结果。 如果我们要从数字时钟的展示样式转换到模拟时钟的展示样式，这将是非常有用的。
因为我们对于我们的组件必须考虑更少，使得测试也会变得容易。 容器不关心东西，并且通常触发逻辑的动作由回调控制。展示组件只是呈现传入的，并且如果某处被点击填充数据，他们的单元测试或多或少地会检查正确的回调是否被调用。
其他资源

      
   “   ”

旁注
没有什么是一成不变的。现实组件有时有内部状态。容器可能有额外增加的部分。这里描述的概念没有严格的规则，怎么去做取决于具体的场景。

原文链接：


相关阅读推荐   组件化方案，  前端开发框架简介和 容器健康检查详解作者介绍：吴双桥 腾讯云工程师

本文主要介绍在 开始引入的非结构化数据类型的特性以及具体的实现方式包括存储方式。

首先介绍为什么要引入的原生数据类型的支持

接着介绍给用户提供的操作函数，以及路径表达式语法，结合两者，用户可以在数据库级别操作的任意键值和数据

最后，重点介绍在服务器侧的存储结构，这也是深入理解很多其他特性的根基；在最后介绍作为新数据类型的比较与排序规则之前，介绍了对类型数据建立索引的原理。


为什么的原生支持
  文档合法性
在对提供原生类型的支持之前，用户可以用或者类型来存储文档。但对于来说，用户插入的数据只是序列化后的一个普通的字符串，不会对文档本身的语法合法性做检查，文档的合法性需要用户自己保证。在引入新的类型之后，插入语法错误的文档，会提示错误，并在插入之后做归一化处理，保证每一个键对应一个值。
  更有效的访问
 本身提供了很多原生的函数以及路径表达式来方便用户访问数据。例如对于下面的文档：
 {        {    }     {    }       }
用户可以使用
获取{    }
获取 {    }  
还可以使用通配符  和  来进行模糊匹配，详见下一段。
  性能优化
在提供原生支持之前，如果用户需要获取或者修改某个文档的键值，需要把或者整个字符串读出来反序列化成对象，然后通过各种库函数访问数据。显然这样是非常没有效率的，特别是对较大的文档。而原生的性能，特别是读性能非常好。根据公司针对数据文档做的性能测试表明，同样的数据用和类型的查询性能差异达到两个数量级以上，而且用户还可以对经常访问的键值做索引，进一步提升性能。数据操作性能的提升是基于数据本身的存储结构的，下文会进一步介绍。
的操作接口及路径表达式
 的操作接口
根据官方文档的介绍，服务器端函数的实现需要满足以下条件：



         
        
              
      
       



          
          
       


提供的函数列表具体为：
 _ __ _ _
 _ _ _ _
_ _ _ _
_ _ _ _
__ _ _ _
以上函数的调用规则大多形如：
__     
第一个参数_为文档，或者是表里面的某一列，也可以是文档里面的嵌套子文档变量；
第二个参数为路径表达式，用来定位要访问的键，即路径表达式下面紧接着会介绍；
第三个参数有的函数可能没有，若有表示键对应的操作数值。
 路径表达式
为了更方便快速的访问的键值， 提供了新的路径表达式语法支持。前文提到的就是路径表达式的一个具体的示例。完整的路径表达式语法为：
 =       
 =    
 =          
 = 
 = 
 = 
 =  |  | 
 =    |  
 =    |   
  =  | 
 = 
还是以
    {        {    }     {    }       }
为例，再举几个例子说明：
 获取的值为  {    }  
 获取的值为  
 获取的值为 
 对比上面最后两个例子，可以看到用引号包围的表达式会被当作一个字符串键值。
 关于通配符和来进行模糊匹配需要做进一步的说明。
两个连着星号不能作为表达式的结尾，不能出现连续的三个星号
单个星号表示匹配某个对象中所有的成员
 表示匹配某个数组中的所有元素
表示所有以开始，以结尾的路径
 举个具体的例子，直接在命令行里面输入：
  _{        {    }     {    }       }
 得到显示结果： 。
的存储结构及具体实现
在处理时，使用的字符集，是和的超集。由于历史原因，这里并非是我们常说的 变长编码方案，而是自身定义的编码方案，最长为三个字节。具体区别非本文重点，请大家自行了解。
在内存中是以的形式表示文档，而且在解析某个具体的路径表达式时，只需要反序列化和解析路径上的对象，而且速度极快。要弄清楚是如何做到这些的，我们就需要了解在硬盘上的存储结构。有个有趣的点是，对象是的子类，在其基础上做了特化。
根据官方文档的表述：

               

                                                                   

                                        



我们来使用示意图更清晰的展示它的结构：

文档本身是层次化的结构，因而对存储也是层次化的。对于每一级对象，存储的最前面为存放当前对象的元素个数，以及整体占的大小。需要注意的是：

对象的索引图中橙色部分都是排序好的，先按长度排序，长度相同的按照 排序；索引图中黄色部分根据对应的的位置依次排列，最后面真实的数据存储图中白色部分也是如此

和的索引对存储了对象内的偏移和大小，单个索引的大小固定，可以通过简单的算术跳转到距离为的索引

通过源代码可以看到，在序列化文档时，会动态检测单个对象的大小，如果小于使用两个字节的偏移量，否则使用四个字节的偏移量，以节省空间。同时，动态检查单个对象是否是大对象，会造成对大对象进行两次解析，源代码中也指出这是以后需要优化的点

现在受索引中偏移量和存储大小四个字节大小的限制，单个文档的大小不能超过；单个的大小不能超过两个字节，即

索引存储对象内的偏移是为了方便移动，如果某个键值被改动，只用修改受影响对象整体的偏移量

索引的大小现在是冗余信息，因为通过相邻偏移可以简单的得到存储大小，主要是为了应对变长对象值更新，如果长度变小，文档整体都不用移动，只需要当前对象修改大小

现在对于变长大小的值没有预留额外的空间，也就是说如果该值的长度变大，后面的存储都要受到影响

结合的路径表达式可以知道，的搜索操作只用反序列化路径上涉及到的元素，速度非常快，实现了读操作的高性能

不过，对于大型文档的变长键值的更新操作可能会变慢，可能并不适合写密集的需求


的索引
现在不支持对列进行索引，官网文档的说明是：

                           

虽然不支持直接在列上建索引，但规定，可以首先使用路径表达式对文档中的标量值建立虚拟列，然后在虚拟列上建立索引。这样用户可以使用表达式对自己感兴趣的键值建立索引。举个具体的例子来说明：
   
     _
    
   

插入它的数据的格式为：
{
   
   {
      _
      
      
      _
      _
      _
      _
      _
      
   }
}
使用：
    _   _
     _
两个步骤，可以对列中键值下的键创建索引。
其中，_列就是新添加的虚拟列。之所以取名虚拟列，是因为与它对应的还有一个存储列 。它们最大的区别为虚拟列只修改数据库的，并不会存储真实的数据在硬盘上，读取过程也是实时计算的方式；而存储列会把表达式的列存储在硬盘上。两者使用的场景不一样，默认情况下通过表达式生成的列为虚拟列。
这样虚拟列的添加和删除都会非常快，而在虚拟列上建立索引跟传统的建立索引的方式并没有区别，会提高虚拟列读取的性能，减慢整体插入的性能。虚拟列的特性结合的路径表达式，可以方便的为用户提供高效的键值索引功能。
比较与排序
值可以使用=  =  =  = =等操作符，  等操作符现在还不支持。值使用的两级排序规则，第一级基于的类型，类型不同的使用每个类型特有的排序规则。
类型按照优先级从高到低为










 

优先级高的类型大，不用再进行其他的比较操作；如果类型相同，每个类型按自己的规则排序。具体的规则如下：

 比较两个值前个字节，如果前个字节相同，短的值小
 按照所表示的时间点排序
 小于
 两个数组如果长度和在每个位置的值相同时相等，如果不想等，取第一个不相同元素的排序结果，空元素最小
 如果两个对象有相同的，并且对应的也都相同，两者相等。否则，两者大小不等，但相对大小未规定。
 取两个较短的那个长度为，比较两个值编码的前个字节，较短的小，空值最小
 包括精确值和近似值的比较，稍微有点复杂，可能出现与直觉相悖的结果，具体参见官方文档相关说明。

任何值与的常量比较，得到的结果是。对于值和非值的比较，按照一定的规则将非值转化为值，然后按照以上的规则进行比较。
小结
本文主要介绍了在之后引入的原生支持的特性，说明了引入类型的好处，并结合具体的示例介绍了在类型上对外的接口以及引入的新语法规则。此外，还重点介绍了在硬盘上的存储结构，简要分析了这种存储结构的优势和不足。最后还介绍了的索引原理，以及比较和排序规则。相信理解了本文介绍的内容，关于文中没有提到的部分内容也较容易理解。
更多数据库文章，请关注腾讯云数据库公众号 

相关推荐
 云数据库   语句复制的缺陷列举 数据库的高可用性分析全球化在整个互联网领域仍是大势所趋，而在红海时代来临的游戏行业，“游戏全球化”已成为近年来的热点。游戏全球化运营，对节点分布、网络稳定、网络加速、安全防护等云端基础能力提出了很高要求。腾讯云作为国内游戏行业领先的公有云，腾讯云的全球化布局一直走在快车道，更好地助力游戏厂商实现全球化运营。本期腾讯云沙龙北京站，与来宾聚焦探讨腾讯云在全球化方面的技术布局，并邀请到了游戏全球化先行者的代表分享实践与洞察。 
演讲主题：猎豹游戏出海经验分享
嘉宾简介：

佟卉斌 猎豹游戏技术总监北京工业大学硕士。年开始从事游戏开发和运营工作，年加入猎豹移动部门任技术总监，从事针对海外的网络游戏研发工作。
演讲概要：
猎豹作为中国游戏出海的先行者，在游戏全球化过程中积累了大量或成功、或失败的经验。本次主要会针对《弓箭手大作战》和《钢琴块二》等游戏中全球化游戏研发的一些经验和一些遇到的问题的解决方案进行分享。 
视频回放：

下载：作者：徐汉彬 

一、人工智能和新科技革命
年围棋界发生了一件比较重要事，以连胜横扫天下，击败各路世界冠军，人工智能以气势如虹的姿态出现在我们人类的面前。围棋曾经一度被称为“人类智慧的堡垒”，如今，这座堡垒也随之成为过去。从年三月份击败李世石开始，全面进入我们大众的视野，对于它的讨论变得更为火热起来，整个业界普遍认为，它很可能带来下一次科技革命，并且，在未来可预见的多年里，深刻得改变我们的生活。

其实，除了可以做我们熟知的人脸、语音等识别之外，它可以做蛮多有趣的事情。
例如，让学习大量古诗之后写古诗，并且可以写出质量非常不错的古诗。

又或者，将两部设计造型不同的汽车进行融合，形成全新一种设计风格的新汽车造型。
 
还有，之前大家在朋友圈里可能看过的，将相片转换成对应的艺术风格的画作。

当前，人工智能已经在图像、语音等多个领域的技术上，取得了全面的突破。与此同时，另外一个问题随之而来，如果这一轮的浪潮真的将会掀起新的科技革命，那么在可预见的未来，我们整个互联网都将发生翻天覆地的变化，深刻影响我们的生活。那么作为普通业务开发工程师的我，又应该以何种态度和方式应对这场时代洪流的冲击呢？
在回答这个问题之前，我们先一起看看上一轮由计算机信息技术引领的科技革命中，过去多年中国程序员的角色变化：

通过上图可以简总结：编程技术在不断地发展并且走向普及，从最开始掌握在科学家和专家学者手中的技能，逐渐发展为一门大众技能。换而言之，我们公司内很多资深的工程师，如果带着今天对编程和计算机的理解和理念回到年，那么他无疑就是那个时代的计算机专家。
如果这一轮浪潮真的会带来新的一轮科技革命，那么我们相信，它也会遵循类似的发展轨迹，逐步发展和走向普及。如果基于这个理解，或许，我们可以通过积极学习，争取成为第一代工程师。
二、深度学习技术
这一轮的技术突破，主要源于深度学习技术，而关于和深度学习的发展历史我们这里不重复讲述，可自行查阅。我用了一个多月的业务时间，去了解和学习了深度学习技术，在这里，我尝试以一名业务开发工程师的视角，以尽量容易让大家理解的方式一起探讨下深度学习的原理，尽管，受限于我个人的技术水平和掌握程度，未必完全准确。
 人的智能和神经元
人类智能最重要的部分是大脑，大脑虽然复杂，它的组成单元却是相对简单的，大脑皮层以及整个神经系统，是由神经元细胞组成的。而一个神经元细胞，由树突和轴突组成，它们分别代表输入和输出。连在细胞膜上的分叉结构叫树突，是输入，那根长长的“尾巴”叫轴突，是输出。神经元输出的有电信号和化学信号，最主要的是沿着轴突细胞膜表面传播的一个电脉冲。忽略掉各种细节，神经元，就是一个积累了足够的输入，就产生一次输出兴奋的相对简单的装置。
 
树突和轴突都有大量的分支，轴突的末端通常连接到其他细胞的树突上，连接点上是一个叫“突触”的结构。一个神经元的输出通过突触传递给成千上万个下游的神经元，神经元可以调整突触的结合强度，并且，有的突触是促进下游细胞的兴奋，有的是则是抑制。一个神经元有成千上万个上游神经元，积累它们的输入，产生输出。

人脑有亿个神经元，万亿个突触，它们组成人脑中庞大的神经网络，最终产生的结果即是人的智能。
 人工神经元和神经网络
一个神经元的结构相对来说是比较简单的，于是，科学家们就思考，我们的是否可以从中获得借鉴？神经元接受激励，输出一个响应的方式，同计算机中的输入输出非常类似，看起来简直就是量身定做的，刚好可以用一个函数来模拟。
 
通过借鉴和参考神经元的机制，科学家们模拟出了人工神经元和人工神经网络。当然，通过上述这个抽象的描述和图，比较难让大家理解它的机制和原理。我们以“房屋价格测算”作为例子，一起来看看：
一套房子的价格，会受到很多因素的影响，例如地段、朝向、房龄、面积、银行利率等等，这些因素如果细分，可能会有几十个。一般在深度学习模型里，这些影响结果的因素我们称之为特征。我们先假设一种极端的场景，例如影响价格的特征只有一种，就是房子面积。于是我们收集一批相关的数据，例如，平米万、平米万等一系列样本数据，如果将这些样本数据放到而为坐标里看，则如下图：
 
然后，正如我们前面所说的，我们尝试用一个“函数”去拟合这个输入面积和输出价格，简而言之，我们就是要通过一条直线或者曲线将这些点“拟合”起来。
假设情况也比较极端，这些点刚好可以用一条“直线”拟合真实情况通常不会是直线，如下图：

那么我们的函数是一个一次元方程 =  ，当然，如果是曲线的话，我们得到的将是多次元方程。我们获得这个 =  的函数之后，接下来就可以做房价“预测”，例如，我们可以计算一个我们从未看见的面积案例平方米，它究竟是多少钱？
这个新的样本案例，可以通过直线找到对应的点黄色的点，如图下：

粗略的理解，上面就是的概括性的运作方式。这一切似乎显得过于简单了？当然不会，因为，我们前面提到，影响房价其实远不止一个特征，而是有几十个，这样问题就比较复杂了，接下来，这里则要继续介绍深度学习模型的训练方式。这部分内容相对复杂一点，我尽量以业务工程师的视角来做一个粗略而简单的阐述。
 深度学习模型的训练方式
当有好几十个特征共同影响价格的时候，自然就会涉及权重分配的问题，例如有一些对房价是主要正权重的，例如地段、面积等，也有一些是负权重的，例如房龄等。
初始化权重计算
那么，第一个步其实是给这些特征加一个权重值，但是，最开始我们根本不知道这些权重值是多少？怎么办呢？不管那么多了，先给它们随机赋值吧。随机赋值，最终计算出来的估算房价肯定是不准确的，例如，它可能将价值万的房子，计算成了万。
损失函数
因为现在模型的估值和实际估值差距比较大，于是，我们需要引入一个评估“不准确”程度的衡量角色，也就是损失函数，它是衡量模型估算值和真实值差距的标准，损失函数越小，则模型的估算值和真实值的察觉越小，而我们的根本目的，就是降低这个损失函数。让刚刚的房子特征的模型估算值，逼近万的估算结果。
模型调整
通过梯度下降和反向传播，计算出朝着降低损失函数的方向调整权重参数。举一个不恰当的比喻，我们给面积增加一些权重，然后给房子朝向减少一些权重实际计算方式，并非针对单个个例特征的调整，然后损失函数就变小了。
循环迭代
调整了模型的权重之后，就可以又重新取一批新的样本数据，重复前面的步骤，经过几十万次甚至更多的训练次数，最终估算模型的估算值逼近了真实值结果，这个模型的则是我们要的“函数”。

为了让大家更容易理解和直观，采用的例子比较粗略，并且讲述深度学习模型的训练过程，中间省略了比较多的细节。讲完了原理，那么我们就开始讲讲如何学习和搭建。
三、深度学习环境搭建
在个月前，人工智能对我来说，只是一个高大上的概念。但是，经过一个多月的业余时间的认真学习，我发现还是能够学到一些东西，并且跑一些和应用出来的。
 学习的提前准备
部分数学内容的复习，高中数学、概率、线性代数等部分内容。累计花费了个小时，挑了关键的点看了下，其实还是不太够，只能让自己看公式的时候，相对没有那么懵
基础语法学习。花费了个小时左右，我以前从未写过，因为后面的框架的使用是基于的
的深度学习开源框架。花费了多个小时去看
数学基础好或者前期先不关注原理的同学，数学部分不看也可以开始做，全凭个人选择。
 的开源深度学习框架
深度学习框架，我们可以粗略的理解为是一个“数学函数”集合和训练学习的执行框架。通过它，我们能够更好的将的模型运行和维护起来。
深度学习的框架有各种各样的版本、、等等，我只接触了的，因此，后面的内容都是基于展开的，它的详细介绍这里不展开讲述，建议直接进入官网查看。非常令人庆幸的是比较早就有中文社区了，尽管里面的内容有一点老，搭建环境方面有一些坑，但是已经属于为数不多的中文文档了，大家且看且珍惜。
  的中文社区
  的英文社区
 环境搭建
环境搭建本身并不复杂，主要解决相关的依赖。但是，基础库的依赖可以带来很多问题，因此，建议尽量一步到位，会简单很多。
操作系统
我搭建环境使用的机器是腾讯云上的机器，软件环境如下：
操作系统：  位 
因为这个框架依赖于和 。比较旧的版本的一般都是以及版本比较低的，会产生比较的多基础库依赖问题。而且，作为的底层库，牵一发动全身，直接对它升级是比较复杂，很可能会带来更多的环境异常问题。
软件环境
我目前安装的版本是，建议可以采用  的方式安装相关的原来软件。然后，再安装 内的组件包管理器，安装好之后，接下来的其他软件的安装就相对比较简单了。
例如安装，可通过如下一句命令完成它会自动帮忙解决一些库依赖问题：
   
这里需要特别注意的是，不要按照的中文社区的指引去安装，因为它会安装一个非常老的版本，用这个版本跑很多都会遇到问题的。而实际上，目前通过上述提供的命令安装，是 的版本了。

下的其他需要安装的关键组件：

 ，深度学习的核心框架
 ，图像处理相关，部分例子会用到
 ，图像处理相关，部分例子会用到

除此之后，当然还有另外的一些依赖组件，通过 命令可以查看我们安装的组件：

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

按照上述提供的来搭建系统，可以规避不少的环境问题。
搭建环境的过程中，我遇到不少问题。例如：在跑官方的例子时的某个报错，      ，就是因为安装的的版本比较老，缺少模块导致的。而且，还有各种各样的。不要问我是怎么知道的，说多了都是泪啊
更详细的安装说明：   
环境测试运行
测试是否安装成功，可以采用官方的提供的一个短小的例子，生成了一些三维数据 然后用一个平面拟合它们官网的例子采用的初始化变量的函数是__，该函数在新版本里已经被废弃了：

=

   
   

 使用  生成假数据  总共  个点
_ =    随机输入
_ =   _  

 构造一个线性模型
 
 = 
 = _   
 =  _  

 最小化方差
 = _  _
 = 
 = 

 初始化变量旧函数__已经被废弃，替换为新函数
 = __

 启动图 
 = 


 拟合平面
    
    
        == 
           

 得到最佳拟合结果      
运行的结果类似如下：
 
经过次的训练，模型的参数逐渐逼近最佳拟合的结果     ，另外，我们也可以从代码的“风格”中，了解到框架样本训练的基本运行方式。虽然，官方的教程后续会涉及越来越多更复杂的例子，但从整体上看，也是类似的模式。

步骤划分

准备数据：获得有标签的样本数据带标签的训练数据称为有监督学习；

设置模型：先构建好需要使用的训练模型，可供选择的机器学习方法其实也挺多的，换而言之就是一堆数学函数的集合；损失函数和优化方式：衡量模型计算结果和真实标签值的差距；

真实训练运算：训练之前构造好的模型，让程序通过循环训练和学习，获得最终我们需要的结果“参数”；

验证结果：采用之前模型没有训练过的测试集数据，去验证模型的准确率。


其中，为了基于实现高效的数学计算，通常会使用到一些基础的函数库，例如采用外部底层语言实现，但是，从外部计算切回到也是存在开销的，尤其是在几万几十万次的训练过程。因此，不单独地运行单一的函数计算，而是先用图描述一系列可交互的计算操作流程，然后全部一次性提交到外部运行在其他机器学习的库里，也是类似的实现。
所以，上述流程图中，蓝色部分都只是设置了“计算操作流程”，而绿色部分开始才是真正的提交数据给到底层库进行实际运算，而且，每次训练一般是批量执行一批数据的。
接第二篇《人人都可以做深度学习应用：入门篇下》

文章来源公众号 小时光茶社 

相关推荐
效果广告点击率预估近期实践：深度学习免费体验腾讯云服务器作者：腾讯数据中心，微信号：_


月日，第三届腾讯数据中心云分享日暨腾讯合作伙伴峰会在上海召开，本届分享日的主题是“云集响应，赢粮景从”。数字经济时代，传统行业纷纷开始与互联网技术深度融合，从而提升各产业效率，助力供给侧结构改革和经济转型升级。一时间各行各业努力拥抱“互联网”，呈现一呼百应之势，可谓“云集而响应，赢粮而景从”。
本次峰会吸引了来自行业、金融机构、政府组织等百余位行业专家与合作伙伴齐聚一堂。众所周知，云是“互联网”的基础设施，而数据中心则是云服务背后的刚性保障。在本场腾讯数据中心云分享活动中，相关企业专家进行了深入浅出的分享，展示了腾讯数据中心和云服务的思考和实践，与会嘉宾还就行业发展趋势展开了精彩的讨论。


现场座无虚席

腾讯数据中心负责人钟远河表示：目前国内三家企业所拥有的服务器总量之和，还不及亚马逊公司的一半。尽管腾讯已经是国内拥有服务器数量最多的公司，但仍需要不断提升数据中心的能力，从而确保为互联网用户提供坚实可靠的服务。


腾讯数据中心负责人钟远河

腾讯云资源总监阮梦表示：腾讯云目前在全球布局了个大区、个可用区的集成数据中心，拥有超过个节点。腾讯云是国内唯一一家同时提供虚拟机和物理机两种形态公有云服务的云计算服务商。

【敏捷应对，为数字经济构建基础设施】
目前中国经济发展呈现出消费升级、服务驱动的新特征，传统产业正在与互联网新技术深度融合。腾讯公司董事局主席、首席执行官马化腾曾经表示，“互联网”是手段，数字经济是结果。在实体经济全面数字化转型的过程中，云和数据中心将会提供互联网的基础设施和技术支撑。
在钟远河看来，腾讯数据中心服务的第一个特点是“敏捷”，这与腾讯产品快速迭代的价值观是相吻合的。由于支撑腾讯数百条产品线和海量用户，数据中心的需求变化也在不断加速——变化周期从以前的按月变化，到现在的按周变化。
在需求的驱动之下，腾讯数据中心走上了敏捷供给的道路，从以“微模块”为核心技术的第三代，到目前正在逐步使用的第四代技术，演进的速度越来越快。这种面向需求敏捷应对的能力，在数字经济时代就显得尤为重要。

此外，随着“一带一路”战略的深化，中国企业正走向海外，腾讯在国外的数据中心为出海企业的业务部署提供了坚实保障。腾讯数据中心以高标准的基础设施、高品质网络要求、柔性云服务模式为出海企业提供可用水平高达的优质服务。 
【开放共赢，与合作伙伴共建和谐生态】
腾讯数据中心经过十几年的发展，积累了丰富的规划、设计和运营的经验，形成了清晰的技术发展线路。据了解，腾讯数据中心一直服务于腾讯自身业务，直到五年前才对外开放，并以云服务的方式将这种能力开放给全行业。
“在支撑腾讯云发展的过程中，我们发现云对数据中心的需求也在分化，比较典型的有，公有云、混合云黑石、托管、金融云、高防云。”钟远河提出。
在此背景下，腾讯数据中心根据业务特性，提供垂直细分领域的解决方案，在保障安全性的同时，助力数字经济的多样化发展。如黑石和混合云的数据中心专区，重点从客户设备与基础设施适配性需求考虑；而金融云的机房，要求高安全、高可用性、在技术架构上更偏保守；而腾讯的高防云和高防数据中心，定位于军用级、高防护、高可用，为中国企业的核心数据和信息打造一个坚固安全的保险柜。
“金融云有对监管和安全的需求，但滴滴的需求就是完全不同的，而搜索类的又是另外一种”，钟远河表示：“有的对安全要求高，有的对成本要求高，有的对网络要求高”。通过几年来的开放所积累的经验，腾讯数据中心和腾讯云已经可以做到为不同合作伙伴提供定制化的解决方案。
【绿色节能，向互联网注入环保动能】
统计数据显示，全球约的电力为数据中心消耗。万台服务器规模的数据中心占地面积约为万平方米，耗电量却堪比一个中等规模城市。
钟远河认为，绿色节能是腾讯数据中心技术发展的一个重要方向。目前，以为代表的腾讯第三代数据中心技术，已经被大规模应用，部署的服务器量超过万，平均的值在左右，比业界平均水平省电以上。腾讯正在试点中的第四代数据中心，去年在贵阳工信部的实测为，这是权威机构在国内实测的最低的之一。


腾讯数据中心技术发展历程

上海青浦合建数据中心冷热电三联供项目，是腾讯在数据中心新能源领域的最新尝试，也是国内数据中心领域的一次规模化应用。通过能源梯级利用，大大提高一次能源利用率，同时为电网提供能源补给，实现数据中心部分的错峰用电，具有良好的社会效益。


腾讯青浦数据中心俯视图

除了会议现场的分享，本次活动还包括了实地探访腾讯青浦数据中心环节。近百位嘉宾亲身感受到了腾讯青浦数据中心，作为亚太地区最先进的云计算和云存储基础设施平台之一，为腾讯云及腾讯众多业务提供的坚实支撑。最近看到一篇文章，里面以酒店为比喻，对公有云的商业模式进行了分析，还比较生动、形象。在社区里摘录如下：
公有云的商业模式可分为六大阶段。
第一阶段：基础服务阶段，也就是云计算替换传统数据中心、服务器和网络设备的阶段。这就类似于酒店，自己租一个大楼，自己装修，分成一个个小房间，然后出租给别人。批发零售和复用率高成就了主要盈利模式，当然其弊端就是客户黏性低和可复制性强。于是便发展进入第二阶段。
第二阶段：后端服务。用户在使用云计算之后，会产生、数据库、大数据分析等一系列后端服务需求。较之酒店的发展，即是引入早餐服务的阶段。酒店早餐的高毛利不仅带来了更多的利润空间，同时也增加了客户黏性。
第三阶段：软件超市。类似于酒店客房，客人入住后可以自由购买酒水和饮料，产生的消费由酒店和供应商分成。同理，当企业用户习惯了云平台，习惯了在云端购买软件，云服务商便可以像苹果的 一样在云上销售各种软件，进而扩展利润渠道。
第四阶段：服务超市。以安全服务为例，以前是企业自行购买安全设备，但是现在公有云模式下购买安全设备后，还得在云上找安全服务的厂商来提供安全服务。这就像极了酒店的洗衣服务，众多用户黏性较强的增值服务的一种。
经历以上四个阶段之后，云上会产生庞大的数据积累，那么探索数据产生的巨大价值则是云厂商接下来需要考虑的核心问题。
接着进入第五个阶段：大数据阶段。然而，大数据阶段的商业模式到底是什么，目前还尚不明晰、仍处于摸索阶段。目前在尝试“安全屋”的解决方案，即为用户提供一个安全的数据交换平台，希望为大数据的商业模式打开思路。
第六阶段，则是目前大热的人工智能。尽管谷歌、亚马逊、百度、阿里等巨头企业都在布局，但现阶段人工智能概念大于落地。落地有三个要求：一是要有足够的数据，二是要有足够的计算能力，三则是要有足够的行业应用，云计算正能很好地满足这三个要求。作者：郑小辉
团队：腾讯移动品质中心

前言
和反射执行，会穿插在各章节中，因此不单独成节了。
一、 业务代码结构分析
 架构改革后，结构不再是一般的和里面事件点击了，而是加入了引擎。
目前的架构如下：

可以看到：
、弱化了
、统一用引擎加载
、在各中定义各组件，并在自定义组件中实现事件。
、的入口 就变成了的入口
二、测试切入点
以上结构分析可知： 测试切入点为 。
三、测试工程建立与创建
、测试目录建立
  给每一个已经默认建立好测试工程了，如下图：
目录：为 ，层的测试，运行在真机或模拟器上，主要写集成用例和涉及组件和环境的一些用例。比如，，，等。
目录： 为  ，层的测试，部分依赖环境的测试。主要写的单元测试，不同链路的接口测试，依赖环境较单一的测试。

、测试库依赖
工欲善其事，必先利其器。先把需要的依赖库加进来。
修改，增加如下内容：
指定运行器
 

有混淆的时候，指定混淆文件：

加入依赖库：
 
到此，测试环境步骤已经搭建完毕。可以开始创建测试用例了。
、创建
 上，打开你想要写用例的业务代码，按 ，就会弹出创建测试用例框，选择  。

在弹出框上，选择你要测试的方法。
 
测试环境支持如下几种：用还是，见前面文章说明。
建议：为了保持和的统一，建议统一用。
 
弹出选择是创建  还是   ：
根据被测方法情况选择对应目录；
也可以直接选，因为  可以运行在中。
 
、运行
运行 目录下的测试用例： 右键 选择  ，就可以直接运行。
运行目录下的测试用例： 先连接手机或模拟器，再运行。
测试代码空白处，右键，选择 ，就可直接运行了。快去试试你第一个测试用例吧。            

四、级白盒测试
、方式一：
新建测试 类。
如业务中含有如下方法：

则测试代码如下： 

、方式二：
因为可以调用业务代码。如果业务中有单列获取，则可直接调用获取。
五、的白盒测试
假设如图： 
 
对应的如图：其中 都是方法。都被层调用。                

则测试代码如下：
 
带参数测试： 

六、异步线程的白盒测试
通常开发中使用异步的方式有如下几种：
、 及单例方式
、方式
、方式
、方式
这里选取常见的种方式举例：
方式
业务代码如图：可以看到是内部的。
 
则测试代码如下：                  

七、异步回调的白盒测试
业务代码如下： 异步方法中，接收一个，现在要测试这个异步方法，思路见前章节。
 
则测试代码如下：
 
八、覆盖率与测试报告
、覆盖率情况：
还未完全写完用例的情况下， 白盒测试实践模块覆盖率。
 
、测试报告
和报告是分开的，不过可以开发代码合并成一个报告：

 
搜索微信公众号：腾讯移动品质中心，获取更多测试干货！近日，「爸爸去哪儿」节目组推出的「测一测我和老爸有多像？」爆出第五季五组嘉宾组合的测试数据，吸引了一众粉丝们纷纷围观打。
一起看看吴尊、陈小春、杜江、刘畊宏和实习奶爸邓伦的宝贝们，和亲爹们有几分相似吧！

和两姐弟颜值完胜吴尊！相似度！和陈小春难道真是一个模子刻出来的？

杜江
杜江颜值逆天有木有？当一众女粉丝疯狂打的时候，嗯哼杜宇麒小朋友可是表示不服啦！有图有真相

左图为嗯哼杜宇麒小朋友  右图为帅爸爸杜江
测试结果是相似度仅为！！！不得了！嗯哼小朋友的颜值把他的帅爸爸都甩出三条街！还不得不说小朋友很会挑，完美保留下帅爸爸的迷人小眼皮

小泡芙妥妥地把刘畊宏爸爸的基因优化了一把，而作为实习奶爸的邓伦和素人萌娃小山竹竟然也测出，这着实让小编大！吃！一！惊！只能说导演真是太会选角了！
看完爱豆和宝贝们的测试结果，你是不是和小编一样也很想测测自己和老爸老妈有几分像呢？
相信老铁们都被问过好多次长得像不像爸爸小编之前一直觉得自己和老爸帅得不要太雷同，今天正好测测看我是不是老爸用再复制出来的！
老铁们还在等什么？赶紧上车！长按二维码扫一扫 马上去体验测完记得发到家族微信群里调戏一下老爸哦

长按二维码扫一扫

把老爸老妈妥妥地逗乐了一番之后，你是不是跟小编一样也十分好奇，是什么样的黑科技，可以让大家测出自己和老爸有多像？
背后黑科技可以有多少种玩法？能创造出多少种可能性？
快上车，跟小编一起来一探究竟吧
经过一番打探，原来本次「爸爸去哪儿」推出的黑科技应用「测一测我和老爸有多像？」，是腾讯开放平台腾讯优图联合爸爸去哪儿跨界推出的互动娱乐方新玩法，这项黑科技玩法依赖的是腾讯优图实验室的人脸识别与人脸对比能力。

访问「腾讯开放平台|人工智能」官网即可体验该功能
腾讯人脸识别基于腾讯优图领先的深度学习算法和海量数据集，对图片和视频源中面部特征进行提取分析。涵盖人脸检测与分析、五官定位、人脸对比与搜索、活体检测、人脸关键点追踪等。

除了像「爸爸去哪儿」这样的互动玩法，此类能力还可广泛应用于安防监控、人脸美化、人脸动态表情贴图、智能相册分类、金融业务办理、精准寻亲等与大家生活密切相关的应用场景。
样本丰富、追踪稳定、识别率高、算法领先评测以保持世界领先以上种种，都为越来越多选择腾讯人脸识别的开发者们提供坚实的技术保障。
更多计算机视觉、自然语言处理及智能语音等能力，欢迎访问「腾讯开放平台|人工智能」官网 或 扫一扫小程序码 进行体验

用户粉丝们，请期待越来越多的程序员们通过调用腾讯能力创造出更多的应用玩法，科技很，未来很近！
开发们，加快你们的脚步，驾驭起腾讯人工智能技术引擎，用你们的能力为亿级用户带来基于能力的全新体验吧

本文来源于 腾讯  加速器 微信公众号网址 作者 |陈泽滨编辑 | 顾乡
从事开发几年，越来越发现，我们的开发者往往聚焦在程序的开发，如何实现一个功能，如何写好一行代码。但对应用开发到发布过程中必不可少的一环，证书签名相关部分，却只是一知半解。真正过程中遇到问题：如真机调试、团队开发证书环境同步，产品发布上架，才胡乱折腾一通，最终解决问题的时候其实对证书的构成与机理还是一无所知，不知所以然。
本文从证书体系的基本构成模块     入手，一步步解释各模块的内容与注意项；同时文末简单补充了证书日常管理经验项。力求为大家答疑解惑，补上应用开发中不可或缺却往往被人忽视的一个知识面。
  证书
代码签名可以让系统确保你的应用来源，并确保你的应用不被修改执行代码修改后，原签名将失效。
首先你要有一个证书，通过的证书助理生成  文件后，即可进一步得到最后的证书。完整的证书包含公钥与私钥，也就是所谓的非对称加密方式。在这里，公钥用于验证，私钥用于签名。与此同时，仅包含公钥的证书文件将会被放置在开发帐号下提供到开发团队人员下载共享使用。然而，我们知道仅包含公钥的证书是不具备签名能力，而私钥又保存在生成证书的机器内，所以当其他开发人员需要使用这份证书时候，我们需要将完整的公钥私钥导出生成个人信息交换文件，这样的证书环境才是完整可用的。
特别值得一提的是，我们日常遇到的证书，也就是因为开发人员当下的开发环境没有包含可用的私钥，相当于重新申请证书，暴力操作过后其他开发人员的旧证书包含私钥将不可用，需要的开发人员将最新的证书信息同步出来。

证书分为开发与发布两类，各自用途顾名思义，这里不再累述。
  
注册一个用于唯一标识一个或一组，这里的应用程序和是相对应的。为了确保的唯一性，它的命名必须严格按照规范：
、主程序、插件：


、：

、 ：

、 ：

、  ：

、 ：

每个可以设置对应的服务开关如、 、等等，生成同时按照实际需要对应配置即可。
  设备
这里的设备就是指的可调试的设备，可以是、、、 甚至是 。新增一个设备到帐号下可以进行设备调试，仅需要提供对应名称与，但是，一个萝卜一个坑，一个帐号最多仅支持加入个设备，即便你后续删除设备，用掉的名额也不会立刻恢复，直到来年开发者帐号的 开始时，才能选择删掉一些设备来恢复名额，或清空所有设备恢复到最多个名额。
  描述配置文件 
 文件将上文提及的相关信息、、都打包在内。 本质上是一个文件，以为例，它一般包含但并不只以下内容：
、
、
、
、
、
、
、
、
 
系统根据配置文件提供的信息进行一一校验，从到，从数字证书到设备等，最后运行应用程序到设备。如下所示：

此外，与  类似，它没有配置信息。
  证书管理
开发团队的人员越多，合理的证书管理愈显重要。流程上，为保证日常开发应用程序的安全与效率，无论是大到公司的发布证书抑或是小到项目组的团队个人开发证书，我们都尽量做到：
、帐号密码统一由一个关键接口人维护证书管理员；
、开发人员统一到证书管理员领取文件与 文件进行应用开发或发布；
、新增设备，提供设备名与到证书管理员添加。证书管理员更新后，周知并同步新的到团队开发人员。
补充提醒：
、文件与 文件同步到，可高效并及时同步整个团队；
、严格控制调试设备的加入，确保随时有可用名额。

相关推荐
经验之道：最有效的内存泄漏检测 启动连续闪退保护方案高性能图片架构与设计接触
内网的尝试
可能有点特别，我刚开始接触与网站相关是在一个关于这个漏洞系统的搭建上。那时破晓团队的创始人之一到我们学校来有一个讲座，他讲了很多看起来特别高大上的东西。演讲后有一个面基会，我就去参加并找到他，并表示想学一些网络安全技术，希望他能帮我引进门。他就给我介绍了很多东西，其中就包括了这个漏洞平台，于是百度安装方法，找到了一篇上的文章：新手指南：手把手教你如何搭建自己的渗透测试环境接触到了这款软件。但是安装了软件之后一脸懵逼，完全不懂，还好教程上边有详细的介绍，一步一步，虽然不理解，但是总归是成功安装了，在电脑上输入，成功进入！接下来问题就来了，我要如何让别人访问这个漏洞系统呢？教程写着：，于是我傻乎乎的在别的电脑上输入进去，结果不行，一番苦思冥想，终于尝试把“”替换为我电脑内网的，成功了，有一点点小激动，也有了一些明悟，地址似乎就是相当于一台电脑的标志，每一台处于同一内网环境的电脑都有与其唯一对应的地址，通过这个可以访问这台电脑服务器的数据。之后我又尝试了用自己所学的知识写了网页放到\目录，然后访问该电脑的，果然可以打开网站，仿佛明白的从小到大一直在访问的网站的一点工作方法。
公网服务器被黑
之后偶然的一个机会得知了服务器运营商的存在，比如腾讯云、阿里云、百度云等等，于是我就在腾讯云上试用了一台服务器，用了系统，有天时间，建议通过系统自带的远程桌面连接，方法为：

按组合键，并在运行中输入；
在跳出来的界面输入你的服务器公网地址，并按提示输入用户名和密码即可。第一件事就是在上边安装了，然后把\目录下文件替换为，接着把地址放到了一个交流群里，当天晚上，有个人在群里问我，这是你的网站吗？我说是，他说你改一个文件给我看看，我就改了，然后我的服务器就被黑客拿下了，还留了后门……这之后才知道是不能乱放的，不过起码到此为止，我已经可以建立一个外网可以访问的网站了。深入
有了模样
我在阿里云的首页上看到有域名注册，于是尝试着注册了我的第一个域名：这个域名现在已经不用了，所以打码了，记得是块钱首年，嘿嘿，但还是不知道要怎么才能使得访问域名就能访问服务器。因为一直自学，我花费了好几天时间，才知道有域名解析这种东西，于是点击域名管理，找到我的域名后点击解析，点击添加记录，主机记录用了，记录值就填上了我腾讯云服务器的地址，然后访问 ，成功访问到了我的网站。再之后我开始自己手写网站，命名为，放到服务器里，结果在我访问服务器的时候，浏览器直接列出了我的网站目录默认开启了目录列表，不然应该是禁止访问，要手动点击才能打开网站，这可别扭死了！如下图为列出目录下图为然后尝试各种姿势百度，百度了好长好长时间估计这种人尽皆知的东西都没人懒得说，才看到了被一句带过的，于是把网页重命名为修改配置文件也是可以修改默认主页的，成功了！至此，我的网站终于看起来像是一个网站了！如图为我当时建立网站之一：一服多站
之后随着对的了解，萌生了建立一个资源站的想法，然后又想建立一个自己主页这也算是一个小时候的梦想吧，但是服务器只有一台，只有一个，如果都放在同一个目录下用同一个域名的话总觉得别扭，这个要怎么解决呢？又一次和朋友聊天的时候他推荐给我一个软件叫，果断放弃使用，在有一个功能叫做站点域名管理，如下图于是把需要的域名都通过记录解析到我的服务器上，再添加到域名管理里边，成功实现了一服多站。随着研究的深入，后来知道：是基于也可以选择或作为的基本程序，通过修改的站点配置文件目录在也可以实现同样效果，相信聪明的你和我一样一看就懂了，如图：至此，我已经可以较为完善的拥有一个网站服务器了建站经验
备案
备案对于国内网站来说是必不可少的一个环节，在腾讯云官网首页上就有备案的链接，如图：按照要求一步步备案就好了，这里通常耗时较长，我的第一次备案差不多用了俩月可能还多，备案的过程中域名是不允许有解析的，也就是说，只要你要备案，你的网站必须是关闭的！所以对于有经验的站长来说，一般都是先备案，后建站，不然的话网站运行着好好的突然关了，不知道的人还以为你的网站倒闭了呢！或许有人不信邪，我就不备案咋了？不备案的话刚开始应该是没什么问题的，但使用一段时间之后，国内的服务商就会把你服务器的端口关掉，网站就用不了了，所以记住一句话：要建站，先备案！除非你用的是港服或者外服。
在访问例如腾讯云、百度等网站的时候，会在浏览器的网址栏看到这样一个绿色的小锁 ，感觉特别好，但是访问我自己的网站却只有一个灰色的感叹号 ，于是就想，我的网站能不能也有这样一个绿色小锁呢？又是一番各种姿势百度，知道了这个是协议，需要有网站安全证书，到百度搜了一番，都好贵，舍不得花钱啊但是峰回路转，发现腾讯云有免费的证书，在管理中心左上角云产品证书管理里边，如图：点击申请证书，按提示操作之后就可以拥有自己的证书了，不过，这个证书只支持级域名之后在找到对应的证书并且在服务器上安装即可，我用的是，所以把对应证书有三个文件上传到服务器某目录下例如我创建了文件夹并上传到该目录下，按照网上的教程修改配置文件，具体方法如下：
首先是确认功能是否开启：找到这个配置文件中的 _ _这句话是否前面有注释符，如果有的话删掉注释符并保存；
在中添加这样一句话：  并保存；
在目录下创建文件，然后编辑建议使用编辑，极不推荐记事本之如下：
 

  
       这里改为你自己的域名，如果只有一个网站可以把这行删掉
       \\ 这里是你的网站目录
      
         
      
      \\\\ 这里是你的证书公钥，通常大小为左右
      \\\\ 这里是你的证书私钥
      \\\\ 这里是你的证书链，通常大小为左右
 
 有几个站点就写几个这样的一段代码
  
      
      \\
      
         
      
      \\\\
      \\\\
      \\\\
 

重启，然后访问 再加上你的站点，是不是可以访问了？注：如果遇到重启后无法开启，通常是你的配置文件有问题，要有耐心，慢慢查找配置文件的错误。还有一种可能是你的证书公钥和证书链两个文件反了，颠倒过来即可。重定向
刚开始是在访问腾讯云的时候，发现无论输入的是 ，还是 ，或者是 ，最后访问的都是 ，这个可就挺好玩的了，刚开始以为是做的跳转，在  目录下建立一个自动跳转到 的网页，后来知道是做的重定向，做重定向的好处就是对搜索引擎友好。为什么要做重定向呢？一方面，重定向可以使例如 跳转到 ，这样能增加 的权重；另一方面，我们之前做的证书用的是端口，并且网址前缀是，用重定向可以使得例如 跳转到 ，没有这步跳转，那我们的证书就白用了，重定向的办法很多，我用到了其中两种，具体如下：做重定向
这种是用在例如 跳转到 上的，当然，有些网站的权重是放在没有的网址上，把有的跳转到没有的网址上，也是同样的方法
在\目录下新建文件对于这种情况就不需要在站点域名配置中添加非权重网址了，但是权重网址还是要有的；
编辑该文件如下


 _ = __

 _
 {
 下边的就是带的网址作为权重网址的例子
       这里改为你的非权重网址
     {
             是永久重定向的意思，这段代码是给搜索引擎看的
           这里改为你的权重网址
     }
     
下边的就是不带的网址作为权重网址的例子
      
     {
            
         
     }
     
下边则是不符合以上所有情况的例子，学过编程的应该都知道这些语法
     
     {
             则是临时重定向的意思
           这里可以定向到你的页面
     }
 }

做重定向
上边的方法对于权重网站重定向来说无疑是一种简单的方法，但是对于向跳转则没办法了，这就需要做重定向这种方法同样适用于权重网站跳转，方法如下：

首先打开并检查 _ _这句话前面有没有注释符，有则删掉；
在网站目录下创建文件，这种以点开头的文件在下不好创建，通常使用命令来创建，或者用，新建一个文件，在保存的时候类型选择所有文件，文件名改为，如图：
编辑该文件如下： _
 
 {_} 
   =

这时候直接访问 加上你的站点，是不是直接就能跳转到 加上你的站点了？在服务器上安装
是一个著名的博客系统，安装主要用到了集成了，具体安装方法如下：配置

首先修改的密码针对忘了密码或者不知道密码的童鞋，如图修改即可；
接着访问：你的 或者点击上边的管理器—如图
新建一个数据库：如图，以在服务器端中操作为例：右击左侧—新建—数据库安装

到官网下载并上传到你的服务器某目录下；
访问你的目录所绑定域名，会出现如图：
按图操作：
如果数据库信息没有问题就会出现
接着按提示输入你的站点信息：


相关推荐
【就是快】分钟搭建一台服务器！
免费体验腾讯云服务器
如何在腾讯云快速构建一个个人站点个人介绍：梁定安，现就职于腾讯社交网络运营部，负责社交平台、增值业务的运维负责人，开放运维联盟专家委员，腾讯云布道师，腾讯课堂运维讲师。

上回投稿社区总结了腾讯运维多年来对于容量管理和设备成本管理的实践经验，由于社交业务体量巨大，一不小心节省了上亿的运营成本，轻松实现了王爸爸的小目标。
看上一篇文章：精细化容量管理的设备成本优化之路。
众所周知，带宽是的运营成本的大头之一，这次我们来一起看看以富媒体为重要内容载体的腾讯社交业务，是如何通过多年的运维经验积累，一点一滴的榨干不合理使用的带宽水份，为公司继续节省两亿的运营成本。
进入带宽优化技术环节前，我们先一起学习下运营商对带宽的收费策略：
 与  的带宽租金的计价单位为“元月”，按“周末最高值均值”每月按量收费。
了解完运营商的收费策略，知己知彼好干活。针对业务形态的不同，实施对应的技术手段或产品策略，在不影响用户使用体验的同时，达到带宽使用最合理的目的。说白了就是要把业务高峰期的带宽峰谷削掉。
本文不单独对带宽转换成带宽的优化做介绍，因为这种做法虽然降低了带宽成本，但是实际上还是产生的带宽消耗，本文的目的更多的是分享减少带宽消耗的方法。
如下图是真实的带宽峰值，是上了优化策略后的峰值，直接优化带宽。

减少带宽消耗最直接的办法就是限速，让用户在业务高峰期时以较慢的速度访问，这是最简单粗暴的做法。
今天我们说点与业务场景更贴切的优化手段，在腾讯多年的社交运维经验中，我们归纳出七点心法用于带宽的优化：

腾讯社交业务产品线广，几乎覆盖绝大部分的用户社交场景文字、图片、视频、音频、直播、文件，因此下文我们主要对用户社交场景的带宽成本进行优化。
免自播放
技如其名的优化策略，在带宽高峰期，针对业务场景如微信公众号文章、腾讯视频、空间说说、看点等，含有流媒体、视频、音频、这种消耗带宽大头的文件下载时，在产品体验上取消其自动播放或自动下载的功能，改为由用户主动触发后再播放或下载，这样可以有效的减少峰值带宽的，在用户体验和运营成本中找到平衡点。

预先推送
作为国内最大的社交平台，我们拥有着众多视频、网络热文、广告图片等高频内容，在互联网病毒传播的作用下，往往很容易造成带宽的毛刺消耗，而带宽的毛刺是运营成本管理中最不愿意看到的。
为此，我们通过后台的数据分析，提前发现热点内容，采用预先推送到用户本地的方法，降低高峰期用户访问该热点内容时，产生的带宽峰值，从而实现优化带宽的目的。
举例说明下，假设在应用宝上有个热门的软件有需要用户升级修复，通过数据可以提前分析出用户主动触发升级的时间段，那么我们就可以针对性的提前将补丁下发到用户本地，等到用户点击升级时，则可以直接快速读取本地的补丁升级。
此举从用户体验上和运营成本上都是个最优的方案。类似的案例还有很多，如门游戏补丁包的下载优化、柴静《苍穹之下》在微信朋友圈疯传、富土康员工张全蛋的视频等等。

文件压缩
在社交的场景，用户免不了用图文来表达自己的，而在带宽最优使用的要求下，我们有必要对图片、视频的格式和大小在不影响用户体验的前提下，尽可能的优化。
技术上看就是要寻求一种性价比最高的压缩办法，常见是如    的图片格式，又如   的视频编码。可应用的业务场景很多，如相册、空间视频等等。

按需使用
按需使用带宽看似很理所当然，但是放在实际的工作中却往往很难做到真正的按需使用。站在产品经理的角度，一款好产品就是应该给用户最好的，高清的图片、无损的音质、的视频等等。
但是站在运维的角度产品经理口中最好的并不意味着用户体验是最好的，如虽好，但仅当用户在高速网络和高分辨率终端的前提下如此，否则盲目的给用户提供最高清的视频，只会浪费了公司的带宽成本，而用户既不能节省流量资费更不能获得极速的速度体验。
因此，我们很有必要找到用户体验和带宽的平衡点，让运营成本的每分钱都花到用户的身上。
举个业务例子，企鹅电竞的游戏直播分别支持在不同终端上观看，可以采用不同的分辨率，最高清，寸大屏手机次之，小屏手机最低码率。

分段下载
运营商不断为用户提速，同时降低的资费，在视频盛行的年代，带宽费用当然不让的成为众多视频和流媒体公司的成本消耗巨头。还是那句话，要找到用户体验和带宽成本的平衡点，我们需要最具性价比的下载管理方案——分段下载，在不提高二次缓冲率的同时，减少多余带宽的损耗。
举个音乐的场景，用户在试听歌曲时，往往有个习惯，前秒或副歌开始时就直接决定了该首歌曲会不会被听完。这就存在一个优化点，听完一首歌和下载完一首歌的速度是不一样的，假设歌曲的平均大小是，码率是，用户使用百兆网络下载只需要秒，但用户却只听了秒便切歌了。
在没有做任何带宽优化的情况下，约有多的带宽会被浪费掉，而音乐有着亿多的用户，这个成本的浪费是不可接受的。因此，对于音乐这种场景，需要限制下载速度和分段下载，如当用户播放音乐时，先下载个时间片的数据每片秒，随后视情况策略继续分段下载。此策略在腾讯视频等流媒体类的应用都适用。

技术突破
上面提到优化点多为产品策略或运营手段，该优化措施是直接在业务技术上实现带宽的节省，如裁剪安装包大小、手机上使用技术、音视频技术优化、优化传输协议减少无用字段的消耗等等，都是一些可以有效降低带宽消耗的方法，具体执行的情况建议按二八原则，抓大头层层递进的深入。

业务实践的案例，如，等都是很好的技术突破的案例。
扫黄打非
最后一点，也是互联网公司遵纪守法的体现的一点，扫黄打非在一些业务场景下效果十分显著，如群共享、云盘在线播放等等。大家很容易可以想象到，一个非法的黄色视频  图片   会被频繁的传播和点击，不但违法而且浪费带宽成本，理应被打击。
与之相关的涉及鉴黄能力在腾讯多年的社交经验中早已打磨得十分精准，有需要遵纪守法的公司可以在腾讯云上找到万象优图这块产品。
结语
啰啰嗦嗦的列了很多带宽成本优化的实践，算是承接上一篇《精细化容量管理的设备成本优化之路》设备优化的续集。同样的，包括但不限于上述  种带宽优化方法，希望抛砖引玉，在运维圈能够形成良性的对运营成本优化管理的风气。
毕竟运维团队是成本中心，技术数据为业务创造价值之前，咱们得先控制好运营成本。
文中列举的很多案例，都需要产品和开发的配合，也许这也是的一种价值体现！

相关推荐 精细化容量管理的设备成本优化之路浓缩的才是精华：浅析格式图片的存储和压缩系统架构评审方法和思路总结导语： 本文讲述的是的消息机制原理，从到代码进行了梳理，并结合其中使用到的模型予以介绍。

的消息传递，是系统的核心功能，对于如何使用相信大家都已经相当熟悉了，这里简单提一句。我们可以粗糙的认为消息机制中关键的几个类的功能如下：
：消息处理者
：消息调度者
：存放消息的地方
使用过程：
        死循环    到一个消息    处理
好了，我们直接看源码吧。
层
消息机制是伴随线程的，也就是说上面的几个类在可以在任何一个线程中都有实例的。
先看吧。以主线程为例，进程在初始化，会调用
    {
        
          {
            
             = 
        }
    }
      {
        
         
    }
    {
         =  
         = 
    }
 以上几个方法就是初始化，如果是主线程会创建一个不可退出的，并把实例放入线程独立变量中。

    {
           = 
           = 
          {
              =  
              ==  {
                
            }
            
             {
                
            } 
            
            
        }
    }
  后就可以了，非常简单，一直去中拿消息就好了，拿到了交给也就是处理。大家有可能会奇怪这种死循环，执行起来不会太粗暴了吗？其实这个解决方式在！！！后面再讲。

    {
          =  {
            
        }  {
              =  {
                  {
                    
                }
            }
            
        }
    }
 收到后，如果发现的不为空，则只处理。提一句，我们用的很多的，其实这个就是这里的，也就是说的实质上是一个优先级很高的，如果没有则尝试交给本身的处理初始化的时候可以用方式构造，再没有才到我们常用的方法，这里就是我们经常重写的方法。
再说说消息的发送，一般会调用方法，但是最终这个方法还是会跑到这里
        {
         = 
          {
            
        }
          
    }
 再交给
     {
        。。。
          {
            。。。
                 
                  {
                     = 
                     = 
                      ==  ||    {
                        
                    }
                    。。。
                }
                 =     == 
                 = 
             {
               
            }
        }
         
    }
 会把消息插入队列，并依次改变队列中各个消息的指针。
咦，好像只用层貌似就能把整个消息机制说通了，代码在哪儿？有何用呢？
但是，刚才提到了初始化的时候也会新建一个
  {
         = 
         = 
    }
 好了，我们第一个方法出来了。这时候我们可以猜得到，才是整个消息机制的核心！
层
接上面层的代码，构造的时候会调一个。
  ___    {
      =  
    。。。
}
  
           {
     = 
      ==  {
         =  
        
    }
}
 层调用方法后，会在层构建一个 ！来看看 的初始化
  
         
          
          _ {
     =  _ | _
    
    
}
这里创建了一个，代码来自最新的，这部分和 管道的和稍微有点不一样，前者是等待响应，后者是读取写入。只是选取方式的不同而已，这块就不细说。
  {
    。。。
     = ___
    ___         
     _ 
       _ 
     = 
     = 
      = _ __   
    。。。
}
再到这个方法中，可以看到通过_创建了一个专用的文件描述符，__表示上能监控的最大文件描述符数。最后调用_监控文件描述符的事件，即当中有内容可读时，就唤醒当前正在等待的线程。
这里不了解的人可能听着晕，上面这么一大段一句话概括就是： 层用了模型。什么是模型呢？我先简单介绍一下。
必看！！！
为什么要引入呢？
在的时候提到了，不会简单粗暴地真的执行啥都没干的死循环。刚才说了，问题出在。干的事就是： 如果你的中没有消息可执行了，好了你可以歇着了，等有消息的我再告诉你。这个就是“阻塞”休眠在这里。
简单介绍
、传统的阻塞型一边写，一边读，一个线程只能处理一个一个流。
、如果一个线程想要处理多个流，可以采用了非阻塞、轮询方式，但是传统的非阻塞处理多个流的时候，会遍历所有流，但是如果所有流都没数据，就会白白浪费。。。。于是出现了和两种常见的代理方式。
、就是那种无差别轮询的代理方式。可以理解为 ，也就是说代理者会代理流的时候也伴随着事件，因此有了对应事件，就可以避免无差别轮询了。
、其通常的操作有：_创建一个、_往中增加删除某一个流的某一个事件、_在一定时间内等待事件的发生
  = 
 = 
  = _ __   
 好了，我们结合初始化的代码来读一下在这里干了什么吧。
我直接翻译了：往代理中、注册、一个叫流、的数据流入事件
这样大家应该懂了吧。。。
接上在初始化后，在创建了一个。我们继续消息的发送和提取在层的表现。其实层主要负责的是消息的调度，比如说何时阻塞、何时唤醒线程，避免浪费。
发送
发送在比较简单，发送消息后，会到的，此时在线程阻塞的情况下，会调用来唤起线程。
  {
    
}
   {
    。。。
    _  = 
    _  = __  _
      = _ {
      。。。。
    }
}
这里__是一个宏定义，顾名思义，就是不断地尝试往流里面写一个无用数据直到成功，以此来唤醒。这部分就不多说了。
消息提取
也就是
   {
        。。。
          {
           。。。
             
           。。。
        }
    }
 可以看到，又是一个死循环阻塞。继续往下看
       {
    。。。
    
    。。。
}
 

   {
    。。。
      = _
     = 
     _ __
      = _  __ 

     = 
    

       =      {
          = 
        _  = 
          ==  {
                {
                
            }  {
                         
            }
        } 
        。。。
    }
    。。。
    
    。。。
     
}
 在这里，我们注意到_方法，这里会得到一段时间内结合消息计算得来的收到的事件个数，这里对于来说就是空闲阻塞状态。过了这个时间后，看看事件数，如果为，则意味着超时。否则，遍历所有的事件，看看有没有，且是事件的，有的话就真正唤醒线程、解除空闲状态。
消息机制在层的主要表现就是这些。
最后，画了一个粗糙、且不太准确图仅供参考学习在上一篇系列文章《【私房菜】收集  系统日志》我们已经完成了系统日志上报这个简单的试运行项目，我们现在对数据收集、处理以及上报等流程也有了一个全局的认知和了解，下面，我们一起看看如何收集日志。
一、日志格式
虽然也能处理我们常见的日志格式，但是需要写正则匹配，比较麻烦。幸好支持自定义日志格式，所以这里我们对日志格式进行了下改造，让它输出格式。
、日志格式设计
日志的字段很多，所以第一步，我们需要先对齐到底需要采集哪些字段，然后将日志格式定下来，这里我简单分享下网管这边设置的字段，如果想了解其他字段，请参考本文最后的附录。
 日志中的客户端不能像那样使用模块灵活获取，不管是使用变量 直连 还是 非权威真实 都无法覆盖所有请求场景。
所以，这里我们需要特殊处理下：
 { \
           \\ \{}\ \
           \_\ \{}\ \
           \_\ \\ \
           \_\  \
           \\  \
           \\ \\ \
           \\ \\ \
           \_\ \{}\ \
           \_\ \\ \
           \_\ \{}\ \
           \__\ \{}\ \
       \__\ \\ \
       \__\ \\ \
 }  __
我们在日志里面指定种远端，一个是代理叠加而成的列表：，另一个是直连的远程：，当用户是直接访问，而没有经过等代理时， 和  应该是同一个，而经过代理的访问，则是的一个子集。
最终，我们可以在里面做一些逻辑处理，得到用户的真实。
、配置_
由于字段中用到了 __ 和 __ 发送字节数统计字段，所以这里需要给集成一下_模块，如果不需要这个字段，则跳过此步骤。
这里分享下这个模块的集成过程：
①、下载源码并解压
②、 到源码目录下的  目录，执行如下命令：
 这里注意下现有  的安装目录
      _
正常情况下，会自动在  下生成 _，并自动在里面这个模块，如果发现没有生成或加载，则手工操作：
 编译后会在目录下生成，我们手工拷贝到目录：
  _ 

 然后编辑  配置文件  ，新增如下配置：
 _ _
③、配置日志：
将第①步设计好的日志格式以及日志文件配置添加到  ，比如：
 自定义日志格式
 {\\\{}\\_\\\\_\\\\\\\\\\\\_\\{}\\_\\\\_\\{}\\__\\{}\\__\\\\__\\\} __
 定义日志文件
 |  _  __
 如果，现网采用的是虚拟主机模式，也就是配置了  文件，那还得检查下这个文件中是否也配置 ，如果有配置，要么注释，要么参考上述做相应的修改。
 ④、热重载：

  
：使用指令可以平滑重启，如果配置有错误，也不会异常退出。
：当然，这里是按天在下生成日志文件，所以要记得创建这个目录，并根据运行的用户赋予权限，避免日志无法写入。
 成功配置日志之后，日志输出长这样：
格式化之后：

{
 
_ 
_ 
 
 __
 
_ 
_ 
_ _
__             
__ 
__ 
}
这时候，我们还可以根据日志格式做相应调整，最终满足我们的分析需求。
二、部署
按照《【私房菜】安装部署及配置详解》在需要采集日志的服务器上部署，然后编写如下配置：
 
  

 _ 
   
  _ __

_ 
_ 
 

  

        
   
       
   {}
  _ 
  _
    _ 
  _ 
   
  __ 

  
 
_ 
_ 

   
   
   
三、配置
在正式上报数据之前，我们先配置下的：
{
     __
     {
       {
               {
                 {
                   __  
                      
                }
                _ {
                   _
                   
                }
                _ {
                   _
                   
                }
                _ {
                   _
                   
                }
                 {
                     
                }
                 {
                   
                }
                _ {
                     
                }
                __ {
                   _
                   
                }
                __ {
                   _
                   
                }
                 {
                   _
                   
                }
                _ {
                   _
                   
                }
                __ {
                  
                }
            }
        }
    }
}
 ：这里就不详细说明每个字段含义了，请参考系列文章《 简介整理中》
将上述模板保存为  的文件，然后执行如下命令进行导入：

  ___  

主机为地址和端口
_ 表示模板方法
__ 是我们给这个模板定义的名字
 模板文件，表示将这个模板文件导入到正常将返回如下结果：

{
    
}
四、配置
模板导入之后，我们再配置 。
 

 {
     {
        _ = 
         = __
        _ = 
         =  {
             = 
        }
        _ = {  = __ }
    }
}

 {
      == __ {
       这里对单字节编码做了下替换处理，否则有中文会出现无法解析报错
       {  
         =  \\ \\\
      }
       这里排除了下请求，如需要排除其他关键词，可自行添加
            {
            {}
      }
       {
             = 
            _ =       
             这里添加一个变量，用于后面的判断
            _ = { _ = {_}}
            _ =       
            _ =       
            _ =       
            _ = 
            _ = _
            _ = 
            _ = 
            _ = 
            _ = 
        }
        对_ 按逗号进行切分是多个，当然单个这里也会切分
        {
             = _ 
        }
        取出切分数组的第一个值即真实，并替换给_此时列表已还原为单个
        注意：这个必须分开写，写到一个里面是不行的！
        {
             = { _ = {_} }
       }
         当_值为的时候为空的情况
         _ ==  {
            当 _ 不为空因为并没有报这个字段
            _   {_} {
                 把 _ 的值赋给_，完成对调
                 {
                     = { _ = {_} }
                }
            极端情况下，直接删除本条数据命中_和_都不对
            }  {
                {}
            }
        }

         移除 _ 这个字段
         {
            _ = _
        }
    }
}

 {
    {
         = 
    }
      == __ {
         {
             = 
             = __{}
             禁止管理模板，并指定模板
            _ = 
            _ = __
        }
    }
}
可以看到，在部分对数据进行了较为复杂的逻辑处理，最终实现了获取用户真实的目标，而且这个规则同时兼容日志处理。
五、配置
启动上报数据之后，我们还需要在里面配置下索引：
①、如图打开索引管理：

②、如图点击创建索引：

③、如图输入指定的索引前缀，自动带出字段后选择时间戳字段，点击【】即可：

最后，回到界面就能看到期待已久的高清美图了：本文就介绍这么多，更多的奇淫巧计请关注《私房菜系列文章之教你玩转整理中》。
六、附录：日志变量详解
日志格式字符串的含义
 百分号或更高的版本
 远端地址
 本机地址
 除头以外传送的字节数
 以格式显示的除头以外传送的字节数，也就是当没有字节传送时显示’‘而不是。
{} 在请求中传送给服务端的的内容。
 服务器处理本请求所用时间，以微为单位。
{} 环境变量的值
 文件名
 远端主机
 请求使用的协议
{} 发送到服务器的请求头的内容。
 远端登录名由而来，如果支持的话，除非设为”“，否则将得到一个””。
 请求的方法
{} 来自另一个模块的注解的内容。
{} 应答头的内容。
 服务器服务于该请求的标准端口。
 为本请求提供服务的子进程的。
{} 服务于该请求的或线程，的取值范围为：和及以后版本以及需要及以上版本
 查询字符串若存在则由一个”“引导，否则返回空串
 请求的第一行
 状态。对于内部重定向的请求，这个状态指的是原始请求的状态，—则指的是最后请求的状态。
 时间，用普通日志时间格式标准英语格式
{} 时间，用指定的格式表示的时间。默认情况下按本地化格式
 处理完请求所花时间，以秒为单位。
 远程用户名根据验证信息而来；如果返回为，可能是假的
 请求的路径，不包含查询字符串。
 对该请求提供服务的标准。
 根据指令设定的服务器名称。
 请求完成时的连接状态：
= 连接在应答完成前中断。
= 应答传送完后继续保持连接。
= 应答传送完后关闭连接。
在以后的版本中，这个指令是，但这样就和过去的语法：{}冲突了
 接收的字节数，包括请求头的数据，并且不能为零。要使用这个指令你必须启用_模块。
 发送的字节数，包括请求头的数据，并且不能为零。要使用这个指令你必须启用_模块。腾讯云商业智能分析产品由北京永洪商智科技有限公司提供，永洪一站式大数据分析平台

表格设置高亮
对表格中的列产品种类，设置高亮：点击鼠标右键，选择高亮

右击选择新建高亮，新建名为：

对设置的过滤条件和高亮确定
过滤条件：每个俩行 是 等于 ，表格第二列每一行就显示蓝色，点击确定
效果图：

设立数据超过的标红
总和利润段，右击选择高亮新建高亮编辑过滤条件大于等于，最后一个手动输入数值

这样，表格最后一列中大于等于的数据就用红色显示出来

设置表格渲染
在表格上右击，选择表格渲染

设置渲染的条件，渲染选择柱状渲染，勾选显示值，目标值设置为，目标线样式选择粗线

效果如下前言
前段时间，因为项目需求 开始接触了，有感自己不是科班出身，很多东西理解不深，于是花时间再读了一些的经典教程的部分章节，这里是第一部分，主要包括三小块：中文分词、词向量、词性标注， 这三块是前段时间项目上有用到过，所以稍做总结与大家分享下，只有更极致地深入了解才能学习得更多。
分词
分词可能是自然语言处理中最基本的问题，在英文中，天然地使用空格来对句子做分词工作，而中文就不行了，没有特点符号来标志某个词的开始或者结尾，而分词通常对语义的理解是特别重要的，这里举个栗子：

下雨天留客天留我不留==下雨天 留客天 留我不留 
                    ==下雨 天留客 天留我不留
不同的分词，会造成完全不同的语义理解，其重要性不明而喻，那么如何把词从句子中正确地切分出来呢？
我爱北京天安门
分成我 爱 北京天安门 而不是 我爱 北 京天安门？ 对于计算机而已，天安门和京天安门都是二进制存储在硬盘或者内存中，没有其他差别，那么我们如何让计算机知道切分为天安门而不是京天安门呢？ 这里我们需要提到词典的帮助，做过的小伙伴通常都知道在一些基础任务上，词典的好坏决定最后的性能指标，那么词典是如何对分词起作用的呢？
分词词典
最简单的一个想法，是构造一个常用词的候选集合，如我、爱、天安门、北京这些词，然后从句子头到尾遍历，如何词在候选集合中出现过则切分该词，那么很容易将我爱天安门分词为我 爱 天安门，这样的逻辑很容易理解，所以接下来就是如何去设计这个候选集合的数据结构，常用的，当然是可以的，但是很明显，将一个海量词的词典载入，词典元素的查找还有存储，如果使用必然会存在很严重的性能问题，如果高效地存储词典，还有高效地查询词或者短语在词典中，是这部分分词最重要的工作，树在自然语言处理词库的存储和查找上使用的比较普遍。
树存储及最长匹配法
上对于树是这样解释的：在计算机科学中，，又称前缀树或字典树，是一种有序树，用于保存关联数组，其中的键通常是字符串。与二叉查找树不同，键不是直接保存在节点中，而是由节点在树中的位置决定。一个节点的所有子孙都有相同的前缀，也就是这个节点对应的字符串，而根节点对应空字符串。一般情况下，不是所有的节点都有对应的值，只有叶子节点和部分内部节点所对应的键才有相关的值。

图中主要包括三种节点：开始节点、中间节点、和结束节点，利用树存储后，根据一条路径上来存储一个词典的词如上海大学、当然中间节点也可以做为一个词的结尾来保存如上海，常用的中文字不到，大概只需要一个一层分支为的树来保存所有的中文词库信息，树形的结构，保证了高效的存储和查找方法，遍历时，只需要依次向树下一层访问，如果无法访问到下一节点，则切分，如到叶子节点，也切分即可这就是基于树的最长匹配法，分词性能的好坏完全依赖于词库。 具体的实现可以读下的的部分 ，这里主要关注下和即可比较好的理解。 树的更高效的实现方式包括三数组和二数组，三数组结构包括三个数组结：和；二数组包含和两个数组，的每个元素表示一个节点，而数组表示某个状态的前驱状态，高效树的实现，大家有兴趣可以拿源码来读读，这里我先略过。
基于的分词方法
基于 的分词方法，主要依赖词典，通常能满足大部分场景，但是很多时候也会效果不好，通常会引入概率模型来做分词，隐性马尔科夫模型通过引入状态见的概率转换，来提高分词的效果，尤其是对未登录词效果要好很多。 相信大家在很多场景下听过，的基本部分包括状态值集合、观察值集合、状态转移矩阵、条件概率矩阵、初始化概率。 
这里稍微解释下这五个术语在分词中是啥意思：

状态值序列，这里一般有四种状态：   ，对于一个待分词序列：大家都爱北京天安门对应的状态序列为，这样就很容易切分为    。 

观察值序列，指的就是待切分的词，如：我爱北京天安门；

初始化概率，指的是\\\这四种状态在第一个字的概率分布情况；

状态转移矩阵，在马尔科夫模型里面十分重要，在中，假设当前状态只与上一个状态有关，而这个关系我们可以使用转移矩阵来表示，在这里我们是一个的矩阵； 

条件概率矩阵，中，观察值只取决于当前状态值假设条件，条件概率矩阵主要建模在下各个词的不同概率，和初始化概率、状态转移矩阵一样，我们需要在语料中计算得到对应的数据。


举个例子来说明下： 如大家都爱北京天安门，我们初始化一个则数组第一列值为初始化概率条件概率集，依次为：大|，大|，大|大|。然后根据转移概率计算下一个字的状态概率分布：  _ _，依次到最后即可，即可计算句子中所有词的状态分布，然后确定好边界对比条件，即可计算出对应状态序列。 是中文分词中一种很常见的分词方法，由上述描述我们知道，其分词状态主要依赖于语料的标注，通过语料初始化概率、状态转移矩阵、条件概率矩阵的计算，对需要分词的句子来进行计算，简单来说，是通过模型学习到对应词的历史状态经验，然后在新的矩阵中取使用。的模型计算简单，且通常非常有效，对词典中未出现词有比较好的效果。
更复杂的概率分词模型：
这里我们提到的，不是广义的，而是线性链式，和一样，的分词问题，同样是一个序列标注问题，将标注到句子中的不同词上，相对与，能够利用更多特征，数学原理不讲啦，都是图加概率模型的解释，有兴趣的可以去看下

和不同的是，描述的是已知量和未知量的一个联合概率分布，属于 ，而则是建模条件概率，属于 。另外特征更加丰富，可通过自定义特征函数来增加特征信息，通常能建模的信息应该包括的状态转移、数据初始化的特征，理论和实践上通常都优于，主要包括两部分特征：一，简单特征，只涉及当前状态的特征；二，转移特征，涉及到两种状态之间的特征；特征模板的说明可以看下 
深度学习在分词上的尝试 

基本做法包括：首先，训练字向量，使用对语料的字训练维的向量，然后接入一个，用来建模整个句子本身的语义信息，最后接入一个完成序列标注工作，可以用来完成分词、词性标注这类的工作。 这个我会在之后做一些相关的尝试。
词向量
词向量是在中比较基础的一个工作，相对计算机而言，人要聪明的多，人很容易明白幸福和开心是两个比较近的词，而计算机要想了解，其实是很难的，而在现代计算机中，对语言的理解显得越来越重要，如何去表示一个词，也成为了理解语言的基础。
编码
编码可能是最简单的一种编码方法，每个词只在对应的置，其他位置都是，编码的问题在于很难做相似度计算，在大规模语料上时，编码的长度可能为几十万、几百万甚至更大，编码显然不行；
矩阵分解方法

            
针对一个词来说，它的语义由其上下文决定。 使用词文档矩阵，矩阵通常是一个稀疏矩阵，其行代表词语、其列代表文档。词文档矩阵表示中的值表示词在该文章出现的次数，通常，我们可以简单地通过文档的出现次数分布来表示对应的词，但是由于这个矩阵通常是比较稀疏的，我们可以利用矩阵分解，学习到对应词的低秩表示，这个表示建模了文档中词的共现关系让相似度的计算变得更加容易。 同理，可以也可以在更小粒度上计算矩阵的构建，如设定指定窗口大小，若在该窗口内出现，则数值加一，构建好词词共现矩阵，最终使用如这类的矩阵分解方法即可。 这类方法明显的弊病在于当过大时，计算很消耗资源，且对于未出现词或者新文档不友好。

关于有很多很好的学习资料，大致包括和模型，其中的输入就是上下文的表示，然后对目标词进行预测每次从目标词的上下文中选择一个词，将其词向量作为模型的输入。之前有写的文章可以简单看看 笔记之

其中主要由包括以下几块：

输入编码；
隐层大小为次维度大小；
对于常见词或者词组，我们将其作为单个处理；
对高频词进行抽样减少训练样本数目；
对优化目标采用 ，每个样本训练时，只更新部分网络权重。


实际上是结合了矩阵分解方法和 的一种方法，具体看下中公式的推导，的优势主要在于：

利用 ，但是没有考虑大量词共现的信息，而文中认为词共现信息可以在一定程度上解释词的语义通过修改目标函数，

作者认为相对于原始的额条件概率，条件概率的比值更好地反映出词之间的相关性如下图：




为保证神经网络建模线性结构关系神经网络容易建模非线性关系，容易欢笑线性关系，对词差值建模，并且增加一个权重函数；



使用：根据参数的历史梯度信息更新每个参数的学习率；

为减少模型复杂度，增加假设词符合幂率分布，可为模型找下界限，减少参数空间；




如上图，早在年，就使用神经网络学习语言模型，中间可输出词向量，和传统的方法不同，不通过计数的方法对元条件概率估计，而是直接通过神经网络结构对模型求解，传统的语言模型通常已知序列，来预测接下来的出现词的可能性，提出的通过将各词的表示拼接，然后接入剩下两层神经网络，依次得到隐藏层和输出层，其中涉及到一些网络优化的工作，如直连边的引入，最终的输出节点有||个元素，依次对应此表中某个词的可能性，通过正向传播、反向反馈，输入层的就会更新使得语言模型最后的性能最好，就是我们可拿来的向量化的一种表示。
知识表示
知识表示是最近开始火起来的一种表示方式，结合知识图谱，实体之间的关系，来建模某个实体的表示，和里的很类似，上下文通常能表征词的关系，这里也是一样，结合知识图谱的知识表示，不仅考虑实体间链接关系，还可以通过引入更多的如、信息来表征实体，这里可以关注下清华刘知远老师的相关工作。
词性标注
词性标注的相关学习路线，基本可以重搬下分词相关的工作，也是一个词性标注的工作

基于最大熵的词性标注
基于统计最大概率输出词性
基于词性标注
基于的词性标注 可以稍微多聊一点的是 ，这里主要参考曼宁那本经典的教材      主要包括两个部分：    通过不停统计语料中的频繁项，若满足需要更改的阈值，则增加词性标注的规则。

总结
从来都认为基础不牢、地动山摇，后面会继续努力，从源码、文章上更深了解自然语言处理相关的工作，虽然现在还是半调子水平，但是一定会努力，过去一段时间由于工作相对比较忙，主要还沉沦了一段时间打农药，后面会多花点时间在技术上的积淀，刷课、读、读源码。另外，为了加强自己的能力，已经开始用啦周六写了行代码，想想都刺激，哈哈哈！！！我这智商够不够呀，，加油吧！！！

： 个人博客，出了点问题，貌似是因为七牛图床需要再搞个啥备案，看来以后博客要费啦！！！
哎， 真麻烦作者介绍：陈苗  腾讯云工程师

 是一款基于  端运行的开源数据库管理工具，支持管理和  两种数据库。  的程序主要使用  和  开发，它的安装使用都比较简单而且已有很多相关介绍不再重复，今天要介绍的是源码中的一个核心组件  。
 简介
组件的主要用途是对语句进行词法分析、语法分析，继而可以实现对语句的解构、加工、替换、再组装等需求，另外也可以对进行等处理。由纯语言实现，同时也是整个源码中为数不多的代码架构比较清晰且符合当前界标准规范的模块。
 组件安装
需事先安装好，客户端，以及 包管理工具
    

      
组件安装完毕，下面介绍具体的调用
解析普通语句

_ 
 \

 =          
      =  =  =

 =  
 = 
 _
运行结果中变量是一个大对象，里面存储有对语句的词法分析结果，语法分析结果，以及错误信息等。
其中的结构如下：
{
{
}
{
}

{{ 
 }{
=}{
}{
=}{
}{
=}}
{}}
解析事务
_ 
 \

 =   
     =    = 
       =  = 
    

 =  
 = 
 _
输出结果：
{{
{=
}
{
}{
=}

{}}{
{
}{}
{
=}
{}}
{{
{}}}{{ 
}}}
除以上两种语句之外，还支持解析存储过程等几乎所有语法，不再一一举例。下面是其构造器的用法举例。
组装语句
组装语句：


_ 

 \\
 \\
 \\
 \\
 \\

 =  

 =  

 =    _ 
 =  _
 =    
 =    
 =  _  
 =  
 =    
 =   

_
输出结果：
   
   `````_`  `` _ 
 `` ``  _          
组装触发器语句：

_ 

 \\
 \\
 \\

 =  

 =  
 =  _
 =   
 =  
 =   =   

_
输出结果：
   
   _          
=   
再加工
多条语句一起加工处理：

_ 

 \
 \\

  = 
  ``  `` ``       _
  ``  `_` `_`      
      = 


 =  

处理第一条语句
_ = 
_  =  
      

__

处理第二条语句
_ = 
_  =  
      

__
输出结果：
   
   ````  `` ``      
 _
   ````  `_` `_`     
 
以上是组件一些基本的用法示例，的组件功能比较丰富和完备，本文限了篇幅不能详尽，有兴趣的读者可以通过阅读源码来了解更多高级的用法。
更多数据库文章，请关注腾讯云数据库公众号 

相关推荐
  加密特性及使用方法 什么是云数据库？   相关文档作者： 腾讯移动客户端开发工程师

导语
月日，谷歌正式推送  牛轧糖正式版，首发推送了多款设备。除了修复常规， 还新增了分屏、新的、支持等新特性。
月日，谷歌正式推送  牛轧糖正式版，他们还会三个月一次推送开发版，而曝光的消息看，第一个开发版就是 ， 主要新增了以下的新特性和优化。
一、新的
  增加了许多新的 ，进行了重新的设计，引入了新的风格。
● 模板更新：开发者将能够充分利用新模板，只需进行少量的代码调整。
● 消息样式自定义：可以自定义更多与使用类的通知相关的用户界面标签。可以配置消息、会话标题和内容视图。
● 捆绑通知：系统可以将消息组合在一起例如，按消息主题并显示组。用户可以适当地进行  或  等操作。
● 直接回复：对于实时通信应用， 系统支持内联回复，以便用户可以直接在通知界面中快速回复短信。
● 自定义视图：两个新的  ，在通知中使用自定义视图时可以充分利用系统装饰元素，如通知标题和操作。

二、多窗口支持分屏模式
运行   的手机和平板电脑上，用户可以并排运行两个应用，或者处于分屏模式时一个应用位于另一个应用之上。用户可以通过拖动两个应用之间的分隔线来调整应用。在  设备上，应用可以将自身置于画中画模式，从而让它们可以在用户浏览或与其他应用交互时继续显示内容。

三、   
“快速设置”通常用于直接从通知栏显示关键设置和操作，非常简单。在  中，已扩展“快速设置”的范围，使其更加有用更方便。为额外的“快速设置”图块添加了更多空间，用户可以通过向左或向右滑动跨分页的显示区域访问它们。 还让用户可以控制显示哪些“快速设置”图块以及显示的位置 — 用户可以通过拖放图块来添加或移动图块。
对于开发者，  还添加了一个新的 ，从而可以定义自己的“快速设置”图块，使用户可以轻松访问应用中的关键控件和操作。

四、快速的应用安装路径
 运行组件的  编译器最实际的好处之一是应用安装和系统更新的速度。即使在  中需要几分钟进行优化和安装的大型应用，现在只需几秒钟就可以完成安装。系统更新也变得更快，因为省去了优化步骤。
五、随时随地低电耗模式
在   中，低电耗模式又前进了一步，随时随地可以省电。只要屏幕关闭了一段时间，且设备未插入电源，低电耗模式就会对应用使用熟悉的  和网络限制。这意味着用户即使将设备放入口袋里也可以省电。
六、 ：后台优化
 在持续改善，以最大程度减少生态系统中一系列  设备中系统和应用使用的 。在   中，  注重优化在后台中运行应用的方式。
后台处理是大多数应用的一个重要部分。处理得当，可实现非常棒的用户体验—即时、快速和情境感知。如果处理不得当，后台处理会毫无必要地消耗 和电池，同时影响其他应用的系统性能。
  删除了三项隐式广播_、__ 和__，以帮助优化内存使用和电量消耗。此项变更很有必要，因为隐式广播会在后台频繁启动已注册侦听这些广播的应用，删除这些广播可以显著提升设备性能和用户体验。
移动设备会经历频繁的连接变更，例如在  和移动数据之间切换时。目前，可以通过在应用清单文件中注册一个接收器来侦听隐式 _广播，让应用能够监控这些变更。由于很多应用会注册接收此广播，因此单次网络切换即会导致所有应用被唤醒并同时处理此广播。同理，应用可以注册接收来自其他应用例如相机的隐式__ 和__ 广播。当用户使用相机应用拍摄照片时，这些应用即会被唤醒处理广播。
为减缓这些问题， 应用了以下优化措施：
、面向   开发的应用不会收到  _ 广播，即使它们已有清单条目来请求接受这些事件的通知。在前台运行的应用如果使用请求接收通知，则仍可以在主线程中侦听_。
、 应用无法发送或接收 __ 和__广播。此项优化会影响所有应用，而不仅仅是面向   的应用。
未来的  版本还可能会弃用其他隐式广播以及未绑定的后台服务。有鉴于此，应避免依赖在清单文件中声明的接收器来侦听隐式广播或删除此依赖关系，以及避免或删除对后台服务的依赖关系。
 框架提供多种解决方案来降低这些隐式广播或后台服务的必要性。例如，  提供了一个稳健可靠的机制来安排满足指定条件例如连入不按流量计费的网络时所执行的网络操作。甚至可以使用来响应内容提供程序所发生的变更。
七、 
在移动设备的整个生命周期，蜂窝数据计划的成本通常会超出设备本身的成本。对于许多用户而言，蜂窝数据是他们想要节省的昂贵资源。
 推出了 模式，这是一项新的系统服务，有助于减少应用使用的蜂窝数据，无论是在漫游，账单周期即将结束，还是使用少量的预付费数据包。  让用户可以控制应用使用蜂窝数据的方式，同时让开发者打开 时可以提供更多有效的服务。

八、 
  将一项新的  渲染  ™ 集成到平台中。就像 ™  一样，是  图形和渲染的一项开放标准，由  维护。
是完全从零开始设计，以最小化驱动器中的  开销，并能让应用更直接地控制  操作。还允许多个线程同时执行工作，如命令缓冲区构建，以获得更好的并行化。
开发工具和库都已卷入 。它们包括：● 头● 验证层调试库●  着色程序编译器●  运行时着色器编译库● 仅适用于已启用硬件的设备上的应用，如  、  和 。
九、号码屏蔽
  现在支持在平台中进行号码屏蔽，提供框架 ，让服务提供商可以维护屏蔽的号码列表。默认短信应用、默认手机应用和提供商应用可以对屏蔽的号码列表进行读取和写入操作，其他应用则无法访问此列表。
十、来电过滤
  允许默认的手机应用过滤来电。手机应用执行此操作的方式是实现新的，该方法允许手机应用基于来电的执行大量操作，例如：
● 拒绝来电● 不允许来电到达通话记录● 不向用户显示来电通知
十一、多区域设置支持、多语言
  现在允许用户在设置中选择多个区域设置，以更好地支持双语用例。应用可以使用新的  获取用户选择的区域设置，然后为多区域设置用户提供更成熟的用户体验，如以多个语言显示搜索结果，并且不会以用户了解的语言翻译网页。
除多区域设置支持外，  还扩展了用户可用的语言范围。它针对常用语言提供超过 种的变体，如英语、西班牙语、法语和阿拉伯语。它还针对  多种新语言添加了部分支持。
应用可以通过调用  获取用户设置的区域设置列表。 为支持扩展的区域设置数量，  正在改变其解析资源的方式。 
十二、新增的表情符号
 引入更多表情符号和表情符号相关功能，包括肤色表情符号和支持变量选择符。如果应用支持表情符号，请遵循以下准则，以便能充分利用这些表情符号相关功能优势。
● 在插入之前，检查设备是否包含表情符号。若要检查系统字体中有哪些表情符号，使用 方法。
● 检查表情符号是否支持变量选择符。变量选择符能够呈现一些彩色或黑白的表情符号。在移动设备上，应用应呈现彩色的表情符号，而不是黑白的。但是，如果应用显示嵌入在文本中的表情符号，那应使用黑白变量。若要确定表情符号是否有变量，使用变量选择符。如需有关支持变量的字符的完整清单，请参阅变量的  文档中的表情符号变量序列部分。
● 检查表情符号是否支持肤色。 允许用户按照他们的喜好修改表情符号呈现的肤色。键盘应用应为有多个肤色的表情符号提供可视化的指示，并应允许用户选择他们喜欢的肤色。若要确定哪些系统表情符号有肤色修改器，使用 方法。可以通过读取 文档来确定哪些表情符号使用肤色。
十三、 中的  
 是一个广泛使用的开源  库集合，为软件应用提供  和全球化支持。  在软件包下显示  框架中的   子集，供应用开发者使用。迁移很简单，主要是需要从命名空间更改为。如果已在应用中使用  捆绑包，切换到  框架中提供的  可以大量节省  大小。
十四、™   
  添加了框架接口和对    的平台支持，包括：● 来自  扩展包  的所有扩展___除外。● 针对  的浮点帧缓冲和延迟着色。●  绘图调用可实现更好的批处理和流媒体服务。● 强大的缓冲区访问控制可减少开销。
十五、 支持面向的   

  添加了新的 模式的平台支持和优化，以使开发者能为用户打造高质量移动 体验。新版针对开发者提供了大量性能增强特性，包括单一缓冲区渲染以及允许  应用访问某个专属的 核心。在应用中，可以享受到专为  设计的平滑头部跟踪和立体声通知功能。
十六、无障碍增强功能
参考 
  现在针对新的设备设置直接在欢迎屏幕上提供“ ”。这使用户可以更容易发现和配置他们设备上的无障碍功能，包括放大手势、字体大小、显示屏尺寸和。
十七、密钥认证
使用硬件支持的密钥库，可更安全地在  设备上创建、存储和使用加密密钥。它们可保护密钥免受  内核、潜在的  漏洞的攻击，也可防止从已取得根权限的设备提取密钥。
为了让硬件支持的密钥库使用起来更简单和更安全，  引入了密钥认证。应用和关闭的设备可使用密钥认证以坚决地确定  或  密钥对是否受硬件支持、密钥对的属性如何，以及其使用和有效性有何限制。
应用和关闭的设备服务可以通过  认证证书必须由有效的认证密钥签署请求有关密钥对的信息。认证密钥是一个  签署密钥，其在出厂时被注入设备的硬件支持的密钥库。因此，有效的认证密钥签署的认证证书可确认硬件支持的密钥库是否存在，以及该密钥库中密钥对的详细信息。
为确保设备使用安全的官方  出厂映像，密钥认证要求设备 向可信执行环境提供以下信息：设备上安装的操作系统版本和补丁级别● 验证的启动公钥和锁定状态。● 除密钥认证外，  还推出了指纹绑定密钥，在指纹注册时不会撤销。
另外新增特性还有直接启动、打印服务增强、持续性能 、作用域目录访问、键盘快捷键辅助工具等。

商业转载请联系腾讯获得授权，非商业转载请注明出处。 
原文链接：
 诸多新特性，如何立刻体验？
腾讯 云真机上已经有多部 手机可以选择，让您在网页端流畅控制云端手机。
点击链接：= 即可体验！个人介绍：微软最具价值专家、认证讲师、无界工程师、场景式学习倡导者，曾在阿里仓储解决方案公司担任系统架构师一职，目前就职于互联网企业担任系统运维工程师，致力于改善生活的实践之路。

在上两篇文章， 腾讯云上创建您的    和 腾讯云上创建您的    的文章中我们介绍了如何在  标准化的搭建一套域环境，并介绍了如何在生产过程中如何避免一些坑，今天，我们来介绍此次  中的另外一个角色——共享存储  如何部署与设计。
以下是今天需要的服务器信息本例中会开通外网流量主要为了方便  ，但是生产环境中不建议使用外网带宽：



编号
服务器名称
生产 
存储 
心跳 
对外 







无
无







无






    







    





关于 ，是用来作为   共享存储，存储作用一共分为三块，一块作为仲裁盘，一块作为生产数据，一块作为备用未启用预留空间，共享存储我们使用  自带的  服务器，然后 、 分别连接到这台共享存储上。
涉及架构如下：
，开始动手：

连接到  上，点击安装  服务器，一路下一步选择  服务器：

其他不需要设置直接下一步安装：

安装并开启多路径支持：

接着打开磁盘管理，查看系列服务器带的数据磁盘是否初始化成功：

将数据盘进行分区 以卷为单位：

检查完成后，选择服务器管理器上  服务器：

点击创建虚拟磁盘

输入第一块磁盘用做仲裁盘：

选择动态盘类型仲裁盘对数据性能无要求：

输入目标名称即接受端，仲裁盘与数据盘可以使用同一个  目标：

输入目标名称：

添加访问端机器为两个  节点：

做  演示，无需使用  认证：

确认无误后创建：

以同样的方式创建第二块磁盘：：注意选择固定大小，作为  群集存储要求性能较高

创建完成如图所示：

接着，登录 、 机器，连接  使用  发起程序：

切换到“发现”，将发现到的删除：

再次点击“发现门户”，输入目标地址，然后点击高级，进行指定  连接：

使用同样的方式将  也连接到  磁盘上，接着确认磁盘管理里是否存在用  连接的磁盘：

接着对两台节点机进行重启即可完成存储准备



相关推荐【腾讯云的种玩法】在腾讯云上创建您的  故障转移集群【腾讯云的种玩法】在腾讯云上创建您的  故障转移集群【腾讯云的种玩法】在腾讯云上创建您的  故障转移集群前言
随着互联网规模的爆炸式增长，成长为重要的基础设施。如何更好的利用好在全国丰富的资源点为用户提供更好的服务？ 这篇文章介绍了在动态内容和全站加速的应用。
提起，大家一定立即想到图片，下载，视频等静态内容的分发和就近接入等加速应用。今天的互联网应用场景下，通过承载的内容越来越多，已经成为了一项不可或缺的网络基础设施了；腾讯上运营的带宽总量已经超过，储备的带宽超过，占到业务产生的总体带宽量的八成以上。根据我们在腾讯云和内部业务的运营数据，全国范围内使用可以把用户到机房的“平均光缆长度”降低到以内；试想，如果没有，全国的用户都到同一个机房来访问，数据平均要经过才能够抵达用户手中，除了用户的访问速度会变慢以外，对于运营商的网络负载会增加数倍，以现在的网络基础设施是一定承担不了的。
为了承担海量的数据分发需求，我们建设了超过个超过百的边缘节点，分布在全国各个地区和运营商，保证用户可以同省访问到的资源。相比集中式的服务，的资源能够为用户提供非常大的网络质量优势。那么站点和应用服务来说，如何更有效的利用这些资源？除了传统的静态类内容分发以外，还能做点些什么？这篇文章从腾讯视频服务的实践经验来说明一下如何更好的支持到业务。
腾讯视频是一个综合型的服务，用户可以通过多种方式来访问，除了视频播放以外还有检索等多个功能。首先来看看传统的服务架构：

这个是一个典型的动静分离的服务架构，其中影片检索，用户登录等动态功能不能够缓存，需要集中的来处理；而网站的影片页面，播放页面和封面图片等可以通过来提供就近的服务。实际上早先的大部分腾讯的服务都是通过类似的方案来提供的。如果需要增加新的独立功能，我们通常会申请一个新的域名，独立部署来进行服务，各个功能点的开发，部署，运营等工作都可以独立来进行，互不干扰。但是也有一个额外的问题，功能点多起来以后，网站的域名数增多，每个功能点都需要做运营商分布，网络优化，负载均衡和灾备等；用户访问每个功能都需要连接一个单独的域名，分别解析和建立连接。到了／的时代，这个问题变得更加严重，每个域名都需要分别部署服务，需要投入重复的运营工作，用户的访问代价也更大。
首先的问题是，动态的这一部分工作可否移到来做呢？答案是肯定的。通过来接入动态的内容，可以提供更快，更安全的服务质量，同时提供更方便，更快捷的运营能力。
链路优化
用户通过边缘节点就近接入，获得了第一跳的最佳访问质量；而后服务器通过全国的节点和跨运营商专线资源组成一个数据传输网络，在这个网内，我们可以通过智能路由算法基于实时的网络情况找到一个接入点和源站之间的最佳中转方案；的网络可以保证用户，尤其是接入状况不太好的用户获取到最佳的接入方法，例如小运营商用户和移动客户端的用户。而这部分用户才是对质量抱怨最多的用户。
由于解决了用户接入和路由的问题，源站服务器可以部署在单个运营商，甚至可以仅部署在腾讯云的网内，仅需要关心容量，不需要刻意考虑接入点分布的问题；节省运营精力的同时获取到更好的接入质量。

负载均衡和故障屏蔽
源站采用集群服务的情况下，由于请求全部通过来进行接入，因此可以很方便的对源站进行负载均衡控制。我们在上可以通过简单配置来实现丰富的负载均衡策略，例如轮询，服务器权重，基于用户或者地址的会话保持，等等；并且还可以进行方便的进行定制。同时单个服务器发生故障时，还可以支持自动向可用服务器进行重试，从而实现故障屏蔽的同时保持用户无感知。

监控和问题定位
用户接入到以后，请求都是在受控的服务器上中转，通过实时监控和日志分析，我们可以立即掌握到服务的负载，请求书，以及源站的访问延迟等信息。同时当用户访问失败的情况下，可以通过访问链定位到问题节点。我们也可以通过自定义规则把部分用户定位到单独的服务器进行访问，对于新版本的灰度发布和现网问题排查都很方便。

网络安全
当前互联网上，对于业务站点的安全攻击层出不穷。入侵问题，拒绝服务攻击等对源站的稳定服务造成了巨大的威胁。通过使用服务，可以把源站隐藏起来，因此针对业务的攻击会直接导向的网络上。对于攻击，最简单的手段最有效：比拼容量。  攻击的定义是，攻击者通过发送大量的请求超过业务的服务能力，从而使得正常用户无法访问；然而具备海量的服务能力和非常大的节点分布，目前我们遭遇到最大的攻击大约是，而我们单个业务的访问量最大已经超过了，两者不在一个数量级。通过的海量服务能力，我们可以把恶意请求过滤在门外，把真正的用户请求放进来。

协议栈加速和数据压缩
优化中间非常关键的一个环节是协议栈单边加速。过去一段时间我们对于协议栈单边加速进行了相当多的探索，也取得了相当不错的进展；不过这里单独说一下针对动态内容的部分。首先是可以单独为信令类型的重要数据在协议层面提高传输优先级，保证及时送达；另外，服务器之间的传输两端都是受控的，因此我们可以采用双边加速，进一步提高传输的质量和稳定性。同时服务器之间采取共享字典压缩，节约传输需要的带宽。
现在，站点上的静态内容，动态内容都通过来服务；能不能够结合起来一起看呢？这个就是要提到的全站加速的概念了。仍然以腾讯视频站点作为例子，我们一起来看一下新的主要架构：

在这个架构下，动态的内容和静态的内容域名都采用单个域名来提供服务，对于静态的内容进行缓存，同时对动态内容进行加速。用户只需要访问单一域名，建立一条连接，就可以得到完整的功能，节省了多次解析和建立连接带来的额外开销。尤其是引入了协议的情况下，多个请求可以并发的处理，相比单纯的链路加速，这里还能够进一步提高用户的性能。
注：本篇内容来自”腾讯技术工程官方号“，公众号：背景
今年一月份首次现身中国的“比特币敲诈者”病毒如今呈指数级爆发，腾讯反病毒实验室日前发现，该病毒疯狂变种，仅  月  日当天新变种数就已达  万，不仅敲诈勒索用户，甚至还能盗取个人隐私。腾讯反病毒实验室分析，从攻击源来看，这是由黑客控制的僵尸网络以网络邮件为传播载体发起的一场风暴。

“比特币敲诈者” 呈指数级爆发
比特币是一种新兴的网络虚拟货币，因可兑换成大多数国家的货币而在全世界广受追捧。与此同时，一种名为“”的“比特币敲诈者”病毒也肆虐全球，其通过远程加密用户电脑内的文档、图片等文件，向用户勒索赎金，否则这些加密的文档将在指定时间永久销毁。目前，腾讯电脑管家均能精准识别，并完美查杀，保障用户电脑安全。
僵尸网络助“比特币敲诈者”愈发猖狂
根据腾讯反病毒实验室监测，“比特币敲诈者”的攻击源大部分来自美国，其次是法国、土耳其等。从  来看，这些攻击源来自一个黑客控制的僵尸网络，黑客利用这个僵尸网络发起邮件风暴。邮件内容大多是接收发票之类，诱导用户去点击下载附件。

“比特币敲诈者”攻击源分布
所谓僵尸网络  是指采用一种或多种传播手段，将大量主机感染  程序僵尸程序病毒，从而在控制者和被感染主机之间所形成的一个可一对多控制的网络。攻击者通过各种途径传播僵尸程序感染互联网上的大量主机，而被感染的主机将通过一个控制信道接收攻击者的指令，组成一个僵尸网络。
据了解，之所以用僵尸网络这个名字，是为了更形象地让人们认识到这类危害的特点：众多的计算机在不知不觉中如同中国古老传说中的僵尸群一样被人驱赶和指挥着，成为被人利用的一种工具。

僵尸网络助“比特币敲诈者”愈发猖狂
“比特币敲诈者”向全球发起攻击，中国是其中目标之一，腾讯反病毒实验室监测，国内四川省，广东省，北京市是重灾区，占总比一半以上。而且受害目标大体都是企业，所以“比特币敲诈者”不仅是针对“高端”用户，而且针对企业单位的员工，因为企业员工的文档更具商业价值，会迫使交赎金。

“比特币敲诈者”受害地区分布
国家互联网应急中心监测的最新数据显示，仅  年上半年，中国境内就有  万余台主机被黑客用作木马或僵尸网络受控端， 万个网站链接被用于传播恶意代码， 万余个网站被植入后门程序，捕获移动互联网恶意程序  万余个，新出现信息系统高危漏洞  个。
腾讯反病毒实验室安全专家表示，僵尸网络构成了一个攻击平台，利用这个平台可以有效地发起各种各样的攻击行为，可以导致整个基础信息网络或者重要应用系统瘫痪，也可以导致大量机密或个人隐私泄漏，还可以用来从事网络欺诈等其他违法犯罪活动。无论是对整个网络还是对用户自身，都造成了比较严重的危害。“比特币敲诈者”便是利用僵尸网络发起邮件风暴，进行各种各样的攻击。
“比特币敲诈者”疯狂变种 可窃取隐私
据了解，“比特币敲诈者”病毒敲诈过程具有高隐蔽性、高技术犯罪、敲诈金额高、攻击高端人士、中招危害高的“五高”特点。用户一旦中招，病毒将浏览所有文档后缀为、、 等文件和图片后缀为、 等文件，并将这些文件进行加密让用户无法打开，用户必须支付一定数量的“比特币”当做赎金才可以还原文件内容。

用户必须支付赎金才可解锁文件
腾讯反病毒实验室的监测数据显示，从今年  月开始，“比特币敲诈者”疫情最为严重，为了持久有效的攻击，躲避静态特征码的查杀，病毒也在不断地演变，图标多选用文档图标如  等，而自身的壳不断地变形变异。其中， 月  日新变种达到最高值，单天就高达  万个！

“比特币敲诈者”变异趋势
同时从数据变化规律来看，在周末“比特币敲诈者”攻击大幅度下降，几乎掉零，而到了工作日，攻击疯狂上飙，数据的波动有规律，可以猜测出这是一个有组织有规模的攻击，黑客上班时间与我们白领相同，周一到周五上班，周六周日下班。

腾讯反病毒实验室安全专家表示，近期发现的“比特币敲诈者”病毒不仅敲诈用户，而且还新增了盗号的特性，会默默搜集用户电脑里的密码配置文件，如：电子邮箱、聊天工具、网银帐号、比特币钱包等等的密码，威胁用户财产安全。目前，腾讯安全团队已第一时间对该病毒进行了深入分析，并可完美查杀此类病毒以及所有变种。
赎回文件需数千元 安全专家支招防范技巧
据路透社报道，“比特币敲诈者”病毒出自俄罗斯的一名黑客，名字叫艾维盖尼耶·米哈伊洛维奇·波格契夫  ，曾凭借这类勒索木马病毒令  个国家超过一百万计算机感染，经济损失超过  亿美元。美国联邦调查局官网显示，波格契夫在  通缉十大黑客名单中排名第二，是某网络犯罪团体的头目。 悬赏  万美元通缉波格契夫，这也是美国在打击网络犯罪案件中所提供的最高悬赏金。
专家强调，正因为危害较大， 才会悬赏如此高的奖金缉拿病毒作者。用户一旦中招，意味着电子版的合同，多年老照片，刚刚写好的企划案，刚刚做成的设计图，统统在病毒的加密下无法打开。病毒制造者主要利用用户急切恢复文件的心理实施敲诈，成功率极高。据悉，比特币近期虽然行情低迷，但单个成交价也在  元人民币左右 月  日更新数据，所以，虽然是几个比特币的勒索，对于用户来说也不是小数目。

电脑管家拦杀提示
专家提醒，不要轻易下载来路不明的文件，尤其是后缀为， 的可执行性文件，不要仅凭图标判断文件的安全性，安装腾讯电脑管家可有效识别文件安全性，并可实时保障电脑安全。另外，平时养成备份习惯，将一些重要文件备份到移动硬盘、网盘，一旦被木马感染，也可及时补救。年度现状调查报告中文翻译完整版可以下载了，文末有链接！
满满多页，全部翻译成中文了！时代和高效运维社区第一时间组织国内知名公司的多位领域专家共同完成翻译，更有多位行业专家倾情推荐。
我们希望借此促进在国内的进一步应用和推广，帮助大家实现转型和落地，成就更多的高效能组织。
报告亮点


变革型领导者有五大共同特征，这些特征对塑造组织的文化和实践，提高组织效能影响巨大
高效能团队在产品快速迭代和稳定性上可以兼得
自动化是组织的法宝
适用于所有组织
松散耦合的架构和团队是持续交付最有力的预测指标
精益产品管理推动组织效率提升


变革领导力

我们正处在转型与落地的时代，变革领导力对于组织的转型至关重要。


愿景：对组织走向有明确的概念，五年后应该达到的目标很清晰。
鼓舞型沟通： 采用一种鼓舞和激励的方式进行沟通，尤其是在一种不确定的环境中。
智力激发：鼓励员工以全新的角度思考问题。
支持型领导：设身处地地关注员工的个人需求和感受。
个体认同：表彰目标达成和工作质量改进，亲自祝贺那些做出了杰出贡献的同僚。


变更领导力和技术实践、精益产品管理、效能和组织效能的关系如下图：

变革型领导者授权和支持团队进行更多的尝试，帮助建立卓越的团队，卓越的技术和卓越的组织。
生产力和稳定性可以兼得
今年的高效能组织相比去年，在生产力方面的优势缩小了，但是稳定性的优势更加明显。

调查报告显示低效能组织的生产力部署频率和变更前置时间有所提升，但是稳定性故障恢复时间、变更失败率下降了。原因在于在追求生产力的过程中，忽略了质量的建设。高效能组织通过内建质量和自动化降低了手工作业和返工，生产力和稳定性兼得。

报告中也明确指出中等效能组织因为处在转型期，正在积极消除技术债务，导致效能优势不明显，报告预测一旦经过了降低技术债务的阶段，进一步的自动化变得触手可及，团队在将迎来新的阶段。报告指出除了企业，在非盈利机构和监管严格的行业中也应用广泛。可以说深深的影响着整个行业。
技术实践
 持续交付
在这几年的报告中，持续交付一直都是核心实践。优维科技王津银和高效运维社区张乐也多次提到持续交付是的核心工程实践。在  认证知识体系中持续交付也是重要的一环。

持续交付可以帮助我们的团队的：


在整个软件交付生命周期中，团队可以按需部署到生产环境或终端用户。
将系统质量和部署问题快速反馈给团队中的每个人，并且确保大家对此类问题高度重视并做出反应。


影响持续交付的因素：

在持续交付中全面使用版本控制、持续集成和主干开发、在软件交付中集成安全机制、导入自动化测试和自动化部署都对效能有非常正面的影响。其中，自动化测试所带来的正向影响最为显著。
 松耦合架构
康威定律是挥之不去的魔咒：“设计系统的组织，最终产生的设计等同于组织之内、之间的沟通结构。”报告今年也重点关注了组织和系统的架构，在松散耦合的架构中，在不依赖关联组件或服务的变更下修改独立的组件或服务是非常容易的。就组织而言，当团队不需要依赖于其他团队就能完成他们的工作时，就可以称之为松耦合团队报告中通过以下两种方式评估服务和组件之间的耦合性：


受访者可以脱离集成环境进行测试。
应用程序可以独立于其所依赖的应用和服务进行部署或发布。


松耦合架构对持续交付、质量和安全都非常重要：

主干开发
代码配置管理是工程实践的起点，而分支策略更是起点的起点。主干开发基于主干进行代码提交和集成，英文  是大型互联网企业非常青睐的分支策略。

报告中明确说明主干开发的要求：


每天向主干合并一次代码
让分支生命周期尽量短少于一天
同一时间少于三条的活跃分支


高效能和低效能团队的分支策略差异十分明显：


高效能研发团队拥有最短的集成周期和分支存活时间，普遍持续若干小时
低效能研发团队拥有最长的集成周期和分支存活时间，普遍持续数日


精益产品管理
从年开始，精益产品管理出现在年度现状调查报告中，行业普遍在应用精益产品管理方法和实践，比如：看板、小批量、、授权开发团队等等。精益大神何勉老师的精益看板体系就是非常落地的体系和实践，其中管理价值流动和建立反馈循环都是  的核心目标。

与商业成品软件
自从年出现以来，我们总能听到这样的声音：”我们的环境不适合，因为我们绝大多数使用的都是商业软件。“但事实证明，越来越多的传统企业都在尝试拥抱，选择架构合理的商业软件，减少定制化，与商业成品软件也能完美契合。

遍地开花
从统计资料显示， 正在各个行业，各种规模的企业中落地，团队的比例 年，年，年，年已经增长到，越来越多的企业和团队开始拥抱 

结论
报告的结论说，有一件事被证明一直是正确的：因为几乎每家公司都依赖于软件，效能成为每个组织的核心竞争力。效能会受到很多因素的影响，包括领导力，工具，自动化和持续学习与改进的文化。

文章来源：时代社区想写这篇文章很久了，考虑到内容可能比较敏感，相关人会对号入座，所以迟迟没有动笔。又到月发出来的时候已是月了 ，毕业生入职，我的小徒弟也开始带徒弟了，这又勾起了我的回忆和想法，按捺不住，蠢蠢欲动，不吐不快，好吧，这就来吧。。
我正式入职鹅厂已有三年，三年里带了三个徒弟，其中两个又各自带了一个。带人历程中，有成功也有失败，有感动也有不快，但总体来说还是相当愉悦的，成就别人的同时也成长了自己。
本文纯属自己的一点心得，对错不好说，欢迎对此感兴趣的小伙伴们一起交流、探讨。好了，不废话了，切入正题。关于人才培养，我总结了以下点：
……
怎么样，这个点够精辟吧？短小精炼，一点不拖沓。
哈哈，再不开始要被打了，以下点：
一、了解对方
所谓“知己知彼，百战不殆”，只有充分了解对方，才能安排、指导得当。那怎样才能深入、准确了解呢？这里分两个方面：
专业技能
面对一个刚入职的新人，你所知道的，除了帅不帅美不美、高不高白不白之外，至多也就是从你老大那里打听到的面试时对的印象。那工作要怎样分配才合适呢？分得少了，简单了，会觉得无聊、没挑战：
我堂堂清北研究生，怀揣着改变世界的梦想过来，可不是给你们打杂的！
分得多了，难了，会觉得疲于奔命甚至自我怀疑：

凌晨四点的深圳我已经见过几次了……
这个今天完不成老大会不会觉得我很笨？
我会不会过不了试用期？
也许我不适合这个职位？我的能力项不在这儿……
也许我一开始就不该选择这份工作……

很熟悉有没有，你做新人时是不是也有过类似的想法？
也许你会说，好像也没这么夸张，参考团队之前的经验给新人分配工作应该就可以了吧？确实，参考以往经验是个比较快捷也比较安全的做法，但我们想要的是，尽可能精准！
我曾经见过一次三级事故，出事后，当事人自然是要承担责任了，而同时，连带地，的直接上级姑且叫吧及上上级也被通报批评了。当时，有个同事跟我抱怨说：“其实很亏的，出事那天休假了，根本就不在。那天也就是按常规流程发版本而已，什么都没过的手，出了事还要背锅。”
作为一个逻辑控，听到这番话，我很认真地思考了这锅到底该不该背。
假设是一家小公司的老板，的员工因为犯错给公司造成了巨大损失，这个损失要不要承担？答案当然是肯定的，因为不可能跟上帝说：“上帝啊，那个错误是我的员工犯的，我那天不在，我什么都没参与，我没做错任何事情，这个损失不该由我来承担，您把它收回去吧。”
那既然这个损失要承担，同理，作为一个，下级犯了错误，损失锅理所应当也要承担背一部分。那既然这锅该背，到底做错了什么呢？试想，如果对犯错的下级足够了解，如果给下级分配的工作既富于挑战又能让下级住，如果对可能出现事故的环节加多几重保险，那么，这个事故是不是就可能不会发生？通报邮件中背的锅是管理不善，这么看的话，没毛病啊。
同理，如果对新人不够了解，工作分配不善，出了问题，导师无论是从道义上，还是从制度上，都是脱不了干系的。

那怎样才能充分了解、洞察新人呢？
聊天是必不可少的。有什么比你问答来得更直接更全面呢？有没有男女朋友啊，性取向啊之类之类的，都可以聊一聊。开个玩笑，以前做过什么项目啊，项目里自己具体负责什么工作啊，有没有做过动画啊，自己的强项弱项啊之类之类的，都可以先做个大概的了解。
可是聊天也有聊天的局限，比如可能故意包装或者隐藏某些东西，也可能对自己的认识不够客观，也可能大家对于同一件事的标准差异较大，导致你的评估不准确等等。那怎么办呢？看！代！码！没错，看的代码！因为我的职位是重构，或曰开发，或曰前端体验，所以我这里的方法指的是这个职位的，其他职位的还请自行切换到相应模式哈。
看代码？   ？看别人代码有多痛苦多耗时你知道吗？要看你自己看去，你全家一起看，你全小区一起看……
别激动，别激动，这里说的是最初小需求的时候，而且是抽验。选择需求里个有思考点或者是有风险点的地方，待提交代码后看看是怎么实现的，还原的思考过程，同时也可以看看的编码风格，大局意识等等。这样一来可以对有个更深的了解，二来也可以对风险有更好的把控。
以上两种方式简单快捷，可以助力你最初对新人的了解，但毕竟太局限太表面，要想更深一层去洞察，就要进入下一阶段了，那就是：在适当的时机，选择个中大型项目跟深度合作！

合作的好处在于不用花专门的时间，就可以深入了解到的沟通、协调、心态及专业等诸多方面。我一直在想，如果找对象时两个人能够有机会像工作中的伙伴一样深度合作一段时间，那这个世界上大抵不会有那么多的闪婚闪离了。深度合作就像一面照妖镜，对方的真实情况，就像咳嗽或者怀孕一样，是掩饰不住的。世界上没有什么人是通过一次深度项目合作了解不到的，如果有，那就三次！
性格特点
你可能会说工作又不是谈恋爱，跟性格特点有什么相关？有。不同性格的喜好、风格不同，做事的结果自然就不同。认清性格特点有助于你预判喜欢什么类型的事情以及做某事的结果可能是怎样的。关于性格类型，有很多种分法，这里强烈推荐乐嘉的性格色彩。乐嘉性格色彩将性格分为红、黄、蓝、绿四种，这四种色彩分别对应性格模式中的孔雀、老虎、猫头鹰和考拉。红色性格的动机是“快乐”，他们热情奔放，积极乐观，喜欢新鲜事物，给他们分配不同类型的工作他们都会积极对待，但缺点是不太坚持，如果是要打磨精品或者周期长的大项目，可能需要导师周期性地打打鸡血。黄色性格的动机是“成就”，领导力和自我驱动力很强，交给他们的工作基本不需要督促，但缺点是有时可能表现地比较强势而不自知，容易令合作伙伴不太愉快。蓝色性格的动机是“完美”，思维严谨，逻辑控，交给蓝色的工作你基本不用担心质量问题，但由于过于追求完美有时会抓不清主次，周期拖得太长而延误战机。绿色性格的动机是“稳定”，小绿跟各种性格的人都会很好相处，但可能缺乏点自驱力，拖延症会相对比较严重，作为导师要多加跟进和督促。
关于性格色彩，贴几张图大家小小感受下，有兴趣的可以继续问谷歌或者度娘，这里就不再展开了。



另外，说明一点，性格跟能力无关，这里说的性格特点是指先天的，可能有的人受后天影响或者自己有意改变，某些特征会不太明显。了解对方的性格色彩有助于引导和合作，但也不要过于依赖它，毕竟这是统计结果，是共性，每个人都还有相当比重的个性成分的。
二、因材施教
第一点我们谈了了解对方，了解对方的目的就是为了因材施教。先来一个孔老夫子的故事吧：
有一次，孔子讲完课，回到自己的书房，学生公西华给他端上一杯水。这时，子路匆匆走进来，大声向老师讨教：“先生，如果我听到一种正确的主张，可以立刻去做么？”孔子看了子路一眼，慢条斯理地说：“总要问一下父亲和兄长吧，怎么能听到就去做呢？”子路刚出去，另一个学生冉有悄悄走到孔子面前，恭敬地问：“先生，我要是听到正确的主张应该立刻去做么？”孔子马上回答：“对，应该立刻实行。”冉有走后，公西华奇怪地问：“先生，一样的问题你的回答怎么相反呢？”孔子笑了笑说：“冉有性格谦逊，办事犹豫不决，所以我鼓励他临事果断。但子路逞强好胜，办事不周全，所以我就劝他遇事多听取别人意见，三思而行。”

因材施教，除了引导充分发挥自己的强项创造更大的价值外，大多数时候，都是向着相反的方向——即向着中庸的方向去教育引导的。
比如我的一个徒弟是红色性格的，刚开始的时候给分配一个需求，我预估是天工作量的，一天就做完了。
“做完了？”
“做完了。”
“有没遇到什么问题？”
“没有。”
然后第二天，看到下游过来跟沟通这个需求的问题。
然后第三天，路过座位时看到屏幕上还显示着那个需求的设计稿和代码。
……
再如，让写封总结邮件，第一版出来时我的读后感是这样的：

你在说什么？明明这个事情我都知道，为什么你写出来的邮件我什么都读不懂？
跟讲了下用语不要太书面，不要太多定语，不要太多长句之类的之后，第二版基本是这种感受了：

再跟讲些优化技巧，第三版已经让我想拍桌子了：！比劳资写得还好了！

就是这样，做事求快，不求精，明明可以做得更好，不逼就是不把真本事拿出来。
对这个徒弟，我经常跟说接到工作的时候不要急着动手，要做充分的沟通和分析，统筹规划，把风险点列出来，想好解决方案，然后再开始。这样做可能前期看速度会慢点，但后期会越来越快，而且输出质量也高。反之急于动手的话，可能一开始比较快，后面遇到问题的时候发现前面做好的某某地方也要改，不但工作反复，而且修修补补，质量也要打折。一开始不以为然，毕竟人的天性是根深蒂固的，而且人总是倾向于用自己习惯和舒服的方式做事。但反复踩了几次坑之后，深以为意，并且在某次的跨部门分享中分享了此观点。
而我的另一个徒弟，是准蓝色性格，做事勤勤恳恳，追求完美，通常要加班才能完成分配的工作。我就经常跟讲二八原则，有的事情是需要花的精力来完成那的拔高的，比如精品项目，一些复用率高的分享、沉淀等。而有些事情只需要花的精力做到的程度就可以了，比如内部一些临时性或复用率低的沟通邮件、测试等。
三、价值引导
分配工作时适当作价值引导，很能激发新人的主动性和积极性，起到事半功倍的效果。
比如我一个徒弟，刚入职两个月的时候，我把团队图书管理的事情交给了，虽然没有明说，但脸上分明写着一千个不愿意：
图书管理员，这得多无聊啊？
纯体力活，没有锻炼价值，又浪费时间，白天搞这个，晚上加班做需求喽……
看出的不快，我就跟说，你现在刚入职，还有很多人不认识你，做这个工作可以提升你的知名度，这样你工作上跟别人合作也会顺利很多的。

再如我另一个徒弟，设计出身的，技术深度方面有那么一点欠缺，有次给分配的需求里要做一个较复杂的动画，看面有难色，我就说，你不是一直想补动画这块儿的短板吗？之前一直想研究这块儿苦于没时间，现在有这样一个需求，多好的机会啊，把这个做好了，你的动画水平就提高一个了。

日常工作中几乎每一项工作都能挖掘出价值点，你只需要明确同步给新人就可以了。
四、犯错处理
关于养娃，有个很好的词叫做“守望”，就是说作为父母，你远远地守着、看着娃就可以了，只要不涉及健康、安全等的大问题，都可以由自己。带新人也是一样，只要预估不会出大问题，尽量少加干涉，在制度、规范内给充分的自由。
有时候可能新人的看法跟你不一样，作为老司机，你很清楚是错的，但是又比较坚持，这种情况下，只要不会造成大的问题，不妨放手给一试，毕竟只有尝试过，才能认识到自己的错，才能心服口服，才能成长。而且，万一是对的呢？很多创新都是在挑战过往经验中产生的，谁能确定的这次“犯错”不会是一次创新的里程碑呢？
对于“尝试性”犯错，不妨给多一些宽容和支持，而对于性格、态度甚至道德方面的问题造成的错误，给予一定机会纠正后如果还没有改观，就不能继续纵容了。
我的一个徒弟，拖延症比较严重，曾经有个改版项目，和上下游一起计划了周二启动，第二周周一交付。因为是重点项目，所以我把的其他工作都协调开了，以便能全力以赴。一切看起来都正常的样子，结果周三询问进度时回答：
“还没启动，之前的某个需求产品又提了什么什么问题……”
周四再询问时：
“还没启动，手头事情收下尾，下午就启动，晚上加班赶下进度……”
周五：
“就快启动了，这几天家里事情有点多，上午看看邮件打打电话什么半天就没了，下午又没了，我周末过来加两天班赶下进度……”
据我所知，手头并没有什么重要紧急的事情，像大多数拖延症一样，觉得这个东西很简单嘛，很快就做完了，所以迟迟没有开始，待到开始时才发现原来这个也要搞，那个也要搞，工作量挺大的，然后就加班加班加班，匆匆忙忙完成一个勉强可以交付的版本，然后在下一个需求的排期里各种修复上下游提出的这个需求的问题。
连问三次，依然造成这种局面，说实话，当时我的内心是这样的：

但是我告诉自己：

冷静下来梳理了一下，一方面跟项目负责人协商加大并行力度，页面分批提供给下游。另一方面，加强对的“监管”：
项目上线前每天固定时间跟我和团队同步开发进度，附上体验成果的地址。
当然，也认识到了自己的错误，后面严格按此约定执行了。
这种主要是态度问题造成的犯错，如果是当前能力不足造成的，不妨暂时将项目收回，并给予一定的“刺激”。比如说：这个项目有价值，本来是想让你好好做的，可是你目前由于方面技能还不是很足或者欠缺经验，前期产出的结果存在的问题，所以这个项目交由支持了，在方面比较擅长，你可以看下是怎么做的，取长补短，把自己的方面提升一下。
需注意的是，谈话的时候一定要注意自己的态度和语气，你是站在为了更好地发展的立场上考虑问题的，而不是问责的。

五、树立榜样
再好的说教都不如榜样的力量。作为导师，不管你愿不愿意，背后都有一双眼睛在盯着你，所以你需要：
以身作则
你总不能前脚跟讲完瑞雪，后脚就顺一包纸巾回家吧？你总不能刚跟说完版本验证要充分，自己就发个到线上吧？你的一言一行都需要以身作则，否则，打脸的感觉可不太好受哦。
保持优秀
作为导师，如果你不优秀，是很难令新人信服的。当遇到问题时，你不能帮解决；当你跟强调产出时，你自己却没有或很少产出；当你跟提精品要求时，自己的输出却很粗糙，如何能够信服你，如何能够执行你的指令？反之，如果你的能力在整个团队中都是数一数二的，那很可能会默默以你为榜样这点不是说我自己有多优秀，我实在是心有余而力不足，这点主要是我做新人的时候，从我导师身上感悟到的。

六、人文关怀
所谓“一日为师，终身为父”，能做师徒是难得的猿份。当工作中有困惑，生活中有困难时，给予恰当的帮助和关怀，不但能增进你们的感情，还能让对团队有更强的归属感。
五音不全的我唱极没自信，一拿起话筒就紧张，有次团队去唱，导师看我紧张就使劲儿往屏幕上发字幕：“我爱你”，“我是爱你的”，现在想来感动犹在隐私都暴露了，为了我也是拼了 。
所以，请不要吝啬你的“温情”，也不要小瞧你的“温情”，如果你打动了你的徒弟，很可能会把这份爱传递下去的。

有人可能会问，作为导师，为什么要这么辛苦地带徒弟，这又不是你的核心工作。其实，我带第一个徒弟的时候，并没有认真考虑过这个问题，只是觉得我导师帮了我很多，给了我很多，我只是简单地把它们传承下来了而已。事后认真想想，好好带徒弟，不只对徒弟有好处，自己也是受益颇多的。
首先，这个活儿本身可以锻炼你沟通、协调、识人、用人等方面的技能。
其次，就像养娃可以弥补自己童年的缺失一样，带徒弟也可以“看到”过往的自己，可以“穿越”回去重新审视自己，加深自我认识。
再次，你带的徒弟多半儿后面会由你管理，把培养好了，后面合作起来也顺畅，你的小团队也更容易产出价值。
最后，也是最难得的，你会收获一份师生情，会多一个拆不散的好胖友。
也有人可能很想带徒弟，但是由于种种原因却没有这样的机会。其实，广义的“导师”并非一定要有名分，一定要是固定关系的。三人行，必有我师嘛，别人有困难时主动帮助别人解决问题、解疑、解惑，久而久之，你就成了别人心目中实际的“导师”了。这种导师，比工作上安排的导师，更为高端。
厚着脸皮举个例子，曾经，组内的一位毕业生转正的时候，请导师和们吃饭，把我也叫上了，我说“我什么角色都不是，还是不去了吧”，说“不啊，你帮了我很多啊。”论蹭饭的正确姿势 
以上，是我自己被导师带以及作为导师带徒弟的一些感想，有不同想法欢迎交流、指正！学习时，看到了和，想对这两者的区别一探究竟。


一、官方解释
因为和都是基于所以直接看的的官方文档解释


                                                           
对象是由模块系统创建的。 有时这是难以接受的；许多人希望他们的模块成为某个类的实例。 为了实现这个，需要将期望导出的对象赋值给。 注意，将期望的对象赋值给会简单地重新绑定到本地变量上，这可能不是你想要的。



                             =         =                       
译文：变量是在模块的文件级别作用域内有效的，它在模块被执行前被赋于  的值。它有一个快捷方式，以便  =  可以被更简洁地写成 = 。 注意，就像任何变量，如果一个新的值被赋值给，它就不再绑定到其实是属性会自动挂载到没有命名冲突的属性


从导入方式去理解，关键有两个变量全局变量，局部变量、一个返回值
  {
    = {  {} }
    = {
     你的被引入代码 
       =  = {} 默认都有的
     _ {}
     = _
     此时，不再挂载到，
     将导出{}默认对象
     = _
     此时，这个模块将导出_对象，覆盖上的_    
      你的被引入代码 
  } 
  不管是还是，最后返回的还是 
   
}

二、事例
事例一：
  {}
   {}
 ===      
 ==          

  {
   
   {}
   
   
   
   
  
    
     _  
 }
 


从事例一中，可以看出来

每个文件一创建，都有一个  =  = {}，使和都指向一个空对象。
是全局内置对象，是被创建的局部对象。
和所指向的内存地址相同

事例二：、
 
 = 的
 = 的
 = {
    的函数
}
 =  {
    的函数
}
 = {
     的
    {
        的函数
    }

}

 
  = 
 当属性和函数在都有定义时：
   的
  的函数

 当属性在没有定义，函数在有定义
   
   的函数

 当函数在没有定义，属性在有定义
         的
     报错了      

由例二可以知道：

像是的大哥，当以{}整体导出时会覆盖的属性和方法，
注意，若只是将属性方法挂载在上时，=和=，={}和={}，最后的值取决于和的顺序，谁在后，就是最后的值



若和同时赋值时，所使用的属性和方法必须出现在，若属性没有在中定义的话，出现，若方法没有在中定义，会抛出错误。

例三 、
的对象、、构造函数使用
 
  = 
 若传的是类，一个对象
  =  
         

 若不需要在构造函数时初始化参数，直接调用方法属性
           

 
 类
 {
     = 
     = 
}
 为类添加方法
 = {
           
}

 返回类
 = 

 若构造函数没有传入参数，直接传入对象
  =  

说了这么多，其实建议就是，如果只是单一属性或方法的话，就使用属性方法。要是导出多个属性或方法或使用对象构造方法，结合等，就建议使用 = {}。文章有很多地方描述的可能不是很准确，提到的点也不够全面，如果有不对的地方，还望斧正！

参考资料：官方文档中文、  –   、     、 和  的区别




相关推荐
前端开发框架简介和
包学会之浅入浅出：开学篇导语
针对主播反馈的音质变差问题，在分析原因后，设计了一套测试方案并实现了自动化。对主播的采集音量，主播采集频率范围，两项重要参数进行量化监控。本文章对问题背景以及实现原理进行分享。
音质测试工具介绍
    这是什么工具：
界面：
工具支持一键测试，自动执行测试，测试结束后自动分析，并绘制分析结果。

测试项：
       用于测试直播观众端，收听到的音量大小，量化并直观显示音量大小；       用于测试直播主播端，采集声音的频率范围，量化并直观显示截止频率；
结果显示：
上半部分为音量幅值波形图，可见音量最大值以及平均值；
下半部分为频谱分析图，可见最大幅值，以及截止频率值。

    解决什么问题：
、问题背景：
直播 发布后，有主播投诉音质变差。
对问题进行重现后，确认问题原因为两方面：麦克风采集音量变小、采集频率范围变小。
那么为什么我们的测试人员在功能测试过程中没有发现呢？
主要是下面几个原因：音量大还是小每个人感受都不一样，判断偏主观；办公室太嘈杂有噪音干扰；测试时没敢大声说话，所以声音小也是理所当然。
、解决方案：
那么接下来的问题就是，应该用什么样的测试方法，对音质进行测试，避免这类问题再犯。
方案：
从测试人员未发现问题的原因来看，我们可以这么处理：
  邀请多人对音量大小进行体验，并对比先前版本；  测试时，寻找安静环境进行测试；  找个安静又没人的地方，敞开嗓子放声测试；
这个方案，显然操作成本太高，明显不是一个技术人员应该用的最优方案。
方案：
音视频实验室对已有成熟的音质打分方案，可以拿过来用。
测试原理大致如下：
  端输出标准测试音源；  通过音频线，直连主播端手机麦克风插孔，输入测试音频；  通过音频线，观众端将耳机孔直连，将观众端收到的音频输出给；  端对比音频源与接收音频，使用评判差异情况，进行打分。
这个方案，要得到准确的音质打分值，需事先调节输出音量到某合适值，且打分值和要测试的音量大小并无直接关系；此外打分值也无法体现出问题的采集频宽范围。故该方案不适用我们的问题场景。
方案实际解决方案：
于是乎只能自己撸起袖子加油干，设计了如下测试方案。
  制作标准测试音频，音频内容为的正弦波、的扫频正弦波，时长即可；  端外接扬声器播放测试音频；  主播端通过外置麦克风采集播放的测试音频；  通过音频线，观众端将耳机孔直连，将观众端收到的音频输出给；  对接收到的音频信号进行分析：音频波形振幅获取音量大小，音频频谱获取采集频宽。
这样，方案就能够量化出主播采集音量的大小、采集频率范围，正是我们想要测试方案。
    如何使用工具：
测试拓扑搭建：
 
  测试为笔记本，将测试音频通过音箱播放音箱播放音量固定为；  主播端通过自带麦克风进行音频采集音箱与采集手机位置固定为；  观众端耳机输出口，使用音频线直连到笔记本麦克风输入口；
文件夹说明：
_、_为测试音频源，为测试程序。

软件界面说明：

打开后，测试仅需一键点击“”按钮，即可启动测试。
测试约结束，测试完成后生成测试结果文件，并显示结果。
测试结果说明：

  上图为根据接收到的音频，绘制的波形图：
横轴为时间轴，纵轴为对应时刻音频振幅；音频波形的最大振幅参见 ，平均振幅参见 ；振幅越高，对应音量越大。
  下图为接收到的音频，频谱分析结果：
横轴为频率值，纵轴为该频点上对应的幅值已转化为；频域上，截止频率参见图示绿线的截止处频率值，最大幅值参见  ；频域上的幅值越高，对应音量越大，截止频率越高，高频成分丢失越少音质越好。
    工具自动化原理
方案测试过程中，如果手动操作的话，需要干下面这些事情：

制作测试音频源
设定播放音量
端开始播放后，需要同步启动录音
将录音结果文件，导入到，查看最大振幅平均振幅没法看
使用选取分析的音频段，进行变换分析频谱，查看采集的频宽

以上这些环节，需要一定学习成本，即便学习后，操作起来也比较费时。
所以打算将以上环节打包起来，做成一个可以“一键测试”的小工具。
各个关键环节，自动化实现方案如下：
       制作测试音频源
使用生成测试音频。
生成正弦波，设定时长为，用于音量大小的测试；
生成的扫频正弦波，设定时长，用于截止频率的测试；
       设定播放音量
可通过中的模块，调用系统音量设置文件，设置的播放音量。
       端开始播放后，需要同步启动录音
声音的播放，可以通过的模块完成，通过设定对应的音频参数后，将音频源文件写入声卡中即可。
声音的录制，可以通过模块，设定对应的音频编码参数后，读取声卡中音频数据写入到音频结果文件中即可。
使用模块，开两个线程同时处理，播放的同时同步在录音。
       将录音结果文件，导入到，查看最大振幅
查看最大振幅以及平均值，可以通过模块，导入音频输入，方便的计算出来。
       使用选取分析的音频段，进行变换分析频谱，查看采集的频宽
同样的，同样支持做的计算。
截取对应的音频段进行运算，将结果去除共轭，并转化单位为后，即可用于绘制结果。
       结果绘图
使用进行处理即可。
       一键测试
界面只需要一个按钮，使用进行界面设计，一键完成测试。导语
在上一篇文章《的机制解析》结尾处讲到是通过命令来处理过期数据，本文将继续对命令做介绍，并以此引出空闲数据块的产生，然后对空闲数据块管理机制的原理做解析。
数据块空闲空间的产生
根据的机制，所有和操作都会产生过期数据，需要通过命令来清理过期数据。命令基本上有两种：

将过期对应的磁盘空间标记为可用，但不会真正释放空间给操作系统，其他程序无法再利用。该操作执行时不会要求排它锁 ，不影响表读写操作。
 将正常的数据拷贝到新磁盘文件中，重新组织，将原数据文件删除，未使用的磁盘空间退还给操作系统，该操作执行时需要获取排它锁，会影响正常的读写操作。因此执行该操作时需要慎重，特别是表数据量较大时，执行时间会比较长。

我们知道的表实际上是由多个物理数据块页组成，当执行操作后，这些数据块中的保存有过期记录的磁盘空间就会被标记为可用，就会产生空闲空间。
当新增记录时，会优先重新利用表中数据块的空闲空间，而不是分配一个新的数据块。然而当多个数据块都有空闲空间时，该选取哪个数据块来保存新记录呢？被选取的记录必须要能够有足够的空间存放新记录。
空闲数据块的组织结构
为解决以上问题，设计了  结构来表示各个数据块中空闲磁盘空间的大小。在版本之后，每个表都会独立的空间，具体表现为以_为后缀的物理文件：

  
  
        _
        _
        _
文件的存储结构如下所示：

为了快速搜索到合适数据块，减少因搜索带来的开销即节省文件大小，结构只使用一个字节来记录一个数据块中的空闲磁盘空闲大小，因=，那么就可以记录种空闲磁盘大小，假设一个数据块大小为默认为，那么就可以划分成等份，每份有字节来表示范围，示例如下：

         
             
            
          
       
       
       
数据块内的数据结构
知道了数据块中空闲空间大小的表示方法，那如何来组织这些表示记录，保持高效查询效率呢？答案是使用了一种二叉树结构大根堆来存储这些表示空闲空间大小的记录，叶子节点存储实际的空间大小记录，非叶子节点只是作为辅助查询。当需要查询是否有合适的数据块大小时，只需要先比较树的根节点即可知道，大大减少了查询次数。大根堆数据结构示例如下：
    
      
              
上述例子中叶子节点的值分别代表了空闲数据块的值，值代表的就是空闲磁盘空间大小在的数据块。源码中页数据结构定义如下：
 
{
                __ 
            ___
} 
其中，__指向的是下一次查询开始的位置，具体作用稍后阐述，_数组存储二叉树的节点值。数据块内的数据存储结构类似如下图所示：

按照这种存储结构，一个数据块存储记录的数据块，和普通数据块大小是一致的可以存储的实际记录数数据块的空闲空间大小对应的 为：

            除以是因为二叉树的叶子节点数约为总节点数的
其中，表示数据块大小，表示数据块固定大小的头部信息。如果按照数据块默认大小，那么单个数据块可存储的记录数大约为个，另外，中一个表最多可以有个数据块，那么最多就需要条记录来表示这些数据块中拥有的空闲空间大小，显然，单个数据块是无法存储下这些记录，实际需要约个数据块来存储。
前面我们介绍了单个数据块内的存储值的数据结构，当有多个数据块时，但是我们又该按照什么顺序去选择数据块页来搜索呢？顺序查找数据块显然效率太低。
数据块间的逻辑组织结构
为了提升查找数据块的效率，采用类似多叉树的逻辑结构来组织数据。为每个数据块指定一个额外的逻辑结构，数据结构定义如下：
 __     =     
 __    __  
 __ 

 
{
                              
                              
} 
其中，表示该数据块所处的层号，表示在该层中的序号，序号从开始。类似于单个数据块内的存储方式，只有在最底层=的数据块才实际存储记录，其它层作为查询的辅助层，上层的叶子节点值代表了下层的根节点值。
那需要多少层逻辑结构才能表示所有的数据块记录呢，答案是当一个数据块内存储超过条记录 时，采用三层即可，因为=。
下面用一个示意图来表示整体的组织结构，为了让示意图简化，只在图中每个数据块存放个字节的数据，这和存放个字节原理是一致的。文件各数据块间逻辑组织结构示意图如下：

如图所示，第层数据块中叶子节点值就代表了它下一层第层第号数据块的根节点值，而第层第号数据块的叶子节点值则代表的是第层第号数据块的根节点，第层第号数据块的叶子节点值代表的是空闲空间大小为字节的数据块。每个数据块都有逻辑地址，如第号数据块的逻辑地址{}表示第层的第号数据块，实际上是对应的物理文件的第号数据块。第层和第层的数据块内存储的数据都只是作为辅助层索引，实际上只有第层数据块内的叶子节点才存储着表中空闲数据块的值，其他节点均是索引值。
空闲数据块的搜索算法
上面介绍了空闲数据块的表示方法和文件中各数据块的组织形式，接下来将介绍空闲空间数据块的搜索算法。
首先，先介绍数据块内的查找算法。对于大根堆二叉树查找，简单的方法就是每次从节点开始比较查找，如果节点小于待查找值，则表示该块内没有满足条件的 ，否则可以继续向下找到一个满足条件的叶子节点。但是的设计并不是这样的，而是通过之前介绍的结构体的__来保存下一次查询的起点位置，搜索算法如下：

比较根节点值，如果待查询值大于根节点，则直接返回，表示该数据块内没有满足条件的值，否则进行下一步。
比较查询的起点位置对应的值，如果不满足条件，则进行下一步，否则跳到第步。
设置新查询位置为下一个序号，值代表了在叶子节点的顺序号的父节点，再比较，如果不满足条件则重复该步骤，直到向上查找到根节点。如果找到满足条件的中间节点，则进行下一步。
向下查找，找到满足条件的叶子节点，然后进行下一步。
重新设置下一次查询的__变量，然后返回该叶子节点的。


数据块内搜索算法的核心源码如下：


__     
                  __
{
    

     _   每次查询先检查根节点是否满足条件
         
     = __
        ||  = 
         = 
     = 
     =                      开始查询时的位置
       
    {
         _ = 
            
         =   返回下一个的父节点位置
    }
             向下查找到叶子节点
    {
             =   先查看左子节点
            
            _ = 
        {
             = 
            
        }
                        左子节点不满足条件查找右子节点
            
            _ = 
        {
             = 
        }
        
        {
            都没找到，说明当前可能存在 的情况 写磁盘数据时出现，只有部分数据写入
            重新更新页数据后再查询
            
            __
            
             

        }
    }
     =                      找到序号
    __ =         保存下一次查询开始的位置
     
}
至此，就找到了该数据块中满足条件的叶子节点，如果该页不是处在第层，则该叶子节点并不是我们最终查询目标，根据前述数据块间的组织结构可知，辅助层中叶子节点对应的是下一层数据块的根节点，因此，需要继续向下查找到第层的对应叶子节点。查找叶子节点对应下一层的数据块则是通过返回的值来计算的，核心查找算法源码如下：
 {
    
     = __ _  == __    
    
      =    找到满足条件的叶子节点，否则退出循环
    {
          == __    查找到第层，返回结果
             ___  
         = __      非第层，继续查找子树
    }
    
}

 
__   
{
        
      __
     =   
     =      根据上一层的查找下层对应数据页的
     
}
整个搜索算法就介绍完毕，至于为什么要把__来作为起始查询位置而不是节点呢？原因有几点：

当有多个后端连接同时新增时，可以尽量避免对同一数据块的写冲突，提高写并行度。如果每次都从节点开始查找，有可能多个查询都同时查找到同一个数据块。
获取的是上一次返回查询结果的临近数据块，更有利于提升磁盘效率。

更新空闲数据块空间大小
查找到表中合适的空闲数据块后，新记录会写入该数据块，然后需要更新该数据块的空闲空间大小。相较于搜索，更新相对简单，核心思想就是先重新计算该空闲数据块的值，然后更新在数据块中对应叶子节点的值，再以“冒泡”的方式向上不断更新，直到更新到父节点值不变化或者节点。核心源码如下：

_ =                  更新当前节点

{
    
     = 
     = 
     =   
     = _
                              右子节点存在，则选取最大值作为父节点的新值
         =   _
     = _
      ==                         检查更新后父节点是否有变化
        
    _ =             有变化，更新父节点，继续向上更新
}                                    更新到节点退出
锁
搜索空闲数据块时只会对当前搜索的数据块加共享锁  ，更新数据块时才会加排它锁  。这里值得注意的一点是在搜索时，使用了__变量来表示下一次搜索的起点位置，并没有为之加一个排它锁，因为维持一个排它锁的代价远比__变量出现异常后的代价大很多。一、与术语概念对照
  传统的关系数据库一般由数据库、表、记录三个层次概念组成，是由数据库、集合、文档对象三个层次组成。对于关系型数据库里的表，但是集合中没有列、行和关系概念，这体现了模式自由的特点。
下面表格展示了各种数据库与对应的术语和概念：









数据库
数据库


表
集合


行
文档或


列
字段


索引
索引


表关联 
内嵌文档和链接 和


主键 
主键 


使用指定的唯一列或列的组合作为主键
在中，使用自增的_作为主键


集合 
集合管道



二、与语法对照
 与的语句在形式上虽然有所差别，但是其操作本质和逻辑使用上都有着想通的方面，所以在习惯了使用语句，在学习的语法规则还是比较容易上手的，这一期就先简单介绍一些常用的、简单的逻辑语句在两种数据库中的使用对照情况。





说明






服务器守护进程




客户端工具




逻辑备份工具




逻辑恢复工具




修复数据库




数据导出工具




数据导入工具


      …

新建用户并权限


 
 
显示库列表


 
 
显示表列表


 
 
查询主从状态


     
 {}
创建表


    
{}
创建索引


     
{}
创建索引


    
{ }
插入记录


    
{}{ }
查询表


   
   
查询表


     =
{}
条件查询


      =
{}{ }
条件查询


     
{{}}
条件查询


       =
{{}}
条件查询


     =  =
{}
条件查询


     =  =
 {    {    }  {    }  } 
条件查询


     

条件查询


       
{}
模糊查询


       
{}
模糊查询


   

获取表记录数


     
{ { }}
获取表记录数


  _  
_
去掉重复值


      
{}
排序


       
{}
排序


      =
{}
获取存储路径


   =  =
{} {{}}  
更新记录


   =  =
{} {{}}  
更新记录


    =
{}
删除记录



 
删除所有的记录


    
 
删除数据库


    

删除表



相关推荐：     第一期 ：集群搭建 第二期：压缩与索引     第三期：托管  存储服务腾讯云自成立年来，已经为企业、开发者、合作伙伴、数百万用户提供了云计算服务。如何应对不同业务对网络架构和性能的不同要求，为海量用户提供广泛的优质网络覆盖，便是腾讯云核心解决方案——的网络服务平台腾讯云内部叫做平台的核心价值所在。
腾讯资深架构师熊普江
为了帮助快速发展的中小运营商宽带用户消减通联的制约，腾讯在年开始了网络建设，截至目前，在全国建了个平台，对等互联家运营商，均为用户量在万以上的有号的运营商，互连带宽超过多个，互连专线多条。此次上海峰会，腾讯资深架构师熊普江全面解读了腾讯云平台的核心技术优势与未来演进方向。
平台整合了架构，并使用腾讯云自有的号，在与运营商私有互联时使用  特性；当对等互联的运营商接口使用时，则仅允许其访问腾讯云自有地址，避免了穿透流量；当所有连接运营商的接口使用时，则拒绝等非正常数据包，形成天然的抗攻击的能力。
与三大运营商静态路由互连相比，腾讯云表现卓越：首先，用户访问质量大幅提升，网络性能约有左右的提升；其次，运营成本大幅降低，为合作伙伴节省跨网成本超过亿元；再次，的服务器都是最佳最短路由的单，业务架构更加简洁而高效；最后，腾讯云能够高效、可靠地适用于任何业务架构和任何性能要求。
开发者专场上，腾讯云“云创业”计划也再次面对开发者发起新一轮招募。该计划包括专项扶持的“孵化计划”、“起飞计划”以及“腾飞计划”，为中小企业开发者提供云资源、技术、培训等一体化的扶持，为开发者云生态注入养料，释放核心潜能。作者：

在互联网盛行的时代，车联网，物联网相关的字眼随处可见。为了方便企业在员工管理上提供更为快捷有效地方式 是基于当下主流企业人才管理方式及员工普及的社交方式微信的一个开放性平台。
它包含企业端的招聘管理、员工管理，其中招聘管理又包含了面试通知邀请、到发放以及候选人入职管理；员工管理包含了员工信息及状态跟踪；求职者端包含了对职位查看及投递简历状态的跟踪。
就企业而言，能够更快获取到人才信息，包括内部员工推荐，求职者投递及第三方推荐，迅速跟进，筛选招聘，在企业端招聘负责人及需求责任人可通过不同客户端，和微信了解到最新的职位动态，从而提高招聘效率；就求职者而言，人性化且简易地操作，省去繁琐地各种录入，多种渠道投递意向职位，实时了解面试情况，专业地流程让求职者提高了对公司的认可度。
整体架构
考虑到平台的用户量较大，所以在架构时选择了成熟、稳定地框架。如下图所示，该系统包含了两个独立的应用，分别提供服务和服务，两者的后端均采用了的模式；应用的前端采用 应用前端采用了；数据库目前使用了后期看用户量可以考虑；在用户消息通知功能中使用了腾讯云的短信平台；两个应用共享一个服务器，如果后期流量过大将考虑拆分到不同服务器。
 整体架构图
由于项目采用开源框架，所以与别的原生项目相比多了以下特点：

基础开源框架，项目采用了作为基础框架。 是基于  语言的极速    框架，其核心设计目标是开发迅速、代码量少、学习简单、功能强大、轻量级、易扩展、。作为一个中小型项目，既能在短期内完全满足项目所需，同时也能极大提高开发效率且无第三方依赖。

页面维护性高，的推出，解救了很多程序员的审美观，让他们脱离美工也能写出丰富多彩的页面，它是基于 、、 的，简洁灵活，使得  开发更加快捷。

独立应用，为了给用户提供更快捷地访问方式，将端与微信端独立。端的登录采用了传统的角色，用户名和密码的验证；端登录采用了微信接口授权方式，从而省去了用户注册流程。


核心功能
一招聘管理系统
将中介推荐、自荐以及内部推荐的简历直接归档入库，并开启招聘流程。伴随整个招聘流程结束，期间求职者所需提交的资料，或需填写的信息，皆可由系统负责通知或采集。
二面试管理系统

求职者，关注微信服务号，可以及时收到面试通知，查看面试结果，接收，反馈求职信息，以及提前录入个人资料。为简化通知面试及员工入职资料录入人力成本。

面试官，可通过微信查看面试者简历，上一轮面试评价，面试者是否已到场等候，提升面试管理效率。

部门负责人，可随时关注发布的职位招聘近况。提前了解求职者招聘流程，降低沟通成本，提高信息时效性。


经验分享
一开发团队组建
项目组一共人，分别承担业务需求分析、系统详细设计及编码实现的工作。由于初创团队资源不足，人的配置还是略显不足，特别是缺少熟悉构建云服务方面的人员及经验。
二设计开发过程中的心得
合理使用验证码，能够有效防止暴力攻击
在类似于登录或者敏感信息提交时，使用验证码，可以在一定程度上防止暴力攻击。但并不是说，只要是验证码都能起到很好的作用。
简单的图形验证码，很容易就能被代码解析。因此验证码也在不断更新换代，比如加干扰，验证码变形等。除非你有充足的时间或者现成的代码可以尽快实现，否则在一个验证功能花费过多的时间得不偿失，另外用户体验还不见得有多好。腾讯云服务提供的验证码，有多种验证方式，比如拼图和滑动拼图，用户体验都感觉不错，还能节省很多开发时间。可以考虑作为前期过渡使用。
当然，除了验证码外，还有访问次数限制和防重复提交等可以有效防止暴力攻击。 
接入短信平台
短信的使用已经越来越频繁，比如发送重要的通知信息，找回密码的验证码等。选择一个收费合理，同时能保证送达率和实效性的短信平台，就尤其重要。
因为我们项目准备部署到腾讯云，正好了解到腾讯云也有短信平台，所以就进一步了解了下。不管是控制台操作，还是接口调用，都和微信服务号类似，容易上手。另外收费也还算合理，考虑到对云服务上的应用支撑应该还不错，最终决定选择腾讯云的短信平台。
将复杂的权限控制交给
在以往的项目中，权限是最让人头疼的，有角色，有用户，有大量的逻辑需要考虑。可以支持三种授权方式，包括编码，注解及 本项目考虑到耦合度，不想因为角色的改变去修改源码，就采用了注解方式。
采用敏捷开发模式
为了顺应当下日益更新的需求，相比传统的瀑布式开发已经不能适应。将系统拆分为系统模块化，排出优先级，尽快尽早地完成可用功能，再在此基础上循环迭代直到功能完善和稳定。

相关推荐 商品接入方案云端开发工程师认证课程企业方向来者人力资源系统作者：
团队：腾讯移动品质中心

导语
相信每一位测试小伙伴对于测试过程管理都有自己的独特见解。我所在的部门年初开始施行测试变革——“测试左移。过程中有从技术层面的”左移“，也有从流程层面的”左移“等等，方式形态万千。今天和大家分享的是我在这个过程中，除了个人技术能力提升外，在测试过程管理上的一些感触。它让我目前作为业务测试负责人也算得心应手。希望对其他小伙伴也有一些借鉴。
年后，我负责的业务测试内容发生了一些变化，说实话，当时内心还是感受到一些慌乱。现在总算是风雨过去，再见彩虹。而在这个过程中有两个关键点让我的测试过程管理工作受益匪浅，一是努力培养项目团队全员的质量意识来改善过程质量，二是制定良好的测试策略来指导测试工作更清晰。
培养质量意识
我们必须承认，产品质量不是由测试同学测出来的。作为项目团队成员，产品、开发和测试的作用都是独一无二，不可替代的。我们都为提升产品质量一起奋斗。然而，在实际迭代过程中，产品同学会更加关心需求的如期上线，开发同学会更加关心编码的及时完成，导致质量工作的重担向测试这一方偏移。我们也知道，忽视了前期的质量工作，在后期的测试环节甚至版本发布上线后，我们需要为之前的行为买单，耗费更多的时间和精力。
在产品日益复杂化的今天，用户需求不断增多，我们的业务压力骤增。在如此严峻的环境下，如何能够求得质量和收益的双赢呢？“测试左移”应运而生，但施行测试左移的一个重要前提是：团队对于质量风险前置这个认知上的一致性。我们团队主要从以下几个方向来努力培养团队全体成员的质量意识：
 
图 提升团队质量意识的五个途径
第一， 质量宣讲
首先，普及产品质量度量参数。需要知道，除了业务数据，产品还存在质量数据。而且我们通过质量数据来度量每个业务的开发质量和需求质量。质量宣讲能够在团队内普及这些度量数据的含义，明确指出核心数据会在正式场合进行汇报。对于异常的数据会标红显示，比如严重用户反馈数、主线不通过数、交付通过率、千行代码缺陷率、引入原因分类包括设计缺陷、编码缺陷、需求缺陷等等维度来衡量各个环节的质量以及我们产品的整体质量。
其次，部门团队横向对比，提升产品质量的敏感度。通过团队间的横向对比，以竞争和奖励的方式来提升团队成员对质量问题的敏感度。在桌管内部，针对严重用户反馈，我们改进质量监督机制，实施研发运营质量改进积分方案；同时按业务中心进行分类，实时监控每月各业务的严重用户反馈的趋势，鼓励从流程优化上进行了质量改进的团队，刺激各团队主动提升产品质量的氛围。每半年进行一次积分排行，前三名进行奖励，非常具有吸引力。
此外，落实项目总结，避免形式化。如何避免项目总结趋于形式化，如何敦促项目总结的方案能够闭环落地，都是产品质量的重要保证。针对这块，我们巧妙地发挥了的角色价值。如果没有，测试也可以发挥自己的担当力去推动。主要工作就是明确需要改进的内容，并形成明文规范存档。规范一旦建立，在后续的执行过程中，如果再犯，需要明确指出，并予以相应的惩罚。比如，提交代码需要关联正确的需求，发现关联错误必须直接打回影响交付通过率。
第二， 主人翁意识
团队内部施行责任制，让每一个角色都有机会感受负责人的体验。上半年我们业务团队，开发同学主动承担负责人体验。他们的责任制体现在新需求的版本迭代、率、用户反馈跟进以及主线大版本合入。一般情况下，我们建议轮流交替体验。这样做的好处有三点：一可以通过实操的方式了解各个流程的每个细节；二身为必须对整体过程负责，包括不按时提测，解决不及时等问题，可以有效减少过程问题；三可以通过过程体验，发现过程中存在的一些问题，后续主动去避免，培养良好的研发习惯。
第三， 产品走查
以前我们的产品走查总是在测试完成第一轮集成测试之后开展，现在发现完全没有必要。产品同学对客户的需求应该是最清楚明白的。如果把这个环节前置到开发提测之前，产品同学可以快速发现与需求实现不一致的地方，而且也可以将一些低级的错误在提测之前消灭掉，从而提升开发同学的交付质量，也减少了在后面匆忙走查导致的问题遗漏。
第四， 互相结盟
对于测试而言，和其他角色的结盟绝对是有利无弊的切记：永远不要和团队小伙伴形成对立的局面。我们可以和产品结盟，推动开发去解决体验上的问题单，提升开发的精品意识；我们可以和开发结盟，推动产品的需求文档更加规范化，便于后续的编码和测试分析；我们还可以和结盟，推动整个团队内部流程的优化。
第五， 上层推动
想要在项目团队内达成一个目标，团队内领导的支持比较关键。它能够推动产品实施过程中的问题解决。测试同学如果觉得自己号召力不够，可以求助于自己的。
在团队内部，小伙伴们的质量意识提升后，彼此间的沟通也变得相对简单，而协作也相对容易执行。比如讨论质量相关的数据，他们可以抛出疑问并讨论解决；在团队内部推行一些新的研发流程的时候，产品和开发能够积极配合，并给出可行的实践方案。团队内细节上的把握让我们相信，测试工作可以逐步左移，而产品质量也能进一步提升。
制定测试策略
除了质量意识需要整个团队共同努力外，良好的测试策略也同样并不仅仅是测试角色的事情。我们必须承认，一个好的测试策略，绝对会让咱们后面的测试过程少操很多的心。
当被通知成为一个业务的测试负责人之后，我想我们的脑海里，或多或少都会去勾勒下我们将要如何把控这块业务的测试策略。本部分主要介绍游戏合作这个业务的测试策略设计。它主要包括全局测试策略和具体需求的详细测试策略。
、全局测试策略
全局测试策略主要是从宏观上对我们的业务制定对应的测试策略。在我看来，想要从宏观上制定策略，必须要了解它的项目外向属性。而外向属性自然是包括人和产品特性，也就是团队属性和业务属性。在具体分析项目外向属性之前，我觉得首先需要对需求进行管理。因为不管是团队的人或是产品特性，最终和测试对接的都是需求，所以我们需要首先从需求上进行管理。
需求管理
这里的需求管理主要讲的是需求的合理分类。它不仅有利于项目生产率的度量，还有利于测试人员实施正确的测试策略。下图展示了，我们的需求类别：

图 需求分类包括新需求、需求优化、技术需求、转需求
我们的需求可以划分为四类：新需求，技术需求、需求优化和转需求。针对不同类型的需求，我们可以先制定它的宏观测试策略，在前期可以和开发、产品达成一致，并将其固化：
新需求：涉及客户端的需求，要求开发必须提供详细的技术方案，产品提测前进行走查，测试提供详细的测试分析进行评审，测试过程数据需要代码覆盖率支撑；而与客户端无关的需求，不强制要求从另一面也反映该类需求对测试人员的能力要求不高，可以交由自己培养的合作伙伴。
技术需求：要求开发提供详细的技术方案，测试提供详细的测试分析，测试过程数据需要代码覆盖率支撑。
需求优化：不同的优化点可以采用不同的方法，需求优化包括，
体验上的优化：小的优化，交由合作伙伴，测试采用的方式；
运营优化：优先自动化实现，若自动化无法覆盖，需要具体分析；
数据上报优化：开发人员自测和测试完全；
转需求：由开发人员自测、测试和合作伙伴回归。
总体而言，技术实现上有比较大的变更时，开发人员需要提供详细技术方案；界面表现发生比较大的变化时，产品人员需求提前进行走查；其它情况优先自动化实现，不可以自动化的培养合作伙伴进行分析外加正式员工的方式；以上均不是，则测试负责人再发起具体分析。
团队属性
团队属性主要源于研发团队的组成、任务分工以及需求来源。一个研发团队，必然包括开发、产品、运营和测试，部分团队可能不存在项目经理。但是作为测试负责人，除了了解测试角色负责的内容，对于团队内部的其他角色必须也要非常熟悉，包括知道人员的比例，知道他们的不同分工。比如游戏合作项目，它的视图关系如下：

图 游戏合作团队组成
图主要展示了游戏合作项目团队内部的组成，以及会直接和测试对接需求来源的关系图。从上图可见：
我们团队存在个项目经理。项目经理可以从全局掌控项目的规划和资源的协调。在关键的时候，他可以充分发挥项目经理的优势帮助我们解决一些棘手的问题；
开发人员一共人。从开发侧会产生技术需求或转需求类，他们会直接对接测试人员。开发侧存在分工不同。客户端开发比较固定，需求频繁；而端开发负责前端页面，属于资源池非固定人员，因此需求相对不频繁；
产品经理一共人。从产品侧会产生新需求以及需求优化，优化主要是体验上的优化和数据上报上的优化。产品侧需求直接对接开发和测试人员。
运营人员一共人。从运营侧会产生需求优化，但运营侧存在分工不同：活动类的运营要求对接的测试人员属于专属活动测试人员，因此无需关心；合作类分为两类合作，一类是谈到一些新的合作方式或针对已有的合作方式做一些优化，最终转换成需求会对接给产品经理并非直接对接开发和测试，而另一类是将一些已有的合作方式运用到其它游戏会直接对接需求给到推广类；推广类主要负责运营，他会直接对接对应的开发和测试。
乍一看，整个团队个人，测试只有个人，测试开发比是：，亚历山大。但了解团队的组成，以及各个人员的分工后，发现并没有想想中的严峻，因为实际常规开发的共个人个客户端个端，：还是可以应付的。
从上图，我们也知道：和测试直接对接需求的人员除了开发人员、产品经理，还有负责推广类的运营人员。我们在进行需求沟通时，包括针对需求的排期、需求的测试策略，需要找到正确的人。
业务属性
业务属性主要源于分析业务的需求属性。游戏合作的业务划分如下图所示：

图 游戏合作业务属性宏观测试策略
游戏合作大致包括个特性，还有个特性是待开发的区域。开发、产品、运营人员在针对对应特性建立需求的时候，尽量按照我们的需求分类存放到需求池。对于不同类别的需求，我们首先采用该需求类型对应的宏观测试策略，接着针对具体的需求点再做详细的测试分析。如果需求策略需要做出调整，对应的发起人提前说明，这样不仅有利于测试人员进行测试分析，也有利于需求提测后可以得到及时的测试响应，避免由于测试资源紧张要依赖固定的负责人去处理对应的需求。
、详细测试策略
详细测试策略，主要对具体的需求进行详细的测试分析，制定策略。针对具体需求的详细测试策略，每个团队可能不一样，在我们的团队，测试策略设计模型如下图所示对这部分感兴趣的，可以线下沟通：

图 详细测试策略设计模型
从左至右，依次是需求分析，开发实现分析，基于这两点得到测试分析点。里面有提到模型，关于测试建模可以参考我的另一篇文章《再不测试建模你就了》。
总结
按照目前实施的游戏合作测试过程管理方法，游戏合作业务今年上半年的质量尚可，漏测率为，严重用户反馈为，千行代码缺陷率维持在左右，其它核心质量指标数据也无异常。还有一点需要提下，就是当日常测试工作中遇到多个需求并行的时候，我们可以使用四象限法则通过优先级和重要性来排序，通过来帮助我们协调。在后续的测试过程中，如果团队或业务属性有大的变化，我们再灵活调整进行适配。原则上，整个项目可以和谐的运作，共同缔造高质量的产品。
本文主要从五个途径介绍了如何培养团队的质量意识，以及如何把控业务的测试策略。文中所提到的方法，主要是基于我自身实践感觉有价值的分享点，当然不能以偏概全。在后面的测试过程管理中，我们还需要更多的思考、实践来丰富完善。如果你看完之后，能够得到一些测试过程管理上启发，它便发挥了它的价值。期望对于想要改进测试过程的你有一些帮助，也期望对于即将走上测试岗位的小鲜肉有一些帮助。
获取更多测试干货分享请搜索微信公众号：腾讯移动品质中心！作者：潘晓东

 是的负载均衡服务，默认采用的是作为实现其负载均衡功能，默认情况下，不提供高可能功能，也就是说，一个实例故障，将可能会影响业务的负载均衡功能。本文讨论如何实现的高可用实现方式。
原理
要实现高可用，必须了解的实现方式，最简单直接的方法，是从代码进行分析，的代码在_下。对于每个 ，我们可用从 中查看到，但是对于多个 是如何分配 实例的呢，是轮询，还是每个 都接管，还是其他什么方式呢，只有了解到了接管服务的方式，观察代码_

  
          

     _
         
     
 
 =
 _= ____
  
  _
  _    
    _
 {_ 
 _ _}
 

 _= __ =
 获取存活的
   _
 _       

 

 = ____

 _
从存活的选出符合条件的
   
 _      

 _
 

 _=  随机选择一个
  =  绑定这个
  = _
 _ = 
 
 从代码上看，对于一个 的调度，首先是从存活的中随机选择一个，然后进行绑定，当绑定以后，就不再变化。观察数据表，发现正是记录绑定关系的。
     
 

 | _ | _
|
 

 |  |
 |
 

 除此以外，就没有表记录相关的信息了。从上面的分析可以得出，要生成一个必须从存活的 中选取一个，然后进行绑定，因此，实际上是分布式的，具有可扩展的能力，但是没有高可用的能力，要实现高可用，必须进行重新，也就是修改的绑定关系。
网络
修改绑定关系，是否能够实现高可用呢？下面我们从网络层面分析一下， 要建立一个，首先由建立一个，然后绑定几个对应的后端。我们看看网络上发生了什么。
  __  
 

 |  |  |  | _ |
 | __ |  |
 

 |  |  |  | _
|  |  |  |
 

  __  
 
 
 |  |  | __ | 
|
 
 |  |  |  | 
|
 
从上面观察，是绑定到了上，如下：
     
 
 
 
 

     
  
   _      
    
     
 _ _ 
    
 _ _ 
   _    
  
    
       
 _ _ 
   
 _ _ 
从上面可用发现，上有{}的网络名字空间，而空间内有的网卡，正好配置了的。此网卡正是的网卡。
    
 
  
  
 
  
  
 
  
 
  
  {=}
  
 _ 
  
  
 
  
  
  
 
  
  
 
  
  
 
  
  {=}
  
  
 
  
    网卡
  
 
  
  
  
 
  
通过网桥观察，发现是桥接在之上，和在同一网络平面，到达的包，原则上可用转发到任一内网。如果要做到 的切换，需要在目的机器新建，并且桥接在上，同时需要配置好。要做的上述事情，可用采用来做，但是通过观察的代码，发现有更简单的方式，因为在重启的时候，会重新所有的如下： _
  __ _
 
 _= ____

 _= _
  _   _
  _   _
 _      
_
 __
  _ 
 

 ____
 对所有进行
 __ = _
 ___
  
 _      

 _
 _ = 
 _
 _
  _ 
   

       
 
  _  
  
 _    
 
 

  
   如果存在，则进行更新
 
   如果不存在，进行创建
  
从的实现中可用看出，对于所有的都有同步机制，如果存在，则进行更新，如果不存在，则进行创建，因此，上面所的事情完全可用使用的机制来搞定，无需采用，实现起来简单。
实现
首先采用来监控的服务情况，鉴于基础云已经有了服务，因此可用复用。的配置如下：
  __ 

 __ {
   
  
 }
 __ {
 
  
 __
  
 _{
   
 }
 _{
 _
 }

 ___
的的切换脚本
 ___
 ___
 }
 __ {
  {
 _
 }
  __ 
__
 
 
  
  
  
  
  
  

 _ = 
 _ = 
 _ = 
 _ = 
 _ = 

 _= 
 _= 
 _ = —
 _= _


  =      
 = =_ =

  数据库管理，省略
  
  ____      =
 

  _
  

    
  _ 
  =      = =_
  
  = ___
  
  
 
 

   
  __ 
  =    __=  =  
=_  
 _

   
  __ 
  =    __=  =  
=_  
 _

   
  __ 
  =   _=  

 _

  _ 
  =    
_=  
  ___
 
 
 

  _
  _   
 

  _
  =  
 

  
  = _ _ _ _ _ 
  = _
  = _ 
  
   == 
 __ 
 __ 
 _
     
 _
 
 __ 
  = 
  _ 
    _
 _
 
     
 
 _
   _ 
    
 _
 
 _ 


  ____ == ____
   = 
  __ |
 
 
  = 
 
的切换程序，当检测到失败的时候，就会进行切换，会重新选择在上，会对所有的进行切换，将所有的全部到，同时在机器上，会将__状态改为，这样做的目的是为了在调度的时候，不在随机选择，而是选择作为的默认调度机器。修改完成以后，对进行，保证服务正常运行。通过实验观察，切换能够正确完成。
总结
高可用是在中没有支持的部分，网络的资料也没有提供一种完整的方法，本文通过分析的原理，通过切换脚本，就能够实现的高可用，无需修改的代码，也无需共享存储。实验表明，通过此方法切换，在秒级别就能够完成切换，后续可以多进行测试，以验证其稳定性。

原文来自： 公众号打开腾讯云域名管理域名注册注册了一个域名网址
点击腾讯域名邮箱
创建域名邮箱即输入您注册的域名网址

在腾讯云域名管理解析 添加一个记录 和记录复制黏贴即可

操作完成之后，登陆域名邮箱

进行成员管理

对账号进行设置前缀，同时和对方的邮箱进行绑定，后期只需要通过邮箱进行设置即可。
进入邮箱，设置账户默认发信账号

大功告成设置完成之后，即可体验你的不一样的邮箱咯，再也不用靠记住位数的号码的邮箱地址了

相关推荐如何在腾讯云上开发一款书签？【腾讯云的种玩法】邮件服务器的搭建导语
首次同时对外披露海内外数据，居安思危，思则有备，有备无患。


 事件海内外 

世界知名黑客组织   与   对暴雪公司战网服务器发起  攻击，包括《魔兽世界》、《守望先锋》在内的重要游戏作品离线宕机，玩家无法登陆。

匿名者、  幽灵黑客小队等黑客小组，针对全球范围内的多家银行网站，发动了  攻击，导致约旦、韩国以及摩纳哥等央行网络系统陷入了半小时的瘫痪状态，而黑山国家银行网络系统则被迫关闭，停止服务。

安全研究机构  遭遇  是一种利用物联网设备组建僵尸网络的  攻击攻击，不久之后，法国主机服务供应商  也遭到了两次攻击，罪魁祸首还是 。 被攻击时流量达到了，而  被攻击时峰值带宽则达到了。

美国半个互联网的瘫痪，这起事件缘由于提供动态  服务的   遭到了大规模  攻击据调查黑客操控感染了恶意软件  的物联网设备。导致许多使用  服务的网站遭遇访问灾难，其中包括 、、、 等一度瘫痪，甚至出现了近小时访问的局面。

俄罗斯五家主流大型银行遭遇来自个国家万台计算机构成的僵尸网络持续不间断长达两天的  攻击。每波攻击持续至少一个小时，最长的不间断持续超过个小时。攻击的强度达到每秒发送万次请求。
有关  攻击的事件实在太多太多，此处选取的起在国际上都造成了一定影响力，游戏、银行、还有未提到的  平台，频繁被攻击者选为目标，我们通过观察以下  攻击海内外的部分黑产数据比对，看看是否能发现什么？
 
 
 

以上国内外数据分别源自腾讯云与  统计


 攻击又被称为“洪水攻击”，当成攻击成本低至人人可以成为“ 黑客”，那还真是防不胜防。
当然，大规模的攻击当然不是以个人之力无聊之时发起，一起来看下对黑客们行为的画像。
 
 
 

原来黑客也要过情人节的，开个玩笑。随着技术研究的更为深入， 设备，你使用的电脑，你看到的看不到的摄像头，还有家家户户使用的路由器等等，身边的这一切，小至个人，大至企业，都可能在不知情的情况下被黑客利用为攻击工具，最根本的原因当然是利益关系了，恶意竞争之外，敲诈勒索也随之崛起。
 
 攻击时刻在发生着，等到被攻击时再来选择庇护这必然晚了。居安思危，思则有备，有备无患。

本篇数据来源：腾讯云大禹、腾讯宙斯盾、

 事件素材源自互联网搜索并整理编辑点击购买腾讯云分布式数据库
点击查看腾讯云分布式数据库更多详情
这些问题，腾讯全部遇到过
我们知道，集中式单机数据库在存储容量、并发性能、快速扩容等都会因业务增长而达到瓶颈。而在业务发展初期，团队很难准确预测数据库增长的速度和规模，只有靠拍脑袋确定规模进行设备选型：

若达不到预期，会导致资源浪费；
若超过预期，则会出现扩展难题；
若成为行业领先，那么性能瓶颈又摆在了面前。
还有集中式数据库一系列容灾、恢复、管理等一系列问题，都让人糟心。

多数情况下，互联网业务往往都会超出预期，随之而来的问题就令人头疼了。为解决上述问题，腾讯数据库团队曾经选择多种方向，也考察过商业数据库基于共享存储的体系架构。我们发现，架构无法通过增加计算节点来“线性的”提升数据库集群性能，因为共享存储的体系架构中多个节点对同一个数据块有对等访问权限，这就意味着所有数据都是全局资源，任何节点在操作数据时必须加锁以防止其它节点的干扰，为了协调节点间的访问，就必须通过密集的消息通信来传递资源锁。在传统企业内部、等系统上，这样的问题并不明显；然而当其面对的是互联网海量处理应用是，这种资源锁机制严重限制了架构的扩展能力。其次，从运营成本角度上讲，商业数据库高昂的授权费用、昂贵的硬件成本，都制约了业务的快速发展。因此，腾讯最终选择了分布式数据库方案。
时至今日，放眼互联网行业，排名靠前企业的核心业务都在使用分布式数据库，我们不禁要问，这其中有什么秘密？
分布式数据库为什么能解决容量、并发、扩展等难题
了解分布式数据库，需要先了解垂直切分分库、水平切分分表两种方案：

垂直切分通常也叫做“分库”也就是按功能切分数据库，这种切分方法跟业务紧密相关，实施思路也比较直接，比如“京东”等电商平台，一个原有一个数据库实例，按功能切分为会员数据库、商品数据库、交易数据库、物流数据库等多个数据库实例，共同承担业务压力。有时候，垂直拆分并不能彻底解决压力问题，因为单台数据库服务器的负载和容量也是有限的，随着业务发展势必也会成为瓶颈，解决这些问题的常见方案就是水平切分了。
水平切分又叫做“分表”是按照某种规则，将一个表的数据分散到多个物理独立的数据库服务器中，这些“独立”的数据库“分片”；多个分片组成一个逻辑完整的数据库实例。一般来说，分表的前提是分库。

水平拆分的方案，实际上是分布式数据库的基础原理，他的每个节点都参与计算和数据存储，而且每个节点都仅计算和存储一部分数据。因此，无论业务的规模如何增长，我们仅需要在分布式集群中不断的添加设备，用新设备去应对增长的计算和存储需要就够了。

腾讯云分布式数据库
腾讯云分布式数据库是部署在腾讯云上的一种，面向业务支持自动水平拆分分表的 架构的分布式数据库。也是随着腾讯业务规模不断扩大而发展起来的，从年开始，腾讯部分业务就已经开始遇到单机数据库架构已经无法支撑，进而开始研究分布式架构，业务发展最终推动了数据库架构技术的不断革新，面对日益复杂的需求。截止到年，包括微信支付，腾讯充值，阅文集团等腾讯公司交易、转账等核心系统以上都使用了腾讯分布式数据库。

的前身是腾讯自研，我们的设计理念是淡化复杂的拆分、扩展等逻辑，让开发者使用就像使用集中式单机数据库一样顺利。

当前，已支持 、基于、分支，未来计划进一步支持引擎基于腾讯自研分布式引擎等。

整个集群架构简图如下图，这种集群架构极大简化了各个节点之间的通信机制，也简化了对于硬件的需求，这就意味着即使是简单的服务器，也可以搭建出类似于小型机、共享存储等一样稳定可靠的数据库。

大多数情况下，可以用您熟悉的对象映射框架使用。对于分表，建议您尽量使用基础的语句，因为这样能达到最佳性能，特别是几亿甚至几百亿条记录的情况下。这意味着，某些情况下，您可能需要一定的改造，才可以接入。
分布式数据库的分表方案
关系型数据库是一个二维模型，数据的切分通常就需要找到一个分表字段以确定拆分维度，再通过定义规则来实现数据库的拆分。业内的几种常见的分表规则如下：

基于日期顺序，如按年拆分，年一个分表，年一个分表。
基于某字段划分范围，如按用户划分，一个分表，一个分表。
基于某字段求模，将求模后的值，再按方式分散到不同库中。

无论是、都有个主要缺点就是可能导致严重数据倾斜，即多个物理节点又叫做分片之间负载和数据容量严重不均衡。在大部分数据库系统中，数据都有明显的冷热特征——显然当前的订单被访问的概率比半年前的订单要高的多更热——而采用分表或分表，就意味大部分热数据将会被路由在少数几个分表中，而存储冷数据的设备性能却被浪费掉了。
因此，通常采用某个字段求模的方案进行分表，而计算的某个字段就叫做。因为算法本身就能够基本保证数据相对均匀的分散在不同的物理设备中某些特殊情况下除外，我们将在后续章节进行介绍。
的过程大致就是，当某条记录请求时被发起时， 会理解  语句的含义，然后按照拆分键的值和执行策略将  路由到对应分表进行执行，如下图所示，先通过算法计算，再路由到各个节点上。
 
而如果一个查询  语句的数据涉及到多个分表，此时会被路由到多个分表执行， 会将各个分表返回的数据按照原始  语义进行合并，并将最终结果返回给用户。

读取数据时如果有明确值：

业务发送请求中含有时，网关通过对进行
不同的值范围对应不同的分表
数据根据分表算法，将数据从对应的分表中取出

读取数据时如果没有明确值：

业务发送请求没有时，将请求发往所有分表
各个分表查询自身内容，发回；
根据规则，对数据进行聚合，再答复给网关

从上述原理来看，查询中含有值比不含值效率将会更高。
如何选择拆分键
拆分键是在水平拆分过程中用于生成拆分规则的数据表字段，必须在建表时就指定好。建议拆分键要尽可能找到数据表中的数据在业务逻辑上的主体，并确定大部分或核心的数据库操作都是围绕这个主体的数据进行，然后可使用该主体对应的字段作为拆分键进行分表，该分表方案通常叫做按组分表，如下图：

方案，可以确保不同分表的某些关联数据和复杂的业务逻辑运算，可以聚合到一个物理分片内，进而减轻分布式数据库本身一些使用缺陷。例如，某电商平台订单表和用户表都是基于用户维度拆分，平台就可以很容易的通过联合查询不会存在跨节点，或分布式事务快速计算某个用户近期产生了多少订单。下面的一些典型选择拆分键的应用场景：

面向用户的互联网应用，都是围绕用户维度来做各种操作，那么业务逻辑主体就是用户，可使用用户对应的字段作为拆分键；
电商应用或应用，都是围绕卖家买家维度来进行各种操作，那么业务逻辑主体就是卖家买家，可使用卖家买家对应的字段作为拆分键；但请注意，某些情况下几个超大卖家占到绝大多数交易额，这种情况会导致某几个分片的负载和压力明显高于其他分片，我们会在后面章节予以说明。
游戏类的应用，是围绕玩家维度来做各种操作，那么业务逻辑主体就是玩家，可使用玩家对应的字段作为拆分键；
物联网方面的应用，则是基于物联信息进行操作，那么业务逻辑主体就是传感器卡，可使用传感器、独立设备、卡的作为对应的字段作为拆分键；
税务工商类社保的应用，主要是基于纳税人法人居民的信息来开展前台业务，那么业务逻辑主体就是纳税人法人，可使用纳税人法人对应的字段作为拆分键。
以此类推，其它类型的应用场景，大多也能找到合适的业务逻辑主体作为拆分键的选择。


拆分键的限制
为了提高语法解析效率，避免因为设置导致路由错误，规定了拆分键设定的技术限制请参考腾讯云官方文档： 

如存在主键或者唯一索引，则字段必须是主键以及所有唯一索引的一部分；
字段的类型必须是；
字段的值尽量使用码，网关不会转换字符集，所以不同字符集可能会路由到不同的分区且尽量不要有中文；
不能 字段的值，如必须则先，再；
= 放在语句的最后面，如下示例：                   =
      

访问数据尽量都能带上字段，可以极大的提升效率；


接下篇：用分布式技术轻松化解数据库容量和性能瓶颈作者：腾讯手游安全测试团队商业转载请联系腾讯获得授权，非商业转载请注明出处。原文链接：
导读
《九州天空城》上线至今，长期稳定在 畅销排行的前五，本文将介绍腾讯手游安全团队在游戏上线前为《九州天空城》挖掘安全漏洞的全过程。

《九州天空城》下文简称《九州》是祖龙娱乐的一款正版授权次世代飞行手游，在月，正式向全平台开放。作为一个前身是端游研发工作室的研发商，祖龙娱乐在《九州》中将端游中经典的“飞行功能”重新展现给了玩家，《九州》以东方幻想元素为基调，熟练运用了材质渲染、全局动态光影、超清粒子特效、真实物理碰撞等技术，实现了“双人飞行”，“°全方位自由空战”等创新玩法。在这款手游推出时，我们发现，祖龙娱乐在手游的研发技术上正变得越来越娴熟。

游戏设计方面，《九州》设计了很大的地图，不做任何的地形限制；另外玩家在飞行过程中也能发生战斗，全方位的空战体验在手游中还是相对比较少见的。
玩法方面，《九州》设计了“双人飞行”的特色功能，将玩家之间的互动与这款游戏的核心卖点“飞行”巧妙地结合到一起。不过，《九州》的游戏策划很清楚，作为一款游戏，为了留住玩家，其最终的落脚点还是在社交上，为了让玩法和社交能够更好的结合，游戏的平衡性和游戏社区内的氛围建设非常重要。为了保证游戏的健康运转，祖龙娱乐对反外挂的工作非常重视。
《九州天空城》安全测试的开端
安全问题相比游戏的其他问题，由于其测试的门槛较高，经常会被手游开发者忽略。一些手游开发者会抱有“等出现了问题之后再去修复”的想法， 然而等到问题出现的时候，往往对游戏的收入、口碑已经产生了很大的影响，常见的外挂危害包括以下几点：

腾讯游戏从进入游戏行业之后，就遭遇过不少外挂的侵袭，因为不断的踩坑，腾讯在进入手游领域之初，非常的重视安全测试。腾讯手游安全测试团队从年就开始对手游安全领域进行探索和技术积累，旨在通过提前发现游戏版本的安全漏洞，预警风险，帮助提高腾讯游戏的品牌和口碑。目前腾讯团队对腾讯内部所有游戏都会进行详尽的安全测试，《王者荣耀》、《乱世王者》、《穿越火线：枪战王者》以及《火影忍者手游》等精品游戏每个对外版本都会进行严格的安全测试。
在端游领域沉淀多年的祖龙娱乐，同样非常清楚外挂对于游戏平衡性的危害，由于在游戏质量测试方面与有过多次成功的合作，因此在《九州》上线前，祖龙方面很果断的就决定与腾讯手游安全测试进行合作，腾讯也希望能将自己在手游安全领域的经验传递给《九州》团队。
本文整理了《九州》安全测试过程中的一些思路和实践内容，与手游开发者分享，希望手游开发者能够了解安全测试，重视安全测试。文中的漏洞均已修复，仅做学习交流参考
技术难点
手游的使用场景与传统有着巨大的差异，不同的游戏玩法， 技术实现都不一样，因此手游安全测试团队需要对《九州》所有模块进行比较全面的风险分析，针对游戏核心玩法和游戏中高价值产出点重点进行漏洞挖掘，提前暴露游戏中潜在的安全风险，最大程度降低线上外挂打击成本。
《九州》游戏客户端使用引擎开发，但是手游安全测试团队在接入协议工具中发现客户端并不是用实现，仅从层接入工具无法获取游戏所有通信协议数据。逆向分析游戏客户端后发现实际还有大量游戏逻辑使用开发，对应功能的协议数据也在层进行组包。接入协议工具必须从和层进行，获取协议明文数据。
另外，在对协议数据的解析中也遇到一些挑战，游戏同时使用了自定义和两种协议结构，需优先对自定义协议结构进行格式转换，实现针对自定义协议进行解析，部分则直接用 进行解析。
测试方案
测试分析及规划
确定游戏核心玩法《九州》的核心玩法主要是组队副本及各种活动，另外还有战斗外角色技能学习、装备、宠物等。
确定安全测试策略《九州 》是一款使用引擎开发的游戏，游戏采用自定义的二进制协议  ，逻辑使用 开发。
本次安全测试目标覆盖整个游戏模块，主要分为周边系统和局内战斗逻辑，针对该游戏类型，本次测试以协议为主，针对部分游戏内的战斗逻辑，采用逻辑修改的方式进行测试。
手游安全测试针对三方面进行检查：游戏客户端资源安全测试游戏逻辑安全测试服务器稳定性
测试的实施
腾讯手游安全测试团队将审核的内容分为静态安全漏洞和动态安全漏洞。
静态漏洞扫描主要通过静态扫描的方式，对游戏中配置档、资源文件、脚本文件、、文件，通过自动扫描的方式来进行检查项的确认。目前此块内容已集成到手游安全测试方案中，覆盖了条安全检查项和信息安全测试项
动态风险分析主要根据游戏特定的内容和玩法，针对性地分析安全风险点，通过协议、函数、内存、脚本等技术，多维度检查游戏服务器对相应的风险点是否有完善的校验或反外挂策略。
根据对漏洞类型的提炼，手游安全测试团队根据《九州》具体玩法，推导出相应的获益方式。通常根据风险点分析的方式，可以完整覆盖到游戏中涉及到安全的部分，结合检查点，就生成了可以在实际操作中执行的用例，形成闭环。
手游安全测试深度覆盖
其中比较典型的检测方式有：
、双端协议修改手游安全测试工具通过直接注入游戏的组包函数，自动解析协议结构，免去了需要依赖测试人员分析二进制数据进行协议破解。在没有协议结构文件时也能自动解析协议结构。手机和端都可以进行协议数据展示，在手机上可以实施地显示协议发包的效果，在上可以动态一键修改相应字段，互补不足。
双端协议修改工具效果展示
、函数动态修改函数动态修改原理
对于单局类玩法的手游，函数动态修改具备最强的漏洞能力。但是早期的测试方法效率非常低下，需要每个函数单独编写函数、定义函数指针变量、申请独立资源、重新编译代码。同时，使用门槛很高，只有专业的安全专项测试人员才能操作。手游安全测试团队的函数动态修改工具通过动态通用技术，不需要测试人员再进行函数编码。

函数动态效果展示
、内存对象修改手游安全测试团队为测试人员直接展示出游戏中对象列表、对象属性名称、属性值等信息，并且可以以对象为单位进行搜索，告别传统手游内存测试工具搜索“内存数值”方式定位目标内存地址的低效方案，实现该项测试成本降低。
手游安全测试团队为《九州》挖掘出的部分漏洞和修复方案
客户端安全漏洞
、游戏逻辑 未加密，可直接被反编译，降低了外网破解游戏的难度，也存在被外挂利用的风险。
、游戏脚本未加密，可直接从内存中出源码，增加了游戏被外挂利用的风险。
游戏逻辑问题
、部分协议字段冗余，且校验不严格，存在严重逻辑问题。如生活制作功能中，物品 随机应该由服务器下发，而非客户端上报，否则存在制作指定物品的风险；对物品等级缺失 校验，导致低等级可制作高等级物品 。
、部分验证逻辑只存在于客户端。客户端是不可信任的，客户端验证只能用于显示 控制，后台应该同样增加校验，防止客户端伪造或构造数据来绕过验证。如“宠物更名”中，服务器应该检查长度限制，否则由于该数据会写入，可能被利用造成客户端对服务器数据库攻击。
问题示例
问题一：生活技能制作漏洞 ，低等级技能可生产高等级物品
【漏洞类型】：越权操作【问题描述】生活技能存在漏洞，使用道具制作请求篡改 参数，可生产高于现有等级的道具


【影响面】属于越权操作风险，利用漏洞可在游戏中获益。
问题二：一个同伴可以重复助战，存在刷评分排行榜的风险【漏洞类型】：刷战力【问题描述】使用一个同伴通过_多次发送，可用一个同伴重复助战


【影响面】可用于刷评分，影响游戏平衡
问题三：对达到购买上限的道具，可修改购买方式无限购买【漏洞类型】：无限购买【问题描述】用其他货币可以无限购买道具
操作方法：录制交易系统—商铺购买协议“”修改协议字段“_”参数为“”发送协议

银币购买达到上限：

修改用金币购买成功：

【影响面】突破游戏限制，使用元宝可加快成长。
强调文字解决办法
、游戏客户端安全方面，需对客户端进行加壳，代码文件加密，脚本则建议改为或模式，有效提升客户端被分析和破解的难度。
、其他协议漏洞大部分属于后台检验疏忽型，需针对性完善后台逻辑校验。
最终效果
在项目测试阶段，手游安全测试团队为《九州天空城》发现了数个漏洞，并针对这些漏洞产生的原因和修正都提供了专业意见，并很快顺利修正了问题，与开发商一起将隐患消除。《九州》的技术负责人表示：“外挂问题一直是祖龙在做游戏过程中要跨越的雷区，类型游戏内容很多，需要专业的安全团队来对游戏进行一个全方位的检测，手游安全测试为《九州天空城》正式开启不删档，创造安全、公平、健康的游戏环境提供了坚实支撑和保障。” 

关于腾讯手游安全测试团队
腾讯手游安全测试团队从年初开始对手游安全领域进行探索和技术积累，旨在通过提前发现游戏版本的安全漏洞，预警风险，打造出业界领先的手游安全测试技术方案，在工具上已经支持所有腾讯在研和运营的手游项目。团队通过使用与正式服同样的游戏客户端和服务器，模拟外挂工作室制作外挂的过程，依靠自身的技术积累来提高专业程度，持续保持漏洞的发现率。
目前提供了专家测试服务，希望通过提前发现游戏版本的安全漏洞，预警风险，帮助提高腾讯游戏的品牌和口碑。
服务目前已经对外开放，欢迎前来使用如果对使用当中有任何疑问，欢迎联系腾讯企业：于年月份推出，至今个年头，最新版本。它是目前主流的用于和代码规范检查的利器，很多大公司比如和均有一套自己的编码规范，而规范的实施背后离不开的支持。比如大名顶顶的和。为了更好的统一团队的编程风格和代码质量。官方经过调研和探索，终于迎来了的解决方案，最核心的理念是：基于做规则的定制化。
从一次生产事故说起
年月日，腾讯高级工程师小圣在做充值业务时，修改了苹果支付配置，将配置增加了重复的。代码发布后，有小部分使用了手机的用户反馈充值页面白屏，无法在 内进行充值。最后问题定位是：手机使用了系统自带的而没有使用内核，解析时遇到重复报错，导致页面白屏。
类似的问题其实很多： 比如变量未定义，方法被覆盖等等都会造成代码执行时报错。那么如何避免呢？官方提供 可共享配置，前端团队可以根据自身团队情况定制规范配置。
规则定义准则

不重复造轮子，基于配置并改进
能够帮助发现代码错误的规则，全部开启
目的是团队的代码风格统一，而不是限制开发体验

 介绍
是腾讯直播团队的配置。目前发布初版，目前大约有条规则，包含可能存在的错误、最佳实践、变量、代码风格、相关等个大的规则板块。
仓库地址： 欢迎提交或者一起参与团队规则维护
部分规则说明

包含个信息： 最左侧是规则，中间是错误级别，右侧是解释说明含义。错误级别包含：、和三个级别。
更加详细的规则说明可以前往： 规则文档
项目接入使用
基本理念： 项目代码太多，不影响历史代码。只针对有改动的代码和后缀才进行校验。
第一步：添加或者修改 配置文件
 = {
     {
         
         
         
    }
      
     {
        __ 
        _ 
        __ 
    }
}
有部分提到的规则在中没有提到，因此最好配合一起使用。
只需要同时继承 和  即可，确保  放置在最后。部分定义的规则有点严格，里面有做定制化的修改。
第二步：增加的和依赖
此处我们使用来管理所有的，同之前的 校验。
{
   
   
   {
     
  }
   {
    {} 
       
       
    
  }
   {
     
     
     
     
  }
}
答疑互动
： 为什么不直接使用团队的 ？ ： 官方的规则过于庞大，有多个规则文件。维护起来成本较高，选择基于轻量级的  基础之上定制团队规则更加简单，也便于维护。
： 我觉得有些规则不太合适，怎么办？ ： 欢迎提交讨论或者直接提交。仓库地址：
： 为什么使用？ ： 只会对修改过的文件行数进行代码规范检查，不会对所有的代码检查，更加合理和可操作。参考文献
 李航，统计学习方法           导语
最新消息，最近对机器学习及数据科学领域进行了全行业深度调查，调查共收到超过  份回复，受访内容包括最受欢迎的编程语言是什么，不同国家数据科学家的平均年龄是什么，不同国家的平均年薪是多少等。
不过，因为中国的数据收集不够全面，而美国数据也同样存在清洗不够的情况，所以，以下数据仅供参考。希望下次能将数据做得更透彻更深入更全面。
以下为科技大本营对其进行的数据整理，并从中美数据科学和机器学习对比的角度呈现如下：
中美数据工作者概况对比
年龄
从世界范围来看，本次调查对象的平均年龄大约  岁，当然，这个值在各个国家之间有变动。
以下为中美调查对象的年龄对比：

中国
在中国，机器学习从业者年龄的中位数是岁，从业者集中在岁年龄段。这可能反映出中国从业者人群的大体分布，但鉴于所统计到的数据量，其中的细节还值得商榷一番。

美国
在美国，机器学习从业者年龄的中位数是岁，以岁年龄段的人数最多。但令人意外的是，我们在图表中看到一位年满岁的大牛，还有几位年龄接近岁的小朋友。我们尚不清楚这里数据清洗的细节，不过这几位大牛果真存在的话，务请联系科技大本营，我们对您的存在非常感兴趣。
中美就业状况对比
中国全职工作者占，美国则高达

中国

美国
中美数据科学具体职位对比图
数据科学领域可涵盖的工作非常多，包括机器学习工程师，数据分析师，数据科学家，软件开发人员，数据挖掘人员等。以下为中美在数据科学领域的对比图：

中国

美国
年薪
从全球来看，数据科学人员的年薪中位数为。在中国，数据科学家的年薪中位数为，。美国则高达，

中国全职年薪

美国全职年薪
最高学历
通常来讲，数据科学从业者中最普遍的学历是硕士，但一般来讲，博士学位能拿到   和 的高薪。
就中国而言，硕士学位在总体占比为，博士仅，本科学位从业人数则高达，与硕士从业人数持平。
而美国，硕士学位只有，博士学位高达，本科从业者占比也高达。
总的来说，美国博士学位高达，从占比上来看，接近中国的两倍中国为。

中国

美国
数据科学家到底是怎么工作的？
工作中使用什么样的方法？
回归是除了军事和国安领域外，最常用的数据科学研究方法。在军事和国防安全领域，神经网络使用地更多。

所有国家整体数据
数据工作中使用最多的工具语言是？
总体来说，是数据工作者使用最多的语言。同时，数据研究人员对语言的忠诚度也很高。

所有国家整体数据
工作中使用什么类型的数据？
关系型数据市是最常用的数据类型。但在学术研究者和国防安全领域则更亲睐文本和图像。

所有国家整体数据
工作中使用什么样的代码共享和托管方式？
大部分数据工作者使用分享代码。不过，大公司的工作者更喜欢将代码保留在本地，并将代码用邮件分享。初创公司则用更快捷的云分享方式。

所有国家整体数据
工作中遇到了什么样的障碍？
脏数据 是最大障碍。机器有侧重，但理解不同算法的能力不够也是一大困扰数据工作者的障碍。缺乏有效管理和资金支持是数据工作者面临的两大外在困境。

数据科学新手如何在这个行业崭露头角？
根据你的经验，你会向数据科学新手推荐使用哪种语言？
这个因人而异。在和两大使用群体最大的语言中，大部分人觉得更值得被推荐。

你从哪里获得数据科学的学习资源？
数据科学是个变化极快的领域，业内人员需要不断更新知识体系，才可以在业内保持一定地位，不被时代淘汰。  ，，和是已从业者经常使用的学习平台。发布新软件时，一定记住阅读官方使用指南，并推荐去观看使用视频。

从哪里获得开放数据集？
没有数据就没有数据科学！当涉及到一些数据科学技巧时，知道如何找到练习所用的干净的开源数据集和项目非常重要。越来越多人开始使用我们的数据集聚合器 

通过什么渠道获得工作？
根据数据科学领域过来人的经验，以下这些方法可能会比在公司网站，招聘网站上投递简历更高效，比如通过建立自己在这个行业的关系网络。

以上内容来自于网站。

本来来源于  科技大本营 微信公众号导语 本文主要讲解了中深度的快速选择方法，分析了当前编码中存在的问题，提出解决方案，并给出了具体的实践流程，及得到的收益。文档涉及到了机器学习，目的想将视频压缩与机器学习相结合，做一个跨界尝试。

对 深度快速选择方法的思考和实践
期望目标
在质量轻微下降的情况下，提升编码速度，降低计算的复杂度，从而降低对实时编码机器的要求。
技术背景
未来视频的发展趋势是高清晰度，高帧率，高压缩率，现在普及的压缩方式，在原理上存在一定的局限性，不能适应未来的需求，因此编码协议应运而生。
但编码协议，在年已经定稿，截止到今天，还不能普及起来，除了还没有浏览器支持的原因之外，一个关键因素是算法太复杂，对机器性能要求比较高，普通机器还不能达到实时编码的能力。
一个标准的编码框架如下：

一帧图像送入到编码器，先经过帧内或帧间预测之后，得到预测值与输入数据的残差，然后进行变化和量化，得到残差系数，然后送入熵编码模块输出码流，同时，残差系数经反量化反变换之后，得到重构图像的残差值，然后和帧内或者帧间的预测值结合，从而得到了重构图像，重构图像再经环内滤波之后，进入参考帧队列，作为下一帧的参考图像，从而一帧帧向后编码。
其中，帧内帧间预测时，从最大编码单元，  开始，每层按照叉树，一层层向下划分，做递归计算。对于每一个，由 到，由到，及由到，总共三个层次的递归过程，然后再逐层比较，选出最优模式的划分情况。
问题分析
下图是所有划分情况计算之后，选出的最优结果：

从上图示例来看，有些块做了第一层划分之后，就找到了最优的模式，不必再向下计算。实际上有些块第一层都不需要划分，下一层的所有计算都可能是中间参考，没有被最终采用。也就是说，机器做了很多冗余计算。
下面个图是个常见场景的大小分布情况：


由图，可看出个系列的的占了四分之一以上，也就是说有的情况根本不需要坐做及后面、的计算，另外，还有的情况不需要做，及后面的的计算，还有的情况不用再做，及后面的计算，因此，可以看出，划分这块有很大的优化空间。
但是，如果不计算，没有比较又怎么能知道当前计算是不是有用呢？
因此，问题就转化为怎么找出一个能根据周围已计算块的信息，来预测当前块划分的方法。
解决思路
根据一些输入信息，来预测一个未知情况，比较成熟的技术有机器学习、线性分析等。
、利用神经网络预测
比较常用的是神经网络，其框架如下：

在神经网络中，单个样本有个输入，有个输出，在输入层和输出层之间通常还有若干个隐含层。一般隐含层取一层。
网络训练时，包含了正向传递和反向传递两个过程。
正向传递过程
设节点和节点之间的权值为，节点的阀值为，每个节点的输出值为，而每个节点的输出值，是根据上层所有节点的输出值、当前节点与上一层所有节点的权值，和当前节点的阀值，还有激活函数来实现。
具体计算方法如下

反向传递过程
主要是误差信号反向传递过程，假设输出层的所有结果为，误差函数如下：

而神经网络的主要目的，是反复修正权值和阀值，使得误差函数值达到最小。
网络训练完成之后，即可用来预测，预测过程只包含了正向传递过程。
、利用支持向量机预测
支持向量机  ，是一种监督式学习的方法，可广泛地应用于统计分类以及回归分析。它在解决小样本、非线性及高维模式识别中表现出许多特有的优势，并能够推广应用到函数拟合等其他机器学习问题中。

的原理是将向量映射到一个更高维的空间里，在这个空间里建立有一个最大间隔超平面。在分开数据的超平面的两边，建有两个互相平行的超平面。建立方向合适的分隔超平面使两个与之平行的超平面间的距离最大化。其假定为，平行超平面间的距离越大，分类器的总误差越小。
的关键在于核函数。低维空间向量集通常难于划分，解决的方法是将它们映射到高维空间。但这个办法带来的困难就是计算复杂度的增加，而核函数正好巧妙地解决了这个问题。也就是说，只要选用适当的核函数，就可以得到高维空间的分类函数。
台湾大学林智仁博士等开发设计的一个简单、易于使用和快速有效的模式识别与回归的软件包，叫作，可以解决分类问题包括 、   、回归问题包括  、   ，以及分布估计 等问题，提供了线性、多项式、径向基和形函数四种常用的核函数供选择，可以有效地解决多类问题、交叉验证选择参数、对不平衡样本加权、多类问题的概率估计等。
 是一个开源的软件包，需要者都可以免费的从作者的个人主页 处获得。具体使用方法参考附件《 使用方法简介》
、阈值判断
结合周围块的划分情况，来推测当前块的划分情况。比方下列方式，姑且称作算法。
首先，要计算相邻块对应深度的平均代价，然后计算当前块的对应深度的已编码的平均代价，最后判断当前块是否要做的进一步深度划分。
第一步：计算相邻块对应深度的平均代价
取当前 个相邻位置的，如下图所示，左边、上边、左上角，及右上角个的划分信息，每个的所有深度对应的代价。

计算周围相邻块的平均代价，相邻块按照左边上边左上右上=的权重计算。
第二步：计算当前内，已经确定的，相同深度代价的平均值，记作，_________。
如果当前深度=时，已确定的个数为，则代价=，否则为所有块代价的平均值。
其他深度的计算类似，不再累述。
第三步：预测当前是否做进一步分割。
定义阈值 _ =  __   ___
当前做完和计算之后，其最优模式对应的代价，记作__，如果 __  _则认为当前不需要再做进一步深度划分，否则需要作进一步划分。
= 和 = 的判断过程与等于相同，均取相同深度的代价进行判断。
、其他
像线性回归、多元线性回归、最小二成回归、判别等多元统计方法均可用于预测，此处不做重点介绍，感兴趣同学可以看看这方面的书籍。
实施方案
在我们实施案例中，采用了支持向量机和算法相结合来预测当前块的划分情况。流程如下：

如上图所示，当非帧的当前开始做深度划分计算时，先对当前块做 和 的计算，然后判断当前最优模式的残差是否为，如果为，说明当前块是 块，直接结束计算，如果非，则需要计算深度划分计算。接着，判断当前块的深度是否为，如果非，则执行算法，再根据的结果进一步判断当前块是否做层的计算；如果当前块为，则根据当前块和相邻块来提取特征向量，然后看当前块所在 是还是，分别调用对应帧或者帧的预测模型，然后开始预测，根据预测结果来决定是否进一步做层的计算。
方案效果
最终方案为        ，对每层都做了快速选择，该方案在上落地，并进行多序列测试，相比于 模式，编码速度提升了，压缩性能下降了，因此编码器的计算复杂度大大降低。
结论
将机器学习引入到编码器优化上，是个较大胆的尝试，而且从效果来看，编码速度提升显著，且压缩性能下降不多，说明该方法是可取的，这也为后面编码器优化拓宽一个好的思路。微信在立项之初，就已确立了利用数据版本号实现终端与后台的数据增量同步机制，确保发消息时消息可靠送达对方手机，避免了大量潜在的家庭纠纷。时至今日，微信已经走过第五个年头，这套同步机制仍然在消息收发、朋友圈通知、好友数据更新等需要数据同步的地方发挥着核心的作用。
而在这同步机制的背后，需要一个高可用、高可靠的序列号生成器来产生同步数据用的版本号。这个序列号生成器我们称之为  ，目前已经发展为一个每天万亿级调用的重量级系统，其中每次申请序列号平时调用耗时，的调用耗时小于，服务部署于数百台核  服务器上。本文会重点介绍  的架构核心思想，以及  随着业务量快速上涨所做的架构演变。
背景
微信服务器端为每一份需要与客户端同步的数据例如消息都会赋予一个唯一的、递增的序列号后文称为  ，作为这份数据的版本号。在客户端与服务器端同步的时候，客户端会带上已经同步下去数据的最大版本号，后台会根据客户端最大版本号与服务器端的最大版本号，计算出需要同步的增量数据，返回给客户端。这样不仅保证了客户端与服务器端的数据同步的可靠性，同时也大幅减少了同步时的冗余数据。
这里不用乐观锁机制来生成版本号，而是使用了一个独立的  来处理序列号操作，一方面因为业务有大量的  查询需求——查询已经分配出去的最后一个  ，而基于  的查询操作可以做到非常轻量级，避免对存储层的大量  查询操作；另一方面微信用户的不同种类的数据存在不同的  系统中，使用统一的序列号有助于避免重复开发，同时业务逻辑可以很方便地判断一个用户的各类数据是否有更新。
从  申请的、用作数据版本号的  ，具有两种基本的性质：

递增的位整型变量；

每个用户都有自己独立的位  空间。


举个例子，小明当前申请的  为，那么他下一次申请的  ，可能为，也可能是，总之一定大于之前申请的。而小红呢，她的  与小明的  是独立开的，假如她当前申请到的  为，然后期间不管小明申请多少次  怎么折腾，都不会影响到她下一次申请到的值很可能是。
这里用了每个用户独立的位  的体系，而不是用一个全局的位或更高位  ，很大原因是全局唯一的  会有非常严重的申请互斥问题，不容易去实现一个高性能高可靠的架构。对微信业务来说，每个用户独立的位  空间已经满足业务要求。
目前  用在终端与后台的数据同步外，同时也广泛用于微信后台逻辑层的基础数据一致性中，大幅减少逻辑层对存储层的访问。虽然一个用于终端——后台数据同步，一个用于后台的一致性保证，场景大不相同。
但我们仔细分析就会发现，两个场景都是利用  可靠递增的性质来实现数据的一致性保证，这就要求我们的  保证分配出去的  是稳定递增的，一旦出现回退必然导致各种数据错乱、消息消失；另外，这两个场景都非常普遍，我们在使用微信的时候会不知不觉地对应到这两个场景：小明给小红发消息、小红拉黑小明、小明发一条失恋状态的朋友圈，一次简单的分手背后可能申请了无数次 。
微信目前拥有数亿的活跃用户，每时每刻都会有海量  申请，这对  的设计也是个极大的挑战。那么，既要  可靠递增，又要能顶住海量的访问，要如何设计  的架构？我们先从  的架构原型说起。
架构原型
不考虑  的具体架构的话，它应该是一个巨大的位数组，而我们每一个微信用户，都在这个大数组里独占一格  的空间，这个格子就放着用户已经分配出去的最后一个 ：_。每个用户来申请的时候，只需要将用户的_=，保存回数组，并返回给用户。

图 小明申请了一个，返回
预分配中间层
任何一件看起来很简单的事，在海量的访问量下都会变得不简单。前文提到， 需要保证分配出去的 递增数据可靠，还需要满足海量的访问量每天接近万亿级别的访问。满足数据可靠的话，我们很容易想到把数据持久化到硬盘，但是按照目前每秒千万级的访问量 ，基本没有任何硬盘系统能扛住。
后台架构设计很多时候是一门关于权衡的哲学，针对不同的场景去考虑能不能降低某方面的要求，以换取其它方面的提升。仔细考虑我们的需求，我们只要求递增，并没有要求连续，也就是说出现一大段跳跃是允许的例如分配出的序列：。于是我们实现了一个简单优雅的策略：

内存中储存最近一个分配出去的：_，以及分配上限：_

分配时，将_，同时与分配上限_比较：如果_  _，将分配上限提升一个步长_ = ，并持久化_

重启时，读出持久化的_，赋值给_



图 小明、小红、小白都各自申请了一个，但只有小白的_增加了步长
这样通过增加一个预分配  的中间层，在保证  不回退的前提下，大幅地提升了分配  的性能。实际应用中每次提升的步长为，那么持久化的硬盘次数从之前 降低到 ，处于可接受范围。在正常运作时分配出去的是顺序递增的，只有在机器重启后，第一次分配的  会产生一个比较大的跳跃，跳跃大小取决于步长大小。
分号段共享存储
请求带来的硬盘问题解决了，可以支持服务平稳运行，但该模型还是存在一个问题：重启时要读取大量的_数据加载到内存中。
我们可以简单计算下，以目前 用户唯一上限个、一个 _  的空间，数据大小一共为，从硬盘加载需要不少时间。另一方面，出于数据可靠性的考虑，必然需要一个可靠存储系统来保存_数据，重启时通过网络从该可靠存储系统加载数据。如果_数据过大的话，会导致重启时在数据传输花费大量时间，造成一段时间不可服务。
为了解决这个问题，我们引入号段  的概念， 相邻的一段用户属于一个号段，而同个号段内的用户共享一个 _，这样大幅减少了_ 数据的大小，同时也降低了次数。

图 小明、小红、小白属于同个，他们共用一个_。在每个人都申请一个的时候，只有小白突破了_上限，需要更新_并持久化
目前  一个  包含万个 ，_ 数据只有，为我们实现从可靠存储系统读取_ 数据重启打下基础。
工程实现
工程实现在上面两个策略上做了一些调整，主要是出于数据可靠性及灾难隔离考虑

把存储层和缓存中间层分成两个模块  及  。 为存储层，利用了多机  策略来保证数据持久化后不丢失；  则是缓存中间层，部署于多台机器，每台  负责若干号段的  分配，分摊海量的  申请请求。

整个系统又按  范围进行分 ，每个  都是一个完整的、独立的  子系统。分  设计目的是为了做灾难隔离，一个  出现故障只会影响该  内的用户，而不会影响到其它用户。



图 原型架构图
小结
写到这里把  基本原型讲完了，正是如此简单优雅的模型，可靠、稳定地支撑着微信五年来的高速发展。五年里访问量一倍又一倍地上涨， 本身也做过大大小小的重构，但  的分层架构一直没有改变过，并且在可预见的未来里也会一直保持不变。
原型跟生产环境的版本存在一定差距，最主要的差距在于容灾上。像微信的  类应用，对系统可用性非常敏感，而  又处于收发消息、朋友圈等功能的关键路径上，对可用性要求非常高，出现长时间不可服务是分分钟写故障报告的节奏。下一篇文章会讲讲  的容灾方案演变。

相关推荐万亿级调用下的优雅：微信序列号生成器架构设计及演变下微信开源：简单易用高性能的协程库微信支付商户系统架构背后的故事作者：袁飞翔

最近入手了一台腾讯云机子，用于团队社区站点的建设，站点架构：

数据库服务：
后台：  
接入： 　

整个购买到部署的要点步骤：

服务器购买
 编译安装配置
 安装
 安装
部署

服务器购买

从腾讯云的首页找到购买入口。弱弱的说一句，云太多了，企鹅云发展好快 
按需选择自己的配置，包年可以优惠只需付个月。最终我们的配置
选购硬盘时需要注意可以选择云硬盘，它支持很多扩容，性能按官方的描述没有多大差别。
购买成功几分钟之后我们便能拿到机器的
登录机器
 
第一次使用用户名和密码登录，之后可以配置的免密码登录
 安装
使用安装
   
这是最简单的方法，但是这不是最新的，如果需要支持，至少需要 ，因此我们选择本地编译最新的安装
 
  
 

 安装编译依赖
           \
     

 编译安装
 __ __ __ __ \
    __ __ __ __ \
    ___ ___ ___ \
    ___ ___  __ \
      =   __=   ==  = \
    __

  

 之后将安装至 目录
 创建一个命令软连接
    
 之后就可以运行``命令了
 

 配置的自动启动
 下载文件
    
   
 添加开机自动启动
    

 启动
    
　     停止
　     重启
 安装
可以直接使用安装
   

 添加开机自动启动
    

 启动
  
 安装
 从官网下载已编译好了的 
 
  
 

 拷贝安装
       

  命令测试
 
部署
准备工作：
 创建目录
   

 创建用户
  

 创建用户
 也使用此用户运行
      

 目录权限
   

 安装
    
本地使用命令同步文件至服务器，的同学需要先安装这个命令
   _   \
     
启动服务
 使用登陆服务器

 
 安装依赖
 
  启动
  

 可以使用` `查看运行情况及对应的输出文件，使用` `动态查看
 
   
之后配置映射，重启机大功告成：

相关推荐
 基本入门 【腾讯云的种玩法】从购买服务器到建站，从打造自己的网络领地。腾讯云极速配置运行环境作者：刘科

 劫持漏洞介绍
 漏洞简介
如果在进程尝试加载一个时没有指定的绝对路径，那么会尝试去指定的目录下查找这个；如果攻击者能够控制其中的某一个目录，并且放一个恶意的文件到这个目录下，这个恶意的便会被进程所加载，从而造成代码执行。这就是所谓的劫持。
在  之前，查找的目录以及对应的顺序如下：

进程对应的应用程序所在目录；
当前目录 ；
系统目录通过  获取；
位系统目录；
目录通过  获取；
环境变量中的各个目录；

在下，几乎每一种文件类型都会关联一个对应的处理程序，当我们在资源管理器中打开某种特定类型的文件时，与之相关联的处理程序便会被执行，也就是会新建一个进程，进程默认的   当前目录就是被打开文件所在的目录。在搜索的这些目录中，攻击者最容易控制的当然是   。攻击者可以把恶意的文件和目标文件如文档打包在一起，如果受害者进行解压操作，恶意和目标文件就会位于同一个目录，攻击者可以十分方便的实施劫持。
由于早期查找文件的顺序并不合理，可以想象劫持漏洞伴随着存在了相当长的时间。然而，在相当长的一段时间里劫持漏洞并没有受到大家的关注，直到年月，微软发布安全通报，同时网上公布了大量受影响软件的名字，劫持漏洞才开始进入大家的视野。
 漏洞归类
劫持漏洞翻译成英文叫做   ，将其归类为    。如果想要去数据库中搜索劫持漏洞案例，搜索这两个关键词即可。
 缓解措施
从  开始， 默认会被开启。的开启与否主要影响  当前目录 在搜索顺序中的位置。开启后的搜索顺序如下：

进程对应的应用程序所在目录；
系统目录通过  获取；
位系统目录；
目录通过  获取；
当前目录；
环境变量中的各个目录；启用之后可以防范大部分劫持，如系统劫持。不过，如果进程尝试加载的并不存在，那么进程仍然会尝试去当前目录加载这个，这是所无法防范的。不过微软引入了  这个，给这个传递一个空字符串就可以将当前目录从搜索顺序中排除掉。


  _          “”            

 漏洞检查
使用工具包中的  可以十分方便的检测劫持漏洞，只需要设置几个过滤参数即可。

 目标进程的名字；
 文件路径，可以设置为   当前目录所在路径；
 结果，设置为   ； 劫持漏洞利用场景


 针对应用程序安装目录的劫持
不管是否开启，在查找时应用程序本身所在的目录都是最先被搜索的。因此如果能够放一个恶意的文件到程序的安装目录，就可以利用劫持漏洞来执行代码。
这种利用场景的要求相对较高，因为大部分程序默认安装到  或者是 。这两个目录都需要管理员权限才可以进行写入操作，也就是说在进行劫持之前，要求已经具有代码执行权限。基于这一原因，软件厂商一般不予处理此类问题。
这种场景多被一些恶意代码所使用，对常用软件进行劫持可以在一定程度替代自启动功能，同时，利用 白加黑 方式还能逃避安全软件的检测。此外，一些外挂或者破解程序也会采用这种方式进行劫持，例如的一些显插件就是通过劫持  来实现功能的。
 针对文件关联的劫持
在下，我们平时使用的各种文件如音乐、文档、文档、视频等都有一个与之关联的默认处理软件。当在资源管理器中打开某种特定类型的文件时，操作系统会自动创建一个进程来处理这个文件，进程对应的程序就是该文件类型关联的默认处理程序，进程的 当前目录 就是被打开文件所在的目录。
例如，如果  关联了文件类型，那么打开文件时就会自动创建一个进程，进程的当前目录 就是文件所在的目录。如果进程尝试加载一个不存在的，根据默认的搜索顺序，进程最终会搜索到文件所在目录即当前目录，如果该目录下恰好就存在有一个同名的，那么这个就会被进程所加载。这就是所谓的 文件关联型劫持 。
相对于 针对应用程序安装目录的劫持，针对文件关联的劫持 的利用条件十分简单，只要放一个恶意的就行了。由于实施这种劫持不需要其他先决条件，许多厂商关注并承认该利用场景下的劫持漏洞。
许多流行软件可能仍然存在有这种劫持漏洞：笔者在年给月给报告了   中存在的一个劫持漏洞，该漏洞由进程加载不存在的所引起。此外，去漏洞库搜索   或者    也能找到很多案例。
 针对安装程序的劫持
许多应用程序的安装包程序也存在有劫持漏洞，这种场景与 针对应用程序安装目录的劫持 比较类似，本来也没有什么特殊之处，不过结合后文提到的浏览器自动下载漏洞，其利用条件又变得相对简单了。
这里以最新的安装包为例来进行讲解。启动  并设置好过滤器，可以看到运行后尝试加载了许多，这些都是第一次加载时没有加载成功的。

仔细观察进程尝试加载这些时产生的调用栈，会发现有的调用栈中存在有 ，而有的调用栈中却没有。这里选取  和  来进行对比说明。

在尝试加载  时产生的调用栈中并没有 ，这是因为并不是被进程动态加载的，而是因为应用程序的导入表直接或者间接导入了这个。在这种利用场景下，伪造的导出表最好与被伪造的导出表完全一致，否则可能无法被进程成功加载会弹出错误提示消息框。有一个叫做  的工具可以十分方便的生成此类的源文件。

           
           
           
         
         
         
         
         
            
            
            
         
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            

在尝试加载  时产生的调用栈中存在有 ，说明这个是被进程所动态加载的。在这种利用场景下，伪造的文件不需要存在任何导出函数即可被成功加载，即使加载后进程内部出错，也是在被成功加载之后的事情。

              
              
              
            
            
            
            
            
               
               
               
            
               
               
               
               
               
               
               
               
               
               
               
          
          
            
  与 的自动下载漏洞
通过  可以触发   和   的自动下载功能，这一特性被  认为是一个安全漏洞，其在上发表了很多关于该漏洞的推文，甚至抱怨和团队忽视这个漏洞的存在。在的长期呼吁下，最终在版本中修复了这个漏洞，而截至笔者撰文时似乎仍然没有修复该漏洞。
浏览器的默认下载目录为 \\\，通过下载的文件默认都会保存在这个目录下。可以利用的自动下载漏洞下载一个恶意的文件如到这个目录下，然后利用页面超时自动跳转功能让跳转到正常页面来诱导用户下载一个正常的安装文件，当用户运行安装程序时恶意的文件便会被进程加载。
测试浏览器自动下载漏洞的测试代码如下所示：

    
         
    
    
         =
        
               {
                             = 
                        } 
        
    

在 下使用打开这个页面，可以看到文件被自动下载到了本地的下载目录中。不过由于没有有效的数字签名，所以会提示这个文件可能存在风险。
如果文件具有有效的数字签名，那么就不会这样提示了。在最新版本的  上测试发现，不管是否具有有效的数字签名，文件下载之后都需要用户手工确认才会保存，否则会被删除。和的测试结果汇总如下：

浏览器的自动下载漏洞还是十分危险的，攻击者甚至只需要诱导用户下载一个恶意的，以后用户在下载目录中执行各种程序时都有可能加载这个。此外，安装程序一般都会请求管理员权限，对于恶意的来说管理员权限似乎是与生俱来的。
 非典型漏洞分析
微软安全公告中的描述表明其修复了一个为的劫持漏洞。漏洞详情为： 下的  文件存在加载  的代码，而 本身并不携带这个  文件，并且在查找时使用的是标准的目录搜索顺序，所以这里会导致劫持漏洞。这个漏洞的独特之处在于其存在于操作系统本身，所以在 下，只要是调用了  中能够触发漏洞代码的的软件都会受到这个漏洞的影响。笔者在年底也发现了也发现了这个漏洞，同时确认  受到该漏洞的影响，并将其报告给了 。
 漏洞分析
在发现这个漏洞时，笔者发现网上很少有关于  文件的介绍，只有  在    中提到了这个文件。指出        会尝试加载 ，而的当前目录就是桌面，所以如果放一个  到桌面上的话，在启动时这个便会被加载。
  在  中指出  的  中存在两处加载  的地方，可能是文件的版本不一样，笔者找到的代码与之存在一些细微差异。笔者在分析  版本的  时找到的反汇编代码如下所示：

下面的代码位于  中：

 _ 
          
          
          
                   判断寄存器的值是否为
         _      如果不为则跳转
                        = 
                          = 
         _  
        ____  
         
         _

下面的代码位于 _ 中：

          
            
         
         _
                      
                      
         _  
        ____  
         
         _
这里加载  的代码为   。因为这里  的值为，所以使用标准的搜索顺序；由于 上并不存在  这个文件，所以进程最终会尝试加载当前目录下的。
这里简单分析一下受该漏洞影响的 。当在 下打开一个文件时，进程  会加载当前目录下的  文件，对应的调用栈如下所示：

          
              
              
              
              
              
              
         
         
         
         
              
              
              
              
         
         
         
         
         
         
         
         
         
         
         
         
         
         
            
               
               
结合或者进行分析，可以知道这里的调用路径为：

└ 
     └ 
          └ 
               └ 
                    └
即 因为调用了中的函数，导致其受到劫持漏洞的影响。在中使用交叉引用功能进行回溯，可以找到其他能够触发该漏洞的路径，  给出了另外两个路径：

路径

┌─────────────────────────────────────────────────────┐
│                    │
│                        │
│  │
└─────────────────────────────────────────────────────┘
└   
   └   
        └ 

路径

┌─────────────────────────────────────┐
│    │
│                   │
└─────────────────────────────────────┘
└   
   └ 
  同时也指出了他们发现的其他受该漏洞影响的软件：

  没有命令行参数的情况下例如双击并打开；
 启动的时候；
 同步以及更新的时候无需用户交互；
   微软账户更新或者同步的时候； 补丁分析


更新后的文件在调用  加载  时将  参数值指定为 ，即 ___，表示只搜索  目录。对应的代码为  ___，反汇编代码如下：
                   
                    
       _  
      ____  
 劫持漏洞缓解措施
劫持漏洞在未来可能仍然会影响着许多软件或者操作系统组件，亦或是与其他漏洞相结合以衍生出新的攻击方法。尽管目前没有一个完美的方法  可以防止软件受到劫持漏洞的影响，但是开发人员仍然可以采取各种措施来缓解劫持漏洞带来的影响。
 基本缓解措施

在加载时尽量使用的绝对路径；
调用把 当前目录 从搜索目录中排除；
使用  加载时，指定 _ 系列标志；此外，进程也可以尝试去验证的合法性，例如是否具有自家的合法数字签名、是否是合法的系统文件等。

  缓解措施
最新版本的提供了一种对抗劫持注入的缓解措施：只有拥有微软签名以及   签名的模块才会被加载，而且这套机制是在操作系统内核中实现的。
关于这一缓解措施的细节分析，可以阅读   的文章      。
 

感谢  在行文思路上的建议；同时，在本文的写作过程中参考了以下资料，在此亦表示感谢。

，  

，   
，安全通报 
，   
，    
，   自动生成一个特洛伊  分析代码的工具
，       “”       
，安全公告 
，  
 ，
，     
   ，     
 ，     导语
我们发现腾讯云上一些实例在主库写压力比较大的情况下，这时从库上会出现很多慢查询，经过调查发现，从库在回放的时候加了全局锁，阻塞了所有的读直到回放结束。经过我们的优化，使得从库的读延时降低几倍到几十倍不等，也有一个明显的提升。
背景知识
 复制集原理
复制集是由一系列实例组成的，包含一个和若干个，数据通过写入， 与之间通过来同步数据，上的写操作完成后，会向特殊集合写入一条，负责从复制源一般为，但是也支持链式复制，即也可以作为复制源拉取，在上回放，从而保持主从之间数据的一致性。
下图是一个典型的复制集，包含个和个

当一个新节点加入复制集时，首先要执行，如果执行成功，就开始不停的从复制源拉取，然后在从上面回放。
         {
          
          
      }
        = 
             
                
           _     
           
        ||
           ||  {
          
             如果失败，就继续重试
      }
       _ {
          
      }
      结束之后，就开始进入不停的从源拉取然后回放的状态
        
      
 
从开始默认的底层存储引擎改为简称，是实现事务的基础，那中是什么呢？其实就是事务开始或者进行操作之前对整个  引擎内部正在执行或者将要执行的事务进行一次快照，保存当时整个引擎所有事务的状态，确定哪些事务是对自己见的，哪些事务都自己是不可见。说白了就是一些列事务  区间。的事务并发区间如下图所示：

如果在时刻创建了一个，那么只能读到，以及之间已经提交的事务的修改即，其他都是不可见的。
问题分析
从库在回放的过程中会加锁，这个锁会阻塞所有的读，直到这一批回放结束。对于有读从库需求的业务来说，会导致很多慢查询，甚至会影响业务正常服务。
代码主要在_的中：
  
                              
                              {
    _
      {
                   
         _
    }
     
    根据 分组，保证相同_的写入顺序即可
      
    _ 
     是一个类，持有全局锁直到回放结束，在这期间阻塞所有的读写
     
    
    多线程回放已经分组的
     _ _ 
     
    {
        __ { _ }
         
        
             {
            _
        }
        将写入从库的集合中，保证和复制源上的一致
         =  
    }
通过分析代码，可以得出从库加全局锁的目的：
避免脏读
这里的脏读可以分为两块，一是用户数据的脏读，这个很好理解。二是由于支持链式复制，如果从库作为复制源，其他的从库会来读源的，所以要保证其他从库读取的是完整的。对于从库写入是顺序写，而的话不一定要保证顺序，如果不加锁的话，其他从库读的话可能会漏掉部分。

如上图所示，插入是乱序的，如果这个点去读，由于是树遍历，会漏掉，两条记录。
资源争抢，影响同步性能
这点我们在测试的时候也遇到，当主库的写入压力很大时，从库的同步写入也很高，这时候如果从库上面又有大量的读，会出现资源争抢的情况，影响同步的性能，造成主从同步的延时。
我们的优化
基于的我们知道，一个可以理解为是对数据库某个点的状态。所以我们的优化就是去掉全局锁，所有的从库读都改为读，这样就可以解决上面说到的脏读和丢失的情况，具体的做法如下：

创建对于支持的引擎，从库在每次结束的时候我们会去创建一个，在创建的过程中要保证不会有新的写入，创建的由管理，如果已经存在的话就更新，然后删除旧的。注：由于写入很多的时候，会非常频繁，所以要控制的创建频率。

修改所有外部读为读所谓的外部读就是通过_和_的方式来查询的请求，由于协议的特殊性，_中根据又分为和两种，对于这些读请求入口，如果是从库读都需要改成读。

修改内部读为读如果设置了为的话，会开启一个后台线程，对已经同步到大多数节点的做一个，来实现。代码：


                 
          {
                           
               
                    _
               
                    _

               = 
                      
              _
          }
            = 
          {
              类，获取对一个的引用，并且加锁
                
              
               读取最新的，这里就是我们说的内部读
                =   
                = 
               
                        
                 = 
               =  
              
          }
          对同步到大多数节点的，创建
          _ 
          _ 
           
从上面的代码可以看出，从库去读自己的并不是通过命令的形式，而是调用内部的接口，所以为了保证从库在读取时数据的一致性，也要改成从中读。
测试
 ：测试工具：测试指标：从库读延时这里的延时取的是 操作的平均延时和
为了测试的准确性，要保证两次测试下面的条件相同：

主库的写压力相同，并且压力足够大，模拟线上主库写入压力大，这样从库回放的写入也很高。每次测试的写入数据为千万条，数据量大于 。
由于 端是多线程处理的请求，所以要限制，保证从库使用不能超过我们设定的值

但是在测试的过程中我们发现在限制的情况下，版本的从库上面会出现资源争抢的情况，导致从库的写降读升，使得写入压力不同，导致测试结果不准。所以我们在后面的测试中不限制，通过其他方法来分析从库的变化。对测试结果进行统计分析之后得出下图：

通过测试发现，版本在在种不同单条数据大小的情况下，从库读的延时都有明显的减小，当条数据越大时延时降低月多。延时的减小带来的是的提高。从延时数据可以看出，假设在使用相同并且写入压力相同的情况下，也是有一个很大的提升，下图以大小的单条数据为例，用观察主从的读写情况：

左边是版本，右边是原生版本，对比发现版本的读有明显的提升，且稳定，原生版本较低且波动幅度较大，而且还是在原生版本使用高于版本的情况下。
小结
通过去掉从库的全局锁，使得从库在主库写入压力很大的情况下，从库的读性能有一个很大的提升，但是并不是所有的场景都适用，下面两点需要注意。

前面说到的资源争抢的情况，在去掉全局锁之后，这个问题在读写压力都很大的情况下可能更加显著，这个需要看具体业务了，决定是否开启从库读。
在小内存默认最小内存的情况下，如果创建了老的没有删除，并且写入非常大的情况下，的占比会很高，这时候用户线程也会参与，造成写入性能的骤降。这个问题在原生的中如果设置了的话也会出现，后面的话会去深入内部去研究这个问题。导语
 是部署在腾讯云公有云上的一种兼容协议和语法，支持自动水平拆分的 架构的分布式数据库。
分布式数据库即业务获取是完整的逻辑库表，后端却将库表均匀的拆分到多个物理分片节点。目前， 默认部署主备架构且提供了容灾、备份、恢复、监控、迁移等方面的全套解决方案，适用于或级的海量数据库场景。 内部感谢计费平台部、数据平台部团队支持。
简介
 是部署在腾讯云公有云上的一种兼容协议和语法，支持自动水平拆分的 架构的分布式数据库。分布式数据库即业务获取是完整的逻辑库表，后端却将库表均匀的拆分到多个物理分片节点。目前， 默认部署主备架构且提供了容灾、备份、恢复、监控、迁移等方面的全套解决方案，适用于或级的海量数据库场景。
产品背景
 与的区别










主要场景
日常交易处理
统计，报表，分析


面向业务
面向实时交易类，如电商交易、订单
面向统计分析的，如、等


性能消耗
磁盘



实时性
实时读写要求高
实时读写要求低



 是一个面向业务的分布式数据库。
 垂直拆分与水平拆分
垂直切分也就是按功能切分，这种切分方法跟业务紧密相关，实施思路也比较直接，比如“京东”等电商平台，将数据按功能切分为会员数据库、商品数据库、交易数据库、物流数据库等。

有时候，垂直拆分并不能彻底解决压力问题，因为单台数据库服务器的负载和容量也是有限的，随着业务发展势必也会成为瓶颈，解决这些问题的常见方案就是水平切分了。水平切分是按照某种规则，将一个表的数据分散到多个物理独立的数据库服务器中，这些“独立”的数据库“分片”；多个分片组成一个逻辑完整的数据库实例。

 是一个支持水平拆分的分布式数据库。
  架构
 架构能够做到通过简单堆叠机器对数据和访问容量进行扩展； 架构虽然也能够满足大部分用户的数据库容量需求，但是本质上是小型机共享存储，且仍然会碰到容量和性能天花板，并且相当昂贵。如下图；

 是 架构，并通过自动拆分技术，屏蔽用户对分布式细节的感知。
 数据分裂方式分片规则
关系型数据库是一个二维模型，数据的切分通常就需要找到一个分片字段以确定拆分维度，再通过定义规则来实现数据库的拆分。
业内的几种常见的分片键选择方案

基于日期顺序。如按年拆分，年一个分片，年一个分片。

优势：简单明了；易于查找劣势：当期年的热数据的服务器性能可能不足，而存储冷数据性能却闲置。

基于用户求模，将求模后字段的特定范围分散到不同库中。

优势：性能相对均衡；相同用户数据在一个库中。劣势：可能导致数据倾斜如设计的是商户系统，京东一个商户数据能比几千个小商户的数据还多得多

将主键 求模，将求模后字段的特定范围分散到不同库中。

优势：性能相对均衡；不容易出现数据倾斜的问题；相同主键的数据在一个库中；劣势：数据随机分散，某些业务逻辑可能需要跨分片却不能直接支持。
在多张表分片方案前，也有几种方案：

：即不分片；

：即每张表分表时，仅根据自身情况，不考虑表间关系，随意选择分表键分表；

：即几张有关联的表，按相同的分表键进行设计，这样可以将相关的数据聚合在一台物理节点。


在分片的数据源管理方面，目前也有两种思路：

客户端模式：由业务程序模块中的配置来管理多个分片的数据源，分片的读写与数据整合在业务程序内进行。

中间件代理模式：在分片数据库前端搭建一个中间件代理，后端多个分片数据库对前端应用程序透明。


 自动水平拆分是将求模，并通过代理网关按求模后值的特定范围分散到不同库中的分片方案。
解决能够帮您解决什么问题
 单机数据库到达瓶颈
面对互联网类业务动辄百万级以上的用户量，单机数据库由于硬件和软件的限制，数据库在数据存储容量、访问容量、容灾等方面都会随着业务的增长而到达瓶颈。
即使我们将物理硬件升级到几十颗，容量做到几十，然而、的性能都会出现大幅下滑；更何况，随着业务快速增长，可能您刚买的一台高端设备，还没用上几个月性能就不足需要更换了。
 应用层分片开发工作量大
应用层分片将业务逻辑和数据库逻辑高度耦合，给当前业务快速迭代小步快跑带来极大的开发工作量。而基于透明自动拆分的方案，开发者只需要在第一次接入时修改代码，后续迭代无需过多关注数据库逻辑。可以极大减少开发工作量。
 解决开源方案或的难题
选择开源或产品，确实也能够解决数据库瓶颈，而且这些产品免费或者费用更低，然而，可能您需要看到开源方案或的以下问题：
产品修复取决于社区进度，若碰巧遭遇严重您是否可以等待。
您的团队是否有熟悉并能持续维护该产品的人，且不会因为人事变动而影响项目。
关联系统是否做好准备。
您的业务重心是什么，投入资源来保障开源产品的资源管控和生命周期管理、分布式逻辑、高可用部署和切换、容灾备份、自助运维、疑难排查等是否是您们的。 用户可以在不了解分布式底层细节的情况下，开发分布式程序。充分利用集群的威力进行高速运算和存储。云计算大数据到现在是越来越火，而成为大数据不可或缺的分布式大数据计算平台。
实现了一个分布式文件系统   ，简称。有高容错性的特点，并且设计用来部署在低廉的硬件上；而且它提供高吞吐量 来访问应用程序的数据，适合那些有着超大数据集  的应用程序。放宽了的要求，可以以流的形式访问 文件系统中的数据。
今天就先教大家如何搭建伪分布式系统。
首先我们准备一台云服务器  内存   操作系统   地址是。
软件有和。
下载地址：
首先我们用链接当然大家也可以用别的软件来连接。

登录后我们就开始搭建我们的伪分布式系统。
修改主机名与地址的对应关系
 ___  
查看主机名
___   
修改文件为一下内容：

然后输入重启机器。
配置免密码登录
___   
        
    
         
          
 
这里我们要输入密码特别的不方便，所以要取消。
输入  然后四个回车
___    
    
        _ 
      
    
      _
       _
   
 ___
    
  
|    =        |
|           |
|            |
|        =     |
|              |
|               |
|                |
|                 |
|                 |

然后复制密钥到本机
___   
                 
                    
 
___   
        
因为是写的，所以在这里要配置的环境变量，先创建几个目录，用来存放后面的文件。
___   
___  
___   
___   
___   
___   
看一下系统是否安装了
___   | 
___   | 
输入这两句啥都没有说明系统没有安装开始安装，通过来安装一个文件上传插件。
___     –
最后出现，说明安装成功。然后上传
___ 
如果上传过慢，也可以用自带的文件上传功能上传文件，将我们的和一起上传上去到我们新建的目录。

开始用命令解压我们的文件
___      
解压完毕后，开始配置环境变量这里不知道的目录层级，可以使用进行查看。
___ _ _
开始修改配置文件
___ _  
在文件后面追加
 _=_
 =_
使配置生效
___ _  
测试环境变量，输入
___ _  –
出现
  _
     _
        
说明我们的配置生效了，环境变量没有配错。然后开始安装解压我们一开始上传的文件
___      
解压完成后，进入我们的目录，来对其进行配置
___   
___   
 配置 ，主要是配置的环境变量 
___   
  修改 _={_}为 _=_
开始配置
回到主目录然后创建目录，来存放我们的缓存目录。
___   
___   
___   
___   
 ___   
 ___   
在标签下加入一下文件配置都是在次标签下加入的








开始配置设置备份数，默认是三份，由于我们是伪分布式，所以一份就够了



然后开始格式化文件系统
___    –
看到 说明格式化成功

然后启动我们的进程
___  遇到选项就输入查看进程
___  
 
 
 
 
出现上面的说明启动成功。
若启动报错改变如下配置。
___   在加入




然后重新启动就发现启动成功了。
在浏览器输入

说明打开成功了。
安装，中的资源调度。
然后修改目录下的主要是让咋们的服从的调度
___    
___   
加入一下配置




配置配置去数据的方式
___    
___   
增加如下配置

_
      


启动
___  
看一下
 
 
 
 
 
 
五个进程都启动成功，说明咋们的配置正确，启动中有什么错误请查看日志文件。在浏览器输入

说明我们整个配置成功。
开始测试用做一下词频统计
进入 目录下
___    
___   
___   
  
统计单词出现的个数。
开始上传文件
___   
开始上传文件
___      
上传成功后输入命令开始统计
___      
然后查看结果
___     
  
       
       
       
___     
  
       _
       
开始查看结果
___     
结果如下：
            
查询完成；
工作过程
原始数据：  
阶段：输入数据：  
输出数据：
 {
  =      
  = \
    {

 
  
 

}
}
    
阶段分组排序：输入数据：   {}
输出数据：
 {
  = 
  = 
    {
 = 
}

}

相关推荐【腾讯云的种玩法】如何利用腾讯云搭建分布式应用浅析海量用户的分布式系统设计高可用、高可靠的分布式文件系统这是我第一次参加数据挖掘类的比赛，幸运的是在比赛中认识了两个小伙伴，能够一起讨论，分享，得出成果，对我来说，受益良多。下面按照数据挖掘过程：数据预处理、特征工程、模型融合这三个方面进行一下总结，谈谈感受。
 数据预处理
 稀疏特征值处理
在初赛中，数据量在百万级别，因为我们没有做稀疏特征值的处理，但是决赛这种数据量增长了倍的情况下，稀疏特征值的处理能够影响模型的稳定性，因此我们会对特征值中少于次出现的值进行统一的稀疏标记。
 验证集的构建
构建验证集是比较重要的，目的是为了让线下成果与线上测试集结果保持一致，在几个周冠军的分享中，也都提到了构建有效的验证集的事情。在初赛中，我们直接使用了号的数据进行验证，因为号的数据不够准确，直接被我们舍弃了。在决赛中，我们会尝试一下方法进行验证集的构造：使用号的数据，使用训练数据的取决于训练集与测试集的比例。
 特征工程
特征工程一般有三步：找到新的特征，然后进行简单的统计分析，判断其价值，再使用模型判断其是否有用。
 特征产生
在本次比赛中，我们将所有特征分成以下几类：



特征分类
描述




原始特征
数据当中原有的特征


组合特征
将原来特征中的两个或多个直接进行组合


计数特征
主要针对用户，广告进行时序，非时序的统计


先验概率特征
类别特征的历史转化率


特征
利用模型对部分特征进行学习，将结果的叶子特征作为新的特征



在产生新的特征的过程中，如何初步判断特征的有效性是非常重要的，我们可以采取一些初步的统计进行比较，然后进行特征验证。
 特征筛选
在本次比赛中，最让我感到困惑的地方就在于特征筛选，特征筛选的流程一般如下图所示：

在一开始的时候，我们将生面提到的所有特征一股脑的塞到模型里面，尽管有些特征的重要性很低，然而在我们删除了某些特征以后，模型的效果还是下降了，然而我们之后再删除特征的情况下，进行了模型参数的调整，把训练的树的深度增加以后，线下验证集的效果就提升了很多。其实，现在的特征中有很多冗余的特征，特征之间相关度比较高，目前正在采用单个特征逐步验证的方法，希望能够有所提升。
 特征验证
此次比赛中，我们使用了来进行特征的验证，之所以选择这个，是因为本次比赛中的很多特征都是类别特征，用传统的模型进行分类的话，会遇到维度爆炸的情况，而是用则比较便捷，并且能够很好的查看特征的重要性。
 模型融合
在初赛中，我们并没有采用模型融合的方法，但是“三个臭皮匠，赛过诸葛亮”，据此次比赛中的小伙伴们实践分享，模型融合能够大幅度提升效果。在类似的比赛中广告点击率预估，比较常用的模型包括，，，这些模型在各个优胜大佬们的分享中都起到了很大作用，值得尝试一下。模型融合方法有简单的平均，均值平均，或者是等，初步的计划是使用不同的模型进行训练，然后讲给结果进行。
参加这次比赛，能让我将理论与实践相结合，是一次很不错的经历。本文针对推送接入过程中遇到的一个实际案例，提出了推送排查问题的思路，在解决该问题的基础上，更给出了通用的推送自测的检查路径。文末提供了一种基于腾讯移动推送信鸽的自测工具，欢迎试用与反馈。

问题背景
对于互联网的产品运营来说，由于我们的用户是不可见的，有时候甚至是在身边的陌生人就在用我们的产品，但是我们却有一种近在眼前，远在天边的感觉， 物理上的隔离成为了天生的屏障，特别是当产品需要做一个线上有时效性的活动的时候，我们是多么希望用户都坐在我们面前，以便我们可以随时通知到关于活动的事情。而互联网的运营人员的手段方法多种多样，但是消息推送一直绝对是产品运营的一个必须且重要的手段，消息推送让我们的用户与我们之间摆脱了看不见摸不着的尴尬局面。不管我们的用户在哪里，只要他们联网，消息推送能拉近用户与我们之间的距离，即使远在天边，但是秒级触达，感觉好像尽在身边。
可以说，现在的们，都有推送的刚需。而市面上现在已经有很多的第三方推送工具，集成第三方推送工具无疑是一件相对轻松的任务。但不正确的集成姿势，或者某些错误的配置，常常会导致推送无法正常使用。比如，开发环境中关于推送的配置不正确推送证书设置错误或者是证书过期失效
那么，集成推送需要注意些什么？集成之后，怎样确认自己是否正确集成了远程消息推送呢？
坑： 推送失败
相信开发的同学对下图来说是比较眼熟的：
以上图片就是不同版本中关于推送的配置是不同的，表现如上，但是不同点具体在哪儿呢？
使用以上版本打包，导出这是一个压缩的文件夹，在系统中，鼠标右键，使用系统自带 工具解开，在进入所在的文件夹，选择，点击右键，选择  ，进入包中，可以找到两个文件
配置签名信息 配置权限功能，例如远程推送， 等
使用如下命令

    
可以查看的签名信息其中关于推送的部分如下图
但是关于文件，在不同的版本中，文件内容是不同的，具体看下图
可以发现
在使用版本进行打包开启了远程推送的工程的时候，工程中并不会自动创建文件，进而文件中也就不会有键值对的信息。
在使用版本进行打包开启了远程推送的工程的时候，工程中会自动创建文件，进而文件中也就会有键值对的信息。
由此可见的版本更新对推送的配置是有更改的，这个配置的变化，导致有些即使集成了远程推送，但是在上却收不到推送。
坑：问题回溯
具体案例如下——
问题描述：某  在接入信鸽 集成推送功能时，遇到在  以下版本可以正常推送，但是在 的版本中，收不到推送消息。
具体现象：然后将的设备连接到，在中打开连接的设备的控制台，启动某游戏，在输出的中，发现了下面输出：
                    
               = =         ={=       }
调查路径——第一步，先确认在 以下操作系统中是否正常，在一台 的越狱手机上，抓取到了 ，定向推送消息，可以正常收到。在 的设备上，使用账号登录，反查 ，可以看到登录的账号下是有 的，然后使用定向推送，可以正常收到推送消息。在 的设备上，从操作同的一致，后台显示没有绑定到 。反复下载重试，结果一样。
第二步，验证包
检查中的包是否存在问题我们不能保证我们上传的包没有经过的二次改修，事实上会修改我们上传的文件
在本地使用，从下载某游戏的最新包，解开包中的文件，找到了文件，打开查看，

发现文件中缺少的键值对，而这正好符合与 设备的控制台看到的相符：        
而配置了远程通知的，在包中凡是拥有这个文件的，文件内容中必须要有以下键值对才能正确使用远程推送
        
         
而正确的内容应该如下举例检查提交审核的包，打开包中，的文件，查看其中的内容使用以下命令打开第一个文件：
      
这个文件中存在关于推送的签名信息，说明当前是配置了推送证书的。
使用文本工具打开 ，内容是与从中下载的安装包中的文件是一致的，说明并没有做额外的处理
由此可以得出结论：某游戏在打包的时候，生成的包关于推送的配置存在问题
引入原因：里面放了一份文件，导出到的时候没有被识别到，所以每次都生成一个新的，导致部分数据丢失键值对
解决办法：手动在文件中添加键值对
坑：问题结论
建议如果在工程代码不存在版本兼容问题的要求，请使用新版本进行配置打包，然后在根据文档中提到的方法检查包。
延伸：如何检查推送
最后简单介绍 的机制，让我们了解消息推送的整体流程，
第一步如下图：

使用注册注册远程推送，如果已经注册过，并且指定的没有发生变化，系统会立即返回给已经存在的，直接执行第四步
当需要生成一个新的时，会使用在设备中的证书来创建，使用一个 来加密，然后返回到设备
系统通过 回调函数下发设备到
一旦接收到 ，在回调方法中，使用信鸽中的接口，将这个发送服务器。


第二步当使用前端网页创建全量推送的时候，后台将根据指定的，将推送的内容在当前这个下所拥有的指定的证书作为参数，发送推送请求到，解密和 ，以校验请求的有效性，以及推送的目标设备，如果判断请求是合法的，之后就会向指定设备发送通知消息。如下图：整个消息的推送流程，可以粗略概括为下图：
那么通过以上的介绍，推送出现问题的可能就可以归纳为以下：

开发环境中关于推送开关选项，推送权限的文件配置不正确
推送证书设置错误或者是证书过期失效等
 未获取到，或者是获取到了 ，但是发送给服务器的姿势不正确
用户设备关闭了消息推送，或者是设备的网络连接有问题
或者是服务器不稳定

再延伸：推送诊断
针对平台的推送集成，信鸽开发团队提供了【推送诊断工具】，可以在信鸽官网中【应用列表】【应用配置】【信鸽推送助手】希望通过以上介绍，能够让团队在使用推送技术的路上，少踩坑，少走弯路，多一点了解，多一点高效。
文章来源：【腾讯大数据】微信号：本文首发于  公众号，源自  的创始人   简称 在  北京上的主题演讲：「，，    」。没听到现场演讲，仔细研读之后，整理笔记如下。
编外的话
是一位摄影爱好者，所以里会有大量精美的图片，这  看着多舒心呀！笔者有幸在北京和有过一次亲密接触，并和畅聊  及 。

真的不是我矮啊，只是太高了
 于年开发了  项目的前身，一开始就是为了解决他自己的关于自动化的需求。他自己也没想到年后， 成了软件交付过程中的核心工具，驱动着千万企业的持续交付与  过程。
这次主题演讲系统的分析了持续交付与  的体系、现状、路线图和模式，和  在  · 北京站的演讲一样，大神为我们点亮了命星！
整理的重点内容：


持续交付框架分析
敏捷持续交付成熟度现状、级别划定、改进四象限与路线图等
转型策略
工程实践简介
持续交付的黄金思维圈


、流程线已经改变过一次世界
福特在引入流水线生产之后， 的组装时间缩短了倍。万名员工生产了万量汽车，超过了家竞争对手的总和，这就是效率的神话。
不过后来丰田超越了福特，在不确定性越来越突出的现在，单纯的效率已经不能满足企业的竞争，所以精益、敏捷、 才会出现，继续探索软件开发新模式、拓展效率和质量的新边疆。

、软件正在吞噬世界
这个是共识，这是全人类的挑战和机遇，对我们从事工程效率和过程改进的人来说，不断改进软件交付的方式和效率，没有止境。

、头号需求：业务连续性不停机
各大权威机构对 、、  的预测和评估。

我认为业务连续性也只是其中一项需求而已，整体上来讲，我们要解决的两个问题是：        。

从  的  里获取的信息是，他认为，持续交付和自动化是我们需要的答案之一。


、持续交付框架分析

 的持续交付相关内容梳理的很清晰。这张图也可以说是  的管理与工程实践框架。 也强调了  是一组文化方法和技术实践。
维度：阶段：产品定义、计划、编码、编译、构建、单元测试、分析、集成、集成测试、打包、、压力测试、验收测试、发布、部署、监控其中的构建和编译、单元测试并列，不清楚这里的构建表示什么？我理解的构建时编译、打包、或者在加上单元测试、代码分析的整体。自动化构建的目标就是要输出高质量可以部署和测试的软件包。另外，关于也没有找到对应的解释，有点像部署或者分发
环境
开发环境
预发布环境类生产环境
生产环境关键中缺少独立的测试环境，从图上的分布看，应该是包含在中的
方法
敏捷「对特性进行识别、排序、调整的增量开发方法」。不太理解，敏捷的具体方法框架有很多，包括，，准确的说属于精益方法。还有 ， 等规模化框架。
持续集成持续集成是持续交付的基础，持续交付是  的核心工程实践。非常重要。
持续交付
持续部署另外，红色框的逻辑没有理解明白，有高手请指点。
、生存还是毁灭，你可以选择
每年的     都会公布四个关键指标的数据：部署频率、周期时间、部署失败率、故障修复时间。高效能组织和低效能组织的差异非常大。的这两张图也非常形象的说明了这个问题。

、现状和方向
 敏捷团队占比
现状是上游敏捷管理过程，比如的团队占比，下游敏捷持续交付的团队占比。

这也符合国内的情况，很多团队刚开始做敏捷的时候都是从管理过程开始敏捷，大多从  入手，但是效果一般都不尽如人意。

我认为持续集成和自动化测试是敏捷的两条腿，想要敏捷跑起来，此二者必须同时建设才能让敏捷体现其快速响应变化的价值。

 非敏捷团队占比
根据  的数据，目前有的团队，依然没有实现下游的敏捷，即持续交付和持续部署的实施较少或者不成熟。这会导致价值的交付依然长达数月之久。

 成熟度级别
 将敏捷、的级别划分为团队级，跨团队级，企业级。这个和  之父  的  个精进级别颇为相似。

企业级的敏捷和  还有很长的路要走。企业级的改进需要组织、文化都要共同变化。

编者：之前在参加敏捷培训时，老师提到诺西在敏捷方面做的很早也很深入，摩托做  和   也做的很好，但是这些企业现在都不在了。组织、战略、文化的敏捷至关重要。下边的人玩儿的很嗨，只是用正确的方法在做错误的事情而已。颇有感触！

 改进四象限
 基于团队级、跨团队级、企业级以及上下游阶段，将改进方向划分为四个象限。



团队级的敏捷
团队级的
企业级的敏捷
企业级的我相信和年，国内企业一定会迈进企业级的转型和落地


 改进路径与模式
 基于四象限将改进划分为条路径和种模式
路径一：
从团队敏捷到企业级组织级敏捷，再到企业级 

路径二：
团队级敏捷—团队级持续交付—企业级敏捷—企业级 

我所了解的企业，偏向于类似第二种的路径，一开始都在团队级别进行敏捷和持续交付的尝试，逐渐成熟推广复用，规模化。
· 自下而上的改进
这种模式应该是比较常见

· 自上而下的改进

转型策略
给出了自己的建议：


识别试点项目
组建跨职能团队
采用统一的技术
基于可度量的和里程碑制定计划

度量，文档化，改进
规模化实践关于第点，我个人一直不喜欢考核，尤其是。我希望的是一种能将工程师导向良性行为的评估方式。但是提到的可度量，是一种可取的方式，可度量意味着可执行，有目标。


但是度量一定要慎之又慎。一句话：度量改变行为。
、工程实践

关于持续交付，重点强调了：          
 架构与实现技术
特性开关
灰度发布
微服务以上三个技术对发布和部署都有很大的提升，特性开关可以调整应用的运用时状态，灰度发布逐步的切换流量，微服务可以做到单个服务的独立发布和部署。
基础设施技术
蓝绿部署
金丝雀发布
凤凰环境
不可变基础设施
 基于的生态系统

是驱动整个持续交付和的核心组件。

、 黄金思维圈
以上就是我在研读  的  过程中的思考和记录，没到现场，所以感觉很零散。恰好最近刚接触一个概念：黄金思维圈，如下图所示：

黄金思维圈帮助我们认知世界，当然也可以帮助我们认知持续交付，尝试分析了一下：
：持续且快速、可靠的自动交付软件给用户：


实现价值的持续交付，赢得市场竞争
提升研发增值活动的时间，极大化增值活动产出


：建设自动化、可重复、可靠的持续交付流水线服务供应链主要包括代码管理、持续集成、自动化测试、自动化部署、基础设施自动化管理等方面的工程能力。
：


每次代码提交都需要经过流水线验证
每次部署的版本都经过多环境验证
部署频率可以得到提升
周期时间从代码提交到部署上线的时间可以到分钟级
部署失败率低
部署失败的修复时间短，影响小

文章来自：时代社区背景
近期，维基解密曝光了一系列据称来自美国中央情报局网络攻击活动的秘密文件，代号为“ ”，被泄露文件的第一部分名为“ ”，共有个文件，包含个网页和份附件。
一、情报简介
 暴露了全球窃听计划的方向和规模，还包括一个庞大的黑客工具库，该库包含的代码量过亿，赶超大型软件开发公司。这些黑客工具既有自行开发的软件，也有据称是得到英国军情五处协助开发的间谍程序，其中包括恶意软件、病毒、特洛伊木马、武器化的‘漏洞’、恶意软件远程控制系统及其相关文件等。网络攻击入侵活动对象包括微软、安卓、苹果、 和等操作系统和三星智能电视，甚至还包括车载智能系统和路由器等网络节点单元和智能设备。
本文重点剖析平台下的攻击行为。
二、平台下黑客技术与工具分析
平台下的攻击技术与工具主要分为种，分别为数据搜集、数据销毁、服务劫持、权限升级、内存隐藏、对抗分析、取证搜查以及其他杂项，架构如下：
请右键另存上图，放大查看。
它们借鉴当前比较流行的木马样本，旨在提供可以快速组合各种功能的解决方案，致力于开发简单且有效的攻击组合。
数据搜集  
   浏览器密码
通过直接读取用户注册表项下的关键值，获取密码相关信息。
 基于 接口的键盘记录
通过调用包含接口的，用于获取键盘状态。
 基于 接口的键盘记录
通过函数注册一个关于___的回调，并使用函数、、，获取用户输入的键盘指纹。
 摄像头监控
采用接口下 和  组件，获取设备数据流信息。
数据销毁  
 木马采用来自一家叫的公司的正规适用程式签名驱动，产品名称为，该产品的签名驱动允许激活分区的磁盘可写，使磁盘文件在锁定状态下也可以被删除，从而造成一定的恶劣影响。
 服务劫持 
    映像劫持，通过建立或者改写注册表键位   有关执行文件的键值，从而导致程序在执行时发生异常行为。
   服务，通过替换系统同名，使得系统在启动时加载恶意，并启动网络服务，得到系统权限，但此服务停留于 权限，可以访问网络资源。
  注入，系统启动后，主动加载此系统目录，同名替换并使用增加引用计数后，可以防止有效卸载，并以此可以过掉。
 表，修改 文件，添加表，在回调表中加载其他代码，可以有效实施其他恶意行为。
 权限升级  
     ，采用对象接口获取高权限的进程，编写代码，实现创建对象接口执行文件删除操作，并注入到所有进程中，判断删除操作是否成功，由此判定当前进程是否为高权限。
    劫持粘连键，使用映像劫持的方法，替换启动粘连键的热键程序。
  ，基于白名单的方式，复制恶意至目录中，并启动程序，加载恶意获得高权限。
      ，使用组件过掉文件保护机制，通用系统目录下的_的函数接口暂时禁用文件保护系统，允许直接替换系统文件，从而实施恶意操作。
内存隐藏 
     反射注入，通过反射机制，将特制的插入到远程线程中，并使其自行加载，实施恶意行为。
   进程替换，以挂起线程的方式启动程序，并在线程恢复前替换可执行文件的内容空间。
    ，使用此函数的回调函数创建远程线程，实现注入。
      ，内存加载，加载一个到当前进程中，并将新加入反转函数表以支持异常处理，并在此过程中实现恶意行为。
     挂钩进程中的此函数，在线程获得执行权限前实现注入。
  隐藏，复制数据，减少计数引用，释放的内存空间，重新申请原地址空间并复制数据至此，从而实现隐藏。
对抗分析  
 ，对抗沙盒检测，等待用户鼠标点击事件的发生
   ，使用函数名称加密字符串静态解密函数地址，匹配每一个导出函数名称。
    ，禁用系统托盘的重绘消息，用于阻止其他程序弹出的提示。
调查分析 
   ，找到每一个适配器的地址。
   ，监控文件与注册表的修改。
其他杂项
    ，文件句柄的暴力枚举，测试每一个可能的文件句柄值，判断是否为 文件句柄，并标示其是否为有效映射且进程可以被注入。
三、安全建议
随着数据的逐步泄露，越来越多的黑客工具和技术将被坏人利用，各种新型木马病毒将会逐步面世，安全建议大家：
    不要从小网站下载软件
小网站是黑客传播恶意软件的最大渠道，各种破解软件、注册机都是木马病毒的温床，一旦下载运行就会导致机器感染木马病毒， 最终导致数据泄露。
为防止公司和个人的敏感数据泄露，请到正规网站下载软件！
    不要打开来历不明的外网邮件 
钓鱼邮件是坏人入侵内网的常用途径，安全团队一直奋斗在对抗恶意邮件的第一线，每日屏蔽来自外网的恶意邮件封，恶意邮件拦截率达到。
为防止漏拦截恶意邮件进入内网，造成感染木马病毒，请大家不要打开来历不明的邮件，如无法确认邮件安全性，请联系协助。
    不要访问安全性不明的网站
网站挂马是黑客常用的伎俩，黑客入侵安全防护措施不足的网站系统，将各类下载链接替换为木马病毒，当用户访问网站时，会误把木马病毒下载到本地并运行。
为了保护公司和个人的信息安全，请勿访问安全性不明的网站，当出现“安全提醒：此网站禁止访问”或“电脑管家提醒：此网站存在风险”，请及时终止访问！
参考资料
_

相关推荐
一篇文章带你看懂信息泄露事件成勒索新目标，数据服务基线安全问题迫在眉睫分布式由高性能库底层技术支持。 、 、 论文《      》。
分布式原理。分布式集群 由多个服务器进程、客户端进程组成。部署方式，单机多卡、分布式多机多卡。多机多卡分布式。
单机多卡，单台服务器多块。训练过程：在单机单训练，数据一个批次一个批次训练。单机多，一次处理多个批次数据，每个处理一个批次数据计算。变量参数保存在，数据由分发给多个，计算每个批次更新梯度。收集完多个更新梯度，计算平均梯度，更新参数。继续计算更新梯度。处理速度取决最慢速度。
分布式，训练在多个工作节点。工作节点，实现计算单元。计算服务器单卡，指服务器。计算服务器多卡，多个划分多个工作节点。数据量大，超过一台机器处理能力，须用分布式。
分布式底层通信，   。，谷歌开源高性能、跨语言框架。协议，远程过程调用协议，网络从远程计算机程度请求服务。
分布式部署方式。分布式运行，多个计算单元工作节点，后端服务器部署单工作节点、多工作节点。
单工作节点部署。每台服务器运行一个工作节点，服务器多个，一个工作节点可以访问多块卡。代码指定运行操作设备。优势，单机多间通信，效率高。劣势，手动代码指定设备。
多工作节点部署。一台服务器运行多个工作节点。
设置__环境变量，限制各个工作节点只可见一个，启动进程添加环境变量。用指定特定。多工作节点部署优势，代码简单，提高使用率。劣势，工作节点通信，需部署多个工作节点。__ 。
__=  _ _= _= _= _=
__=  _ _= _= _= _=
__=  _ _= _= _= _=
__=  _ _= _= _= _=
分布式架构。 。客户端、服务端，服务端包括主节点、工作节点组成。
客户端、主节点、工作节点关系。，客户端会话联系主节点，实际工作由工作节点实现，每个工作节点占一台设备具体计算硬件抽象，或。单机模式，客户端、主节点、工作节点在同一台服务器。分布模式，可不同服务器。客户端主节点工作节点。客户端。建立计算图，建立与集群交互会话层。代码包含。一个客户端可同时与多个服务端相连，一具服务端也可与多个客户端相连。服务端。运行实例进程，执行任务集群一部分。有主节点服务 和工作节点服务 。运行中，一个主节点进程和数个工作节点进程，主节点进程和工作接点进程通过接口通信。单机多卡和分布式结构相同，只需要更改通信接口实现切换。主节点服务。实现接口。通过服务程序连接工作节点，与工作节点服务进程工作任务通信。服务端，_为作业。工作节点服务。实现_接口，本地设备计算部分图。服务端，所有工作节点包含工作节点服务逻辑。每个工作节点负责管理一个或多个设备。工作节点可以是本地不同端口不同进程，或多台服务多个进程。运行分布式执行任务集，一个或多个作业。每个作业，一个或多个相同目的任务。每个任务，一个工作进程执行。作业是任务集合，集群是作业集合。分布式机器学习框架，作业分参数作业 和工作节点作业 。参数作业运行服务器为参数服务器 ，管理参数存储、更新。工作节点作业，管理无状态主要从事计算任务。模型越大，参数越多，模型参数更新超过一台机器性能，需要把参数分开到不同机器存储更新。参数服务，多台机器组成集群，类似分布式存储架构，涉及数据同步、一致性，参数存储为键值对。分布式键值内存数据库，加参数更新操作。李沐《     》 。参数存储更新在参数作业进行，模型计算在工作节点作业进行。分布式实现作业间数据传输，参数作业到工作节点作业前向传播，工作节点作业到参数作业反向传播。任务。特定服务器独立进程，在作业中拥有对应序号。一个任务对应一个工作节点。集群作业任务工作节点。
客户端、主节点、工作节点交互过程。单机多卡交互，客户端会话运行主节点执行子图工作节点､。分布式交互，客户端会话运行主节点进程执行子图工作节点进程､。《      》 。
分布式模式。
数据并行。_ 。负责梯度平均、参数更新，不同训练模型副本 。基于训练样例子集训练，模型有独立性。步骤：不同分别定义模型网络结构。单个从数据管道读取不同数据块，前向传播，计算损失，计算当前变量梯度。所有输出梯度数据转移到，梯度求平均操作，模型变量更新。重复，直到模型变量收敛。数据并行，提高效率。 样本，切成多份，模型复制多份，在多个模型上同时计算。多个模型计算速度不一致，更新变量有同步、异步两个方案。
同步更新、异步更新。分布式随机梯度下降法，模型参数分布式存储在不同参数服务上，工作节点并行训练数据，和参数服务器通信获取模型参数。同步随机梯度下降法，同步更新、同步训练，训练时，每个节点上工作任务读入共享参数，执行并行梯度计算，同步需要等待所有工作节点把局部梯度处好，将所有共享参数合并、累加，再一次性更新到模型参数，下一批次，所有工作节点用模型更新后参数训练。优势，每个训练批次考虑所有工作节点训练情部，损失下降稳定。劣势，性能瓶颈在最慢工作节点。异楹设备，工作节点性能不同，劣势明显。异步随机梯度下降法，异步更新、异步训练，每个工作节点任务独立计算局部梯度，异步更新到模型参数，不需执行协调、等待操作。优势，性能不存在瓶颈。劣势，每个工作节点计算梯度值发磅回参数服务器有参数更新冲突，影响算法收剑速度，损失下降过程抖动较大。同步更新、异步更新实现区别于更新参数服务器参数策略。数据量小，各节点计算能力较均衡，用同步模型。数据量大，各机器计算性能参差不齐，用异步模式。带备份的  。 、 、 、 、 论文《   》 。增加工作节点，解决部分工作节点计算慢问题。工作节点总数，为集群工作节点数。异步更新设定接受到个工作节点参数直接更新参数服务器模型参数，进入下一批次模型训练。计算较慢节点训练参数直接丢弃。同步更新、异步更新有图内模式 和图间模式 ，独立于图内、图间概念。图内复制 ，所有操作在同一个图中，用一个客户端来生成图，把所有操作分配到集群所有参数服务器和工作节点上。国内复制和单机多卡类似，扩展到多机多卡，数据分发还是在客户端一个节点上。优势，计算节点只需要调用函数等待任务，客户端随时提交数据就可以训练。劣势，训练数据分发在一个节点上，要分发给不同工作节点，严重影响并发训练速度。图间复制 ，每一个工作节点创建一个图，训练参数保存在参数服务器，数据不分发，各个工作节点独立计算，计算完成把要更新参数告诉参数服务器，参数服务器更新参数。优势，不需要数据分发，各个工作节点都创建图和读取数据训练。劣势，工作节点既是图创建者又是计算任务执行者，某个工作节点宕机影响集群工作。大数据相关深度学习推荐使用图间模式。
模型并行。切分模型，模型不同部分执行在不同设备上，一个批次样本可以在不同设备同时执行。尽量让相邻计算在同一台设备上完成节省网络开销。 、 、 论文《      》 。
模型并行、数据并行，中，计算可以分离，参数可以分离。可以在每个设备上分配计算节点，让对应参数也在该设备上，计算参数放一起。
分布式。 。创建集群，每个任务启动一个服务工作节点服务或主节点服务。任务可以分布不同机器，可以同一台机器启动多个任务，用不同运行。每个任务完成工作：创建一个，对集群所有任务进行描述，描述内容对所有任务相同。创建一个，创建一个服务，运行相应作业计算任务。分布式开发。{__}。创建集群描述信息，、为作业名称，_、_为作业任务所在节点地址信息。传入参数，作业和任务间关系映射，映射关系任务通过地址、端口号表示。
结构 {}
可用任务 ､。
结构 {}
可用任务 ､ ､ ､ ､ 
__。创建服务主节点服务或工作节点服务，运行作业计算任务，运行任务在_指定机器启动。
任务 
 = {}
  = _=_= 
任务 
 = {}
  = _=_=。
自动化管理节点、监控节点工具。集群管理工具。___。设定指定设备执行张量运算，批定代码运行、。
指定在所在机器执行操作运算 
 
  _ = …
  _ = …
分布式训练代码框架。创建服务器集群，在该集群分布式计算数据流图。_ 。
 
 
   
 = 
 _
   第步：命令行参数解析，获取集群信息_、_
   当前节点角色信息_、_
  _ = _
  _ = _
   第步：创建当前任务节点服务器
            
   = { _  _}
           
   = 
                           _=_
                           _=_
   第步：如果当前节点是参数服务器，调用无休止等待；如果是工作节点，执行第步
   _ == 
    
   第步：构建要训练模型，构建计算图
   _ == 
            
     __
        _=  _
        =
        
       = 
      _ = ____
      _ = 
           _=_
            
     第步管理模型训练过程
    =_=
           
                
        
     =
                                           _=_ == 
                                           _=_
                                           =  _
        __
             
          ``      
           
         _       
         训练模型
        __
 ____ == ____
   = 
       == 
       
  _
      _
      =
      =
      =    
  
  _
      _
      =
      =
      =    
  
  _
      _
      =
      =
      =   
  
       
  _
      _
      =
      =
      =     
  
    = __
  = =  
分布式最佳实践。__ 。数据集分布式训练。开设个端口作分布式工作节点部署，端口参数服务器，端口工作节点，端口工作节点。参数服务器执行参数更新任务，工作节点､工作节点执行图模型训练计算任务。参数服务器 ，工作节点 ，工作节点 。运行代码。
 _ _= _=
 _ _= _=
 _ _= _=

 ____  _
 ____  
 ____  _
 
 
 
 
   
   _
 定义常量，用于创建数据流图
 = 
__ 
                        
 只下载数据，不做其他操作
__ 
                              
                          
 _从开始。代表用来初始化变量的第一个任务
__ 
                          =  _=  
                             
                      
 每台机器个数，机器没有为
__ 
                           
                              
 同步训练模型下，设置收集工作节点数量。默认工作节点总数
___ 
                            
                        _    
                     _
__ 
                              
 训练次数
__ 
                           
__    
__   
 使用同步训练、异步训练
__ 
                       _    
                             
                          
 如果服务器已经存在，采用协议通信；如果不存在，采用进程间通信
_
    _        
                
             
    
 参数服务器主机
__
                        
 工作节点主机
__ 
                        
 本作业是工作节点还是参数服务器
__     
 = 
_ = 
 _
   = ____ _=
   _
    
   _    _ == 
         `_`
   _    _ ==
         `_`
    =   _
    =   _
        
   读取集群描述信息
  _ = _
  _ = _
       
  _ = _
   创建集群描述对象
   = {
       _
       _}
   为本地执行任务创建 对象。
    _
            
     创建本地对象，从这个定义开始，每个节点开始不同
     根据执行的命令的参数作业名字不同，决定这个任务是哪个任务
     如果作业名字是，进程就加入这里，作为参数更新的服务，等待其他工作节点给它提交参数更新的数据
     如果作业名字是，就执行后面的计算任务
     = 
         _=_ _=_
     如果是参数服务器，直接启动即可。这里，进程就会阻塞在这里
     下面的__代码会将参数批定给_保管
     _ == 
      
   处理工作节点
   找出的主节点，即_为的点
  _ = _ == 
   如果使用
   _  
           _  
           
     = _  _
     分配到指定上运行
    _ =   _ 
   如果使用
   _ == 
           
     把分配给
     = 
    _ =   _ 
            
              
           
   用__将涉及变量操作分配到参数服务器上，使用。将涉及非变量操作分配到工作节点上，使用上一步_值。
   在这个语句之下定义的参数，会自动分配到参数服务器上去定义。如果有多个参数服务器，就轮流循环分配
   
      __
          _=_
          _=
          =

     定义全局步长，默认值为
    _ =  =_ =
         
     定义隐藏层参数变量，这里是全连接神经网络隐藏层
    _ = 
        _
            _  _ _
            =  _
        =_
    _ = _ =_
         
     定义 回归层参数变量
    _ = 
        _
            _ 
            =  _
        =_
    _ =  =_
            _
     定义模型输入数据变量
     =   _  _
    _ =   
     构建隐藏层
    _ = __ _ _
     = _
     构建损失函数和优化器
     = __ _ _
    _ = __  __  
     异步训练模式：自己计算完成梯度就去更新参数，不同副本之间不会去协调进度
     = _
     同步训练模式
     _
       __  
        __ = _
      
        __ = __
       使用作优化器，并且是在图间复制情况下
       在图内复制情况下将所有梯度平均
       = 
          
          __=__
          __=_
          =__
    _ = _ _=_
     _
      __ = ___
       _
         所有进行计算工作节点里一个主工作节点
         主节点负责初始化参数、模型保存、概要保存
        __ = __
      ____ = ____
                _ 
       同步训练模式所需初始令牌、主队列
      __ = ___
      __ = ___
    _ = __
    _ = 
     _
       创建一个监管程序，用于统计训练模型过程中的信息
        是保存和加载模型路径
       启动就会去这个目录看是否有检查点文件，有的话就自动加载
       没有就用_指定初始化参数
       主工作节点负责模型参数初始化工作
       过程中，其他工作节点等待主节眯完成初始化工作，初始化完成后，一起开始训练数据
       _值是所有计算节点共享的
       在执行损失函数最小值时自动加，通过_知道所有计算节点一共计算多少步
       = 
          _=_
          =_
          _=_
          __=__
          ____=____
          __=
          _=_
    
       = 
          _=_
          =_
          _=_
          __=
          _=_
     创建会话，设置属性__为
     所有操作默认使用被指定设置，如
     如果该操作函数没有实现，自动使用设备
    _ = 
        __=
        __=
        _=   _
        _==     
               
     主工作节点，_为节点初始化会话
     其余工作节点等待会话被初始化后进行计算
     _
           _
    
              
            _
     _
      __ =   __
            __
       创建会话对象，用于执行图计算
       ____需要参数初始化完成且主节点准备好后，才开始训练
       = ______
                                            =_
    
       = ____ =_
          _
     _  _
                   
      __
      __ __
      
     执行分布式模型训练
    _ = 
         _
    _ = 
     
        
       读入训练数据，默认每批次张图片
      _ _ = __
      _ = { _ _ _}
      _  = _ _ _=_
      _ = 
       = 
                
             _ _ 
        = _
        
    _ = 
         _
    _ = _  _
          _
      
     读入验证数据，计算验证的交叉熵
    _ = {  _ }
    _ = _ _=_
           =  
          _ _
 ____ == ____
  
参考资料：《技术解析与实战》
欢迎推荐上海机器学习工作机会，我的微信：